-- phpMyAdmin SQL Dump
-- version 3.3.9
-- http://www.phpmyadmin.net
--
-- Host: 127.0.0.1:33066
-- Generation Time: Sep 18, 2012 at 12:52 PM
-- Server version: 5.1.59
-- PHP Version: 5.3.9

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Database: `oj`
--

-- --------------------------------------------------------

--
-- Table structure for table `ci_sessions`
--

CREATE TABLE IF NOT EXISTS `ci_sessions` (
  `session_id` varchar(40) NOT NULL DEFAULT '0',
  `ip_address` varchar(45) NOT NULL DEFAULT '0',
  `user_agent` varchar(120) NOT NULL,
  `last_activity` int(10) unsigned NOT NULL DEFAULT '0',
  `user_data` text NOT NULL,
  PRIMARY KEY (`session_id`),
  KEY `last_activity_idx` (`last_activity`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `ci_sessions`
--

INSERT INTO `ci_sessions` (`session_id`, `ip_address`, `user_agent`, `last_activity`, `user_data`) VALUES
('6b86fbd337e717826eb789bbd8d837b2', '127.0.0.1', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:15.0) Gecko/20100101 Firefox/15.0.1', 1347972702, 'a:3:{s:9:"user_data";s:0:"";s:4:"user";s:4:"root";s:3:"uid";s:1:"1";}');

-- --------------------------------------------------------

--
-- Table structure for table `problems`
--

CREATE TABLE IF NOT EXISTS `problems` (
  `problem_id` int(11) NOT NULL DEFAULT '0',
  `title` varchar(200) NOT NULL DEFAULT '',
  `description` text,
  `input` text,
  `output` text,
  `input_path` varchar(255) DEFAULT NULL,
  `output_path` varchar(255) DEFAULT NULL,
  `sample_input` text,
  `sample_output` text,
  `hint` text,
  `source` varchar(100) DEFAULT NULL,
  `sample_Program` varchar(255) DEFAULT NULL,
  `in_date` datetime DEFAULT NULL,
  `time_limit` int(11) NOT NULL DEFAULT '0',
  `memory_limit` int(11) NOT NULL DEFAULT '0',
  `defunct` char(1) NOT NULL DEFAULT 'N',
  `contest_id` int(11) DEFAULT NULL,
  `accepted` int(11) DEFAULT '0',
  `submit` int(11) DEFAULT '0',
  `ratio` tinyint(4) NOT NULL DEFAULT '0',
  `error` int(11) DEFAULT '0',
  `difficulty` tinyint(4) NOT NULL DEFAULT '0',
  `submit_user` int(11) DEFAULT '0',
  `solved` int(11) DEFAULT '0',
  `case_time_limit` int(11) NOT NULL DEFAULT '0',
  `view` int(11) NOT NULL DEFAULT '0',
  `Recommend` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`problem_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `problems`
--

INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1000, '*********************<font color=red><b>新手必读与最新公告&lt;/b></font>***********************', '点击查看：&lt;a href=http://blog.csdn.net/power721/article/details/4503056 target=blank><font color=red><b><u>ACM的小技巧&lt;/u></b></font></a>\r\n\r\n1.g++中main函数返回值必须是int\r\nint main()\r\n{\r\n    return 0;\r\n}\r\n\r\n2.整数尽量不要使用pow()函数。', '一、注册账号：<br />\r\n主页-->Register<br />\r\n<br />\r\n二、做题：<br />\r\n主页-->Prombles 选择一个题目来做，做好之后点Submit提交代码。注意交代码前在Language选项中选择你所用的语言，&lt;br />\r\n如果你用的是c语言就选GCC，如果C++就选G++。&lt;br />\r\n<br />\r\n<br />', '三、提交题目常见结果&lt;br />\r\n(1).<font color="red"><b>Accepted</b></font> (AC) : 您的程序是正确的，恭喜！<br />\r\n<br />\r\n(2).<font color="#ff03fa">Presentation Error</font> (PE) : 虽然您的程序貌似输出了正确的结果，但是这个结果的格式有点问题。请检查程序的输出是否多了或者少了空格（'' ''）、制表符（&apos;\\t''）或者换行符（&apos;\\n''）。&lt;br />\r\n<br />\r\n(3).Wrong Answer (WA) : 输出结果错，这个一般认为是算法有问题。&lt;br />\r\n<br />\r\n(4).<font color="#bb338f">Runtime Error</font> (RE) : 运行时错误，这个一般是程序在运行期间执行了非法的操作造成的。以下列出常见的错误类型：&lt;br />\r\nACCESS_VIOLATION 您的程序想从一些非法的地址空间读取或向其中写入内容。一般例如指针、数组下标越界都会造成这个错误的。&lt;br />\r\nARRAY_BOUNDS_EXCEEDED 您的程序试图访问一个超出硬件支持范围的数组单元。&lt;br />\r\nINTEGER_DIVIDE_BY_ZERO 在进行整数除法的时候出现了除数为零的异常。&lt;br />\r\nSTACK_OVERFLOW 栈溢出。一般是由于无限递归或者在函数里使用了太大的数组变量的原因。&lt;br />\r\n<br />\r\n(5).<font color="#ff9900">Time Limit Exceed</font> (TLE) : 您的程序运行的时间已经超出了这个题目的时间限制,请改进算法&lt;br />\r\n<br />\r\n(6).<font color="#0692ff">Memory Limit Exceed</font> (MLE) : 您的程序运行的内存已经超出了这个题目的内存限制。&lt;br />\r\n<br />\r\n(7).<font color="#999999">Output Limit Exceed</font> (OLE) : 您的程序输出内容太多，超过了这个题目的输出限制。&lt;br />\r\n<br />\r\n(8).<font color="#1e9e00">Compile Error</font> (CE): 您的程序语法有问题，编译器无法编译。&lt;b>具体的出错信息可以点击链接查看。&lt;/b><br />\r\n<br />\r\n(9). <font color="black">System Error</font> (SE) : OJ内部出现错误。由于我们的OJ可能存在一些小问题，所以出现这个信息请原谅，同时请及时与管理员联系<br />\r\n<br />', 'd:\\oj\\data\\1000', 'd:\\oj\\data\\1000', '四、注意当有多组测试数据时,该如何判断循环结束呢?<br />\r\nc语言: 可以用 while(scanf("%d",&n)!=EOF)<br />\r\nc++: while(cin>>n)<br />\r\n<br />\r\n以problem 1001 为例：&lt;br />\r\n参考程序：<br />\r\n#include <stdio.h><br />\r\nint main()<br />\r\n{<br />\r\nint i,s,t,n;<br />\r\nwhile(scanf("%d",&n)!=EOF)<br />\r\n{<br />\r\n处理<br />\r\n..........<br />\r\n..........<br />\r\n输出<br />\r\n}<br />\r\n}</stdio.h><br />', '输入输出一定要按照题目要求。不要有多余的输出。 \r\n<font color="red">64位整数类型为long long（G++）或者__int64（VC6），本OJ输入输出都用%I64d。&lt;/font> <a href="http://222.196.33.254/oj/faq.htm#int64">int64</a>\r\n其它信息详见<a href=faq.htm>FAQ</a>。', '<a name=download></a>\r\n<a href="http://down.swust.edu.cn/DownLoad.asp?id=293&n=0">VC6 SP6.ISO</a><br />\r\n<a href="http://down.swust.edu.cn/DownLoad.asp?id=696&n=0">VC6 218M</a><br />\r\n<br />\r\n<a href="../gongju/MinGW Developer Studio V2.05.exe">MinGW Developer Studio V2.05.exe</a><br />\r\n<a href=../gongju/devcpp.exe>Dev c++</a>\r\n<a href=../gongju/codeblocks-10.05mingw-setup.exe>Code Blocks</a>\r\n<a href=../gongju/eclipse-java-helios-SR2-win32.zip>Eclipse</a>\r\n<a href=../gongju/netbeans-6.7-ml-javase-windows.zip>NetBeans(Java)</a>\r\n<br/>\r\n<a href=../gongju/jdk-6u22-windows-i586.exe>JDK6.22</a>\r\n<a href=../gongju/jre-6u22-windows-i586.zip>JRE6.22</a>\r\n<!--\r\n点击右键选择目标另存为下载文件&lt;br />\r\n<br />\r\n<font color="red"><b>编译工具:</b></font><br />\r\n<a href="..\\gongju\\devcpp-4.9.9.2_setup.zip">Devcpp4.9.2</a> 一个很精简的编译器<br />\r\n<a href="..\\gongju\\MinGW Developer Studio V2.05.exe">MinGW</a> 一个很小但是又很好好用的编译器(推荐)<br />\r\n<a href="..\\gongju\\VC6.zip">VC6.0</a> <a href="http://down.swust.edu.cn/DownLoad.asp?id=293&n=0">SP6.ISO</a> <a href="http://down.swust.edu.cn/DownLoad.asp?id=696&n=0">218M</a> 很大<br />\r\n其他IDE还有VS、&lt;b>NetBeans</b>、&lt;b>Eclipse</b>、Code::Block、C++Builder、Delphi、C-Free、Qt等。&lt;br />\r\n<br />\r\n<font color="red"><b>资料下载：&lt;/b></font><br />\r\n<b>基础：&lt;/b><br />\r\n<a href="..\\gongju\\C.zip">C语言函数大全(语法着色版)</a><br />\r\n<a href="..\\gongju\\C++.zip">C++函数库&lt;/a><br />\r\n<a href="..\\gongju\\string2.0.pdf">string深入详解2.0版&lt;/a><br />\r\n<a href="..\\gongju\\STL.zip">常用STL</a><br />\r\n<a href="..\\gongju\\Java for ACM.doc">ACM之Java速成</a><br />\r\n<br />\r\n<a href="..\\gongju\\search.zip">搜索算法简介&lt;/a><br />\r\n<a href="..\\gongju\\string.zip">字符串相关算法&lt;/a><br />\r\n<a href="..\\gongju\\number theory.zip">数论</a><br />\r\n<a href="..\\gongju\\Maths_in_ACM.zip">Maths_in_ACM</a><br />\r\n<a href="..\\gongju\\Graph Theory.ppt">图论基础</a><br />\r\n<a href="..\\gongju\\cb.zip">计算几何</a><br />\r\n<a href="..\\gongju\\daoyin.pdf">程序设计导引及在线实践&lt;/a><br />\r\n<b>提高：&lt;/b><br />\r\n<a href="..\\gongju\\Graph Theory2.ppt">图论提高</a><br />\r\n<a href="..\\gongju\\Graph Theory3.doc">图论总结</a><br />\r\n<a href="..\\gongju\\Black.zip">算法艺术与信息学竞赛课件</a><br />\r\n<a href="..\\gongju\\black2.zip">算法艺术与信息学竞赛指导</a><br />\r\n<a href="..\\gongju\\(1999-2009).zip">国家集训队论文(1999-2009)</a><br />\r\n-->', '西南科技大学信息工程学院ACM集训队', '', '2012-09-09 11:26:13', 15000, 131000, 'N', NULL, 320, 678, 47, 134, 42, 222, 182, 30000, 2445, ''),
(1001, 'A+B again!!(入门)', 'Your task is to calculate the sum of some integers.', 'Input contains multiple test cases, and one case one line. Each case starts with an integer N( 0 < N<=500 ), and then N integers follow in the same line.', 'For each test case you should output the sum of N integers in one line, and with one line of output for each line in input.', 'd:\\oj\\data\\1001', 'd:\\oj\\data\\1001', '4 1 2 3 4\r\n5 1 2 3 4 5', '10\r\n15', '注意测试次数有很多次,该如何判断循环结束呢?\r\nc语言:   可以用  while(scanf("%d",&n)!=EOF)\r\nc++:     while(cin>>n)', 'SWUST.Larrous', '', '2012-09-14 22:02:06', 1000, 65536, 'N', NULL, 493, 1412, 35, 795, 68, 457, 374, 30000, 2296, ''),
(1002, '水仙花数(入门)', '春天是鲜花的季节，水仙花就是其中最迷人的代表，数学上有个水仙花数，他是这样定义的：\r\n“水仙花数”是指一个三位数，它的各位数字的立方和等于其本身，比如：153=1^3+5^3+3^3。\r\n现在要求输出所有在m和n范围内的水仙花数。', '输入数据有多组，每组占一行，包括两个整数m和n（100<=m<=n<=999），输入为0 0时表示输入数据结束（不需要输出）。', '对于每个测试实例，要求输出所有在给定范围内的水仙花数，就是说，输出的水仙花数必须大于等于m,并且小于等于n，如果有多个，则要求从小到大排列在一行内输出，之间用一个空格隔开;\r\n如果给定的范围内不存在水仙花数，则输出no;\r\n每个测试实例的输出完毕后换行。', 'd:\\oj\\data\\1002', 'd:\\oj\\data\\1002', '100 120\r\n300 380\r\n0 0', 'no\r\n370 371', '', 'SWUST', '', '2012-09-09 13:40:00', 1000, 65536, 'N', NULL, 367, 1423, 26, 989, 77, 432, 300, 500, 1864, ''),
(1003, '你来做裁判(排序)', '众所周知，现在各大论坛有很多水王，他们的发贴数是如此之多，以至于必须要用高精度数才能保存。现在ACMForum决定举行一次水王争霸赛，比赛的规则是将这些水王截止到2007年4月28日23时59分59秒这一刻所发的总贴数从大到小进行排序。每个水王当然都想取得尽量靠前的名次，所以他们竭尽全力，不择手段地进行灌水。终于，激动人心的一刻到来了，2007年4月29日0时0分0秒，你作为裁判得到了每个水王的发贴数，现在，你的任务是公正地把这些水王按照发贴数从大到小进行排序。', '输入的第一行是一个1到1000的整数N，表示总共有N位水王参加了争霸赛。\r\n以下依次给出每位水王的描述，一位水王的描述占据一行，前面为一个仅由字母和数字组成的长度不超过20的字符串，代表这个水王的ID，后面为一个整数(非负数)，代表这个水王的发贴数，注意，这个整数小于2,000,000,000。', '依次输出按照发贴数从小到大排好序的各位水王的ID和这个水王的发贴数，ID和发贴数用空格分开。不能有任何多余的字符。若几个ID的发贴数相同，则按照ID输入的先后顺序进行排列。', 'd:\\oj\\data\\1003', 'd:\\oj\\data\\1003', '6\r\nLowai 1986\r\nZhouyuan 2987\r\nMaolaoda 2345\r\nBuTaoCaiGuai 2548\r\nArthurKing 2003\r\nHyyylr 3185', 'Lowai 1986\r\nArthurKing 2003\r\nMaolaoda 2345\r\nBuTaoCaiGuai 2548\r\nZhouyuan 2987\r\nHyyylr 3185', '', 'SWUST.Larrous', '', '2012-09-10 16:40:42', 1000, 65536, 'N', NULL, 236, 510, 46, 239, 54, 220, 200, 30000, 987, ''),
(1004, '分花生游戏  (博弈论)', '4月6日，我校Nicholas代表队做火车前往湖北武汉大学参加“百度杯”第二届华中北区ACM程序设计邀请赛，在火车上老师和队员们觉得要找点事情来做，于是小谭（谭老师）就抓了一大包花生出来，让大家玩一个分花生的游戏，游戏规则如下：\r\n桌子上放着两堆花生，Player1和Player2轮流对这些花生进行操作。在每一次操作中，操作者需要吃掉其中一堆花生，并且把另一堆花生分成两堆（可以不相等）留给对方操作。游戏如此进行下去，花生数会越来越少，最后必将出现这样一种情况：某人吃掉一堆花生后发现另一堆里只剩一颗花生不能再分了。游戏规定此时该操作者吃掉最后这一颗花生从而取胜。\r\n起初Nicholas的队员轮流挑战小谭，可是全部都很遗憾的落败了，旁边的杨老师实在看不下去了便提醒队员们这个游戏是不公平的，对于任意一种初始状态，总有一方有必胜策略。所谓有必胜策略是指，无论对方如何操作，自己总有办法取胜。\r\n现在将进行10次游戏，每一次游戏中总是小谭先进行操作。现在你的任务就是帮助Nicholas的队员们设计一个程序来判断每一次游戏中Nicholas的队员是否有必胜策略。（假设小谭和队员们都是用最优的方式在进行操作）。\r\n<IMG SRC=http://acm.whu.edu.cn/07cc/img/head_pic.gif>', '输入数据一共10行，每行有两个用空格隔开的正整数m,n( 0 < m,n < 100000 )，表示一次游戏开始时桌子上两堆糖果分别有多少个。', '输出十行字符串。这些字符串只能是“Yes”或“No”，它们表示对应的十行输入数据Nicholas的队员是否有必胜策略。请注意大小写。', 'd:\\oj\\data\\1004', 'd:\\oj\\data\\1004', '1 1\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n2 1\r\n2 2\r\n2 3\r\n2 4\r\n2 5', 'No\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nYes\r\nNo\r\nNo', '请仔细读题,结合input和output来理解题意.', 'SWUST.Larrous', '', '2012-09-11 15:02:06', 1000, 65536, 'N', NULL, 67, 196, 34, 94, 65, 86, 51, 30000, 922, ''),
(1005, '病狗问题 (逻辑推理)', '有一户小区有n户人家，每户人家养了一条狗。\r\n        有一天，小区接到防疫站的通知，小区内有病狗。所有的小区居民都必须将自己的狗带回自己的家中。每户居民都可以观察到其他居民的狗，并准确判断哪些狗是病狗，但是却不能正确判断自己家的狗是否得病。但是，小区居民之间相互无法沟通。小区规定，如果断定自家的狗是病狗，必须当天开枪将其击毙。每户居民都是极其理智的。到了第K天，小区传出枪声，问：有多少条狗被击毙？    \r\n<IMG SRC=http://acm.nankai.edu.cn/image/1426_d1.jpg>', '输入包括多组测试数据，请处理到EOF为止。\r\n每组测试数据为一行，包括两个正整数n  (n<=5000) 和k  (k<=5000)。', '对于每组输入数据，请输出一行，即被击毙的病狗数。', 'd:\\oj\\data\\1005', 'd:\\oj\\data\\1005', '50 1\r\n200 2', '1\r\n2', '智力题目', 'NKOJ', '', '2012-09-10 23:53:43', 1000, 65536, 'N', NULL, 193, 307, 63, 95, 35, 188, 178, 30000, 564, ''),
(1006, '分解素因子(数论)', '假设x是一个正整数，它的值不超过65535( 1< x <=65535 )，请编写一个程序，将x分解为若干个素数的乘积。', '输入的第一行含一个正整数k (1 <= k <= 65535 )，表示测试例的个数，后面紧接着k行，每行对应一个测试例，包含一个正整数x。', '每个测试例对应一行输出，输出x的素数乘积表示式，式中的素数从小到大排列，两个素数之间用“*”表示乘法。', 'd:\\oj\\data\\1006', 'd:\\oj\\data\\1006', '2\r\n11\r\n9828', '11\r\n2*2*3*3*3*7*13', '', 'FJNU Preliminary 2005', '', '2012-09-10 21:11:39', 1000, 65536, 'N', NULL, 205, 946, 22, 602, 83, 180, 123, 30000, 928, ''),
(1007, '钻石(简单)', '大富豪Mily收藏了很多精美的钻石。但是，Mily收藏钻石有个嗜好，他收藏的钻石的形状必须满足两个条件：\r\n（1）钻石上任意两个顶点都能够通过一条或多条棱相互联通。\r\n（2）在钻石表面任意画一个圈，沿这个圈切开，一定能把钻石分成两部分。\r\n大富豪Mily对钻石的表面非常有兴趣，他知道，他所收藏的每颗钻石的顶点数v和棱数e，但他还不知道每颗钻石有多少个面，你能帮帮他吗？', '输入包括多组测试数据，你应当处理到EOF（End Of File）为止。\r\n对于每组测试数据，仅含有一行，包含两个正整数e和v，之间以一个空格隔开。', '对于每组测试数据，请输出一行，仅包含一个正整数f，表示钻石有多少个面。', 'd:\\oj\\data\\1007', 'd:\\oj\\data\\1007', '6 4\r\n12 8', '4\r\n6', '如何处理输入结束呢?\r\nc: while(scanf(...)!=EOF)\r\nc++: while(cin>>a>>b)\r\n具体可以看1001题的提示.', 'Seaeagle', '', '2012-09-13 20:31:15', 1000, 65536, 'N', NULL, 212, 300, 71, 83, 30, 199, 192, 30000, 603, ''),
(1008, 'Prime Numbers(简单)', 'Given an integer number, you are required to find out whether it''s a prime number.', 'The first line contains the number of test cases T (1 <= T <= 20 ), then the following T lines each contains an integer number N (0 < N < 4,000,000,000).', 'For each test case, if N is a prime number, output a line containing the word "Prime", otherwise, output the word "No".', 'd:\\oj\\data\\1008', 'd:\\oj\\data\\1008', '3\r\n5\r\n10\r\n3999999997', 'Prime\r\nNo\r\nNo', '', 'SWUST', '', '2012-09-13 22:40:05', 1000, 65536, 'N', NULL, 241, 1681, 14, 1203, 87, 268, 182, 30000, 1336, ''),
(1009, '进制转换(简单)', '输入一个十进制数N，将它转换成R进制数输出。', '输入数据包含多个测试实例，每个测试实例包含两个整数N(N<=10000)和R（2<=R<=16）。注意，N有可能有负整数。输入为0 0时表示输入结束。', '为每个测试实例输出转换后的数，每个输出占一行。如果R大于10，则对应的数字规则参考16进制（比如，10用A表示，等等）。', 'd:\\oj\\data\\1009', 'd:\\oj\\data\\1009', '7 2\r\n23 12\r\n-4 3\r\n0 0', '111\r\n1B\r\n-11', '', 'SWUST', '', '2012-09-10 22:07:32', 1000, 65536, 'N', NULL, 173, 576, 30, 295, 67, 183, 143, 30000, 779, ''),
(1010, '魔兽争霸之最后的反击', '相传人族与兽族对峙了很久，双方均受到了重创，兽族趁人类没有能力发起大规模进攻之时突然袭击，想一次彻底打败人族。人类为了生存，无论老幼伤病，全部参战，兵分两路抗敌。\r\n由于体质不同，我们以血量表示一个人的战斗力，现在给你所有人的血量，请你把人类分成战斗力最接近的两部分。注意，战斗力要最接近，不然，人族会因你而战败呦！\r\n<IMG SRC=http://war3.uuu9.com/sports/UploadFiles_3144/200506/200562045729708.jpg>', '第一行为一个整数n(1<=n<=36)，表示人族的总人数。以下的n行每行一个整数，表示一个人的血量mi（即战斗力），其中1<=mi<=400.', '只有一行，包含两个数，即人族的每部分兵的血量总和，较小的一个值放在前面，两个数用空格分隔。', 'd:\\oj\\data\\1010', 'd:\\oj\\data\\1010', '3\r\n20\r\n32\r\n35', '35 52', '', 'SWUST', '', '2012-06-28 14:44:23', 1000, 65536, 'N', NULL, 142, 482, 29, 271, 75, 116, 88, 30000, 783, ''),
(1011, 'Fibonacci数列(高精度)', '相信大家都知道美国电影里的FBI，可是大家是否知道意大利数学家斐波那契提出的著名的FIB数列呢，其定义如下：对于正整数数列A[n]有\r\n          A[1]=1,A[2]=1,A[n]=A[n-1]+A[n-2],( n>2);\r\n现在你的任务是求出Fibonacci数列的第n项。', '输入数据由多组数据组成。每组数据一行，仅一个整数，表示n的值。输入为0时结束输入。', '对于每组数据，输出仅一行，即Fibonacci数列的第n项。\r\n我们保证输出的结果不会超过1000位数。', 'd:\\oj\\data\\1011', 'd:\\oj\\data\\1011', '1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n20\r\n0', '1\r\n1\r\n2\r\n3\r\n5\r\n8\r\n6765', '', 'SWUST', '', '2012-05-30 19:04:12', 1000, 65536, 'N', NULL, 94, 469, 20, 244, 76, 147, 76, 30000, 745, ''),
(1012, 'A Simple Task', 'Alice''s QQ is lost because she set a very simple password "abcdefg", her friend Bob  \r\ntell her that a password like ?abcdefg? is too easy to guess, a good password is suggest \r\n to be at least 6 bytes long, and better to include upper case letters, lower case letters, \r\n digitals, and symbols (like ''#'', ''_'', ''$''). But Alice is a lazy girl, she doesn''t like to  \r\nremember a password which is too complex, e.g., "_a#9Bx", so she decides to do some modification \r\n on her original password that is change letters at even position to upper case. \r\nAlice has many passwords used in different places, so she asks you to change them as the  \r\nrule she decided.', 'There are multiple test cases. Each case is a single line which has a string only contains lower case letters, but no longer than 50 letters. \r\nInput is end with a line only contains"#" and should not be processed by your program.', 'For each test case, output the new password on a single line in the format as indicated.Sample Input', 'd:\\oj\\data\\1012', 'd:\\oj\\data\\1012', 'abcdefg \r\nalice \r\nbob \r\n#', 'aBcDeFg\r\naLiCe \r\nbOb', '', 'Baidu Cup Central China Invitational Programming Contest', '', '2012-09-10 22:34:49', 1000, 65536, 'N', NULL, 185, 321, 58, 115, 41, 172, 167, 30000, 413, ''),
(1013, 'Part-time Job', 'Snoopy lost his wallet, but he is afraid to tell his family, so he decided to do a part-time job to earn money in weekends. He is selling  \r\nwashing machines in a big market, he will get p dollars by sold a washing machine, and the manager promised him that snoopy will get  \r\nat least m dollars a day, it means that if snoopy didn''t sold as many washing machines to get m dollars, the manager will pay him m dollars also. \r\n   \r\n  Now we told you the p and m, and the number of washing machines snoopy sold in a day, which we call it n, help snoopy to calculate  \r\nhow many dollars he can get.', 'There are multiple test cases in the input file. Each line is a test case, there is three integers m, p, and n which are descript in the problem. \r\n  Input is terminated by p = n = m = 0. ( 1 <= p, n, m <= 100 )', 'For each test case, output an integer that the payment snoopy can get in a single line.', 'd:\\oj\\data\\1013', 'd:\\oj\\data\\1013', '20 5 3 \r\n20 5 5 \r\n0 0 0', '20 \r\n25', '', 'WHU', '', '2012-09-10 22:39:36', 1000, 65536, 'N', NULL, 186, 288, 65, 96, 35, 185, 179, 30000, 470, ''),
(1014, 'A+B for Input-Output Practice1(入门)', 'Your task is to Calculate a + b.', 'Input contains multiple test cases. Each test case contains a pair of integers a and b, one pair of integers per line. A test case containing 0 0 terminates the input and this test case is not to be processed.', 'For each pair of input integers a and b you should output the sum of a and b in one line, and with one line of output for each line in input.', 'd:\\oj\\data\\1014', 'd:\\oj\\data\\1014', '1 5\r\n10 20\r\n0 0', '6\r\n30', '', 'SWUST.Larrous', '', '2012-09-10 22:41:27', 1000, 65536, 'N', NULL, 274, 551, 50, 233, 48, 265, 249, 30000, 683, ''),
(1015, 'A+B for Input-Output Practice 2(入门)', 'Your task is to calculate the sum of some integers.', 'Input contains an integer N in the first line, and then N lines follow. Each line starts with a integer M, and then M integers follow in the same line.', 'For each group of input integers you should output their sum in one line, and you must note that there is a blank line between outputs.', 'd:\\oj\\data\\1015', 'd:\\oj\\data\\1015', '3\r\n4 1 2 3 4\r\n5 1 2 3 4 5\r\n3 1 2 3', '10\r\n\r\n15\r\n\r\n6', '', 'SWUST.Larrous', '', '2012-09-11 12:52:48', 1000, 65536, 'N', NULL, 237, 478, 50, 221, 51, 220, 211, 30000, 618, ''),
(1016, 'find the nth digit(数论)', '假设：\r\nS1 = 1\r\nS2 = 12\r\nS3 = 123\r\nS4 = 1234\r\n.........\r\nS9 = 123456789\r\nS10 = 1234567891\r\nS11 = 12345678912\r\n............\r\nS18 = 123456789123456789\r\n..................\r\n现在我们把所有的串连接起来\r\nS = 1121231234.......123456789123456789112345678912.........\r\n那么你能告诉我在S串中的第N个数字是多少吗？', '输入首先是一个数字K，代表有K次询问。\r\n接下来的K行每行有一个整数N(1 <= N < 2^31)。', '对于每个N，输出S中第N个对应的数字.', 'd:\\oj\\data\\1016', 'd:\\oj\\data\\1016', '6\r\n1\r\n2\r\n3\r\n4\r\n5\r\n10', '1\r\n1\r\n2\r\n1\r\n2\r\n4', '', '', '', '2012-09-10 23:47:32', 1000, 65536, 'N', NULL, 85, 336, 25, 218, 76, 91, 67, 30000, 621, ''),
(1017, '牛人的题目(位运算一)', 'In the new year party, everybody will get a "special present".Now it''s your turn to get your special present, a lot of presents now putting on the desk, and only one of them will be yours.Each present has a card number on it, and your present''s card number will be the one that different from all the others, and you can assume that only one number appear odd times.For example, there are 5 present, and their card numbers are 1, 2, 3, 2, 1.so your present will be the one with the card number of 3, because 3 is the number that different from all the others.', 'The input file will consist of several cases. \r\nEach case will be presented by an integer n (1 <= n <= 1000000, and n is odd) at first. Following that, n positive integers will be given in a line, all integers will smaller than 2^31. These numbers indicate the card numbers of the presents.n = 0 ends the input.', 'For each case, output an integer in a line, which is the card number of your present.', 'd:\\oj\\data\\1017', 'd:\\oj\\data\\1017', '5\r\n1 1 3 2 2\r\n3\r\n1 2 1\r\n0', '3\r\n2', '题目意思就是说输入N个数,假设有且只有一个数只出现奇数次,那么请找出这个数并输出就OK了,很简单哈.\r\n不过不要超时哦.这个题目还特意限制了Memory 的哦.', 'HUD', '', '2011-06-10 14:23:00', 1000, 2000, 'N', NULL, 109, 273, 40, 56, 43, 96, 73, 30000, 681, ''),
(1018, '放苹果(组合+DFS)', '把M个同样的苹果放在N个同样的盘子里，允许有的盘子空着不放，问共有多少种不同的分法？（用K表示）5，1，1和1，5，1 是同一种分法。', '第一行是测试数据的数目t（0 <= t <= 20）。以下每行均包含二个整数M和N，以空格分开。1<=M，N<=10。', '对输入的每组数据M和N，用一行输出相应的K。', 'd:\\oj\\data\\1018', 'd:\\oj\\data\\1018', '1\r\n7 3', '8', '', 'lwx@POJ', '', '2012-09-11 15:56:25', 1000, 65536, 'N', NULL, 107, 155, 69, 42, 31, 97, 92, 30000, 549, ''),
(1019, 'A * B Problem (Big integer version) 【高精度】', '计算2个不超过40位的正整数的积.', '输入为2行,每一行代表一个数.', '输出一行,为2个数的乘积.', 'd:\\oj\\data\\1019', 'd:\\oj\\data\\1019', '11111111111111\r\n1111111111', '12345679011110987654321', '用数组!', 'SWUST.Larrous', '', '2012-09-10 23:11:51', 1000, 65536, 'N', NULL, 135, 296, 46, 153, 60, 118, 102, 30000, 538, ''),
(1020, '吃桃(递推)', '喜欢西游记的同学肯定都知道悟空偷吃蟠桃的故事，你们一定都觉得这猴子太闹腾了，其实你们是有所不知：悟空是在研究一个数学问题！\r\n什么问题？他研究的问题是蟠桃一共有多少个！\r\n不过，到最后，他还是没能解决这个难题，呵呵^-^\r\n当时的情况是这样的：\r\n第一天悟空吃掉桃子总数一半多一个，第二天又将剩下的桃子吃掉一半多一个，以后每天吃掉前一天剩下的一半多一个，到第n天准备吃的时候只剩下一个桃子。聪明的你，请帮悟空算一下，他第一天开始吃的时候桃子一共有多少个呢？', '输入数据有多组，每组占一行，包含一个正整数n（1 < n < 30），表示只剩下一个桃子的时候是在第n天发生的。当输入n=0时代表输入结束.', '对于每组输入数据，输出第一天开始吃的时候桃子的总数，每个测试实例占一行。', 'd:\\oj\\data\\1020', 'd:\\oj\\data\\1020', '2\r\n4\r\n0', '4\r\n22', '', 'SWUST.Larrous', '', '2012-09-10 23:17:11', 1000, 65536, 'N', NULL, 199, 315, 63, 102, 39, 166, 159, 30000, 418, ''),
(1021, '简单排序', '这是你第一次参加这样的程序设计的比赛吗?我想你们中的大部分人都是吧.\r\n    我们比赛的排名方式是这样的:对于每支参赛队伍,我们会把做出题目数目最多的队伍排在前面,对于做出相同数量题目的队伍,我们会根据他们的做题总用时(实际时间+题目提交错误的罚时)进行排名,每次提交答案如果不正确那么将会被罚时20分钟,罚时的多少不会影响你实际参加比赛的时间.\r\n    现在让我们来设计个程序为我们的比赛进行排名,也可以检查下我们的PC^2是否在正常的工作.', '第一行只有一个正整数N,表示参加这次比赛的队伍数.\r\n第一行以后有N行,每一行都有3个正整数,T[i],S[i],P[i],(3个数会用空格分开),分别表示第i支参赛队伍的ID,得分(每做出一道题目得一分),总用时.\r\n为了让大家的计算简便,我们假设所有队伍的最终得分都是不相同的.', '你需要按照我们的比赛规则,把比赛最终的排名计算出来.\r\n输出有N行,从第一名开始,依次输出每个参赛队伍的ID,每个ID占一行.', 'd:\\oj\\data\\1021', 'd:\\oj\\data\\1021', '3\r\n3 2 200\r\n2 1 100\r\n1 3 300', '1\r\n3 \r\n2', '非常简单的排序问题!', 'SWUST', '', '2012-09-10 23:35:54', 1000, 65536, 'N', NULL, 175, 306, 57, 124, 45, 166, 152, 30000, 610, ''),
(1022, '分花生游戏系列之2 (简单博弈论)', '我们平台上的1004题大家都看了吗,小谭觉得这么经典的问题不能只出一道吧,所以小谭决定再出一道这样的题目,不过考虑到大家对这些题目的经验有限,所以小谭找的这个题目还是比较简单的.\r\n    游戏规则:桌上有一堆花生,2个游戏者轮流在这堆花生中拿走一些花生,每次至少拿一颗,最多拿5颗,最后拿走最后一颗花生的游戏者为胜利者.和1004中的题目一样,对于每种初始状态都有一个最优方案能让其中一方有必胜策略.现在小谭找杨老师一起玩这个游戏,由于杨老师对这些游戏很有经验,所以他很快就判断出了这个游戏的必胜策略.现在你的任务就是设计个程序来判断对于给定的初始状态,哪位老师会取得游戏的最后胜利.我们假设每次游戏都是小谭先操作,并且2个老师都按照最优策略在一直进行操作.', '第一行输入一个正整数T,表示游戏的次数.\r\n以下T行,每一行输入一个正整数N,表示游戏初始状态桌上的花生数.( 0 < N < 2,000,000,000 ).', '输出包括T行,如果小谭胜利输出"Mr Tan win.",否则输出"Mr Yang win.".', 'd:\\oj\\data\\1022', 'd:\\oj\\data\\1022', '3\r\n100\r\n55\r\n18', 'Mr Tan win.\r\nMr Tan win.\r\nMr Yang win.', '', 'SWUST.Larrous', '', '2012-09-10 23:57:13', 1000, 65536, 'N', NULL, 64, 92, 70, 23, 27, 67, 63, 30000, 460, ''),
(1023, '解方程', 'In this problem, you are to solve a very easy linear equation with only one variable x with no parentheses! An example of such equations is like the following:\r\n\r\n\r\n2x - 27 + 5x + 300 = 98x\r\n　\r\n\r\nAn expression in its general form, will contain a ''='' character with two expressions on its sides. Each expression is made up of one or more terms combined by ''+'' or ''-'' operators. No unary plus or minus operators are allowed in the expressions. Each term is either a single integer, or an integer followed by the lower-case character x or the single character x which is equivalent to 1x.\r\n\r\nYou are to write a program to find the value of x that satisfies the equation. Note that it is possible for the equation to have no solution or have infinitely many. Your program must detect these cases too.', 'The first number in the input line, t (1 <= t <= 10) is the number of test cases, followed by t lines of length at most 255 each containing an equation. There is no blank character in the equations and the variable is always represented by the lower-case character x. The coefficients are integers in the range (0...1000) inclusive.', 'The output contains one line per test case containing the solution of the equation. If s is the solution to the equation, the output line should contain [s] (the floor of s, i.e., the largest integer number less than or equal to s). The output should be IMPOSSIBLE or IDENTITY if the equation has no solution or has infinite solutions, respectively. Note that the output is case-sensitive.', 'd:\\oj\\data\\1023', 'd:\\oj\\data\\1023', '3\r\n2x-27+5x+300=98x\r\nx+2=2+x\r\nx+2=x+5', '3\r\nIDENTITY\r\nIMPOSSIBLE', '', 'SWUST', '', '2012-09-11 10:48:46', 1000, 65536, 'N', NULL, 29, 111, 26, 59, 75, 26, 20, 30000, 545, ''),
(1024, '排序', '这是一个简单的排序的题目，当然你要选择一种好的算法。', '每行第一个整数 N<=2000 ,表示待排序的数字个数,然后在这行给出 N 个整数，表示要排序的数字。当 N 等于0时，输入全部结束。', '对于每一行输入，输出排序后的结果(升序)，每个数字一行，并且在该组输出之后输出一个空行。', 'd:\\oj\\data\\1024', 'd:\\oj\\data\\1024', '5 5 4 3 2 1\r\n6 9 8 1 3 4 6\r\n0', '1\r\n2\r\n3\r\n4\r\n5\r\n　\r\n1\r\n3\r\n4\r\n6\r\n8\r\n9', '', 'SWUST', '', '2012-09-11 11:28:50', 1000, 65536, 'N', NULL, 253, 534, 47, 259, 58, 215, 186, 30000, 650, ''),
(1025, 'To the Max(动态规划DP)', 'Given a two-dimensional array of positive and negative integers, a sub-rectangle is any contiguous sub-array of size 1*1 or greater located within the whole array. The sum of a rectangle is the sum of all the elements in that rectangle. In this problem the sub-rectangle with the largest sum is referred to as the maximal sub-rectangle. \r\nAs an example, the maximal sub-rectangle of the array: \r\n\r\n0 -2 -7 0 \r\n9 2 -6 2 \r\n-4 1 -4 1 \r\n-1 8 0 -2 \r\nis in the lower left corner: \r\n\r\n9 2 \r\n-4 1 \r\n-1 8 \r\nand has a sum of 15.', 'The input consists of an N * N array of integers. The input begins with a single positive integer N on a line by itself, indicating the size of the square two-dimensional array. This is followed by N^2 integers separated by whitespace (spaces and newlines). These are the N^2 integers of the array, presented in row-major order. That is, all numbers in the first row, left to right, then all numbers in the second row, left to right, etc. N may be as large as 100. The numbers in the array will be in the range [-127,127].', 'Output the sum of the maximal sub-rectangle.', 'd:\\oj\\data\\1025', 'd:\\oj\\data\\1025', '4\r\n0 -2 -7 0\r\n9 2 -6 2\r\n-4 1 -4 1\r\n-1 8  0 -2', '15', '', 'Greater New York 2001', '', '2011-06-07 21:55:08', 1000, 65536, 'N', NULL, 67, 118, 57, 39, 45, 52, 48, 30000, 707, ''),
(1026, '丑数(数论)', '丑数就是这个数的质因子只有2,3,5,7这四个，除此之外不再含有其它\r\n别的质因子。\r\n\r\n注意1也被认为是丑数.丑数的前20个为\r\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 24, 25, 27, ... ;', '每行输入一个N,1 <= N <= 5842,N为0时输入结束.', '输出相应的第N个丑数.', 'd:\\oj\\data\\1026', 'd:\\oj\\data\\1026', '1\r\n2\r\n3\r\n4\r\n11\r\n12\r\n13\r\n21\r\n22\r\n23\r\n100\r\n1000\r\n5842\r\n0', '1\r\n2\r\n3\r\n4\r\n12\r\n14\r\n15\r\n28\r\n30\r\n32\r\n450\r\n385875\r\n2000000000', '', 'SWUST', '', '2012-09-11 12:46:36', 1000, 65536, 'N', NULL, 51, 135, 38, 75, 63, 62, 45, 30000, 634, ''),
(1027, '买花瓶(简单动态规划DP)', 'john想买几个花瓶装饰一下新房。已知花店的花瓶被固定地排成一行并被依次排号，且花店有\r\n一个原则，花瓶不能移动也不能挑选，只能买连号的花瓶。由于每个花瓶都有自己的美学价值，\r\n请你帮john选出其中美学价值最大的一组。\r\n比如，有六个花瓶，它们的美学价值分别是  3 -1 2 4 -6 5，那么john应该选3 -1 2 4（美学价值为8）\r\n这一组。而不能挑2 3 4 5这一组（违犯），或是2 4组（美学价值为6，不是最大）。', '测试有很多次,对于每一次测试:\r\n第一行为一个正整数 N（ 1 <= N <=10000 ），代表花瓶的个数.当N=0时,代表测试结束；\r\n第二行的N个整数Mi( -100 <= Mi <= 100 )分别代表每个花瓶的美学价值，其间用空格分开。', '每次测试输出一行,代表拥有最大美学价值的一组连号花瓶的美学价值MAX。', 'd:\\oj\\data\\1027', 'd:\\oj\\data\\1027', '6\r\n3 -1 2 4 -6 5\r\n0', '8', '', 'SWUST', '', '2012-09-11 00:08:42', 1000, 65536, 'N', NULL, 145, 376, 39, 198, 65, 121, 106, 30000, 913, ''),
(1028, '糖果游戏', '糖果游戏，有N(n<1000)个学生坐成一圈,每个学生最初都有偶数个糖果，当老师下口令的时候，每个学生同时都把手中糖果的一半分给右边的学生，如果某个学生手中的糖果数是奇数，那么老师就再给他一块糖果，继续进行游戏。当每个学生手中的糖果数相同的时候，游戏结束。', '每组testcase输入一个N表示学生数,然后N行代表每个学生最初手中的糖果数。当N为0时，输入结束。', '对于每组testcase输出一行，每行输出两个数，以空格隔开，分别代表游戏进行的次数和最终学生手中的糖果数。\r\n\r\nNotes:\r\nThe game ends in a finite number of steps because:\r\n1. The maximum candy count can never increase.\r\n2. The minimum candy count can never decrease.\r\n3. No one with more than the minimum amount will ever decrease to the minimum.\r\n4. If the maximum and minimum candy count are not the same, at least one student with the minimum amount must have their count increase', 'd:\\oj\\data\\1028', 'd:\\oj\\data\\1028', '6\r\n36\r\n2\r\n2\r\n2\r\n2\r\n2\r\n11\r\n22\r\n20\r\n18\r\n16\r\n14\r\n12\r\n10\r\n8\r\n6\r\n4\r\n2\r\n4\r\n2\r\n4\r\n6\r\n8\r\n0', '15 14\r\n17 22\r\n4 8', '', 'Greater New York 2003', '', '2012-09-11 13:16:39', 2000, 65536, 'N', NULL, 50, 105, 48, 47, 51, 52, 46, 30000, 475, ''),
(1029, 'john的游戏(博弈论)', 'john发明了一个好玩的游戏，叫mike一起玩. \r\n这个游戏是这样的，john先写下一排数。既然是一排，当然有首尾咯。 \r\njohn和mike每次只能从这排数的头或尾取一个数。 \r\n最后谁取的数的和多，谁就赢了。如果两人的和一样多，先取者胜。 \r\n现在你的任务就是判断在两人总是做出最优决策的情况下（两个人的智商都是很高的……）， \r\n谁能取得最终的胜利呢？', '第一行为一个数k(k<=10)，表示有k组测试数据。 \r\n以下k组测试数据。 \r\n每组测试数据中，第一行仅有一个偶数n(0 < n <= 100000 ) \r\n第二行也仅有一个数，1表示john先取数，0表示mike先取数. \r\n第三行有n个数，是john给出的一排数。这n个数的绝对值均不超过1e6.', '对每组测试数据输出一行 \r\n表示在两人总是做出最优决策的情况下， \r\n最终的胜利者的名字，即"john"或&quot;mike"（引号不输出）。', 'd:\\oj\\data\\1029', 'd:\\oj\\data\\1029', '2\r\n2\r\n1\r\n1 3\r\n2\r\n0\r\n1 3', 'john\r\nmike', '', 'SWUST', '', '2012-06-09 14:37:22', 1000, 65536, 'N', NULL, 46, 88, 52, 39, 53, 43, 35, 30000, 343, ''),
(1030, '牛人题目(位运算二)', 'The binomial coefficient C(n, k) has been extensively studied for its importance in combinatorics. Binomial coefficients can be recursively defined as follows:\r\n\r\nC(n, 0) = C(n, n) = 1 for all n > 0;\r\nC(n, k) = C(n &#8722; 1, k &#8722; 1) + C(n &#8722; 1, k) for all 0 < k < n.\r\n\r\nGiven n and k, you are to determine the parity of C(n, k).', 'The input contains multiple test cases. Each test case consists of a pair of integers n and k (0 ≤ k ≤ n < 2^31, n > 0) on a separate line.\r\n\r\nEnd of file (EOF) indicates the end of input.', 'For each test case, output one line containing either a “0” or a “1”, which is the remainder of C(n, k) divided by two.', 'd:\\oj\\data\\1030', 'd:\\oj\\data\\1030', '1 1\r\n1 0\r\n2 1', '1\r\n1\r\n0', '', 'PKU Local 2007', '', '2012-09-11 14:58:26', 1000, 2000, 'N', NULL, 40, 132, 30, 23, 43, 37, 30, 30000, 384, ''),
(1031, 'Euclid''s Game(博弈论)', 'Two players, Stan and Ollie, play, starting with two natural numbers. Stan, the first player, subtracts any positive multiple of the lesser of the two numbers from the greater of the two numbers, provided that the resulting number must be nonnegative. Then Ollie, the second player, does the same with the two resulting numbers, then Stan, etc., alternately, until one player is able to subtract a multiple of the lesser number from the greater to reach 0, and thereby wins. For example, the players may start with (25,7): \r\n\r\n\r\n         25 7\r\n         11 7\r\n          4 7\r\n          4 3\r\n          1 3\r\n          1 0\r\n\r\nan Stan wins.', 'The input consists of a number of lines. Each line contains two positive integers giving the starting two numbers of the game. Stan always starts.', 'For each line of input, output one line saying either Stan wins or Ollie wins assuming that both of them play perfectly. The last line of input contains two zeroes and should not be processed.', 'd:\\oj\\data\\1031', 'd:\\oj\\data\\1031', '34 12\r\n15 24\r\n0 0', 'Stan wins\r\nOllie wins', '输入的数不超过2^31.', 'Waterloo local 2002.09.28', '', '2011-06-10 13:54:36', 1000, 65536, 'N', NULL, 15, 66, 23, 25, 66, 20, 13, 30000, 185, ''),
(1032, 'K尾相等数(数论)', '输入一个自然数K,( K > 1 ),如果存在自然数M和N(M > N),使得K^M和K^N都大于或者等于1000,且他们的末尾三位数相等,则称M和N是一对&quot;K尾相等数".', '测试数据有很多次,每次测试输入一个自然数K(1 < K < 200000000),直到EOF测试结束.', '对于每个测试数据,输出一个最小的自然数S(S = M + N,M和N为一对&quot;K尾相等数"),每个输出占一行.', 'd:\\oj\\data\\1032', 'd:\\oj\\data\\1032', '2\r\n25', '120\r\n7', '', 'SWUST.Larrous', '', '2012-09-13 17:30:25', 1000, 65536, 'N', NULL, 40, 86, 47, 38, 58, 32, 28, 30000, 291, ''),
(1033, 'positive multiple', 'a program that, given a natural number N between 0 and 4999 (inclusively), and M distinct decimal digits X1,X2..XM (at least one), finds the smallest strictly positive multiple of N that has no other digits besides X1,X2..XM (if such a multiple exists).', 'The input file has several data sets separated by an empty line, each data set having the following format:\r\n\r\nOn the first line - the number N\r\nOn the second line - the number M\r\nOn the following M lines - the digits X1,X2..XM.', 'For each data set, the program should write to standard output on a single line the multiple, if such a multiple exists, and 0 otherwise.', 'd:\\oj\\data\\1033', 'd:\\oj\\data\\1033', '22\r\n3\r\n7\r\n0\r\n1\r\n\r\n2\r\n1\r\n1　', '110\r\n0', '', 'Southeastern Europe 2000', '', '2012-01-26 02:10:26', 1000, 65536, 'N', NULL, 8, 36, 22, 26, 79, 10, 7, 30000, 321, ''),
(1034, '3n+1 数链问题(数论)', 'Problems in Computer Science are often classified as belonging to a certain class of problems (e.g., NP, Unsolvable, Recursive). In this problem you will be analyzing a property of an algorithm whose classification is not known for all possible inputs. \r\nConsider the following algorithm: \r\n\r\n\r\n \r\n		1. 		 input n\r\n\r\n		2. 		 print n\r\n\r\n		3. 		 if n = 1 then STOP\r\n\r\n		4. 		 		 if n is odd then   n <-- 3n+1\r\n\r\n		5. 		 		 else   n <-- n/2\r\n\r\n		6. 		 GOTO 2\r\n\r\n\r\n\r\nGiven the input 22, the following sequence of numbers will be printed 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1 \r\n\r\nIt is conjectured that the algorithm above will terminate (when a 1 is printed) for any integral input value. Despite the simplicity of the algorithm, it is unknown whether this conjecture is true. It has been verified, however, for all integers n such that 0 < n < 1,000,000 (and, in fact, for many more numbers than this.) \r\n\r\nGiven an input n, it is possible to determine the number of numbers printed before the 1 is printed. For a given n this is called the cycle-length of n. In the example above, the cycle length of 22 is 16. \r\n\r\nFor any two numbers i and j you are to determine the maximum cycle length over all numbers between i and j.', 'The input will consist of a series of pairs of integers i and j, one pair of integers per line. All integers will be less than 10,000 and greater than 0. \r\n\r\nYou should process all pairs of integers and for each pair determine the maximum cycle length over all integers between and including i and j.', 'For each pair of input integers i and j you should output i, j, and the maximum cycle length for integers between and including i and j. These three numbers should be separated by at least one space with all three numbers on one line and with one line of output for each line of input. The integers i and j must appear in the output in the same order in which they appeared in the input and should be followed by the maximum cycle length (on the same line).', 'd:\\oj\\data\\1034', 'd:\\oj\\data\\1034', '1 10\r\n100 200\r\n201 210\r\n900 1000', '1 10 20\r\n100 200 125\r\n201 210 89\r\n900 1000 174', '', 'Duke Internet Programming Contest 1990,uva 100', '', '2012-09-11 19:04:34', 1000, 65536, 'N', NULL, 58, 189, 31, 121, 70, 60, 53, 30000, 479, ''),
(1035, 'Another Candies', 'A class went to a school trip. And, as usually, all N kids have got their backpacks stuffed with candy. But soon quarrels started all over the place, as some of the kids had more candies than others. Soon, the teacher realized that he has to step in: "Everybody, listen! Put all the candies you have on this table here!" \r\n\r\nSoon, there was quite a large heap of candies on the teacher''s table. "Now, I will divide the candies into N equal heaps and everyone will get one of them." announced the teacher. \r\n\r\n"Wait, is this really possible?" wondered some of the smarter kids. \r\nYou are given the number of candies each child brought. Find out whether the teacher can divide the candies into N exactly equal heaps. (For the purpose of this task, all candies are of the same type.)', 'The first line of the input file contains an integer T specifying the number of test cases. Each test case is preceded by a blank line. \r\n\r\nEach test case looks as follows: The first line contains N – the number of children. Each of the next N lines contains the number of candies one child brought.', 'For each of the test cases output a single line with a single word "YES" if the candies can be distributed equally, or "NO" otherwise.', 'd:\\oj\\data\\1035', 'd:\\oj\\data\\1035', '2\r\n\r\n5\r\n5\r\n2\r\n7\r\n3\r\n8\r\n\r\n6\r\n7\r\n11\r\n2\r\n7\r\n3\r\n4', 'YES\r\nNO', '', 'IPSC 2006', '', '2012-09-13 16:05:53', 1000, 65536, 'N', NULL, 94, 309, 30, 175, 67, 93, 88, 30000, 444, ''),
(1036, 'Biased Standings', 'Usually, results of competitions are based on the scores of participants. However, we are planning a change for the next year of IPSC. During the registration each team will be able to enter a single positive integer – their preferred place in the ranklist. We would take all these preferences into account, and at the end of the competition we will simply announce a ranklist that would please all of you. \r\nBut wait... How would that ranklist look like if it won''t be possible to satisfy all the requests? \r\nSuppose that we already have a ranklist. For each team, compute the distance between their preferred place and their place in the ranklist. The sum of these distances will be called the badness of this ranklist. \r\n\r\nGiven team names and their preferred placements find one ranklist with the minimal possible badness.', 'The first line of the input file contains an integer T specifying the number of test cases. Each test case is preceded by a blank line. \r\n\r\nEach test case looks as follows: The first line contains N – the number of teams participating in the competition. Each of the next N lines contains a team name (a string of letters and numbers) and its preferred place (an integer between 1 and N, inclusive). No two team names will be equal.', 'For each of the test cases output a single line with a single integer – the badness of the best ranklist for the given teams.', 'd:\\oj\\data\\1036', 'd:\\oj\\data\\1036', '2\r\n\r\n7\r\nnoobz 1\r\nllamas 2\r\nWinn3rz 2\r\n5thwheel 1\r\nNotoricCoders 5\r\nStrangeCase 7\r\nWhoKnows 7\r\n\r\n3\r\nThreeHeadedMonkey 1\r\nMoscowSUx13 1\r\nNeedForSuccess 1', '5\r\n3', 'In the first test case, one possible ranklist with the minimal badness is: \r\n\r\n1. noobz\r\n2. llamas\r\n3. Winn3rz\r\n4. 5thwheel\r\n5. NotoricCoders\r\n6. WhoKnows\r\n7. StrangeCase\r\nIn the second test case all ranklists are equally good.', 'IPSC 2006', '', '2012-01-26 02:24:50', 1000, 65536, 'N', NULL, 19, 40, 48, 21, 57, 19, 16, 30000, 233, ''),
(1037, 'Counting Subsequences', '"47 is the quintessential random number," states the 47 society. And there might be a grain of truth in that. \r\n\r\nFor example, the first ten digits of the Euler''s constant are: \r\n\r\n2 7 1 8 2 8 1 8 2 8\r\nAnd what''s their sum? Of course, it is 47. \r\n\r\nTry walking around with your eyes open. You may be sure that soon you will start discovering occurences of the number 47 everywhere. \r\n\r\nYou are given a sequence S of integers we saw somewhere in the nature. Your task will be to compute how strongly does this sequence support the above claims. \r\n\r\nWe will call a continuous subsequence of S interesting if the sum of its terms is equal to 47. \r\n\r\nE.g., consider the sequence S = (24, 17, 23, 24, 5, 47). Here we have two interesting continuous subsequences: the sequence (23, 24) and the sequence (47). \r\n\r\nGiven a sequence S, find the count of its interesting subsequences.', 'The first line of the input file contains an integer T specifying the number of test cases. Each test case is preceded by a blank line. \r\n\r\nThe first line of each test case contains the length of a sequence N. The second line contains N space-separated integers – the elements of the sequence.', 'For each test case output a single line containing a single integer – the count of interesting subsequences of the given sentence.', 'd:\\oj\\data\\1037', 'd:\\oj\\data\\1037', '2\r\n\r\n13\r\n2 7 1 8 2 8 1 8 2 8 4 5 9\r\n\r\n7\r\n2 47 10047 47 1047 47 47', '3\r\n4', '', 'IPSC 2006', '', '2012-03-26 18:25:29', 10000, 100000, 'N', NULL, 33, 179, 18, 98, 85, 31, 17, 50000, 376, '');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1038, 'Lucy的新难题', '不知不觉，南开大学第三届“我为程序狂”又要拉开帷幕了。这天，Lucy也来到南开大学ACM协会，与大家共同欢庆NKPC的三周岁的日子。\r\n谈笑间，ACM协会的主席拿了圆形的生日蛋糕。大伙开心地唱完了生日歌，一起吹灭了蜡烛。\r\n要分蛋糕了，大家都很兴奋。本着公平的原则，每位到场的人员都要在蛋糕上切一刀。ACM协会的主席事先知道有n位朋友会参与这个欢庆宴会。为了方便大家切蛋糕，主席在订蛋糕的时候就嘱咐在蛋糕的边缘布置上2n朵小花。\r\n<IMG SRC=http://acm.nankai.edu.cn/image/1703_d1.jpg>\r\n每个人切蛋糕都会从蛋糕的边缘的一朵小花笔直地切到蛋糕的另一端的小花，来表达自己对NKPC的祝福。为了尊重其他同学，每个人在切蛋糕一定不会和蛋糕上已有的切痕相交，也不会从别人已切过的小花作为切蛋糕的起点或终点。同时，每位同学在切蛋糕的时候，都要保证后面所有的同学都能够按照上述的规则切蛋糕。这样，蛋糕上就留下n条切痕。\r\nLucy眨巴眨巴眼睛，问，要是不考虑切蛋糕的先后顺序和谁切的哪一刀，这蛋糕切完了共有多少种切法呢？\r\n大家听了呵呵一笑，说，那就把这个问题留给NKPC3，作为《Lucy的新难题》吧。\r\n相信聪明的你，一定能够帮Lucy解答她的难题的，对吗？', '输入包括多组测试数据，你应当处理到输入结束为止。\r\n每组输入数据中，都只有一行，仅包含一个正整数n，且<b>0&lt;n≤30</b>。', '对于每组输入数据，输出两行。对于第i组输入数据，输出的第一行为”Case i:”，输出的第二行为切蛋糕的方法数。', 'd:\\oj\\data\\1038', 'd:\\oj\\data\\1038', '1\r\n2', 'Case 1:\r\n1\r\nCase 2:\r\n2', '', 'NKPC3', '', '2011-06-10 16:19:08', 2000, 32000, 'N', NULL, 15, 84, 18, 65, 82, 29, 14, 30000, 359, ''),
(1039, '保龄球', '南开大学ACM协会的一个元老毕业后，开了家保龄球馆。他需要为他的保龄球馆的计算机写一个记分的程序。\r\n一局(GAME)保龄球分为10格,每格里有两次投球机会,如在第一次投球时没能全中,就有需要投第二球。\r\n每一格可能出现三种情况：\r\n1.失球(MISS)\r\n无论何种情况,在一格的两次投球时,未能击倒10个瓶,此格的分数为击倒的瓶数。如果一次击球中未击倒一个瓶，则用一个’-’标记。\r\n2.补中(SPARE)\r\n要一次击倒十个瓶子并非那么容易的！如果在第一次掷球后，你还有一次机会来击倒该格第一球所留下的情致。当第二次投球击倒该格第一球余下的全部瓶子,称为补中,用一个‘/’符号表示。补中的记分是10分加上下一次投球击倒的瓶数。\r\n3.全中(STRIKE)\r\n当每一格的第一次投球击倒全部竖立的十个瓶时,称为全中,用一个(×)符号表示。全中的记分是10分(击倒的瓶)加该球员下两次投球击倒的瓶数。\r\n但在第十格中情况比较特殊：\r\n(1)如第二次投球未补中,则第十格得分为第九格得分加上第十格所击倒瓶数。\r\n(2)如第二次投球补中,则追加一次投球机会,第十格得分为第九格得他加上10加上追加一次投球击倒瓶数。\r\n(3)如第一球为全中,则追上加二次投球机会,第十格得分为第九格得分加上10加追加二次投球击倒的瓶数。因此从第一格到第十格的两次追加投球,都为全中,则为12个全中，得分为满分300分。', '输入包括多组测试数据，你应当处理到输入结束为止。\r\n每组输入数据中，都只有一行，包含一局的记分符号，相邻的两个符号之间以一个空格隔开。记分的符号仅包括‘-’（不含引号）、’X’（不含引号）及阿拉伯数字1到9。', '对于每组输入数据，输出两行。对于第i组输入数据，输出的第一行为”Case i:”，输出的第二行为10个整数，表示每格的累计得分。相邻的两个得分以一个空格隔开。', 'd:\\oj\\data\\1039', 'd:\\oj\\data\\1039', 'X X X X X 5 / 7 1 - - X X X X\r\n4 4 3 3 2 2 1 7 7 1 2 - 9 / 2 2 6 3 2 / 1', 'Case 1:\r\n30 60 90 115 135 152 160 160 190 220\r\nCase 2:\r\n8 14 18 26 34 36 48 52 61 72', '', 'NKPC3', '', '2012-02-01 19:48:17', 2000, 65536, 'N', NULL, 1, 22, 5, 21, 95, 4, 1, 30000, 171, ''),
(1040, '计算机硬件评分系统', '小C听说微软新推出的一款操作系统Windows Vista可以对电脑的配置进行评分，很感兴趣。由于小C对硬件软件方面都很了解，就通过一系列的市场调查与实践，制作了一款自己的计算机硬件评分系统。此系统可以对CPU、内存、硬盘、主板、显卡五部分分别进行评分，分数为不超过100的正整数，并以这五个分数中的最低分作为对计算机的总体评分。\r\n同寝室的小D打算最近购置一台新电脑，他请小C给他当参谋，小C就提供了一些当前的CPU、内存、硬盘、主板、显卡五种硬件的品牌、价格以及每个硬件由他所制作的系统所评价出来的分数。小D准备至多用N元来购买这五种硬件并且他还希望能够得到一台电脑有尽量高的总体评分。\r\n作为寝室长的你主动要写一个程序来帮助小D购买电脑。\r\n<IMG SRC=http://acm.nankai.edu.cn/image/1705_d1.jpg>', '第一行是一个正整数，不大于50000，表示上述的N。\r\n之后共有五部分的数据，分别代表CPU、内存、硬盘、主板、显卡部分的资料描述。每一部分的第一行均为一个正整数，表示资料中所提供的这种硬件品种数目M。下面M行每一行都描述了一个品种的情况，包括两个整数，以空格隔开。第一个整数介于1于10000，表示该品种的价格，第二个正整数表示该硬件所得到的分数。假定所列出的硬件相互都是兼容的。', '输出两行，每行一个正整数。第一行表示所购电脑的总体评分最大值。第二行表示要购买上述总体评分的电脑所需最少花费。\r\n如果小D的钱不足以购置这些硬件，则输出的两个数字均为0', 'd:\\oj\\data\\1040', 'd:\\oj\\data\\1040', '3000\r\n4\r\n880 80\r\n400 60\r\n495 72\r\n240 55\r\n3\r\n635 78 \r\n345 59\r\n785 86\r\n2\r\n800 88\r\n603 71\r\n2\r\n499 72\r\n590 79\r\n3\r\n588 76\r\n999 84\r\n289 51', '71\r\n2820', '', 'NKPC3', '', '2011-06-10 21:49:38', 1000, 65536, 'N', NULL, 13, 53, 25, 40, 80, 17, 10, 30000, 236, ''),
(1041, '朋友们的距离', '要放假了，考完了所有试就等着上火车回家的 Butterfly0923 面对着自己心爱的计算机，无聊的逛着我爱南开 BBS，眼看着在线好友列表的长度一天天减少。“来自”一栏中的 IP 都还是校内的，大多以 10 开头.<IMG SRC=http://acm.nankai.edu.cn/image/1706_d1.gif> 看到大部分人跟自己同在 21 宿，还有 15 宿的老乡、13 宿的狐朋狗友们、西区的研究生、12 宿的音乐狂人和 8 宿的可爱小女生。虽然现在大家仅仅相隔几百米，但是很快彼此将远隔万水千山，分散在祖国各地。如果那时大家一起上线，各地 IP 大展览，一定有趣，Butterfly0923 这样想。不过祖国这么大，不知道大家到底相距多远。于是 Butterfly0923 给所有在线的 ID寄语信鸽，询问他／她的家乡与学校之间的距离，他想知道自己的朋友中谁离学校最远。\r\nButterfly0923 知道自己的家距学校 520km，seaeagle 也知道，所以他回信说：我家离学校的距离比你的四倍还多 200km。不过 doraemonok 不知道，他比较务实，直接回信说：12km，公交 1hour。迷糊的 Butterfly0923 想了想，觉得 seaeagle 比较远一点。但是随着问的人越来越多，问题变得复杂起来。unusualwater 说：我的距离是你的十三分之一。aliao 说：我刚问过 gnr，你们的旅途合在一起比我少 194km。而 gnr 老师的回信说：我的路程正好是你的两倍。这回，Butterfly0923 算了好大一会，才知道 aliao 最远。\r\nButterfly0923 最后寄语信鸽了爱好编程的你，不过不是问距离，他告诉你他从各个 ID 得到的信息，希望你能告诉他最远的地方有多少公里，是谁在那里。', '输入数据有多组。每组数据的第一行是在线 ID 的数目 n，Butterfly0923 的好友列表里一共 26 个 ID，所以 n 不会超过 26。接下来 n 行是这 n 个在线 ID，每行一个。按照我爱南开 BBS 站的规定，ID 由 2-12 个英文字母组成，大小写不敏感。再往下 n 行是从各人回信中得到的信息。\r\n方便起见，Butterfly0923 把每条信息写成等式的形式。等号两边有一些项，每一项都是 num*ID 的形式，num 是一个正整数，没有符号，多项之间以加号分隔，最后一项可能是一个常数。Butterfly0923 自己也可能出现在等式中，注意它不是一个 ID ——它太长了。Butterfly0923 保证在一个等式中不会出现相同的 ID，每个人的距离（如果能算得出的话）都是整数。所有 ID 和等式中都不会出现任何前导、后缀以及符号两侧的空格。', '对于每一组输入，首先输出一行 Case #，这里 # 是按组从 1 开始的编号。\r\n如果朋友们给 Butterfly0923 的信息不足以确定全部人的距离，就在第二行输出 “I’m not sure about someone’s distance.” 否则第二行输出你计算出的最远距离，第三行输出跟最远距离对应的 ID，如果这样的 ID 不止一个，按照它们在输入中出现的顺序每行输出一个。', 'd:\\oj\\data\\1041', 'd:\\oj\\data\\1041', '2\r\nseaeagle\r\ndoraemonok\r\n1*seaeagle=4*Butterfly0923+200\r\n1*doraemonok=12\r\n3\r\nunusualwater\r\naliao\r\ngnr\r\n13*unusualwater=1*Butterfly0923\r\n1*aliao=1*Butterfly0923+1*gnr+194\r\n1*gnr=2*Butterfly0923', 'Case 1:\r\n2280\r\nseaeagle\r\nCase 2:\r\n1754\r\naliao', '⒈ 留意 n 的下限。\r\n⒉ ID 不区分大小写，但是大写字母是允许的。\r\n⒊ 常数项只会出现在最右边。\r\n⒋ 等式中的 Butterfly0923 实际上相当于常数，注意它可能会重复出现。\r\n⒌ 注意并列最远的情形。\r\n⒍ 注意不能确定的情形。\r\n⒎ 虽然系数及最后结果都是整数，但是计算过程中可能需要浮点数。', 'NKPC3', '', '2011-12-12 17:07:40', 2000, 65536, 'N', NULL, 2, 9, 22, 7, 78, 4, 2, 30000, 123, ''),
(1042, '帅小伙子和俊俏姑娘', '南开大学冰火舞蹈团是一个云集帅小伙子和俊俏姑娘的地方。舞蹈团经常有演出任务。舞蹈团的团长需要给参加排练的同学做合适的舞伴配对，从而使整个节目能发挥出舞蹈团的较好的配合水平。\r\n现在，有一个演出任务，需要n名帅小伙子与n名俊俏姑娘男女配对演出。当然，每个帅小伙子只能和一个俊俏姑娘配对成为舞伴。这n名帅小伙子，每个人对这n名俊俏姑娘在心里都有不同的排名，且任意两个姑娘在一个帅小伙子心目中的排名一定是不同的；同样，这n名俊俏姑娘每个人对这n名帅小伙子也都有不同的排名，且任意两个小伙子在一个俊俏姑娘心目中的排名一定是不同的。\r\n根据舞蹈团梁团长的经验，如果一个配对组合，使得某位帅小伙子A的舞伴a在这位小伙子心目的排名不如另一位俊俏姑娘b，且这位俊俏姑娘b的舞伴B在她的心目中的排名不如这位帅小伙子A，那么帅小伙子A和俊俏姑娘b在排练的过程中就会有些情绪，演出效果可能就不大好。\r\n现在，舞蹈团的梁团长听说你很聪明，想请你帮帮忙，在已知帅小伙子和俊俏姑娘们相互之间心目中的排名的前提下，告诉他是否存在一种合理的配对方案，使得所有的成员都能够在演出过程中不闹情绪？如果存在，请你帮他设计一组方案来为这些帅哥、靓妹们进行舞伴配对。\r\n<IMG SRC=http://it.nankai.edu.cn/acm/nkpc3/images/8.htm11.jpg>', '输入包括多组测试数据，你应当处理到输入结束为止。\r\n每组输入数据的第一行是一个正整数n，n≤50，表示有多少对舞伴。\r\n接下来有n行，每行有n个正整数，它们介于1到n，且互不相同，其中第i行的第j列表示第i个姑娘对第j个小伙子的排名。\r\n再接下来还有n行，每行也有n个正整数，它们也介于1到n，且互不相同，其中第i行的第j列表示第i个小伙子对第j个姑娘的排名。', '对于每组输入数据，输出两行。\r\n对于第i组输入数据，输出的第一行为：”Case i:”\r\n如果存在合适的配对方案，请输出的第二行输出一个由1到n之间互不相同的正整数组成的序列，相邻的两个正整数用一个空格隔开，第k个正整数表示第k个帅小伙子所配对的俊俏姑娘的编号，表示一种可行的配对方案；否则，请在输出的第二行输出”No Solution!”。', 'd:\\oj\\data\\1042', 'd:\\oj\\data\\1042', '3\r\n1 2 3\r\n1 2 3\r\n3 1 2\r\n2 1 3\r\n3 2 1\r\n1 3 2\r\n2\r\n1 2\r\n1 2\r\n2 1\r\n2 1', 'Case 1:\r\n2 3 1\r\nCase 2:\r\n2 1', '', 'NKPC3', '', '2012-03-04 12:20:54', 2000, 65536, 'N', NULL, 3, 9, 33, 6, 67, 6, 3, 30000, 147, ''),
(1043, 'Anti-Blot System', 'Jimmy is a hard-working pupil in his second year at primary school. Recently he decided to convert all his notes into an electronic version. Sadly, he found that his math notes were full of ink blots. \r\n\r\nHe scanned the notes and sent them through his own OCR package (yes, he coded it all by himself at the age of 8). The OCR package replaced all ink blots by the string "machula". \r\nYou are given Jimmy''s notes, processed by the OCR. They contain simple math exercises, which were used to practice addition on positive integers. Your task is to recover the damaged part of the notes.', 'The first line of the input file contains an integer T specifying the number of test cases. Each test case is preceded by a blank line. \r\n\r\nEach test case consists of exactly one line. The line represents an equation of the form "number + number = number", where each number is a positive integer. One part of the equation will be replaced by the string "machula". The string always covers a contiguous non-empty sequence of digits, possibly even an entire number. You may assume that for each equation in the input there will be exactly one way to fill in the missing digits.', 'For each test case, the output shall contain one line of the form "number + number = number". The line must represent the equation from that test case with all missing digits filled in.', 'd:\\oj\\data\\1043', 'd:\\oj\\data\\1043', '3\r\n\r\n23 + 47 = machula\r\n\r\n3247 + 5machula2 = 3749', '23 + 47 = 70\r\n3247 + 502 = 3749\r\n1613 + 75425 = 77038', '', 'IPSC 2007', '', '2011-04-12 16:45:00', 1000, 65536, 'N', NULL, 3, 5, 60, 2, 50, 3, 2, 30000, 75, ''),
(1044, '陶陶摘苹果', '陶陶家的院子里有一棵苹果树，每到秋天树上就会结出10个苹果。苹果成熟的时候，陶陶就会跑去摘苹果。陶陶有个30厘米高的板凳，当她不能直接用手摘到苹果的时候，就会踩到板凳上再试试。\r\n\r\n现在已知10个苹果到地面的高度，以及陶陶把手伸直的时候能够达到的最大高度，请帮陶陶算一下她能够摘到的苹果的数目。假设她碰到苹果，苹果就会掉下来。', '输入包括两行数据。第一行包含10个100到200之间（包括100和200）的整数（以厘米为单位）分别表示10个苹果到地面的高度，两个相邻的整数之间用一个空格隔开。第二行只包括一个100到120之间（包含100和120）的整数（以厘米为单位），表示陶陶把手伸直的时候能够达到的最大高度。', '输出包括一行，这一行只包含一个整数，表示陶陶能够摘到的苹果的数目。', 'd:\\oj\\data\\1044', 'd:\\oj\\data\\1044', '100 200 150 140 129 134 167 198 200 111\r\n\r\n110', '5', '', 'NOIP2005', '', '2012-06-04 20:48:09', 1000, 65536, 'N', NULL, 197, 307, 64, 101, 35, 190, 186, 30000, 308, ''),
(1045, '校门外的树', '某校大门外长度为L的马路上有一排树，每两棵相邻的树之间的间隔都是1米。我们可以把马路看成一个数轴，马路的一端在数轴0的位置，另一端在L的位置；数轴上的每个整数点，即0，1，2，……，L，都种有一棵树。\r\n\r\n由于马路上有一些区域要用来建地铁。这些区域用它们在数轴上的起始点和终止点表示。已知任一区域的起始点和终止点的坐标都是整数，区域之间可能有重合的部分。现在要把这些区域中的树（包括区域端点处的两棵树）移走。你的任务是计算将这些树都移走后，马路上还有多少棵树。', '输入的第一行有两个整数L（1 <= L <= 10000）和 M（1 <= M <= 100），L代表马路的长度，M代表区域的数目，L和M之间用一个空格隔开。接下来的M行每行包含两个不同的整数，用一个空格隔开，表示一个区域的起始点和终止点的坐标。', '输出 包括一行，这一行只包含一个整数，表示马路上剩余的树的数目。', 'd:\\oj\\data\\1045', 'd:\\oj\\data\\1045', '500 3\r\n150 300\r\n100 200\r\n470 471', '298', '', 'NOIP2005', '', '2012-06-04 19:51:34', 1000, 65536, 'N', NULL, 166, 471, 35, 290, 67, 159, 144, 30000, 512, ''),
(1046, '采药【(0-1)背包问题】', '辰辰是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同的草药，采每一株都需要一些时间，每一株也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。” \r\n\r\n如果你是辰辰，你能完成这个任务吗？', '输入的第一行有两个整数T（1 <= T <= 1000）和M（1 <= M <= 100），用一个空格隔开，T代表总共能够用来采药的时间，M代表山洞里的草药的数目。接下来的M行每行包括两个在1到100之间（包括1和100）的整数，分别表示采摘某株草药的时间和这株草药的价值。', '输出包括一行，这一行只包含一个整数，表示在规定的时间内，可以采到的草药的最大总价值。', 'd:\\oj\\data\\1046', 'd:\\oj\\data\\1046', '70 3\r\n71 100\r\n69 1\r\n1 2', '3', '', 'NOIP2005', '', '2011-06-10 16:15:01', 1000, 65536, 'N', NULL, 185, 478, 39, 222, 68, 113, 103, 30000, 887, ''),
(1047, '循环', '乐乐是一个聪明而又勤奋好学的孩子。他总喜欢探求事物的规律。一天，他突然对数的正整数次幂产生了兴趣。\r\n\r\n众所周知，2的正整数次幂最后一位数总是不断的在重复2，4，8，6，2，4，8，6……我们说2的正整数次幂最后一位的循环长度是4（实际上4的倍数都可以说是循环长度，但我们只考虑最小的循环长度）。类似的，其余的数字的正整数次幂最后一位数也有类似的循环现象：\r\n\r\n\r\n循环\r\n循环长度\r\n\r\n2\r\n2、4、8、6\r\n4\r\n\r\n3\r\n3、9、7、1\r\n4\r\n\r\n4\r\n4、6\r\n2\r\n\r\n5\r\n5\r\n1\r\n\r\n6\r\n6\r\n1\r\n\r\n7\r\n7、9、3、1\r\n4\r\n\r\n8\r\n8、4、2、6\r\n4\r\n\r\n9\r\n9、1\r\n2\r\n\r\n\r\n这时乐乐的问题就出来了：是不是只有最后一位才有这样的循环呢？对于一个整数n的正整数次幂来说，它的后k位是否会发生循环？如果循环的话，循环长度是多少呢？\r\n\r\n注意：\r\n\r\n1． 如果n的某个正整数次幂的位数不足k，那么不足的高位看做是0。\r\n\r\n2． 如果循环长度是L，那么说明对于任意的正整数a，n的a次幂和a + L次幂的最后k位都相同。', '输入只有一行，包含两个整数n（1 <= n < 10^100）和k（1 <= k <= 100），n和k之间用一个空格隔开，表示要求n的正整数次幂的最后k位的循环长度。', '输出包括一行，这一行只包含一个整数，表示循环长度。如果循环不存在，输出-1。', 'd:\\oj\\data\\1047', 'd:\\oj\\data\\1047', '32 2', '4', '', 'NOIP2005', '', '2012-09-09 17:04:08', 1000, 65536, 'N', NULL, 3, 24, 13, 18, 86, 8, 3, 30000, 282, ''),
(1048, '谁拿了最多奖学金', '某校的惯例是在每学期的期末考试之后发放奖学金。发放的奖学金共有五种，获取的条件各自不同：\r\n\r\n\r\n\r\n1) &nbsp; &nbsp; 院士奖学金，每人8000元，期末平均成绩高于80分（>80），并且在本学期内发表1篇或1篇以上论文的学生均可获得；\r\n\r\n2) &nbsp; &nbsp; 五四奖学金，每人4000元，期末平均成绩高于85分（>85），并且班级评议成绩高于80分（>80）的学生均可获得；\r\n\r\n3) &nbsp; &nbsp; 成绩优秀奖，每人2000元，期末平均成绩高于90分（>90）的学生均可获得；\r\n\r\n4) &nbsp; &nbsp; 西部奖学金，每人1000元，期末平均成绩高于85分（>85）的西部省份学生均可获得；\r\n\r\n5) &nbsp; &nbsp; 班级贡献奖，每人850元，班级评议成绩高于80分（>80）的学生干部均可获得；\r\n\r\n\r\n\r\n只要符合条件就可以得奖，每项奖学金的获奖人数没有限制，每名学生也可以同时获得多项奖学金。例如姚林的期末平均成绩是87分，班级评议成绩82分，同时他还是一位学生干部，那么他可以同时获得五四奖学金和班级贡献奖，奖金总数是4850元。\r\n\r\n\r\n\r\n现在给出若干学生的相关数据，请计算哪些同学获得的奖金总数最高（假设总有同学能满足获得奖学金的条件）。', '输入的第一行是一个整数N（1 <= N <= 100），表示学生的总数。接下来的N行每行是一位学生的数据，从左向右依次是姓名，期末平均成绩，班级评议成绩，是否是学生干部，是否是西部省份学生，以及发表的论文数。姓名是由大小写英文字母组成的长度不超过20的字符串（不含空格）；期末平均成绩和班级评议成绩都是0到100之间的整数（包括0和100）；是否是学生干部和是否是西部省份学生分别用一个字符表示，Y表示是，N表示不是；发表的论文数是0到10的整数（包括0和10）。每两个相邻数据项之间用一个空格分隔。', '输出包括三行，第一行是获得最多奖金的学生的姓名，第二行是这名学生获得的奖金总数。如果有两位或两位以上的学生获得的奖金最多，输出他们之中在输入文件中出现最早的学生的姓名。第三行是这N个学生获得的奖学金的总数。', 'd:\\oj\\data\\1048', 'd:\\oj\\data\\1048', '4\r\nYaoLin 87 82 Y N 0\r\nChenRuiyi 88 78 N Y 1\r\nLiXin 92 88 N N 0\r\nZhangQin 83 87 Y N 1', 'ChenRuiyi\r\n9000\r\n28700', '', 'NOIP2005', '', '2012-06-21 18:01:36', 1000, 65536, 'N', NULL, 118, 263, 45, 102, 50, 110, 103, 30000, 396, ''),
(1049, '过河 (DP)', '在河上有一座独木桥，一只青蛙想沿着独木桥从河的一侧跳到另一侧。在桥上有一些石子，青蛙很讨厌踩在这些石子上。由于桥的长度和青蛙一次跳过的距离都是正整数，我们可以把独木桥上青蛙可能到达的点看成数轴上的一串整点：0，1，……，L（其中L是桥的长度）。坐标为0的点表示桥的起点，坐标为L的点表示桥的终点。青蛙从桥的起点开始，不停的向终点方向跳跃。一次跳跃的距离是S到T之间的任意正整数（包括S,T）。当青蛙跳到或跳过坐标为L的点时，就算青蛙已经跳出了独木桥。\r\n\r\n题目给出独木桥的长度L，青蛙跳跃的距离范围S,T，桥上石子的位置。你的任务是确定青蛙要想过河，最少需要踩到的石子数。', '输入的第一行有一个正整数L（1 <= L <= 10^9），表示独木桥的长度。第二行有三个正整数S，T，M，分别表示青蛙一次跳跃的最小距离，最大距离，及桥上石子的个数，其中1 <= S <= T <= 10，1 <= M <= 100。第三行有M个不同的正整数分别表示这M个石子在数轴上的位置（数据保证桥的起点和终点处没有石子）。所有相邻的整数之间用一个空格隔开。', '输出只包括一个整数，表示青蛙过河最少需要踩到的石子数。', 'd:\\oj\\data\\1049', 'd:\\oj\\data\\1049', '10\r\n2 3 5\r\n2 3 5 6 7', '2', '', 'NOIP2005', '', '2012-06-08 17:37:37', 1000, 65536, 'N', NULL, 54, 212, 25, 102, 84, 31, 19, 30000, 708, ''),
(1050, '篝火晚会', '佳佳刚进高中，在军训的时候，由于佳佳吃苦耐劳，很快得到了教官的赏识，成为了“小教官”。在军训结束的那天晚上，佳佳被命令组织同学们进行篝火晚会。一共有n个同学，编号从1到n。一开始，同学们按照1，2，……，n的顺序坐成一圈，而实际上每个人都有两个最希望相邻的同学。如何下命令调整同学的次序，形成新的一个圈，使之符合同学们的意愿，成为摆在佳佳面前的一大难题。\r\n\r\n佳佳可向同学们下达命令，每一个命令的形式如下：\r\n\r\n(b1, b2,... bm -1, bm)\r\n\r\n这里m的值是由佳佳决定的，每次命令m的值都可以不同。这个命令的作用是移动编号是b1，b2，…… bm –1，bm的这m个同学的位置。要求b1换到b2的位置上，b2换到b3的位置上，……，要求bm换到b1的位置上。\r\n\r\n执行每个命令都需要一些代价。我们假定如果一个命令要移动m个人的位置，那么这个命令的代价就是m。我们需要佳佳用最少的总代价实现同学们的意愿，你能帮助佳佳吗？', '输入的第一行是一个整数n（3 <= n <= 50000），表示一共有n个同学。其后n行每行包括两个不同的正整数，以一个空格隔开，分别表示编号是1的同学最希望相邻的两个同学的编号，编号是2的同学最希望相邻的两个同学的编号，……，编号是n的同学最希望相邻的两个同学的编号。', '输出包括一行，这一行只包含一个整数，为最小的总代价。如果无论怎么调整都不能符合每个同学的愿望，则输出-1。', 'd:\\oj\\data\\1050', 'd:\\oj\\data\\1050', '4\r\n3 4\r\n4 3\r\n1 2\r\n1 2', '2', '', 'NOIP2005', '', '2007-08-13 19:44:47', 3000, 65536, 'N', NULL, 2, 9, 22, 6, 86, 2, 1, 30000, 97, ''),
(1051, '等价表达式', '明明进了中学之后，学到了代数表达式。有一天，他碰到一个很麻烦的选择题。这个题目的题干中首先给出了一个代数表达式，然后列出了若干选项，每个选项也是一个代数表达式，题目的要求是判断选项中哪些代数表达式是和题干中的表达式等价的。\r\n\r\n这个题目手算很麻烦，因为明明对计算机编程很感兴趣，所以他想是不是可以用计算机来解决这个问题。假设你是明明，能完成这个任务吗？\r\n\r\n\r\n\r\n这个选择题中的每个表达式都满足下面的性质：\r\n\r\n1． 表达式只可能包含一个变量‘a’。\r\n\r\n2． 表达式中出现的数都是正整数，而且都小于10000。\r\n\r\n3． 表达式中可以包括四种运算‘+’（加），‘-’（减），‘*’（乘），‘^’（乘幂），以及小括号‘(’，‘)’。小括号的优先级最高，其次是‘^’，然后是‘*’，最后是‘+’和‘-’。‘+’和‘-’的优先级是相同的。相同优先级的运算从左到右进行。（注意：运算符‘+’，‘-’，‘*’，‘^’以及小括号‘(’，‘)’都是英文字符）\r\n\r\n4． 幂指数只可能是1到10之间的正整数（包括1和10）。\r\n\r\n5． 表达式内部，头部或者尾部都可能有一些多余的空格。\r\n\r\n下面是一些合理的表达式的例子：\r\n\r\n((a^1) ^ 2)^3，a*a+a-a，((a+a))，9999+(a-a)*a，1 + (a -1)^3，1^10^9……', '输入的第一行给出的是题干中的表达式。第二行是一个整数n（2 <= n <= 26），表示选项的个数。后面n行，每行包括一个选项中的表达式。这n个选项的标号分别是A，B，C，D……\r\n\r\n输入中的表达式的长度都不超过50个字符，而且保证选项中总有表达式和题干中的表达式是等价的。', '输出文件equal.out包括一行，这一行包括一系列选项的标号，表示哪些选项是和题干中的表达式等价的。选项的标号按照字母顺序排列，而且之间没有空格。', 'd:\\oj\\data\\1051', 'd:\\oj\\data\\1051', '( a + 1) ^2\r\n3\r\n(a-1)^2+4*a\r\na + 1+ a\r\na^2 + 2 * a * 1 + 1^2 + 10 -10 +a -a', 'AC', '', 'NOIP2005', '', '2010-04-28 21:13:16', 1000, 65536, 'N', NULL, 0, 6, 0, 6, 100, 4, 0, 30000, 147, ''),
(1052, '津津的储蓄计划', '津津的零花钱一直都是自己管理。每个月的月初妈妈给津津300元钱，津津会预算这个月的花销，并且总能做到实际花销和预算的相同。 \r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;为了让津津学习如何储蓄，妈妈提出，津津可以随时把整百的钱存在她那里，到了年末她会加上20％还给津津。因此津津制定了一个储蓄计划：每个月的月初，在得到妈妈给的零花钱后，如果她预计到这个月的月末手中还会有多于100元或恰好100元，她就会把整百的钱存在妈妈那里，剩余的钱留在自己手中。 \r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;例如11月初津津手中还有83元，妈妈给了津津300元。津津预计11月的花销是180元，那么她就会在妈妈那里存200元，自己留下183元。到了11月月末，津津手中会剩下3元钱。 \r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;津津发现这个储蓄计划的主要风险是，存在妈妈那里的钱在年末之前不能取出。有可能在某个月的月初，津津手中的钱加上这个月妈妈给的钱，不够这个月的原定预算。如果出现这种情况，津津将不得不在这个月省吃俭用，压缩预算。 \r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;现在请你根据2004年1月到12月每个月津津的预算，判断会不会出现这种情况。如果不会，计算到2004年年末，妈妈将津津平常存的钱加上20％还给津津之后，津津手中会有多少钱。', '输入包括12行数据，每行包含一个小于350的非负整数，分别表示1月到12月津津的预算。', '输出包括一行，这一行只包含一个整数。如果储蓄计划实施过程中出现某个月钱不够用的情况，输出-X，X表示出现这种情况的第一个月；否则输出到2004年年末津津手中会有多少钱。', 'd:\\oj\\data\\1052', 'd:\\oj\\data\\1052', '290\r\n230\r\n280\r\n200\r\n300\r\n170\r\n340\r\n50 \r\n90 \r\n80 \r\n200\r\n60', '-7', 'Sample Input:\r\n290 \r\n230 \r\n280 \r\n200 \r\n300 \r\n170 \r\n330 \r\n50 \r\n90 \r\n80 \r\n200 \r\n60 \r\nSample Output:\r\n1580', 'NOIP2004', '', '2012-05-02 16:44:28', 1000, 65536, 'N', NULL, 92, 192, 48, 91, 54, 82, 77, 30000, 210, ''),
(1053, '合并果子', '在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。 \r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过n-1次合并之后，就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所耗体力之和。 \r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为1，并且已知果子的种类数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。 \r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;例如有3种果子，数目依次为1，2，9。可以先将1、2堆合并，新堆数目为3，耗费体力为3。接着，将新堆与原先的第三堆合并，又得到新的堆，数目为12，耗费体力为12。所以多多总共耗费体力=3+12=15。可以证明15为最小的体力耗费值。', '输入包括两行，第一行是一个整数n(1<＝n<=10000)，表示果子的种类数。第二行包含n个整数，用空格分隔，第i个整数ai(1<＝ai<=20000)是第i种果子的数目。', '输出包括一行，这一行只包含一个整数，也就是最小的体力耗费值。输入数据保证这个值小于2^31', 'd:\\oj\\data\\1053', 'd:\\oj\\data\\1053', '3 \r\n1 2 9', '15', '', 'NOIP2004', '', '2012-06-30 11:40:20', 3000, 65536, 'N', NULL, 69, 283, 24, 195, 79, 66, 52, 30000, 616, ''),
(1054, '合唱队形', '&nbsp;&nbsp;&nbsp;&nbsp;N位同学站成一排，音乐老师要请其中的(N-K)位同学出列，使得剩下的K位同学排成合唱队形。\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;合唱队形是指这样的一种队形：设K位同学从左到右依次编号为1，2…，K，他们的身高分别为T1，T2，…，TK，&amp;nbsp;&nbsp;则他们的身高满足T1<...<Ti>Ti+1>…&gt;TK(1<=i<=K)。\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;你的任务是，已知所有N位同学的身高，计算最少需要几位同学出列，可以使得剩下的同学排成合唱队形。', '输入的第一行是一个整数N(2<=N<=100)，表示同学的总数。第一行有n个整数，用空格分隔，第i个整数Ti(130<=Ti<=230)是第i位同学的身高(厘米)。', '输出包括一行，这一行只包含一个整数，就是最少需要几位同学出列。', 'd:\\oj\\data\\1054', 'd:\\oj\\data\\1054', '8\r\n186 186 150 200 160 130 197 220', '4', '', 'NOIP2004', '', '2012-07-05 22:49:41', 1000, 65536, 'N', NULL, 36, 84, 43, 38, 58, 32, 27, 30000, 253, ''),
(1055, '虫食算', '所谓虫食算，就是原先的算式中有一部分被虫子啃掉了，需要我们根据剩下的数字来判定被啃掉的字母。来看一个简单的例子：\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 43#9865#045\r\n&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;&nbsp;&nbsp;&nbsp;8468#6633\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 44445506978\r\n&nbsp;&nbsp;&nbsp;&nbsp;其中#号代表被虫子啃掉的数字。根据算式，我们很容易判断：第一行的两个数字分别是5和3，第二行的数字是5。\r\n    现在，我们对问题做两个限制：\r\n    首先，我们只考虑加法的虫食算。这里的加法是N进制加法，算式中三个数都有N位，允许有前导的0。\r\n    其次，虫子把所有的数都啃光了，我们只知道哪些数字是相同的，我们将相同的数字用相同的字母表示，不同的数字用不同的字母表示。如果这个算式是N进制的，我们就取英文字母表的前N个大写字母来表示这个算式中的0到N-1这N个不同的数字：但是这N个字母并不一定顺序地代表0到N-1)。输入数据保证N个字母分别至少出现一次。\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BADC\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;&nbsp;&nbsp; &nbsp;CRDA\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DCCC\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;上面的算式是一个4进制的算式。很显然，我们只要让ABCD分别代表0123，便可以让这个式子成立了。你的任务是，对于给定的N进制加法算式，求出N个不同的字母分别代表的数字，使得该加法算式成立。输入数据保证有且仅有一组解.', '输入包含4行。第一行有一个正整数N(N<=26)，后面的3行每行有一个由大写字母组成的字符串，分别代表两个加数以及和。这3个字符串左右两端都没有空格，从高位到低位，并且恰好有N位。', '输出包含一行。在这一行中，应当包含唯一的那组解。解是这样表示的：输出N个数字，分别表示A，B，C……所代表的数字，相邻的两个数字用一个空格隔开，不能有多余的空格。', 'd:\\oj\\data\\1055', 'd:\\oj\\data\\1055', '5\r\nABCED\r\nBDACE\r\nEBBAA', '1 0 3 4 2', '', 'NOIP2004', '', '2010-12-18 15:45:20', 2000, 65536, 'N', NULL, 4, 7, 57, 3, 43, 6, 4, 30000, 126, ''),
(1056, '不高兴的津津', '津津上初中了。妈妈认为津津应该更加用功学习，所以津津除了上学之外，还要参加妈妈为她报名的各科复习班。另外每周妈妈还会送她去学习朗诵、舞蹈和钢琴。但是津津如果一天上课超过八个小时就会不高兴，而且上得越久就会越不高兴。假设津津不会因为其它事不高兴，并且她的不高兴不会持续到第二天。请你帮忙检查一下津津下周的日程安排，看看下周她会不会不高兴；如果会的话，哪天最不高兴。', '输入包括七行数据，分别表示周一到周日的日程安排。每行包括两个小于10的非负整数，用空格隔开，分别表示津津在学校上课的时间和妈妈安排她上课的时间。', '输出包括一行，这一行只包含一个数字。如果不会不高兴则输出0，如果会则输出最不高兴的是周几（用1, 2, 3, 4, 5, 6, 7分别表示周一，周二，周三，周四，周五，周六，周日）。如果有两天或两天以上不高兴的程度相当，则输出时间最靠前的一天。', 'd:\\oj\\data\\1056', 'd:\\oj\\data\\1056', '5 3\r\n6 2\r\n7 2\r\n5 3\r\n5 4\r\n0 4\r\n0 6', '3', '', 'NOIP2004', '', '2012-05-10 19:31:28', 1000, 65536, 'N', NULL, 160, 249, 64, 80, 35, 153, 149, 30000, 337, ''),
(1057, '花生采摘', '鲁宾逊先生有一只宠物猴，名叫多多。这天，他们两个正沿着乡间小路散步，突然发现路边的告示牌上贴着一张小小的纸条：“欢迎免费品尝我种的花生！——熊字”。\r\n\r\n鲁宾逊先生和多多都很开心，因为花生正是他们的最爱。在告示牌背后，路边真的有一块花生田，花生植株整齐地排列成矩形网格（如图1）。有经验的多多一眼就能看出，每棵花生植株下的花生有多少。为了训练多多的算术，鲁宾逊先生说：“你先找出花生最多的植株，去采摘它的花生；然后再找出剩下的植株里花生最多的，去采摘它的花生；依此类推，不过你一定要在我限定的时间内回到路边。”\r\n\r\n\r\n我们假定多多在每个单位时间内，可以做下列四件事情中的一件：\r\n\r\n1)      从路边跳到最靠近路边（即第一行）的某棵花生植株；\r\n\r\n2)      从一棵植株跳到前后左右与之相邻的另一棵植株；\r\n\r\n3)      采摘一棵植株下的花生；\r\n\r\n4)      从最靠近路边（即第一行）的某棵花生植株跳回路边。\r\n\r\n<img src=images\\1057.jpg></img>\r\n\r\n现在给定一块花生田的大小和花生的分布，请问在限定时间内，多多最多可以采到多少个花生？注意可能只有部分植株下面长有花生，假设这些植株下的花生个数各不相同。\r\n\r\n例如在图2所示的花生田里，只有位于(2, 5), (3, 7), (4, 2), (5, 4)的植株下长有花生，个数分别为13, 7, 15, 9。沿着图示的路线，多多在21个单位时间内，最多可以采到37个花生。', '输入的第一行包括三个整数，M, N和K，用空格隔开；表示花生田的大小为M * N（1 <= M, N <= 20），多多采花生的限定时间为K（0 <= K <= 1000）个单位时间。接下来的M行，每行包括N个非负整数，也用空格隔开；第i + 1行的第j个整数Pij（0 <= Pij <= 500）表示花生田里植株(i, j)下花生的数目，0表示该植株下没有花生。', '输出包括一行，这一行只包含一个整数，即在限定时间内，多多最多可以采到花生的个数。', 'd:\\oj\\data\\1057', 'd:\\oj\\data\\1057', '6 7 21\r\n0 0 0 0 0 0 0\r\n0 0 0 0 13 0 0\r\n0 0 0 0 0 0 7\r\n0 15 0 0 0 0 0\r\n0 0 0 9 0 0 0\r\n0 0 0 0 0 0 0', '37', 'Sample Input:\r\n6 7 20\r\n0 0 0 0 0 0 0\r\n0 0 0 0 13 0 0\r\n0 0 0 0 0 0 7\r\n0 15 0 0 0 0 0\r\n0 0 0 9 0 0 0\r\n0 0 0 0 0 0 0\r\nSample Output:\r\n28', 'NOIP2004', '', '2012-03-07 12:17:33', 1000, 65536, 'N', NULL, 26, 53, 49, 25, 53, 24, 22, 30000, 176, ''),
(1058, 'FBI树', '我们可以把由“0”和“1”组成的字符串分为三类：全“0”串称为B串，全“1”串称为I串，既含“0”又含“1”的串则称为F串。\r\n\r\nFBI树是一种二叉树[1]，它的结点类型也包括F结点，B结点和I结点三种。由一个长度为2^N的“01”串S可以构造出一棵FBI树T，递归的构造方法如下：\r\n\r\n1)      T的根结点为R，其类型与串S的类型相同；\r\n\r\n2)      若串S的长度大于1，将串S从中间分开，分为等长的左右子串S1和S2；由左子串S1构造R的左子树T1，由右子串S2构造R的右子树T2。\r\n\r\n现在给定一个长度为2^N的“01”串，请用上述构造方法构造出一棵FBI树，并输出它的后序遍历2序列。', '输入的第一行是一个整数N（0 <= N <= 10），第二行是一个长度为2^N的“01”串。', '输出包括一行，这一行只包含一个字符串，即FBI树的后序遍历序列。', 'd:\\oj\\data\\1058', 'd:\\oj\\data\\1058', '3\r\n10001011', 'IBFBBBFIBFIIIFF', '', 'NOIP2004', '', '2011-12-20 20:13:39', 1000, 65536, 'N', NULL, 67, 86, 78, 15, 33, 28, 31, 30000, 283, ''),
(1059, '火星人', '人类终于登上了火星的土地并且见到了神秘的火星人。人类和火星人都无法理解对方的语言，但是我们的科学家发明了一种用数字交流的方法。这种交流方法是这样的，首先，火星人把一个非常大的数字告诉人类科学家，科学家破解这个数字的含义后，再把一个很小的数字加到这个大数上面，把结果告诉火星人，作为人类的回答。\r\n\r\n火星人用一种非常简单的方式来表示数字——掰手指。火星人只有一只手，但这只手上有成千上万的手指，这些手指排成一列，分别编号为1，2，3……。火星人的任意两根手指都能随意交换位置，他们就是通过这方法计数的。\r\n\r\n一个火星人用一个人类的手演示了如何用手指计数。如果把五根手指——拇指、食指、中指、无名指和小指分别编号为1，2，3，4和5，当它们按正常顺序排列时，形成了5位数12345，当你交换无名指和小指的位置时，会形成5位数12354，当你把五个手指的顺序完全颠倒时，会形成54321，在所有能够形成的120个5位数中，12345最小，它表示1；12354第二小，它表示2；54321最大，它表示120。下表展示了只有3根手指时能够形成的6个3位数和它们代表的数字：\r\n\r\n三进制数\r\n 123\r\n 132\r\n 213\r\n 231\r\n 312\r\n 321\r\n \r\n代表的数字\r\n 1\r\n 2\r\n 3\r\n 4\r\n 5\r\n 6\r\n \r\n\r\n现在你有幸成为了第一个和火星人交流的地球人。一个火星人会让你看他的手指，科学家会告诉你要加上去的很小的数。你的任务是，把火星人用手指表示的数与科学家告诉你的数相加，并根据相加的结果改变火星人手指的排列顺序。输入数据保证这个结果不会超出火星人手指能表示的范围。', '输入包括三行，第一行有一个正整数N，表示火星人手指的数目（1 <= N <= 10000）。第二行是一个正整数M，表示要加上去的小整数（1 <= M <= 100）。下一行是1到N这N个整数的一个排列，用空格隔开，表示火星人手指的排列顺序。', '输出只有一行，这一行含有N个整数，表示改变后的火星人手指的排列顺序。每两个相邻的数中间用一个空格分开，不能有多余的空格。', 'd:\\oj\\data\\1059', 'd:\\oj\\data\\1059', '5\r\n3\r\n1 2 3 4 5', '1 2 4 5 3', '', 'NOIP2004', '', '2012-05-13 10:35:28', 1000, 65536, 'N', NULL, 43, 103, 42, 55, 60, 43, 37, 30000, 305, ''),
(1060, 'A Simple Problem', 'Given a nonnegative integer a, and a positive integer N, we define:\r\nf(a, 1) = a\r\nf(a, k) = f(a, k – 1) * f(a, k – 1) % N,  k > 1\r\nThere may or may not exist some positive integer k satisfying f(a, k) = 0.\r\nYour task is, given a positive integer N, to determine how many a (0<= a <= N) there are, such that for some positive integer k, f(a, k) = 0.', 'The input contains an integer T on the first line, indicating the number of test cases. Each test case contains only one positive integer N(1<=N<=1000000000) on a line.', 'For each test case, output the answer on a single line.', 'd:\\oj\\data\\1060', 'd:\\oj\\data\\1060', '6\r\n2\r\n12\r\n50\r\n180\r\n245\r\n361', '2\r\n3\r\n6\r\n7\r\n8\r\n20', '', 'The 5th UESTC Programming Contest', '', '2012-02-11 21:52:25', 1000, 65536, 'N', NULL, 14, 33, 42, 16, 62, 10, 10, 30000, 337, ''),
(1061, 'Bus', 'UESTC is moving to the beautiful new campus which locates in the suburb of Chengdu. WCM is taking charge of arranging the buses for the students who are about to move to the new campus. There are two large transportation companies (which we’ll call A and B) in Chengdu. However, the two transportation companies are very busy, so on any given day they are only able to send limited number of buses.\r\n\r\nHere’s the problem WCM faces. He gets a list of how many buses are available from each company over each of the next n days. But he can only contact one of the companies in any given day. On day i, there are ai(ai>0) buses available if he contacts Company A and there are bi(bi>0) buses available if he contacts Company B. He also has the ability to change from one company to the other, but doing this takes one day in which no buses are available.\r\n\r\nSo, given a sequence of n days, a plan is specified by a choice of A, B, or “change” for each day, with the constraint that choice A and B cannot appear in consecutive days. For example, if he contacts Company A in day i, and he wants to switch to company B, then his choice for day i+1 must be “change”, and then his choice for day i+2 can be B. The value of a plan is the total number of buses that he manages to arrange for the students of UESTC over the n days: so it’s the sum of ai over all days in which the buses are available from Company A, plus the sum of bi over all days in which the buses are available from Company B.\r\n\r\nThe problem: Given the values of a1, a2, a3… an and b1, b2, b3… bn, find a plan of the maximum value(Such a plan is called optimal). Note that your plan can start with either of the company A or B in day 1.\r\n\r\nExample: Suppose n=4 and the values of ai and bi are given by the following table.\r\n\r\n \r\n	Day 1	Day 2	Day 3	Day 4	   \r\nA	11	2	2	9	   \r\nB	4	1	21	23	 \r\n\r\nThen the plan of the maximum value would be to choose A for day 1, then “change” for day 2, and then B for day 3 and 4. The value of this plan would be 11+0+21+23=55.\r\n\r\nFacing this problem, WCM feels despaired. He asks you for help to solve this problem. Give an efficient algorithm that takes values for a1, a2… an and b1, b2… bn and returns the value of an optimal plan.', 'The input contains an integer one the first line, which indicates the number of test cases. Each test case consists of three lines. The first line contains one positive integer n,(0<n<=1000000),which means the number of the days. The second line contains n positive integer, a1,a2,…,an,(0<ai<=100), ai means the number of buses which can be available if WCM contacts Company A in the i-th day; The third line contains n positive integer, b1,b2,…,bn,(0<bi<=100), bi means the number of buses which can be available if WCM contacts Company B in the i-th day', 'For each test case, output one number on a line which represents the value of the optimal plan, i.e. the maximum of the number of the available buses over the n days.', 'd:\\oj\\data\\1061', 'd:\\oj\\data\\1061', '2\r\n4\r\n11 2 2 9\r\n4 1 21 23\r\n3\r\n1 3 1\r\n7 7 7', '55\r\n21', '', 'The 5th UESTC Programming Contest', '', '2008-05-09 21:12:24', 3000, 65536, 'N', NULL, 13, 50, 26, 27, 73, 11, 10, 30000, 105, '');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1062, 'The Queen’s New Necklaces', 'Long ago and far away, there lives a Queen in the country of ByteLand. This Queen is very vain and could think about nothing but her jewelry, especially her necklaces. She orders her craftsmen to make for her a new necklace every day. And if they can’t hand in a necklace which the Queen hasn’t seen before, they will be executed.\r\n\r\nThe necklace these craftsmen make is a circular string of diamond beads, each bead has one of M different colors. In addition, for aesthetical reasons a necklace must have exactly Ki beads with color i, for 1<=i<=M. Two necklaces are the same if the colors of their beads exactly match. Note rotations of a necklace do not change it, however reflections are considered to be different. For example, (R B R B) and (B R B R) are the same necklaces, but (B R B B R R) and (R R B B R B) are not, where ‘R’ and ‘B’ represent the color ‘red’ and ‘blue’, respectively.\r\n\r\nThe craftsmen know that some day they will run out of new necklaces, so they decided to escape from the country. However the security of ByteLand is very tight so they have to first plan their escape to every detail, and that requires a lot of time. Now the craftsmen want to know, how many different necklaces they can make, which satisfies the constraints above, so they can see whether they will have enough days to make up the escape plan.', 'There are several test cases. The first line is an integer giving the number of cases. Each test case begins with a positive integer M (0<M<=100) on a line, which is the number of different colors. The following line contains M positive integers, K1 … KM, the number of beads with color i a necklace must have exactly. You can assume that the sum of all K’s will not exceed 1000.', 'For each test case, you should output one line containing the number of different necklaces the craftsmen can make.', 'd:\\oj\\data\\1062', 'd:\\oj\\data\\1062', '2\r\n1\r\n10\r\n2\r\n2 3', '1\r\n2', 'For the second case, the two distinct necklaces are (1 1 2 2 2) and (1 2 1 2 2). Anyone else, such as (2 1 2 1 2), can be obtained by rotating one of these two necklaces.', 'The 5th UESTC Programming Contest', '', '2007-06-13 10:43:07', 1000, 65536, 'N', NULL, 2, 3, 67, 0, 0, 1, 1, 30000, 114, ''),
(1063, 'Erdos Number', 'Paul Erdos(1913-1996) is a legendary mathematician of the 20th century. Famous for his eccentric living style, Erdos was one of the most prolific publishers of papers in mathematical history, having written around 1500 mathematical articles, mostly with co-authors. Erdos spent most of his lifetime traveling between scientific conferences and visiting homes of colleagues all over the world, with most of his belongings in a suitcase. He would typically show up at a colleague''s doorstep and announce "my brain is open", staying long enough to collaborate on a few papers before moving on a few days later. In many cases, he would ask the current collaborator whom he should visit next.\r\n\r\nBecause of his prolific output, friends created the Erdos number as a humorous tribute, which has been a part of the folklore of mathematicians throughout the world for many years. Erdos himself is assigned the Erdos number of 0. Those who have co-written a paper with Erdos have an Erdos number of 1. In turn, authors who have collaborated with those whose Erdos number is 1(but not with Erdos himself) have an Erdos number of 2. In general, if the lowest Erdos number of the cowriters of an author is S, then his Erdos number is S + 1. A person with no such coauthorship chain connecting to Erdos has an infinite Erdos number.\r\n\r\n\r\nFor example, in the picture above, the lady collaborates with Erdos on one paper, and then with the man on the right on another, so this man is given an Erdos number of 2(assuming he has never collaborated with Erdos himself).\r\n\r\nThe interesting thing with Erdos number is that about 90% of the world''s active mathematicians have an Erdos number smaller than 8, and many mathematicians have an Erdos number surprisingly smaller than they expect. For example, Andrew Wiles, who have proved the Fermat’s Last Theorem and whose research area is very different from that of Erdos, has an Erdos number of only 3. All Fields prize winners have an Erdos number at most 5 and all Wolf prize winners’ Erdos numbers do not exceed 6. In addition, a very large number of non-mathematicians also have finite Erdos numbers. For example, Albert Einstein has an Erdos number of 2 and Bill Gates has an Erdos number of 4. \r\n\r\nYour task is, given a list of co-writing activities of authors, to answer a series of queries according to the list, which have the form: “What is the Erdos number of author A?”', 'The first line of the input file is an integer N, number of co-authoring activities. The next N lines each contain two names, separated with  spaces, meaning these two authors have co-written a paper. On the next line is an integer M, number of queries. The next M lines each contain the name of an author.', 'For each query, output the corresponding author’s Erdos number on a line. If the author doesn’t have a finite Erdos number, output “infinity” instead(quotes for clarity only).\r\n\r\nNotes\r\n\r\nNames contain letters(‘A’-‘Z’, ‘a’-‘z’) and ‘.’ only and don’t contain white spaces.\r\nEach name has at most 20 characters.\r\nNames are case-sensitive, e.g. Erdos is not the same person as erdos.\r\nAuthors with the same name should be considered the same person.\r\nPaul Erdos himself is represented with exactly the name “Erdos”.\r\nThe same co-authoring activity is listed at most once.\r\nNo author will be co-authoring with himself.\r\n\r\nConstraints\r\n\r\nN <= 50000, M <= 50000', 'd:\\oj\\data\\1063', 'd:\\oj\\data\\1063', '7\r\nErdos                           Andrew.Odlyzko\r\nAndrew.Odlyzko                  Chris.M.Skinner\r\nChris.M.Skinner                 Andrew.Wiles\r\nErdos                           Pavol.Hell\r\nPavol.Hell                      Xiao.Tie.Deng\r\nXiao.Tie.Deng                   Chris.Papadimitriou\r\nChris.Papadimitriou             Bill.Gates\r\n3\r\nAndrew.Wiles\r\nBill.Gates\r\nAlbert.Einstein', '3\r\n4\r\ninfinity', 'Although Albert Einstein’s Erdos number is 2 in the real world, he doesn''t have a finite Erdos number according to the list.', 'The 5th UESTC Programming Contest', '', '2007-08-10 21:26:06', 10000, 65536, 'N', NULL, 3, 3, 100, 0, 0, 2, 2, 30000, 139, ''),
(1064, 'Farey Sequence', 'The Farey Sequence Fn for any integer n with n ≥ 2 is the set of irreducible rational numbers a/b with 0 < a < b ≤ n and gcd(a,b) = 1 arranged in increasing order. The first few are \r\nF2 = {1/2} \r\nF3 = {1/3, 1/2, 2/3} \r\nF4 = {1/4, 1/3, 1/2, 2/3, 3/4} \r\nF5 = {1/5, 1/4, 1/3, 2/5, 1/2, 3/5, 2/3, 3/4, 4/5} \r\n\r\nNow, your task is to print Farey Sequence given the value of n.', 'There are several test cases. The first line is an integer giving the number of cases. Each test case has only one line, which contains a positive integer n.', 'For each test case, you should output one line, which contains the corresponding Farey Sequence. Adjacent terms are separated by a single '','' and there can''t be any white spaces in your output. See Sample Output for more clarifications on the output format. \r\nConstraints\r\n2<=n<=3000', 'd:\\oj\\data\\1064', 'd:\\oj\\data\\1064', '4\r\n2\r\n3\r\n4\r\n5', '1/2\r\n1/3,1/2,2/3\r\n1/4,1/3,1/2,2/3,3/4\r\n1/5,1/4,1/3,2/5,1/2,3/5,2/3,3/4,4/5', 'Do Not use cout to produce the output for this problem, since it is inefficient.', 'The 5th UESTC Programming Contest', '', '2011-11-27 15:56:07', 10000, 65536, 'N', NULL, 9, 51, 18, 38, 86, 13, 6, 30000, 98, ''),
(1065, 'Playground', 'It has been more than half a year since Well graduated from UESTC; however, the wonderful memories of striving for ACM with his teammates never fade. He remembers that everyday when he finished his training in midnight, he would play games with WZP on the playground in front of Main Hall. One night, they played so crazily that they painted the playground with different colors. Before they left, they suddenly realized that if the President Zhou saw the playground with lots of colored blocks, they would be punished. So they had to make the playground clean before the next day''s sunrise. \r\nSuppose that the playground is a square including n * n small square blocks and some blocks have been painted by Well and WZP. Every time they would choose a row or a column of the playground and then begin to clean the painted blocks in the chosen row or column. One painted blocks would become clean after cleaning, however, if one painted block is cleaned twice, it will be become dirty again. Those blocks which are not painted before their cleaning starts will be always clean. \r\n\r\nWell and WZP was very tired after a whole day''s ACM training, so they wanted to finish this job as soon as possible. Given that choosing a row or a column and then do the cleaning would cost a minute, please help them to find the minimum time they had to spend before the playground becomes all clean again.', 'The input contains an integer T on the first line which indicates the number of test cases. In each test case, the first line is an integer n (1 ≤ n ≤ 200). Then n lines follow, each of which contains n integers separated by a blank. Each integer in these n lines, either 0 or 1, represents a small square block of the playground. Integer 0 means the block it represents is clean initially, while integer 1 means the block it represents is painted initially.', 'For each test case, output a single line containing a single integer which represents he minimum minutes they had to spend to clean the playground.', 'd:\\oj\\data\\1065', 'd:\\oj\\data\\1065', '3\r\n1\r\n0\r\n2\r\n0 1\r\n0 1\r\n2\r\n0 1\r\n1 0', '0\r\n1\r\n2', '', 'The 5th UESTC Programming Contest', '', '2011-04-15 01:00:14', 1000, 65536, 'N', NULL, 2, 9, 22, 7, 78, 3, 2, 30000, 115, ''),
(1066, 'Cube', 'As a student of the applied mathematics school of UESTC, WCM likes mathematics. Some day he found an interesting theorem that every positive integer''s cube can be expressed as the sum of some continuous odd positive integers. \r\nFor example, \r\n\r\n11*11*11 = 1331 = 111+113+115+117+119+121+123+125+127+129+131 \r\n\r\nFacing such a perfect theorem, WCM felt very agitated. But he didn''t know how to prove it. He asked his good friend Tom Riddle for help. Tom Riddle is a student of the computer science school of UESTC and is skillful at programming. He used the computer to prove the theorem''s validity easily. Can you also do it? \r\n\r\nGiven a positive integer N, you should determine how to express this number as the sum of N continuous odd positive integers. You only need to output the smallest and the largest number among the N integers.', 'The input contains an integer on the first line, which indicates the number of test cases. Each test case contains one positive integer N on a single line(0 < N ≤ 1000).', 'For each test case, output two integers on a line, the smallest and the largest number among the N continuous odd positive integers whose sum is N * N * N.', 'd:\\oj\\data\\1066', 'd:\\oj\\data\\1066', '2\r\n11\r\n3', '111 131\r\n7 11', '', 'The 5th UESTC Programming Contest', '', '2012-05-03 21:09:25', 1000, 65536, 'N', NULL, 79, 151, 52, 72, 50, 77, 71, 30000, 334, ''),
(1067, 'Binary Trees', 'Maybe you have taken the course called Data Structure before. You should be familiar with the fact that no parenthesis is needed in the suffix expression. But have you ever wondered why? \r\nWe know that an expression can be uniquely represented by a binary tree. The suffix expression is the post-order traversal of this tree. Given the post-order traversal of a binary tree, each of whose non-leaf nodes has exactly two children, we can reconstruct the original binary tree if we are told which nodes in the post-order traversal are non-leaves. This means that no parenthesis is needed in the suffix expression. \r\n\r\nHere is your task. Given a string S which represents the post-order traversal of a binary tree T in which all of the non-leaf nodes have exactly two children, and given which nodes in S are non-leaves, you must reconstruct the binary tree and output the in-order traversal of T. \r\n\r\nEach node of T has a label, which is a letter(''a''-''z'', ''A''-''Z''). A lowercase letter(''a''-''z'') means the corresponding node is a leaf and an uppercase letter(''A''-''Z'') means the corresponding node is a non-leaf.', 'The input contains an integer on the first line, which indicates the number of test cases. Each test case contains one string S on a line, the post-order traversal of a binary tree.', 'For each test case, output on a line one string which is the in-order traversal of the corresponding binary tree. There can be no white spaces in your output. \r\n\r\nNotes\r\nThe post-order traversal of a binary tree is to visit the left subtree of the root first, then the right subtree and finally the root. \r\n\r\nThe in-order traversal of a binary tree is to visit the left subtree of the root first, then the root, and finally the right subtree. \r\n\r\nConstraints\r\nS contains letters(''a''-''z'', ''A''-''Z'') only and don''t contain any white spaces. \r\nThe length of S is between 3 and 999, inclusive. \r\nThe length of S is an odd number. \r\nS will be the post-order traversal of a binary tree.', 'd:\\oj\\data\\1067', 'd:\\oj\\data\\1067', '2\r\nbcA\r\nefBghCA', 'bAc\r\neBfAgCh', '', 'The 5th UESTC Programming Contest', '', '2011-03-09 13:28:13', 1000, 65536, 'N', NULL, 5, 9, 56, 4, 80, 4, 1, 30000, 115, ''),
(1068, 'Tom''s Game', 'Tom is playing the following game on a computer. There are 101 squares connected in a line, with the ith square adjacent to the (i-1)th one on its left and to the (i+1)th on its right, for 1 ≤ i ≤ 99, and the 0th and 100th square are the starting and finishing square, respectively. \r\n                       0 1 2 3 4 5 6 7 8 9..........95 96 97 98 99 100\r\n\r\nInitially Tom''s character is at Square 0. At each turn the computer throws a dice and produces a number k between 1 and 6, inclusive. Tom''s character will then go k steps forward, i.e. from Square i to Square i + k. Once the character reaches the finishing square 100, the game ends and Tom wins. If the character goes more than needed steps toward the finishing square, he will be wrapped around. For example, if the character is at 98 and computer throws ''5'', then he will end up at 97(98->99->100->99->98->97). \r\n\r\nIn addition, some squares are special. There are 3 types of special squares: \r\n\r\n1) Advance k. When the character reaches this type of square, he will go k more steps forward from it. Note he will still be wrapped around toward the end of the path. For example, if Square 98 is ''Advance 3'' , then if the character reaches this square, he will end up at 99(98->99->100->99). \r\n\r\n2) Back k. When the character reaches this type of square, he will go k steps back from it, i.e. from i to i - k. if i - k < 0, the character will end up at 0. \r\n\r\n3) Goto k. When the character reaches this type of square, he will go to Square k. \r\n\r\nIn a single turn the character may encounter more than one special squares, and they will take effect one after another. \r\n\r\nAfter playing the game for a while without victory, Tom begins to suspect that the computer cheats on the dice throwing so as to not let him win. So he writes a program and hacks into the random number generating module of the game. Now Tom can control in each turn what number the dice throwing will produce. Of course this number is still in the range [1..6]. To surprise his friends on how well he can play the game, Tom decides to control the dice throwing in each turn such that he can win the game in as few turns as possible. \r\n\r\nNote that the special squares may be ill-designed such that Tom will never win the game no matter how he controls the output of the dice throwing.', 'The first line is an integer N, number of special squares. Following N lines each contain three integers, s, t and k. s is the index of the special square. t is type of the square and is in the range [0..2], with 0, 1 and 2 stands for "Advance", "Back" and "Goto" respectively. k is the argument for this type, as described above.', 'Output on a single line the minimum number of turns Tom needs to win the game, if he can control the output of the dice throwing in each turn. If Tom can never win the game, output -1. \r\n\r\nConstraints\r\n1 ≤ s ≤ 99, i.e. the staring and finishing squares will never be special. \r\nEach square can be at most one of the three special types. \r\nThe k for ''Advance'' and ''Back'' squares is in the range [1..6]. \r\nThe k for ''Goto'' squares is in the range [0..100]. \r\nIf Square i is ''Goto k'', then k will not be i.', 'd:\\oj\\data\\1068', 'd:\\oj\\data\\1068', '0', '17', 'Sample Input/Output 1 Clarification\r\nWith no special squares, Tom can''t play too many tricks. The best strategy for him is to throw ''6'' in each turn except the last, where he should throw ''4''. \r\n\r\nSample Input 2\r\n1\r\n2 2 99\r\n\r\nSample Output 2\r\n2\r\n\r\nSample Input/Output 2 Clarification\r\nSquare 2 is special; it is ''Goto 99''. Tom can throw 2 in the first turn, which takes him to Square 99. Then he throws 1 and wins the game. \r\n\r\nSample Input 3\r\n6\r\n1 0 1\r\n2 0 1\r\n3 0 1\r\n4 0 1\r\n5 0 1\r\n6 1 5\r\n\r\nSample Output 3\r\n-1\r\n\r\nSample Input/Output 3 Clarification\r\nNo matter what Tom throws in the first turn, his character will be trapped into an infinite loop(1->2->3->4->5->6->1). So he can never win the game.', 'The 5th UESTC Programming Contest', '', '2009-01-31 12:31:50', 1000, 65536, 'N', NULL, 4, 8, 50, 4, 57, 3, 3, 30000, 91, ''),
(1069, '埃及分数', '在古埃及，人们使用单位分数的和(形如1/a的, a是自然数)表示一切有理数。 \r\n如：2/3=1/2+1/6,但不允许2/3=1/3+1/3,因为加数中有相同的。 \r\n对于一个分数a/b,表示方法有很多种，但是哪种最好呢？ \r\n首先，加数少的比加数多的好，其次，加数个数相同的，最小的分数越大越好。\r\n如： \r\n19/45=1/3 + 1/12 + 1/180 \r\n19/45=1/3 + 1/15 + 1/45 \r\n19/45=1/3 + 1/18 + 1/30\r\n19/45=1/4 + 1/6 + 1/180 \r\n19/45=1/5 + 1/6 + 1/18. \r\n最好的是最后一种，因为1/18比1/180,1/45,1/30,1/180都大。 \r\n给出a,b(0〈a〈b〈1000),编程计算最好的表达方式。', '第一行:N 表示有N组测试数据，每组测试数据为一行包含a,b(0〈a〈b〈1000)。', '每组测试数据若干个数，自小到大排列，依次是单位分数的分母。', 'd:\\oj\\data\\1069', 'd:\\oj\\data\\1069', '1\r\n19 45', '5 6 18', '', 'oibh', '', '2012-05-17 13:48:47', 1000, 65536, 'N', NULL, 11, 26, 42, 10, 83, 2, 2, 30000, 255, ''),
(1070, '管理员测试专用~~~~~~', '', '', '', 'd:\\oj\\data\\1070', 'd:\\oj\\data\\1070', '', '', '', '', '', '2012-03-14 09:24:09', 100000, 165536, 'N', NULL, 5, 207, 2, 202, 99, 25, 2, 300000, 380, '');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1071, '**************POJ代码大全**************', '<a href=poj\\1000.txt>1000</a> <a href=poj\\1001.txt>1001</a> <a href=poj\\1002.txt>1002</a> <a href=poj\\1003.txt>1003</a> <a href=poj\\1004.txt>1004</a> <a href=poj\\1005.txt>1005</a> <a href=poj\\1006.txt>1006</a> <a href=poj\\1007.txt>1007</a> <a href=poj\\1008.txt>1008</a> <a href=poj\\1009.txt>1009</a> <a href=poj\\1010.txt>1010</a> <a href=poj\\1011.txt>1011</a> <a href=poj\\1012.txt>1012</a> <a href=poj\\1013.txt>1013</a> <a href=poj\\1014.txt>1014</a> <a href=poj\\1015.txt>1015</a> <a href=poj\\1016.txt>1016</a> <a href=poj\\1017.txt>1017</a> <a href=poj\\1018.txt>1018</a> <a href=poj\\1019.txt>1019</a> <a href=poj\\1020.txt>1020</a> <a href=poj\\1021.txt>1021</a> <a href=poj\\1022.txt>1022</a> <a href=poj\\1023.txt>1023</a> <a href=poj\\1024.txt>1024</a> <a href=poj\\1025.txt>1025</a> <a href=poj\\1026.txt>1026</a> <a href=poj\\1027.txt>1027</a> <a href=poj\\1028.txt>1028</a> <a href=poj\\1029.txt>1029</a> <a href=poj\\1030.txt>1030</a> <a href=poj\\1031.txt>1031</a> <a href=poj\\1032.txt>1032</a> <a href=poj\\1033.txt>1033</a> <a href=poj\\1034.txt>1034</a> <a href=poj\\1035.txt>1035</a> <a href=poj\\1036.txt>1036</a> <a href=poj\\1037.txt>1037</a> <a href=poj\\1038.txt>1038</a> <a href=poj\\1039.txt>1039</a> <a href=poj\\1040.txt>1040</a> <a href=poj\\1041.txt>1041</a> <a href=poj\\1042.txt>1042</a> <a href=poj\\1043.txt>1043</a> <a href=poj\\1044.txt>1044</a> <a href=poj\\1045.txt>1045</a> <a href=poj\\1046.txt>1046</a> <a href=poj\\1047.txt>1047</a> <a href=poj\\1048.txt>1048</a> <a href=poj\\1049.txt>1049</a> <a href=poj\\1050.txt>1050</a> <a href=poj\\1051.txt>1051</a> <a href=poj\\1052.txt>1052</a> <a href=poj\\1053.txt>1053</a> <a href=poj\\1054.txt>1054</a> <a href=poj\\1055.txt>1055</a> <a href=poj\\1056.txt>1056</a> <a href=poj\\1057.txt>1057</a> <a href=poj\\1058.txt>1058</a> <a href=poj\\1059.txt>1059</a> <a href=poj\\1060.txt>1060</a> <a href=poj\\1061.txt>1061</a> <a href=poj\\1062.txt>1062</a> <a href=poj\\1063.txt>1063</a> <a href=poj\\1064.txt>1064</a> <a href=poj\\1065.txt>1065</a> <a href=poj\\1066.txt>1066</a> <a href=poj\\1067.txt>1067</a> <a href=poj\\1068.txt>1068</a> <a href=poj\\1069.txt>1069</a> <a href=poj\\1070.txt>1070</a> <a href=poj\\1071.txt>1071</a> <a href=poj\\1072.txt>1072</a> <a href=poj\\1073.txt>1073</a> <a href=poj\\1074.txt>1074</a> <a href=poj\\1075.txt>1075</a> <a href=poj\\1076.txt>1076</a> <a href=poj\\1077.txt>1077</a> <a href=poj\\1078.txt>1078</a> <a href=poj\\1079.txt>1079</a> <a href=poj\\1080.txt>1080</a> <a href=poj\\1081.txt>1081</a> <a href=poj\\1082.txt>1082</a> <a href=poj\\1083.txt>1083</a> <a href=poj\\1084.txt>1084</a> <a href=poj\\1085.txt>1085</a> <a href=poj\\1086.txt>1086</a> <a href=poj\\1087.txt>1087</a> <a href=poj\\1088.txt>1088</a> <a href=poj\\1089.txt>1089</a> <a href=poj\\1090.txt>1090</a> <a href=poj\\1091.txt>1091</a> <a href=poj\\1092.txt>1092</a> <a href=poj\\1093.txt>1093</a> <a href=poj\\1094.txt>1094</a> <a href=poj\\1095.txt>1095</a> <a href=poj\\1096.txt>1096</a> <a href=poj\\1097.txt>1097</a> <a href=poj\\1098.txt>1098</a> <a href=poj\\1099.txt>1099</a> <a href=poj\\1100.txt>1100</a> <a href=poj\\1101.txt>1101</a> <a href=poj\\1102.txt>1102</a> <a href=poj\\1103.txt>1103</a> <a href=poj\\1104.txt>1104</a> <a href=poj\\1105.txt>1105</a> <a href=poj\\1106.txt>1106</a> <a href=poj\\1107.txt>1107</a> <a href=poj\\1108.txt>1108</a> <a href=poj\\1109.txt>1109</a> <a href=poj\\1110.txt>1110</a> <a href=poj\\1111.txt>1111</a> <a href=poj\\1112.txt>1112</a> <a href=poj\\1113.txt>1113</a> <a href=poj\\1114.txt>1114</a> <a href=poj\\1115.txt>1115</a> <a href=poj\\1116.txt>1116</a> <a href=poj\\1117.txt>1117</a> <a href=poj\\1118.txt>1118</a> <a href=poj\\1119.txt>1119</a> <a href=poj\\1120.txt>1120</a> <a href=poj\\1121.txt>1121</a> <a href=poj\\1122.txt>1122</a> <a href=poj\\1123.txt>1123</a> <a href=poj\\1124.txt>1124</a> <a href=poj\\1125.txt>1125</a> <a href=poj\\1126.txt>1126</a> <a href=poj\\1127.txt>1127</a> <a href=poj\\1128.txt>1128</a> <a href=poj\\1129.txt>1129</a> <a href=poj\\1130.txt>1130</a> <a href=poj\\1131.txt>1131</a> <a href=poj\\1132.txt>1132</a> <a href=poj\\1133.txt>1133</a> <a href=poj\\1134.txt>1134</a> <a href=poj\\1135.txt>1135</a> <a href=poj\\1136.txt>1136</a> <a href=poj\\1137.txt>1137</a> <a href=poj\\1138.txt>1138</a> <a href=poj\\1139.txt>1139</a> <a href=poj\\1140.txt>1140</a> <a href=poj\\1141.txt>1141</a> <a href=poj\\1142.txt>1142</a> <a href=poj\\1143.txt>1143</a> <a href=poj\\1144.txt>1144</a> <a href=poj\\1145.txt>1145</a> <a href=poj\\1146.txt>1146</a> <a href=poj\\1147.txt>1147</a> <a href=poj\\1148.txt>1148</a> <a href=poj\\1149.txt>1149</a> <a href=poj\\1150.txt>1150</a> <a href=poj\\1151.txt>1151</a> <a href=poj\\1152.txt>1152</a> <a href=poj\\1153.txt>1153</a> <a href=poj\\1154.txt>1154</a> <a href=poj\\1155.txt>1155</a> <a href=poj\\1156.txt>1156</a> <a href=poj\\1157.txt>1157</a> <a href=poj\\1158.txt>1158</a> <a href=poj\\1159.txt>1159</a> <a href=poj\\1160.txt>1160</a> <a href=poj\\1161.txt>1161</a> <a href=poj\\1162.txt>1162</a> <a href=poj\\1163.txt>1163</a> <a href=poj\\1164.txt>1164</a> <a href=poj\\1165.txt>1165</a> <a href=poj\\1166.txt>1166</a> <a href=poj\\1167.txt>1167</a> <a href=poj\\1168.txt>1168</a> <a href=poj\\1169.txt>1169</a> <a href=poj\\1170.txt>1170</a> <a href=poj\\1171.txt>1171</a> <a href=poj\\1172.txt>1172</a> <a href=poj\\1173.txt>1173</a> <a href=poj\\1174.txt>1174</a> <a href=poj\\1175.txt>1175</a> <a href=poj\\1176.txt>1176</a> <a href=poj\\1177.txt>1177</a> <a href=poj\\1178.txt>1178</a> <a href=poj\\1179.txt>1179</a> <a href=poj\\1180.txt>1180</a> <a href=poj\\1181.txt>1181</a> <a href=poj\\1182.txt>1182</a> <a href=poj\\1183.txt>1183</a> <a href=poj\\1184.txt>1184</a> <a href=poj\\1185.txt>1185</a> <a href=poj\\1186.txt>1186</a> <a href=poj\\1187.txt>1187</a> <a href=poj\\1188.txt>1188</a> <a href=poj\\1189.txt>1189</a> <a href=poj\\1190.txt>1190</a> <a href=poj\\1191.txt>1191</a> <a href=poj\\1192.txt>1192</a> <a href=poj\\1193.txt>1193</a> <a href=poj\\1194.txt>1194</a> <a href=poj\\1195.txt>1195</a> <a href=poj\\1196.txt>1196</a> <a href=poj\\1197.txt>1197</a> <a href=poj\\1198.txt>1198</a> <a href=poj\\1199.txt>1199</a> <a href=poj\\1200.txt>1200</a> <a href=poj\\1201.txt>1201</a> <a href=poj\\1202.txt>1202</a> <a href=poj\\1203.txt>1203</a> <a href=poj\\1204.txt>1204</a> <a href=poj\\1205.txt>1205</a> <a href=poj\\1206.txt>1206</a> <a href=poj\\1207.txt>1207</a> <a href=poj\\1208.txt>1208</a> <a href=poj\\1209.txt>1209</a> <a href=poj\\1210.txt>1210</a> <a href=poj\\1211.txt>1211</a> <a href=poj\\1212.txt>1212</a> <a href=poj\\1213.txt>1213</a> <a href=poj\\1214.txt>1214</a> <a href=poj\\1215.txt>1215</a> <a href=poj\\1216.txt>1216</a> <a href=poj\\1217.txt>1217</a> <a href=poj\\1218.txt>1218</a> <a href=poj\\1219.txt>1219</a> <a href=poj\\1220.txt>1220</a> <a href=poj\\1221.txt>1221</a> <a href=poj\\1222.txt>1222</a> <a href=poj\\1223.txt>1223</a> <a href=poj\\1224.txt>1224</a> <a href=poj\\1225.txt>1225</a> <a href=poj\\1226.txt>1226</a> <a href=poj\\1227.txt>1227</a> <a href=poj\\1228.txt>1228</a> <a href=poj\\1229.txt>1229</a> <a href=poj\\1230.txt>1230</a> <a href=poj\\1231.txt>1231</a> <a href=poj\\1232.txt>1232</a> <a href=poj\\1233.txt>1233</a> <a href=poj\\1234.txt>1234</a> <a href=poj\\1235.txt>1235</a> <a href=poj\\1236.txt>1236</a> <a href=poj\\1237.txt>1237</a> <a href=poj\\1238.txt>1238</a> <a href=poj\\1239.txt>1239</a> <a href=poj\\1240.txt>1240</a> <a href=poj\\1241.txt>1241</a> <a href=poj\\1242.txt>1242</a> <a href=poj\\1243.txt>1243</a> <a href=poj\\1244.txt>1244</a> <a href=poj\\1245.txt>1245</a> <a href=poj\\1246.txt>1246</a> <a href=poj\\1247.txt>1247</a> <a href=poj\\1248.txt>1248</a> <a href=poj\\1249.txt>1249</a> <a href=poj\\1250.txt>1250</a> <a href=poj\\1251.txt>1251</a> <a href=poj\\1252.txt>1252</a> <a href=poj\\1253.txt>1253</a> <a href=poj\\1254.txt>1254</a> <a href=poj\\1255.txt>1255</a> <a href=poj\\1256.txt>1256</a> <a href=poj\\1257.txt>1257</a> <a href=poj\\1258.txt>1258</a> <a href=poj\\1259.txt>1259</a> <a href=poj\\1260.txt>1260</a> <a href=poj\\1261.txt>1261</a> <a href=poj\\1262.txt>1262</a> <a href=poj\\1263.txt>1263</a> <a href=poj\\1264.txt>1264</a> <a href=poj\\1265.txt>1265</a> <a href=poj\\1266.txt>1266</a> <a href=poj\\1267.txt>1267</a> <a href=poj\\1268.txt>1268</a> <a href=poj\\1269.txt>1269</a> <a href=poj\\1270.txt>1270</a> <a href=poj\\1271.txt>1271</a> <a href=poj\\1272.txt>1272</a> <a href=poj\\1273.txt>1273</a> <a href=poj\\1274.txt>1274</a> <a href=poj\\1275.txt>1275</a> <a href=poj\\1276.txt>1276</a> <a href=poj\\1277.txt>1277</a> <a href=poj\\1278.txt>1278</a> <a href=poj\\1279.txt>1279</a> <a href=poj\\1280.txt>1280</a> <a href=poj\\1281.txt>1281</a> <a href=poj\\1282.txt>1282</a> <a href=poj\\1283.txt>1283</a> <a href=poj\\1284.txt>1284</a> <a href=poj\\1285.txt>1285</a> <a href=poj\\1286.txt>1286</a> <a href=poj\\1287.txt>1287</a> <a href=poj\\1288.txt>1288</a> <a href=poj\\1289.txt>1289</a> <a href=poj\\1290.txt>1290</a> <a href=poj\\1291.txt>1291</a> <a href=poj\\1292.txt>1292</a> <a href=poj\\1293.txt>1293</a> <a href=poj\\1294.txt>1294</a> <a href=poj\\1295.txt>1295</a> <a href=poj\\1296.txt>1296</a> <a href=poj\\1297.txt>1297</a> <a href=poj\\1298.txt>1298</a> <a href=poj\\1299.txt>1299</a> <a href=poj\\1300.txt>1300</a> <a href=poj\\1301.txt>1301</a> <a href=poj\\1302.txt>1302</a> <a href=poj\\1303.txt>1303</a> <a href=poj\\1304.txt>1304</a> <a href=poj\\1305.txt>1305</a> <a href=poj\\1306.txt>1306</a> <a href=poj\\1307.txt>1307</a> <a href=poj\\1308.txt>1308</a> <a href=poj\\1309.txt>1309</a> <a href=poj\\1310.txt>1310</a> <a href=poj\\1311.txt>1311</a> <a href=poj\\1312.txt>1312</a> <a href=poj\\1313.txt>1313</a> <a href=poj\\1314.txt>1314</a> <a href=poj\\1315.txt>1315</a> <a href=poj\\1316.txt>1316</a> <a href=poj\\1317.txt>1317</a> <a href=poj\\1318.txt>1318</a> <a href=poj\\1319.txt>1319</a> <a href=poj\\1320.txt>1320</a> <a href=poj\\1321.txt>1321</a> <a href=poj\\1322.txt>1322</a> <a href=poj\\1323.txt>1323</a> <a href=poj\\1324.txt>1324</a> <a href=poj\\1325.txt>1325</a> <a href=poj\\1326.txt>1326</a> <a href=poj\\1327.txt>1327</a> <a href=poj\\1328.txt>1328</a> <a href=poj\\1329.txt>1329</a> <a href=poj\\1330.txt>1330</a> <a href=poj\\1331.txt>1331</a> <a href=poj\\1332.txt>1332</a> <a href=poj\\1333.txt>1333</a> <a href=poj\\1334.txt>1334</a> <a href=poj\\1335.txt>1335</a> <a href=poj\\1336.txt>1336</a> <a href=poj\\1337.txt>1337</a> <a href=poj\\1338.txt>1338</a> <a href=poj\\1339.txt>1339</a> <a href=poj\\1340.txt>1340</a> <a href=poj\\1341.txt>1341</a> <a href=poj\\1342.txt>1342</a> <a href=poj\\1343.txt>1343</a> <a href=poj\\1344.txt>1344</a> <a href=poj\\1345.txt>1345</a> <a href=poj\\1346.txt>1346</a> <a href=poj\\1347.txt>1347</a> <a href=poj\\1348.txt>1348</a> <a href=poj\\1349.txt>1349</a> <a href=poj\\1350.txt>1350</a> <a href=poj\\1351.txt>1351</a> <a href=poj\\1352.txt>1352</a> <a href=poj\\1353.txt>1353</a> <a href=poj\\1354.txt>1354</a> <a href=poj\\1355.txt>1355</a> <a href=poj\\1356.txt>1356</a> <a href=poj\\1357.txt>1357</a> <a href=poj\\1358.txt>1358</a> <a href=poj\\1359.txt>1359</a> <a href=poj\\1360.txt>1360</a> <a href=poj\\1361.txt>1361</a> <a href=poj\\1362.txt>1362</a> <a href=poj\\1363.txt>1363</a> <a href=poj\\1364.txt>1364</a> <a href=poj\\1365.txt>1365</a> <a href=poj\\1366.txt>1366</a> <a href=poj\\1367.txt>1367</a> <a href=poj\\1368.txt>1368</a> <a href=poj\\1369.txt>1369</a> <a href=poj\\1370.txt>1370</a> <a href=poj\\1371.txt>1371</a> <a href=poj\\1372.txt>1372</a> <a href=poj\\1373.txt>1373</a> <a href=poj\\1374.txt>1374</a> <a href=poj\\1375.txt>1375</a> <a href=poj\\1376.txt>1376</a> <a href=poj\\1377.txt>1377</a> <a href=poj\\1378.txt>1378</a> <a href=poj\\1379.txt>1379</a> <a href=poj\\1380.txt>1380</a> <a href=poj\\1381.txt>1381</a> <a href=poj\\1382.txt>1382</a> <a href=poj\\1383.txt>1383</a> <a href=poj\\1384.txt>1384</a> <a href=poj\\1385.txt>1385</a> <a href=poj\\1386.txt>1386</a> <a href=poj\\1387.txt>1387</a> <a href=poj\\1388.txt>1388</a> <a href=poj\\1389.txt>1389</a> <a href=poj\\1390.txt>1390</a> <a href=poj\\1391.txt>1391</a> <a href=poj\\1392.txt>1392</a> <a href=poj\\1393.txt>1393</a> <a href=poj\\1394.txt>1394</a> <a href=poj\\1395.txt>1395</a> <a href=poj\\1396.txt>1396</a> <a href=poj\\1397.txt>1397</a> <a href=poj\\1398.txt>1398</a> <a href=poj\\1399.txt>1399</a> <a href=poj\\1400.txt>1400</a> <a href=poj\\1401.txt>1401</a> <a href=poj\\1402.txt>1402</a> <a href=poj\\1403.txt>1403</a> <a href=poj\\1404.txt>1404</a> <a href=poj\\1405.txt>1405</a> <a href=poj\\1406.txt>1406</a> <a href=poj\\1407.txt>1407</a> <a href=poj\\1408.txt>1408</a> <a href=poj\\1409.txt>1409</a> <a href=poj\\1410.txt>1410</a> <a href=poj\\1411.txt>1411</a> <a href=poj\\1412.txt>1412</a> <a href=poj\\1413.txt>1413</a> <a href=poj\\1414.txt>1414</a> <a href=poj\\1415.txt>1415</a> <a href=poj\\1416.txt>1416</a> <a href=poj\\1417.txt>1417</a> <a href=poj\\1418.txt>1418</a> <a href=poj\\1419.txt>1419</a> <a href=poj\\1420.txt>1420</a> <a href=poj\\1421.txt>1421</a> <a href=poj\\1422.txt>1422</a> <a href=poj\\1423.txt>1423</a> <a href=poj\\1424.txt>1424</a> <a href=poj\\1425.txt>1425</a> <a href=poj\\1426.txt>1426</a> <a href=poj\\1427.txt>1427</a> <a href=poj\\1428.txt>1428</a> <a href=poj\\1429.txt>1429</a> <a href=poj\\1430.txt>1430</a> <a href=poj\\1431.txt>1431</a> <a href=poj\\1432.txt>1432</a> <a href=poj\\1433.txt>1433</a> <a href=poj\\1434.txt>1434</a> <a href=poj\\1435.txt>1435</a> <a href=poj\\1436.txt>1436</a> <a href=poj\\1437.txt>1437</a> <a href=poj\\1438.txt>1438</a> <a href=poj\\1439.txt>1439</a> <a href=poj\\1440.txt>1440</a> <a href=poj\\1441.txt>1441</a> <a href=poj\\1442.txt>1442</a> <a href=poj\\1443.txt>1443</a> <a href=poj\\1444.txt>1444</a> <a href=poj\\1445.txt>1445</a> <a href=poj\\1446.txt>1446</a> <a href=poj\\1447.txt>1447</a> <a href=poj\\1448.txt>1448</a> <a href=poj\\1449.txt>1449</a> <a href=poj\\1450.txt>1450</a> <a href=poj\\1451.txt>1451</a> <a href=poj\\1452.txt>1452</a> <a href=poj\\1453.txt>1453</a> <a href=poj\\1454.txt>1454</a> <a href=poj\\1455.txt>1455</a> <a href=poj\\1456.txt>1456</a> <a href=poj\\1457.txt>1457</a> <a href=poj\\1458.txt>1458</a> <a href=poj\\1459.txt>1459</a> <a href=poj\\1460.txt>1460</a> <a href=poj\\1461.txt>1461</a> <a href=poj\\1462.txt>1462</a> <a href=poj\\1463.txt>1463</a> <a href=poj\\1464.txt>1464</a> <a href=poj\\1465.txt>1465</a> <a href=poj\\1466.txt>1466</a> <a href=poj\\1467.txt>1467</a> <a href=poj\\1468.txt>1468</a> <a href=poj\\1469.txt>1469</a> <a href=poj\\1470.txt>1470</a> <a href=poj\\1471.txt>1471</a> <a href=poj\\1472.txt>1472</a> <a href=poj\\1473.txt>1473</a> <a href=poj\\1474.txt>1474</a> <a href=poj\\1475.txt>1475</a> <a href=poj\\1476.txt>1476</a> <a href=poj\\1477.txt>1477</a> <a href=poj\\1478.txt>1478</a> <a href=poj\\1479.txt>1479</a> <a href=poj\\1480.txt>1480</a> <a href=poj\\1481.txt>1481</a> <a href=poj\\1482.txt>1482</a> <a href=poj\\1483.txt>1483</a> <a href=poj\\1484.txt>1484</a> <a href=poj\\1485.txt>1485</a> <a href=poj\\1486.txt>1486</a> <a href=poj\\1487.txt>1487</a> <a href=poj\\1488.txt>1488</a> <a href=poj\\1489.txt>1489</a> <a href=poj\\1490.txt>1490</a> <a href=poj\\1491.txt>1491</a> <a href=poj\\1492.txt>1492</a> <a href=poj\\1493.txt>1493</a> <a href=poj\\1494.txt>1494</a> <a href=poj\\1495.txt>1495</a> <a href=poj\\1496.txt>1496</a> <a href=poj\\1497.txt>1497</a> <a href=poj\\1498.txt>1498</a> <a href=poj\\1499.txt>1499</a> <a href=poj\\1500.txt>1500</a> <a href=poj\\1501.txt>1501</a> <a href=poj\\1502.txt>1502</a> <a href=poj\\1503.txt>1503</a> <a href=poj\\1504.txt>1504</a> <a href=poj\\1505.txt>1505</a> <a href=poj\\1506.txt>1506</a> <a href=poj\\1507.txt>1507</a> <a href=poj\\1508.txt>1508</a> <a href=poj\\1509.txt>1509</a> <a href=poj\\1510.txt>1510</a> <a href=poj\\1511.txt>1511</a> <a href=poj\\1512.txt>1512</a> <a href=poj\\1513.txt>1513</a> <a href=poj\\1514.txt>1514</a> <a href=poj\\1515.txt>1515</a> <a href=poj\\1516.txt>1516</a> <a href=poj\\1517.txt>1517</a> <a href=poj\\1518.txt>1518</a> <a href=poj\\1519.txt>1519</a> <a href=poj\\1520.txt>1520</a> <a href=poj\\1521.txt>1521</a> <a href=poj\\1522.txt>1522</a> <a href=poj\\1523.txt>1523</a> <a href=poj\\1524.txt>1524</a> <a href=poj\\1525.txt>1525</a> <a href=poj\\1526.txt>1526</a> <a href=poj\\1527.txt>1527</a> <a href=poj\\1528.txt>1528</a> <a href=poj\\1529.txt>1529</a> <a href=poj\\1530.txt>1530</a> <a href=poj\\1531.txt>1531</a> <a href=poj\\1532.txt>1532</a> <a href=poj\\1533.txt>1533</a> <a href=poj\\1534.txt>1534</a> <a href=poj\\1535.txt>1535</a> <a href=poj\\1536.txt>1536</a> <a href=poj\\1537.txt>1537</a> <a href=poj\\1538.txt>1538</a> <a href=poj\\1539.txt>1539</a> <a href=poj\\1540.txt>1540</a> <a href=poj\\1541.txt>1541</a> <a href=poj\\1542.txt>1542</a> <a href=poj\\1543.txt>1543</a> <a href=poj\\1544.txt>1544</a> <a href=poj\\1545.txt>1545</a> <a href=poj\\1546.txt>1546</a> <a href=poj\\1547.txt>1547</a> <a href=poj\\1548.txt>1548</a> <a href=poj\\1549.txt>1549</a> <a href=poj\\1550.txt>1550</a> <a href=poj\\1551.txt>1551</a> <a href=poj\\1552.txt>1552</a> <a href=poj\\1553.txt>1553</a> <a href=poj\\1554.txt>1554</a> <a href=poj\\1555.txt>1555</a> <a href=poj\\1556.txt>1556</a> <a href=poj\\1557.txt>1557</a> <a href=poj\\1558.txt>1558</a> <a href=poj\\1559.txt>1559</a> <a href=poj\\1560.txt>1560</a> <a href=poj\\1561.txt>1561</a> <a href=poj\\1562.txt>1562</a> <a href=poj\\1563.txt>1563</a> <a href=poj\\1564.txt>1564</a> <a href=poj\\1565.txt>1565</a> <a href=poj\\1566.txt>1566</a> <a href=poj\\1567.txt>1567</a> <a href=poj\\1568.txt>1568</a> <a href=poj\\1569.txt>1569</a> <a href=poj\\1570.txt>1570</a> <a href=poj\\1571.txt>1571</a> <a href=poj\\1572.txt>1572</a> <a href=poj\\1573.txt>1573</a> <a href=poj\\1574.txt>1574</a> <a href=poj\\1575.txt>1575</a> <a href=poj\\1576.txt>1576</a> <a href=poj\\1577.txt>1577</a> <a href=poj\\1578.txt>1578</a> <a href=poj\\1579.txt>1579</a> <a href=poj\\1580.txt>1580</a> <a href=poj\\1581.txt>1581</a> <a href=poj\\1582.txt>1582</a> <a href=poj\\1583.txt>1583</a> <a href=poj\\1584.txt>1584</a> <a href=poj\\1585.txt>1585</a> <a href=poj\\1586.txt>1586</a> <a href=poj\\1587.txt>1587</a> <a href=poj\\1588.txt>1588</a> <a href=poj\\1589.txt>1589</a> <a href=poj\\1590.txt>1590</a> <a href=poj\\1591.txt>1591</a> <a href=poj\\1592.txt>1592</a> <a href=poj\\1593.txt>1593</a> <a href=poj\\1594.txt>1594</a> <a href=poj\\1595.txt>1595</a> <a href=poj\\1596.txt>1596</a> <a href=poj\\1597.txt>1597</a> <a href=poj\\1598.txt>1598</a> <a href=poj\\1599.txt>1599</a> <a href=poj\\1600.txt>1600</a> <a href=poj\\1601.txt>1601</a> <a href=poj\\1602.txt>1602</a> <a href=poj\\1603.txt>1603</a> <a href=poj\\1604.txt>1604</a> <a href=poj\\1605.txt>1605</a> <a href=poj\\1606.txt>1606</a> <a href=poj\\1607.txt>1607</a> <a href=poj\\1608.txt>1608</a> <a href=poj\\1609.txt>1609</a> <a href=poj\\1610.txt>1610</a> <a href=poj\\1611.txt>1611</a> <a href=poj\\1612.txt>1612</a> <a href=poj\\1613.txt>1613</a> <a href=poj\\1614.txt>1614</a> <a href=poj\\1615.txt>1615</a> <a href=poj\\1616.txt>1616</a> <a href=poj\\1617.txt>1617</a> <a href=poj\\1618.txt>1618</a> <a href=poj\\1619.txt>1619</a> <a href=poj\\1620.txt>1620</a> <a href=poj\\1621.txt>1621</a> <a href=poj\\1622.txt>1622</a> <a href=poj\\1623.txt>1623</a> <a href=poj\\1624.txt>1624</a> <a href=poj\\1625.txt>1625</a> <a href=poj\\1626.txt>1626</a> <a href=poj\\1627.txt>1627</a> <a href=poj\\1628.txt>1628</a> <a href=poj\\1629.txt>1629</a> <a href=poj\\1630.txt>1630</a> <a href=poj\\1631.txt>1631</a> <a href=poj\\1632.txt>1632</a> <a href=poj\\1633.txt>1633</a> <a href=poj\\1634.txt>1634</a> <a href=poj\\1635.txt>1635</a> <a href=poj\\1636.txt>1636</a> <a href=poj\\1637.txt>1637</a> <a href=poj\\1638.txt>1638</a> <a href=poj\\1639.txt>1639</a> <a href=poj\\1640.txt>1640</a> <a href=poj\\1641.txt>1641</a> <a href=poj\\1642.txt>1642</a> <a href=poj\\1643.txt>1643</a> <a href=poj\\1644.txt>1644</a> <a href=poj\\1645.txt>1645</a> <a href=poj\\1646.txt>1646</a> <a href=poj\\1647.txt>1647</a> <a href=poj\\1648.txt>1648</a> <a href=poj\\1649.txt>1649</a> <a href=poj\\1650.txt>1650</a> <a href=poj\\1651.txt>1651</a> <a href=poj\\1652.txt>1652</a> <a href=poj\\1653.txt>1653</a> <a href=poj\\1654.txt>1654</a> <a href=poj\\1655.txt>1655</a> <a href=poj\\1656.txt>1656</a> <a href=poj\\1657.txt>1657</a> <a href=poj\\1658.txt>1658</a> <a href=poj\\1659.txt>1659</a> <a href=poj\\1660.txt>1660</a> <a href=poj\\1661.txt>1661</a> <a href=poj\\1662.txt>1662</a> <a href=poj\\1663.txt>1663</a> <a href=poj\\1664.txt>1664</a> <a href=poj\\1665.txt>1665</a> <a href=poj\\1666.txt>1666</a> <a href=poj\\1667.txt>1667</a> <a href=poj\\1668.txt>1668</a> <a href=poj\\1669.txt>1669</a> <a href=poj\\1670.txt>1670</a> <a href=poj\\1671.txt>1671</a> <a href=poj\\1672.txt>1672</a> <a href=poj\\1673.txt>1673</a> <a href=poj\\1674.txt>1674</a> <a href=poj\\1675.txt>1675</a> <a href=poj\\1676.txt>1676</a> <a href=poj\\1677.txt>1677</a> <a href=poj\\1678.txt>1678</a> <a href=poj\\1679.txt>1679</a> <a href=poj\\1680.txt>1680</a> <a href=poj\\1681.txt>1681</a> <a href=poj\\1682.txt>1682</a> <a href=poj\\1683.txt>1683</a> <a href=poj\\1684.txt>1684</a> <a href=poj\\1685.txt>1685</a> <a href=poj\\1686.txt>1686</a> <a href=poj\\1687.txt>1687</a> <a href=poj\\1688.txt>1688</a> <a href=poj\\1689.txt>1689</a> <a href=poj\\1690.txt>1690</a> <a href=poj\\1691.txt>1691</a> <a href=poj\\1692.txt>1692</a> <a href=poj\\1693.txt>1693</a> <a href=poj\\1694.txt>1694</a> <a href=poj\\1695.txt>1695</a> <a href=poj\\1696.txt>1696</a> <a href=poj\\1697.txt>1697</a> <a href=poj\\1698.txt>1698</a> <a href=poj\\1699.txt>1699</a> <a href=poj\\1700.txt>1700</a> <a href=poj\\1701.txt>1701</a> <a href=poj\\1702.txt>1702</a> <a href=poj\\1703.txt>1703</a> <a href=poj\\1704.txt>1704</a> <a href=poj\\1705.txt>1705</a> <a href=poj\\1706.txt>1706</a> <a href=poj\\1707.txt>1707</a> <a href=poj\\1708.txt>1708</a> <a href=poj\\1709.txt>1709</a> <a href=poj\\1710.txt>1710</a> <a href=poj\\1711.txt>1711</a> <a href=poj\\1712.txt>1712</a> <a href=poj\\1713.txt>1713</a> <a href=poj\\1714.txt>1714</a> <a href=poj\\1715.txt>1715</a> <a href=poj\\1716.txt>1716</a> <a href=poj\\1717.txt>1717</a> <a href=poj\\1718.txt>1718</a> <a href=poj\\1719.txt>1719</a> <a href=poj\\1720.txt>1720</a> <a href=poj\\1721.txt>1721</a> <a href=poj\\1722.txt>1722</a> <a href=poj\\1723.txt>1723</a> <a href=poj\\1724.txt>1724</a> <a href=poj\\1725.txt>1725</a> <a href=poj\\1726.txt>1726</a> <a href=poj\\1727.txt>1727</a> <a href=poj\\1728.txt>1728</a> <a href=poj\\1729.txt>1729</a> <a href=poj\\1730.txt>1730</a> <a href=poj\\1731.txt>1731</a> <a href=poj\\1732.txt>1732</a> <a href=poj\\1733.txt>1733</a> <a href=poj\\1734.txt>1734</a> <a href=poj\\1735.txt>1735</a> <a href=poj\\1736.txt>1736</a> <a href=poj\\1737.txt>1737</a> <a href=poj\\1738.txt>1738</a> <a href=poj\\1739.txt>1739</a> <a href=poj\\1740.txt>1740</a> <a href=poj\\1741.txt>1741</a> <a href=poj\\1742.txt>1742</a> <a href=poj\\1743.txt>1743</a> <a href=poj\\1744.txt>1744</a> <a href=poj\\1745.txt>1745</a> <a href=poj\\1746.txt>1746</a> <a href=poj\\1747.txt>1747</a> <a href=poj\\1748.txt>1748</a> <a href=poj\\1749.txt>1749</a> <a href=poj\\1750.txt>1750</a> <a href=poj\\1751.txt>1751</a> <a href=poj\\1752.txt>1752</a> <a href=poj\\1753.txt>1753</a> <a href=poj\\1754.txt>1754</a> <a href=poj\\1755.txt>1755</a> <a href=poj\\1756.txt>1756</a> <a href=poj\\1757.txt>1757</a> <a href=poj\\1758.txt>1758</a> <a href=poj\\1759.txt>1759</a> <a href=poj\\1760.txt>1760</a> <a href=poj\\1761.txt>1761</a> <a href=poj\\1762.txt>1762</a> <a href=poj\\1763.txt>1763</a> <a href=poj\\1764.txt>1764</a> <a href=poj\\1765.txt>1765</a> <a href=poj\\1766.txt>1766</a> <a href=poj\\1767.txt>1767</a> <a href=poj\\1768.txt>1768</a> <a href=poj\\1769.txt>1769</a> <a href=poj\\1770.txt>1770</a> <a href=poj\\1771.txt>1771</a> <a href=poj\\1772.txt>1772</a> <a href=poj\\1773.txt>1773</a> <a href=poj\\1774.txt>1774</a> <a href=poj\\1775.txt>1775</a> <a href=poj\\1776.txt>1776</a> <a href=poj\\1777.txt>1777</a> <a href=poj\\1778.txt>1778</a> <a href=poj\\1779.txt>1779</a> <a href=poj\\1780.txt>1780</a> <a href=poj\\1781.txt>1781</a> <a href=poj\\1782.txt>1782</a> <a href=poj\\1783.txt>1783</a> <a href=poj\\1784.txt>1784</a> <a href=poj\\1785.txt>1785</a> <a href=poj\\1786.txt>1786</a> <a href=poj\\1787.txt>1787</a> <a href=poj\\1788.txt>1788</a> <a href=poj\\1789.txt>1789</a> <a href=poj\\1790.txt>1790</a> <a href=poj\\1791.txt>1791</a> <a href=poj\\1792.txt>1792</a> <a href=poj\\1793.txt>1793</a> <a href=poj\\1794.txt>1794</a> <a href=poj\\1795.txt>1795</a> <a href=poj\\1796.txt>1796</a> <a href=poj\\1797.txt>1797</a> <a href=poj\\1798.txt>1798</a> <a href=poj\\1799.txt>1799</a> <a href=poj\\1800.txt>1800</a> <a href=poj\\1801.txt>1801</a> <a href=poj\\1802.txt>1802</a> <a href=poj\\1803.txt>1803</a> <a href=poj\\1804.txt>1804</a> <a href=poj\\1805.txt>1805</a> <a href=poj\\1806.txt>1806</a> <a href=poj\\1807.txt>1807</a> <a href=poj\\1808.txt>1808</a> <a href=poj\\1809.txt>1809</a> <a href=poj\\1810.txt>1810</a> <a href=poj\\1811.txt>1811</a> <a href=poj\\1812.txt>1812</a> <a href=poj\\1813.txt>1813</a> <a href=poj\\1814.txt>1814</a> <a href=poj\\1815.txt>1815</a> <a href=poj\\1816.txt>1816</a> <a href=poj\\1817.txt>1817</a> <a href=poj\\1818.txt>1818</a> <a href=poj\\1819.txt>1819</a> <a href=poj\\1820.txt>1820</a> <a href=poj\\1821.txt>1821</a> <a href=poj\\1822.txt>1822</a> <a href=poj\\1823.txt>1823</a> <a href=poj\\1824.txt>1824</a> <a href=poj\\1825.txt>1825</a> <a href=poj\\1826.txt>1826</a> <a href=poj\\1827.txt>1827</a> <a href=poj\\1828.txt>1828</a> <a href=poj\\1829.txt>1829</a> <a href=poj\\1830.txt>1830</a> <a href=poj\\1831.txt>1831</a> <a href=poj\\1832.txt>1832</a> <a href=poj\\1833.txt>1833</a> <a href=poj\\1834.txt>1834</a> <a href=poj\\1835.txt>1835</a> <a href=poj\\1836.txt>1836</a> <a href=poj\\1837.txt>1837</a> <a href=poj\\1838.txt>1838</a> <a href=poj\\1839.txt>1839</a> <a href=poj\\1840.txt>1840</a> <a href=poj\\1841.txt>1841</a> <a href=poj\\1842.txt>1842</a> <a href=poj\\1843.txt>1843</a> <a href=poj\\1844.txt>1844</a> <a href=poj\\1845.txt>1845</a> <a href=poj\\1846.txt>1846</a> <a href=poj\\1847.txt>1847</a> <a href=poj\\1848.txt>1848</a> <a href=poj\\1849.txt>1849</a> <a href=poj\\1850.txt>1850</a> <a href=poj\\1851.txt>1851</a> <a href=poj\\1852.txt>1852</a> <a href=poj\\1853.txt>1853</a> <a href=poj\\1854.txt>1854</a> <a href=poj\\1855.txt>1855</a> <a href=poj\\1856.txt>1856</a> <a href=poj\\1857.txt>1857</a> <a href=poj\\1858.txt>1858</a> <a href=poj\\1859.txt>1859</a> <a href=poj\\1860.txt>1860</a> <a href=poj\\1861.txt>1861</a> <a href=poj\\1862.txt>1862</a> <a href=poj\\1863.txt>1863</a> <a href=poj\\1864.txt>1864</a> <a href=poj\\1865.txt>1865</a> <a href=poj\\1866.txt>1866</a> <a href=poj\\1867.txt>1867</a> <a href=poj\\1868.txt>1868</a> <a href=poj\\1869.txt>1869</a> <a href=poj\\1870.txt>1870</a> <a href=poj\\1871.txt>1871</a> <a href=poj\\1872.txt>1872</a> <a href=poj\\1873.txt>1873</a> <a href=poj\\1874.txt>1874</a> <a href=poj\\1875.txt>1875</a> <a href=poj\\1876.txt>1876</a> <a href=poj\\1877.txt>1877</a> <a href=poj\\1878.txt>1878</a> <a href=poj\\1879.txt>1879</a> <a href=poj\\1880.txt>1880</a> <a href=poj\\1881.txt>1881</a> <a href=poj\\1882.txt>1882</a> <a href=poj\\1883.txt>1883</a> <a href=poj\\1884.txt>1884</a> <a href=poj\\1885.txt>1885</a> <a href=poj\\1886.txt>1886</a> <a href=poj\\1887.txt>1887</a> <a href=poj\\1888.txt>1888</a> <a href=poj\\1889.txt>1889</a> <a href=poj\\1890.txt>1890</a> <a href=poj\\1891.txt>1891</a> <a href=poj\\1892.txt>1892</a> <a href=poj\\1893.txt>1893</a> <a href=poj\\1894.txt>1894</a> <a href=poj\\1895.txt>1895</a> <a href=poj\\1896.txt>1896</a> <a href=poj\\1897.txt>1897</a> <a href=poj\\1898.txt>1898</a> <a href=poj\\1899.txt>1899</a> <a href=poj\\1900.txt>1900</a> <a href=poj\\1901.txt>1901</a> <a href=poj\\1902.txt>1902</a> <a href=poj\\1903.txt>1903</a> <a href=poj\\1904.txt>1904</a> <a href=poj\\1905.txt>1905</a> <a href=poj\\1906.txt>1906</a> <a href=poj\\1907.txt>1907</a> <a href=poj\\1908.txt>1908</a> <a href=poj\\1909.txt>1909</a> <a href=poj\\1910.txt>1910</a> <a href=poj\\1911.txt>1911</a> <a href=poj\\1912.txt>1912</a> <a href=poj\\1913.txt>1913</a> <a href=poj\\1914.txt>1914</a> <a href=poj\\1915.txt>1915</a> <a href=poj\\1916.txt>1916</a> <a href=poj\\1917.txt>1917</a> <a href=poj\\1918.txt>1918</a> <a href=poj\\1919.txt>1919</a> <a href=poj\\1920.txt>1920</a> <a href=poj\\1921.txt>1921</a> <a href=poj\\1922.txt>1922</a> <a href=poj\\1923.txt>1923</a> <a href=poj\\1924.txt>1924</a> <a href=poj\\1925.txt>1925</a> <a href=poj\\1926.txt>1926</a> <a href=poj\\1927.txt>1927</a> <a href=poj\\1928.txt>1928</a> <a href=poj\\1929.txt>1929</a> <a href=poj\\1930.txt>1930</a> <a href=poj\\1931.txt>1931</a> <a href=poj\\1932.txt>1932</a> <a href=poj\\1933.txt>1933</a> <a href=poj\\1934.txt>1934</a> <a href=poj\\1935.txt>1935</a> <a href=poj\\1936.txt>1936</a> <a href=poj\\1937.txt>1937</a> <a href=poj\\1938.txt>1938</a> <a href=poj\\1939.txt>1939</a> <a href=poj\\1940.txt>1940</a> <a href=poj\\1941.txt>1941</a> <a href=poj\\1942.txt>1942</a> <a href=poj\\1943.txt>1943</a> <a href=poj\\1944.txt>1944</a> <a href=poj\\1945.txt>1945</a> <a href=poj\\1946.txt>1946</a> <a href=poj\\1947.txt>1947</a> <a href=poj\\1948.txt>1948</a> <a href=poj\\1949.txt>1949</a> <a href=poj\\1950.txt>1950</a> <a href=poj\\1951.txt>1951</a> <a href=poj\\1952.txt>1952</a> <a href=poj\\1953.txt>1953</a> <a href=poj\\1954.txt>1954</a> <a href=poj\\1955.txt>1955</a> <a href=poj\\1956.txt>1956</a> <a href=poj\\1957.txt>1957</a> <a href=poj\\1958.txt>1958</a> <a href=poj\\1959.txt>1959</a> <a href=poj\\1960.txt>1960</a> <a href=poj\\1961.txt>1961</a> <a href=poj\\1962.txt>1962</a> <a href=poj\\1963.txt>1963</a> <a href=poj\\1964.txt>1964</a> <a href=poj\\1965.txt>1965</a> <a href=poj\\1966.txt>1966</a> <a href=poj\\1967.txt>1967</a> <a href=poj\\1968.txt>1968</a> <a href=poj\\1969.txt>1969</a> <a href=poj\\1970.txt>1970</a> <a href=poj\\1971.txt>1971</a> <a href=poj\\1972.txt>1972</a> <a href=poj\\1973.txt>1973</a> <a href=poj\\1974.txt>1974</a> <a href=poj\\1975.txt>1975</a> <a href=poj\\1976.txt>1976</a> <a href=poj\\1977.txt>1977</a> <a href=poj\\1978.txt>1978</a> <a href=poj\\1979.txt>1979</a> <a href=poj\\1980.txt>1980</a> <a href=poj\\1981.txt>1981</a> <a href=poj\\1982.txt>1982</a> <a href=poj\\1983.txt>1983</a> <a href=poj\\1984.txt>1984</a> <a href=poj\\1985.txt>1985</a> <a href=poj\\1986.txt>1986</a> <a href=poj\\1987.txt>1987</a> <a href=poj\\1988.txt>1988</a> <a href=poj\\1989.txt>1989</a> <a href=poj\\1990.txt>1990</a> <a href=poj\\1991.txt>1991</a> <a href=poj\\1992.txt>1992</a> <a href=poj\\1993.txt>1993</a> <a href=poj\\1994.txt>1994</a> <a href=poj\\1995.txt>1995</a> <a href=poj\\1996.txt>1996</a> <a href=poj\\1997.txt>1997</a> <a href=poj\\1998.txt>1998</a> <a href=poj\\1999.txt>1999</a> <a href=poj\\2000.txt>2000</a> <a href=poj\\2001.txt>2001</a> <a href=poj\\2002.txt>2002</a> <a href=poj\\2003.txt>2003</a> <a href=poj\\2004.txt>2004</a> <a href=poj\\2005.txt>2005</a> <a href=poj\\2006.txt>2006</a> <a href=poj\\2007.txt>2007</a> <a href=poj\\2008.txt>2008</a> <a href=poj\\2009.txt>2009</a> <a href=poj\\2010.txt>2010</a> <a href=poj\\2011.txt>2011</a> <a href=poj\\2012.txt>2012</a> <a href=poj\\2013.txt>2013</a> <a href=poj\\2014.txt>2014</a> <a href=poj\\2015.txt>2015</a> <a href=poj\\2016.txt>2016</a> <a href=poj\\2017.txt>2017</a> <a href=poj\\2018.txt>2018</a> <a href=poj\\2019.txt>2019</a> <a href=poj\\2020.txt>2020</a> <a href=poj\\2021.txt>2021</a> <a href=poj\\2022.txt>2022</a> <a href=poj\\2023.txt>2023</a> <a href=poj\\2024.txt>2024</a> <a href=poj\\2025.txt>2025</a> <a href=poj\\2026.txt>2026</a> <a href=poj\\2027.txt>2027</a> <a href=poj\\2028.txt>2028</a> <a href=poj\\2029.txt>2029</a> <a href=poj\\2030.txt>2030</a> <a href=poj\\2031.txt>2031</a> <a href=poj\\2032.txt>2032</a> <a href=poj\\2033.txt>2033</a> <a href=poj\\2034.txt>2034</a> <a href=poj\\2035.txt>2035</a> <a href=poj\\2036.txt>2036</a> <a href=poj\\2037.txt>2037</a> <a href=poj\\2038.txt>2038</a> <a href=poj\\2039.txt>2039</a> <a href=poj\\2040.txt>2040</a> <a href=poj\\2041.txt>2041</a> <a href=poj\\2042.txt>2042</a> <a href=poj\\2043.txt>2043</a> <a href=poj\\2044.txt>2044</a> <a href=poj\\2045.txt>2045</a> <a href=poj\\2046.txt>2046</a> <a href=poj\\2047.txt>2047</a> <a href=poj\\2048.txt>2048</a> <a href=poj\\2049.txt>2049</a> <a href=poj\\2050.txt>2050</a> <a href=poj\\2051.txt>2051</a> <a href=poj\\2052.txt>2052</a> <a href=poj\\2053.txt>2053</a> <a href=poj\\2054.txt>2054</a> <a href=poj\\2055.txt>2055</a> <a href=poj\\2056.txt>2056</a> <a href=poj\\2057.txt>2057</a> <a href=poj\\2058.txt>2058</a> <a href=poj\\2059.txt>2059</a> <a href=poj\\2060.txt>2060</a> <a href=poj\\2061.txt>2061</a> <a href=poj\\2062.txt>2062</a> <a href=poj\\2063.txt>2063</a> <a href=poj\\2064.txt>2064</a> <a href=poj\\2065.txt>2065</a> <a href=poj\\2066.txt>2066</a> <a href=poj\\2067.txt>2067</a> <a href=poj\\2068.txt>2068</a> <a href=poj\\2069.txt>2069</a> <a href=poj\\2070.txt>2070</a> <a href=poj\\2071.txt>2071</a> <a href=poj\\2072.txt>2072</a> <a href=poj\\2073.txt>2073</a> <a href=poj\\2074.txt>2074</a> <a href=poj\\2075.txt>2075</a> <a href=poj\\2076.txt>2076</a> <a href=poj\\2077.txt>2077</a> <a href=poj\\2078.txt>2078</a> <a href=poj\\2079.txt>2079</a> <a href=poj\\2080.txt>2080</a> <a href=poj\\2081.txt>2081</a> <a href=poj\\2082.txt>2082</a> <a href=poj\\2083.txt>2083</a> <a href=poj\\2084.txt>2084</a> <a href=poj\\2085.txt>2085</a> <a href=poj\\2086.txt>2086</a> <a href=poj\\2087.txt>2087</a> <a href=poj\\2088.txt>2088</a> <a href=poj\\2089.txt>2089</a> <a href=poj\\2090.txt>2090</a> <a href=poj\\2091.txt>2091</a> <a href=poj\\2092.txt>2092</a> <a href=poj\\2093.txt>2093</a> <a href=poj\\2094.txt>2094</a> <a href=poj\\2095.txt>2095</a> <a href=poj\\2096.txt>2096</a> <a href=poj\\2097.txt>2097</a> <a href=poj\\2098.txt>2098</a> <a href=poj\\2099.txt>2099</a> <a href=poj\\2100.txt>2100</a> <a href=poj\\2101.txt>2101</a> <a href=poj\\2102.txt>2102</a> <a href=poj\\2103.txt>2103</a> <a href=poj\\2104.txt>2104</a> <a href=poj\\2105.txt>2105</a> <a href=poj\\2106.txt>2106</a> <a href=poj\\2107.txt>2107</a> <a href=poj\\2108.txt>2108</a> <a href=poj\\2109.txt>2109</a> <a href=poj\\2110.txt>2110</a> <a href=poj\\2111.txt>2111</a> <a href=poj\\2112.txt>2112</a> <a href=poj\\2113.txt>2113</a> <a href=poj\\2114.txt>2114</a> <a href=poj\\2115.txt>2115</a> <a href=poj\\2116.txt>2116</a> <a href=poj\\2117.txt>2117</a> <a href=poj\\2118.txt>2118</a> <a href=poj\\2119.txt>2119</a> <a href=poj\\2120.txt>2120</a> <a href=poj\\2121.txt>2121</a> <a href=poj\\2122.txt>2122</a> <a href=poj\\2123.txt>2123</a> <a href=poj\\2124.txt>2124</a> <a href=poj\\2125.txt>2125</a> <a href=poj\\2126.txt>2126</a> <a href=poj\\2127.txt>2127</a> <a href=poj\\2128.txt>2128</a> <a href=poj\\2129.txt>2129</a> <a href=poj\\2130.txt>2130</a> <a href=poj\\2131.txt>2131</a> <a href=poj\\2132.txt>2132</a> <a href=poj\\2133.txt>2133</a> <a href=poj\\2134.txt>2134</a> <a href=poj\\2135.txt>2135</a> <a href=poj\\2136.txt>2136</a> <a href=poj\\2137.txt>2137</a> <a href=poj\\2138.txt>2138</a> <a href=poj\\2139.txt>2139</a> <a href=poj\\2140.txt>2140</a> <a href=poj\\2141.txt>2141</a> <a href=poj\\2142.txt>2142</a> <a href=poj\\2143.txt>2143</a> <a href=poj\\2144.txt>2144</a> <a href=poj\\2145.txt>2145</a> <a href=poj\\2146.txt>2146</a> <a href=poj\\2147.txt>2147</a> <a href=poj\\2148.txt>2148</a> <a href=poj\\2149.txt>2149</a> <a href=poj\\2150.txt>2150</a> <a href=poj\\2151.txt>2151</a> <a href=poj\\2152.txt>2152</a> <a href=poj\\2153.txt>2153</a> <a href=poj\\2154.txt>2154</a> <a href=poj\\2155.txt>2155</a> <a href=poj\\2156.txt>2156</a> <a href=poj\\2157.txt>2157</a> <a href=poj\\2158.txt>2158</a> <a href=poj\\2159.txt>2159</a> <a href=poj\\2160.txt>2160</a> <a href=poj\\2161.txt>2161</a> <a href=poj\\2162.txt>2162</a> <a href=poj\\2163.txt>2163</a> <a href=poj\\2164.txt>2164</a> <a href=poj\\2165.txt>2165</a> <a href=poj\\2166.txt>2166</a> <a href=poj\\2167.txt>2167</a> <a href=poj\\2168.txt>2168</a> <a href=poj\\2169.txt>2169</a> <a href=poj\\2170.txt>2170</a> <a href=poj\\2171.txt>2171</a> <a href=poj\\2172.txt>2172</a> <a href=poj\\2173.txt>2173</a> <a href=poj\\2174.txt>2174</a> <a href=poj\\2175.txt>2175</a> <a href=poj\\2176.txt>2176</a> <a href=poj\\2177.txt>2177</a> <a href=poj\\2178.txt>2178</a> <a href=poj\\2179.txt>2179</a> <a href=poj\\2180.txt>2180</a> <a href=poj\\2181.txt>2181</a> <a href=poj\\2182.txt>2182</a> <a href=poj\\2183.txt>2183</a> <a href=poj\\2184.txt>2184</a> <a href=poj\\2185.txt>2185</a> <a href=poj\\2186.txt>2186</a> <a href=poj\\2187.txt>2187</a> <a href=poj\\2188.txt>2188</a> <a href=poj\\2189.txt>2189</a> <a href=poj\\2190.txt>2190</a> <a href=poj\\2191.txt>2191</a> <a href=poj\\2192.txt>2192</a> <a href=poj\\2193.txt>2193</a> <a href=poj\\2194.txt>2194</a> <a href=poj\\2195.txt>2195</a> <a href=poj\\2196.txt>2196</a> <a href=poj\\2197.txt>2197</a> <a href=poj\\2198.txt>2198</a> <a href=poj\\2199.txt>2199</a> <a href=poj\\2200.txt>2200</a> <a href=poj\\2201.txt>2201</a> <a href=poj\\2202.txt>2202</a> <a href=poj\\2203.txt>2203</a> <a href=poj\\2204.txt>2204</a> <a href=poj\\2205.txt>2205</a> <a href=poj\\2206.txt>2206</a> <a href=poj\\2207.txt>2207</a> <a href=poj\\2208.txt>2208</a> <a href=poj\\2209.txt>2209</a> <a href=poj\\2210.txt>2210</a> <a href=poj\\2211.txt>2211</a> <a href=poj\\2212.txt>2212</a> <a href=poj\\2213.txt>2213</a> <a href=poj\\2214.txt>2214</a> <a href=poj\\2215.txt>2215</a> <a href=poj\\2216.txt>2216</a> <a href=poj\\2217.txt>2217</a> <a href=poj\\2218.txt>2218</a> <a href=poj\\2219.txt>2219</a> <a href=poj\\2220.txt>2220</a> <a href=poj\\2221.txt>2221</a> <a href=poj\\2222.txt>2222</a> <a href=poj\\2223.txt>2223</a> <a href=poj\\2224.txt>2224</a> <a href=poj\\2225.txt>2225</a> <a href=poj\\2226.txt>2226</a> <a href=poj\\2227.txt>2227</a> <a href=poj\\2228.txt>2228</a> <a href=poj\\2229.txt>2229</a> <a href=poj\\2230.txt>2230</a> <a href=poj\\2231.txt>2231</a> <a href=poj\\2232.txt>2232</a> <a href=poj\\2233.txt>2233</a> <a href=poj\\2234.txt>2234</a> <a href=poj\\2235.txt>2235</a> <a href=poj\\2236.txt>2236</a> <a href=poj\\2237.txt>2237</a> <a href=poj\\2238.txt>2238</a> <a href=poj\\2239.txt>2239</a> <a href=poj\\2240.txt>2240</a> <a href=poj\\2241.txt>2241</a> <a href=poj\\2242.txt>2242</a> <a href=poj\\2243.txt>2243</a> <a href=poj\\2244.txt>2244</a> <a href=poj\\2245.txt>2245</a> <a href=poj\\2246.txt>2246</a> <a href=poj\\2247.txt>2247</a> <a href=poj\\2248.txt>2248</a> <a href=poj\\2249.txt>2249</a> <a href=poj\\2250.txt>2250</a> <a href=poj\\2251.txt>2251</a> <a href=poj\\2252.txt>2252</a> <a href=poj\\2253.txt>2253</a> <a href=poj\\2254.txt>2254</a> <a href=poj\\2255.txt>2255</a> <a href=poj\\2256.txt>2256</a> <a href=poj\\2257.txt>2257</a> <a href=poj\\2258.txt>2258</a> <a href=poj\\2259.txt>2259</a> <a href=poj\\2260.txt>2260</a> <a href=poj\\2261.txt>2261</a> <a href=poj\\2262.txt>2262</a> <a href=poj\\2263.txt>2263</a> <a href=poj\\2264.txt>2264</a> <a href=poj\\2265.txt>2265</a> <a href=poj\\2266.txt>2266</a> <a href=poj\\2267.txt>2267</a> <a href=poj\\2268.txt>2268</a> <a href=poj\\2269.txt>2269</a> <a href=poj\\2270.txt>2270</a> <a href=poj\\2271.txt>2271</a> <a href=poj\\2272.txt>2272</a> <a href=poj\\2273.txt>2273</a> <a href=poj\\2274.txt>2274</a> <a href=poj\\2275.txt>2275</a> <a href=poj\\2276.txt>2276</a> <a href=poj\\2277.txt>2277</a> <a href=poj\\2278.txt>2278</a> <a href=poj\\2279.txt>2279</a> <a href=poj\\2280.txt>2280</a> <a href=poj\\2281.txt>2281</a> <a href=poj\\2282.txt>2282</a> <a href=poj\\2283.txt>2283</a> <a href=poj\\2284.txt>2284</a> <a href=poj\\2285.txt>2285</a> <a href=poj\\2286.txt>2286</a> <a href=poj\\2287.txt>2287</a> <a href=poj\\2288.txt>2288</a> <a href=poj\\2289.txt>2289</a> <a href=poj\\2290.txt>2290</a> <a href=poj\\2291.txt>2291</a> <a href=poj\\2292.txt>2292</a> <a href=poj\\2293.txt>2293</a> <a href=poj\\2294.txt>2294</a> <a href=poj\\2295.txt>2295</a> <a href=poj\\2296.txt>2296</a> <a href=poj\\2297.txt>2297</a> <a href=poj\\2298.txt>2298</a> <a href=poj\\2299.txt>2299</a> <a href=poj\\2300.txt>2300</a> <a href=poj\\2301.txt>2301</a> <a href=poj\\2302.txt>2302</a> <a href=poj\\2303.txt>2303</a> <a href=poj\\2304.txt>2304</a> <a href=poj\\2305.txt>2305</a> <a href=poj\\2306.txt>2306</a> <a href=poj\\2307.txt>2307</a> <a href=poj\\2308.txt>2308</a> <a href=poj\\2309.txt>2309</a> <a href=poj\\2310.txt>2310</a> <a href=poj\\2311.txt>2311</a> <a href=poj\\2312.txt>2312</a> <a href=poj\\2313.txt>2313</a> <a href=poj\\2314.txt>2314</a> <a href=poj\\2315.txt>2315</a> <a href=poj\\2316.txt>2316</a> <a href=poj\\2317.txt>2317</a> <a href=poj\\2318.txt>2318</a> <a href=poj\\2319.txt>2319</a> <a href=poj\\2320.txt>2320</a> <a href=poj\\2321.txt>2321</a> <a href=poj\\2322.txt>2322</a> <a href=poj\\2323.txt>2323</a> <a href=poj\\2324.txt>2324</a> <a href=poj\\2325.txt>2325</a> <a href=poj\\2326.txt>2326</a> <a href=poj\\2327.txt>2327</a> <a href=poj\\2328.txt>2328</a> <a href=poj\\2329.txt>2329</a> <a href=poj\\2330.txt>2330</a> <a href=poj\\2331.txt>2331</a> <a href=poj\\2332.txt>2332</a> <a href=poj\\2333.txt>2333</a> <a href=poj\\2334.txt>2334</a> <a href=poj\\2335.txt>2335</a> <a href=poj\\2336.txt>2336</a> <a href=poj\\2337.txt>2337</a> <a href=poj\\2338.txt>2338</a> <a href=poj\\2339.txt>2339</a> <a href=poj\\2340.txt>2340</a> <a href=poj\\2341.txt>2341</a> <a href=poj\\2342.txt>2342</a> <a href=poj\\2343.txt>2343</a> <a href=poj\\2344.txt>2344</a> <a href=poj\\2345.txt>2345</a> <a href=poj\\2346.txt>2346</a> <a href=poj\\2347.txt>2347</a> <a href=poj\\2348.txt>2348</a> <a href=poj\\2349.txt>2349</a> <a href=poj\\2350.txt>2350</a> <a href=poj\\2351.txt>2351</a> <a href=poj\\2352.txt>2352</a> <a href=poj\\2353.txt>2353</a> <a href=poj\\2354.txt>2354</a> <a href=poj\\2355.txt>2355</a> <a href=poj\\2356.txt>2356</a> <a href=poj\\2357.txt>2357</a> <a href=poj\\2358.txt>2358</a> <a href=poj\\2359.txt>2359</a> <a href=poj\\2360.txt>2360</a> <a href=poj\\2361.txt>2361</a> <a href=poj\\2362.txt>2362</a> <a href=poj\\2363.txt>2363</a> <a href=poj\\2364.txt>2364</a> <a href=poj\\2365.txt>2365</a> <a href=poj\\2366.txt>2366</a> <a href=poj\\2367.txt>2367</a> <a href=poj\\2368.txt>2368</a> <a href=poj\\2369.txt>2369</a> <a href=poj\\2370.txt>2370</a> <a href=poj\\2371.txt>2371</a> <a href=poj\\2372.txt>2372</a> <a href=poj\\2373.txt>2373</a> <a href=poj\\2374.txt>2374</a> <a href=poj\\2375.txt>2375</a> <a href=poj\\2376.txt>2376</a> <a href=poj\\2377.txt>2377</a> <a href=poj\\2378.txt>2378</a> <a href=poj\\2379.txt>2379</a> <a href=poj\\2380.txt>2380</a> <a href=poj\\2381.txt>2381</a> <a href=poj\\2382.txt>2382</a> <a href=poj\\2383.txt>2383</a> <a href=poj\\2384.txt>2384</a> <a href=poj\\2385.txt>2385</a> <a href=poj\\2386.txt>2386</a> <a href=poj\\2387.txt>2387</a> <a href=poj\\2388.txt>2388</a> <a href=poj\\2389.txt>2389</a> <a href=poj\\2390.txt>2390</a> <a href=poj\\2391.txt>2391</a> <a href=poj\\2392.txt>2392</a> <a href=poj\\2393.txt>2393</a> <a href=poj\\2394.txt>2394</a> <a href=poj\\2395.txt>2395</a> <a href=poj\\2396.txt>2396</a> <a href=poj\\2397.txt>2397</a> <a href=poj\\2398.txt>2398</a> <a href=poj\\2399.txt>2399</a> <a href=poj\\2400.txt>2400</a> <a href=poj\\2401.txt>2401</a> <a href=poj\\2402.txt>2402</a> <a href=poj\\2403.txt>2403</a> <a href=poj\\2404.txt>2404</a> <a href=poj\\2405.txt>2405</a> <a href=poj\\2406.txt>2406</a> <a href=poj\\2407.txt>2407</a> <a href=poj\\2408.txt>2408</a> <a href=poj\\2409.txt>2409</a> <a href=poj\\2410.txt>2410</a> <a href=poj\\2411.txt>2411</a> <a href=poj\\2412.txt>2412</a> <a href=poj\\2413.txt>2413</a> <a href=poj\\2414.txt>2414</a> <a href=poj\\2415.txt>2415</a> <a href=poj\\2416.txt>2416</a> <a href=poj\\2417.txt>2417</a> <a href=poj\\2418.txt>2418</a> <a href=poj\\2419.txt>2419</a> <a href=poj\\2420.txt>2420</a> <a href=poj\\2421.txt>2421</a> <a href=poj\\2422.txt>2422</a> <a href=poj\\2423.txt>2423</a> <a href=poj\\2424.txt>2424</a> <a href=poj\\2425.txt>2425</a> <a href=poj\\2426.txt>2426</a> <a href=poj\\2427.txt>2427</a> <a href=poj\\2428.txt>2428</a> <a href=poj\\2429.txt>2429</a> <a href=poj\\2430.txt>2430</a> <a href=poj\\2431.txt>2431</a> <a href=poj\\2432.txt>2432</a> <a href=poj\\2433.txt>2433</a> <a href=poj\\2434.txt>2434</a> <a href=poj\\2435.txt>2435</a> <a href=poj\\2436.txt>2436</a> <a href=poj\\2437.txt>2437</a> <a href=poj\\2438.txt>2438</a> <a href=poj\\2439.txt>2439</a> <a href=poj\\2440.txt>2440</a> <a href=poj\\2441.txt>2441</a> <a href=poj\\2442.txt>2442</a> <a href=poj\\2443.txt>2443</a> <a href=poj\\2444.txt>2444</a> <a href=poj\\2445.txt>2445</a> <a href=poj\\2446.txt>2446</a> <a href=poj\\2447.txt>2447</a> <a href=poj\\2448.txt>2448</a> <a href=poj\\2449.txt>2449</a> <a href=poj\\2450.txt>2450</a> <a href=poj\\2451.txt>2451</a> <a href=poj\\2452.txt>2452</a> <a href=poj\\2453.txt>2453</a> <a href=poj\\2454.txt>2454</a> <a href=poj\\2455.txt>2455</a> <a href=poj\\2456.txt>2456</a> <a href=poj\\2457.txt>2457</a> <a href=poj\\2458.txt>2458</a> <a href=poj\\2459.txt>2459</a> <a href=poj\\2460.txt>2460</a> <a href=poj\\2461.txt>2461</a> <a href=poj\\2462.txt>2462</a> <a href=poj\\2463.txt>2463</a> <a href=poj\\2464.txt>2464</a> <a href=poj\\2465.txt>2465</a> <a href=poj\\2466.txt>2466</a> <a href=poj\\2467.txt>2467</a> <a href=poj\\2468.txt>2468</a> <a href=poj\\2469.txt>2469</a> <a href=poj\\2470.txt>2470</a> <a href=poj\\2471.txt>2471</a> <a href=poj\\2472.txt>2472</a> <a href=poj\\2473.txt>2473</a> <a href=poj\\2474.txt>2474</a> <a href=poj\\2475.txt>2475</a> <a href=poj\\2476.txt>2476</a> <a href=poj\\2477.txt>2477</a> <a href=poj\\2478.txt>2478</a> <a href=poj\\2479.txt>2479</a> <a href=poj\\2480.txt>2480</a> <a href=poj\\2481.txt>2481</a> <a href=poj\\2482.txt>2482</a> <a href=poj\\2483.txt>2483</a> <a href=poj\\2484.txt>2484</a> <a href=poj\\2485.txt>2485</a> <a href=poj\\2486.txt>2486</a> <a href=poj\\2487.txt>2487</a> <a href=poj\\2488.txt>2488</a> <a href=poj\\2489.txt>2489</a> <a href=poj\\2490.txt>2490</a> <a href=poj\\2491.txt>2491</a> <a href=poj\\2492.txt>2492</a> <a href=poj\\2493.txt>2493</a> <a href=poj\\2494.txt>2494</a> <a href=poj\\2495.txt>2495</a> <a href=poj\\2496.txt>2496</a> <a href=poj\\2497.txt>2497</a> <a href=poj\\2498.txt>2498</a> <a href=poj\\2499.txt>2499</a> <a href=poj\\2500.txt>2500</a> <a href=poj\\2501.txt>2501</a> <a href=poj\\2502.txt>2502</a> <a href=poj\\2503.txt>2503</a> <a href=poj\\2504.txt>2504</a> <a href=poj\\2505.txt>2505</a> <a href=poj\\2506.txt>2506</a> <a href=poj\\2507.txt>2507</a> <a href=poj\\2508.txt>2508</a> <a href=poj\\2509.txt>2509</a> <a href=poj\\2510.txt>2510</a> <a href=poj\\2511.txt>2511</a> <a href=poj\\2512.txt>2512</a> <a href=poj\\2513.txt>2513</a> <a href=poj\\2514.txt>2514</a> <a href=poj\\2515.txt>2515</a> <a href=poj\\2516.txt>2516</a> <a href=poj\\2517.txt>2517</a> <a href=poj\\2518.txt>2518</a> <a href=poj\\2519.txt>2519</a> <a href=poj\\2520.txt>2520</a> <a href=poj\\2521.txt>2521</a> <a href=poj\\2522.txt>2522</a> <a href=poj\\2523.txt>2523</a> <a href=poj\\2524.txt>2524</a> <a href=poj\\2525.txt>2525</a> <a href=poj\\2526.txt>2526</a> <a href=poj\\2527.txt>2527</a> <a href=poj\\2528.txt>2528</a> <a href=poj\\2529.txt>2529</a> <a href=poj\\2530.txt>2530</a> <a href=poj\\2531.txt>2531</a> <a href=poj\\2532.txt>2532</a> <a href=poj\\2533.txt>2533</a> <a href=poj\\2534.txt>2534</a> <a href=poj\\2535.txt>2535</a> <a href=poj\\2536.txt>2536</a> <a href=poj\\2537.txt>2537</a> <a href=poj\\2538.txt>2538</a> <a href=poj\\2539.txt>2539</a> <a href=poj\\2540.txt>2540</a> <a href=poj\\2541.txt>2541</a> <a href=poj\\2542.txt>2542</a> <a href=poj\\2543.txt>2543</a> <a href=poj\\2544.txt>2544</a> <a href=poj\\2545.txt>2545</a> <a href=poj\\2546.txt>2546</a> <a href=poj\\2547.txt>2547</a> <a href=poj\\2548.txt>2548</a> <a href=poj\\2549.txt>2549</a> <a href=poj\\2550.txt>2550</a> <a href=poj\\2551.txt>2551</a> <a href=poj\\2552.txt>2552</a> <a href=poj\\2553.txt>2553</a> <a href=poj\\2554.txt>2554</a> <a href=poj\\2555.txt>2555</a> <a href=poj\\2556.txt>2556</a> <a href=poj\\2557.txt>2557</a> <a href=poj\\2558.txt>2558</a> <a href=poj\\2559.txt>2559</a> <a href=poj\\2560.txt>2560</a> <a href=poj\\2561.txt>2561</a> <a href=poj\\2562.txt>2562</a> <a href=poj\\2563.txt>2563</a> <a href=poj\\2564.txt>2564</a> <a href=poj\\2565.txt>2565</a> <a href=poj\\2566.txt>2566</a> <a href=poj\\2567.txt>2567</a> <a href=poj\\2568.txt>2568</a> <a href=poj\\2569.txt>2569</a> <a href=poj\\2570.txt>2570</a> <a href=poj\\2571.txt>2571</a> <a href=poj\\2572.txt>2572</a> <a href=poj\\2573.txt>2573</a> <a href=poj\\2574.txt>2574</a> <a href=poj\\2575.txt>2575</a> <a href=poj\\2576.txt>2576</a> <a href=poj\\2577.txt>2577</a> <a href=poj\\2578.txt>2578</a> <a href=poj\\2579.txt>2579</a> <a href=poj\\2580.txt>2580</a> <a href=poj\\2581.txt>2581</a> <a href=poj\\2582.txt>2582</a> <a href=poj\\2583.txt>2583</a> <a href=poj\\2584.txt>2584</a> <a href=poj\\2585.txt>2585</a> <a href=poj\\2586.txt>2586</a> <a href=poj\\2587.txt>2587</a> <a href=poj\\2588.txt>2588</a> <a href=poj\\2589.txt>2589</a> <a href=poj\\2590.txt>2590</a> <a href=poj\\2591.txt>2591</a> <a href=poj\\2592.txt>2592</a> <a href=poj\\2593.txt>2593</a> <a href=poj\\2594.txt>2594</a> <a href=poj\\2595.txt>2595</a> <a href=poj\\2596.txt>2596</a> <a href=poj\\2597.txt>2597</a> <a href=poj\\2598.txt>2598</a> <a href=poj\\2599.txt>2599</a> <a href=poj\\2600.txt>2600</a> <a href=poj\\2601.txt>2601</a> <a href=poj\\2602.txt>2602</a> <a href=poj\\2603.txt>2603</a> <a href=poj\\2604.txt>2604</a> <a href=poj\\2605.txt>2605</a> <a href=poj\\2606.txt>2606</a> <a href=poj\\2607.txt>2607</a> <a href=poj\\2608.txt>2608</a> <a href=poj\\2609.txt>2609</a> <a href=poj\\2610.txt>2610</a> <a href=poj\\2611.txt>2611</a> <a href=poj\\2612.txt>2612</a> <a href=poj\\2613.txt>2613</a> <a href=poj\\2614.txt>2614</a> <a href=poj\\2615.txt>2615</a> <a href=poj\\2616.txt>2616</a> <a href=poj\\2617.txt>2617</a> <a href=poj\\2618.txt>2618</a> <a href=poj\\2619.txt>2619</a> <a href=poj\\2620.txt>2620</a> <a href=poj\\2621.txt>2621</a> <a href=poj\\2622.txt>2622</a> <a href=poj\\2623.txt>2623</a> <a href=poj\\2624.txt>2624</a> <a href=poj\\2625.txt>2625</a> <a href=poj\\2626.txt>2626</a> <a href=poj\\2627.txt>2627</a> <a href=poj\\2628.txt>2628</a> <a href=poj\\2629.txt>2629</a> <a href=poj\\2630.txt>2630</a> <a href=poj\\2631.txt>2631</a> <a href=poj\\2632.txt>2632</a> <a href=poj\\2633.txt>2633</a> <a href=poj\\2634.txt>2634</a> <a href=poj\\2635.txt>2635</a> <a href=poj\\2636.txt>2636</a> <a href=poj\\2637.txt>2637</a> <a href=poj\\2638.txt>2638</a> <a href=poj\\2639.txt>2639</a> <a href=poj\\2640.txt>2640</a> <a href=poj\\2641.txt>2641</a> <a href=poj\\2642.txt>2642</a> <a href=poj\\2643.txt>2643</a> <a href=poj\\2644.txt>2644</a> <a href=poj\\2645.txt>2645</a> <a href=poj\\2646.txt>2646</a> <a href=poj\\2647.txt>2647</a> <a href=poj\\2648.txt>2648</a> <a href=poj\\2649.txt>2649</a> <a href=poj\\2650.txt>2650</a> <a href=poj\\2651.txt>2651</a> <a href=poj\\2652.txt>2652</a> <a href=poj\\2653.txt>2653</a> <a href=poj\\2654.txt>2654</a> <a href=poj\\2655.txt>2655</a> <a href=poj\\2656.txt>2656</a> <a href=poj\\2657.txt>2657</a> <a href=poj\\2658.txt>2658</a> <a href=poj\\2659.txt>2659</a> <a href=poj\\2660.txt>2660</a> <a href=poj\\2661.txt>2661</a> <a href=poj\\2662.txt>2662</a> <a href=poj\\2663.txt>2663</a> <a href=poj\\2664.txt>2664</a> <a href=poj\\2665.txt>2665</a> <a href=poj\\2666.txt>2666</a> <a href=poj\\2667.txt>2667</a> <a href=poj\\2668.txt>2668</a> <a href=poj\\2669.txt>2669</a> <a href=poj\\2670.txt>2670</a> <a href=poj\\2671.txt>2671</a> <a href=poj\\2672.txt>2672</a> <a href=poj\\2673.txt>2673</a> <a href=poj\\2674.txt>2674</a> <a href=poj\\2675.txt>2675</a> <a href=poj\\2676.txt>2676</a> <a href=poj\\2677.txt>2677</a> <a href=poj\\2678.txt>2678</a> <a href=poj\\2679.txt>2679</a> <a href=poj\\2680.txt>2680</a> <a href=poj\\2681.txt>2681</a> <a href=poj\\2682.txt>2682</a> <a href=poj\\2683.txt>2683</a> <a href=poj\\2684.txt>2684</a> <a href=poj\\2685.txt>2685</a> <a href=poj\\2686.txt>2686</a> <a href=poj\\2687.txt>2687</a> <a href=poj\\2688.txt>2688</a> <a href=poj\\2689.txt>2689</a> <a href=poj\\2690.txt>2690</a> <a href=poj\\2691.txt>2691</a> <a href=poj\\2692.txt>2692</a> <a href=poj\\2693.txt>2693</a> <a href=poj\\2694.txt>2694</a> <a href=poj\\2695.txt>2695</a> <a href=poj\\2696.txt>2696</a> <a href=poj\\2697.txt>2697</a> <a href=poj\\2698.txt>2698</a> <a href=poj\\2699.txt>2699</a> <a href=poj\\2700.txt>2700</a> <a href=poj\\2701.txt>2701</a> <a href=poj\\2702.txt>2702</a> <a href=poj\\2703.txt>2703</a> <a href=poj\\2704.txt>2704</a> <a href=poj\\2705.txt>2705</a> <a href=poj\\2706.txt>2706</a> <a href=poj\\2707.txt>2707</a> <a href=poj\\2708.txt>2708</a> <a href=poj\\2709.txt>2709</a> <a href=poj\\2710.txt>2710</a> <a href=poj\\2711.txt>2711</a> <a href=poj\\2712.txt>2712</a> <a href=poj\\2713.txt>2713</a> <a href=poj\\2714.txt>2714</a> <a href=poj\\2715.txt>2715</a> <a href=poj\\2716.txt>2716</a> <a href=poj\\2717.txt>2717</a> <a href=poj\\2718.txt>2718</a> <a href=poj\\2719.txt>2719</a> <a href=poj\\2720.txt>2720</a> <a href=poj\\2721.txt>2721</a> <a href=poj\\2722.txt>2722</a> <a href=poj\\2723.txt>2723</a> <a href=poj\\2724.txt>2724</a> <a href=poj\\2725.txt>2725</a> <a href=poj\\2726.txt>2726</a> <a href=poj\\2727.txt>2727</a> <a href=poj\\2728.txt>2728</a> <a href=poj\\2729.txt>2729</a> <a href=poj\\2730.txt>2730</a> <a href=poj\\2731.txt>2731</a> <a href=poj\\2732.txt>2732</a> <a href=poj\\2733.txt>2733</a> <a href=poj\\2734.txt>2734</a> <a href=poj\\2735.txt>2735</a> <a href=poj\\2736.txt>2736</a> <a href=poj\\2737.txt>2737</a> <a href=poj\\2738.txt>2738</a> <a href=poj\\2739.txt>2739</a> <a href=poj\\2740.txt>2740</a> <a href=poj\\2741.txt>2741</a> <a href=poj\\2742.txt>2742</a> <a href=poj\\2743.txt>2743</a> <a href=poj\\2744.txt>2744</a> <a href=poj\\2745.txt>2745</a> <a href=poj\\2746.txt>2746</a> <a href=poj\\2747.txt>2747</a> <a href=poj\\2748.txt>2748</a> <a href=poj\\2749.txt>2749</a> <a href=poj\\2750.txt>2750</a> <a href=poj\\2751.txt>2751</a> <a href=poj\\2752.txt>2752</a> <a href=poj\\2753.txt>2753</a> <a href=poj\\2754.txt>2754</a> <a href=poj\\2755.txt>2755</a> <a href=poj\\2756.txt>2756</a> <a href=poj\\2757.txt>2757</a> <a href=poj\\2758.txt>2758</a> <a href=poj\\2759.txt>2759</a> <a href=poj\\2760.txt>2760</a> <a href=poj\\2761.txt>2761</a> <a href=poj\\2762.txt>2762</a> <a href=poj\\2763.txt>2763</a> <a href=poj\\2764.txt>2764</a> <a href=poj\\2765.txt>2765</a> <a href=poj\\2766.txt>2766</a> <a href=poj\\2767.txt>2767</a> <a href=poj\\2768.txt>2768</a> <a href=poj\\2769.txt>2769</a> <a href=poj\\2770.txt>2770</a> <a href=poj\\2771.txt>2771</a> <a href=poj\\2772.txt>2772</a> <a href=poj\\2773.txt>2773</a> <a href=poj\\2774.txt>2774</a> <a href=poj\\2775.txt>2775</a> <a href=poj\\2776.txt>2776</a> <a href=poj\\2777.txt>2777</a> <a href=poj\\2778.txt>2778</a> <a href=poj\\2779.txt>2779</a> <a href=poj\\2780.txt>2780</a> <a href=poj\\2781.txt>2781</a> <a href=poj\\2782.txt>2782</a> <a href=poj\\2783.txt>2783</a> <a href=poj\\2784.txt>2784</a> <a href=poj\\2785.txt>2785</a> <a href=poj\\2786.txt>2786</a> <a href=poj\\2787.txt>2787</a> <a href=poj\\2788.txt>2788</a> <a href=poj\\2789.txt>2789</a> <a href=poj\\2790.txt>2790</a> <a href=poj\\2791.txt>2791</a> <a href=poj\\2792.txt>2792</a> <a href=poj\\2793.txt>2793</a> <a href=poj\\2794.txt>2794</a> <a href=poj\\2795.txt>2795</a> <a href=poj\\2796.txt>2796</a> <a href=poj\\2797.txt>2797</a> <a href=poj\\2798.txt>2798</a> <a href=poj\\2799.txt>2799</a> <a href=poj\\2800.txt>2800</a> <a href=poj\\2801.txt>2801</a> <a href=poj\\2802.txt>2802</a> <a href=poj\\2803.txt>2803</a> <a href=poj\\2804.txt>2804</a> <a href=poj\\2805.txt>2805</a> <a href=poj\\2806.txt>2806</a> <a href=poj\\2807.txt>2807</a> <a href=poj\\2808.txt>2808</a> <a href=poj\\2809.txt>2809</a> <a href=poj\\2810.txt>2810</a> <a href=poj\\2811.txt>2811</a> <a href=poj\\2812.txt>2812</a> <a href=poj\\2813.txt>2813</a> <a href=poj\\2814.txt>2814</a> <a href=poj\\2815.txt>2815</a> <a href=poj\\2816.txt>2816</a> <a href=poj\\2817.txt>2817</a> <a href=poj\\2818.txt>2818</a> <a href=poj\\2819.txt>2819</a> <a href=poj\\2820.txt>2820</a> <a href=poj\\2821.txt>2821</a> <a href=poj\\2822.txt>2822</a> <a href=poj\\2823.txt>2823</a> <a href=poj\\2824.txt>2824</a> <a href=poj\\2825.txt>2825</a> <a href=poj\\2826.txt>2826</a> <a href=poj\\2827.txt>2827</a> <a href=poj\\2828.txt>2828</a> <a href=poj\\2829.txt>2829</a> <a href=poj\\2830.txt>2830</a> <a href=poj\\2831.txt>2831</a> <a href=poj\\2832.txt>2832</a> <a href=poj\\2833.txt>2833</a> <a href=poj\\2834.txt>2834</a> <a href=poj\\2835.txt>2835</a> <a href=poj\\2836.txt>2836</a> <a href=poj\\2837.txt>2837</a> <a href=poj\\2838.txt>2838</a> <a href=poj\\2839.txt>2839</a> <a href=poj\\2840.txt>2840</a> <a href=poj\\2841.txt>2841</a> <a href=poj\\2842.txt>2842</a> <a href=poj\\2843.txt>2843</a> <a href=poj\\2844.txt>2844</a> <a href=poj\\2845.txt>2845</a> <a href=poj\\2846.txt>2846</a> <a href=poj\\2847.txt>2847</a> <a href=poj\\2848.txt>2848</a> <a href=poj\\2849.txt>2849</a> <a href=poj\\2850.txt>2850</a> <a href=poj\\2851.txt>2851</a> <a href=poj\\2852.txt>2852</a> <a href=poj\\2853.txt>2853</a> <a href=poj\\2854.txt>2854</a> <a href=poj\\2855.txt>2855</a> <a href=poj\\2856.txt>2856</a> <a href=poj\\2857.txt>2857</a> <a href=poj\\2858.txt>2858</a> <a href=poj\\2859.txt>2859</a> <a href=poj\\2860.txt>2860</a> <a href=poj\\2861.txt>2861</a> <a href=poj\\2862.txt>2862</a> <a href=poj\\2863.txt>2863</a> <a href=poj\\2864.txt>2864</a> <a href=poj\\2865.txt>2865</a> <a href=poj\\2866.txt>2866</a> <a href=poj\\2867.txt>2867</a> <a href=poj\\2868.txt>2868</a> <a href=poj\\2869.txt>2869</a> <a href=poj\\2870.txt>2870</a> <a href=poj\\2871.txt>2871</a> <a href=poj\\2872.txt>2872</a> <a href=poj\\2873.txt>2873</a> <a href=poj\\2874.txt>2874</a> <a href=poj\\2875.txt>2875</a> <a href=poj\\2876.txt>2876</a> <a href=poj\\2877.txt>2877</a> <a href=poj\\2878.txt>2878</a> <a href=poj\\2879.txt>2879</a> <a href=poj\\2880.txt>2880</a> <a href=poj\\2881.txt>2881</a> <a href=poj\\2882.txt>2882</a> <a href=poj\\2883.txt>2883</a> <a href=poj\\2884.txt>2884</a> <a href=poj\\2885.txt>2885</a> <a href=poj\\2886.txt>2886</a> <a href=poj\\2887.txt>2887</a> <a href=poj\\2888.txt>2888</a> <a href=poj\\2889.txt>2889</a> <a href=poj\\2890.txt>2890</a> <a href=poj\\2891.txt>2891</a> <a href=poj\\2892.txt>2892</a> <a href=poj\\2893.txt>2893</a> <a href=poj\\2894.txt>2894</a> <a href=poj\\2895.txt>2895</a> <a href=poj\\2896.txt>2896</a> <a href=poj\\2897.txt>2897</a> <a href=poj\\2898.txt>2898</a> <a href=poj\\2899.txt>2899</a> <a href=poj\\2900.txt>2900</a> <a href=poj\\2901.txt>2901</a> <a href=poj\\2902.txt>2902</a> <a href=poj\\2903.txt>2903</a> <a href=poj\\2904.txt>2904</a> <a href=poj\\2905.txt>2905</a> <a href=poj\\2906.txt>2906</a> <a href=poj\\2907.txt>2907</a> <a href=poj\\2908.txt>2908</a> <a href=poj\\2909.txt>2909</a> <a href=poj\\2910.txt>2910</a> <a href=poj\\2911.txt>2911</a> <a href=poj\\2912.txt>2912</a> <a href=poj\\2913.txt>2913</a> <a href=poj\\2914.txt>2914</a> <a href=poj\\2915.txt>2915</a> <a href=poj\\2916.txt>2916</a> <a href=poj\\2917.txt>2917</a> <a href=poj\\2918.txt>2918</a> <a href=poj\\2919.txt>2919</a> <a href=poj\\2920.txt>2920</a> <a href=poj\\2921.txt>2921</a> <a href=poj\\2922.txt>2922</a> <a href=poj\\2923.txt>2923</a> <a href=poj\\2924.txt>2924</a> <a href=poj\\2925.txt>2925</a> <a href=poj\\2926.txt>2926</a> <a href=poj\\2927.txt>2927</a> <a href=poj\\2928.txt>2928</a> <a href=poj\\2929.txt>2929</a> <a href=poj\\2930.txt>2930</a> <a href=poj\\2931.txt>2931</a> <a href=poj\\2932.txt>2932</a> <a href=poj\\2933.txt>2933</a> <a href=poj\\2934.txt>2934</a> <a href=poj\\2935.txt>2935</a> <a href=poj\\2936.txt>2936</a> <a href=poj\\2937.txt>2937</a> <a href=poj\\2938.txt>2938</a> <a href=poj\\2939.txt>2939</a> <a href=poj\\2940.txt>2940</a> <a href=poj\\2941.txt>2941</a> <a href=poj\\2942.txt>2942</a> <a href=poj\\2943.txt>2943</a> <a href=poj\\2944.txt>2944</a> <a href=poj\\2945.txt>2945</a> <a href=poj\\2946.txt>2946</a> <a href=poj\\2947.txt>2947</a> <a href=poj\\2948.txt>2948</a> <a href=poj\\2949.txt>2949</a> <a href=poj\\2950.txt>2950</a> <a href=poj\\2951.txt>2951</a> <a href=poj\\2952.txt>2952</a> <a href=poj\\2953.txt>2953</a> <a href=poj\\2954.txt>2954</a> <a href=poj\\2955.txt>2955</a> <a href=poj\\2956.txt>2956</a> <a href=poj\\2957.txt>2957</a> <a href=poj\\2958.txt>2958</a> <a href=poj\\2959.txt>2959</a> <a href=poj\\2960.txt>2960</a> <a href=poj\\2961.txt>2961</a> <a href=poj\\2962.txt>2962</a> <a href=poj\\2963.txt>2963</a> <a href=poj\\2964.txt>2964</a> <a href=poj\\2965.txt>2965</a> <a href=poj\\2966.txt>2966</a> <a href=poj\\2967.txt>2967</a> <a href=poj\\2968.txt>2968</a> <a href=poj\\2969.txt>2969</a> <a href=poj\\2970.txt>2970</a> <a href=poj\\2971.txt>2971</a> <a href=poj\\2972.txt>2972</a> <a href=poj\\2973.txt>2973</a> <a href=poj\\2974.txt>2974</a> <a href=poj\\2975.txt>2975</a> <a href=poj\\2976.txt>2976</a> <a href=poj\\2977.txt>2977</a> <a href=poj\\2978.txt>2978</a> <a href=poj\\2979.txt>2979</a> <a href=poj\\2980.txt>2980</a> <a href=poj\\2981.txt>2981</a> <a href=poj\\2982.txt>2982</a> <a href=poj\\2983.txt>2983</a> <a href=poj\\2984.txt>2984</a> <a href=poj\\2985.txt>2985</a> <a href=poj\\2986.txt>2986</a> <a href=poj\\2987.txt>2987</a> <a href=poj\\2988.txt>2988</a> <a href=poj\\2989.txt>2989</a> <a href=poj\\2990.txt>2990</a> <a href=poj\\2991.txt>2991</a> <a href=poj\\2992.txt>2992</a> <a href=poj\\2993.txt>2993</a> <a href=poj\\2994.txt>2994</a> <a href=poj\\2995.txt>2995</a> <a href=poj\\2996.txt>2996</a> <a href=poj\\2997.txt>2997</a> <a href=poj\\2998.txt>2998</a> <a href=poj\\2999.txt>2999</a>', '<a href=poj\\3000.txt>3000</a> <a href=poj\\3001.txt>3001</a> <a href=poj\\3002.txt>3002</a> <a href=poj\\3003.txt>3003</a> <a href=poj\\3004.txt>3004</a> <a href=poj\\3005.txt>3005</a> <a href=poj\\3006.txt>3006</a> <a href=poj\\3007.txt>3007</a> <a href=poj\\3008.txt>3008</a> <a href=poj\\3009.txt>3009</a> <a href=poj\\3010.txt>3010</a> <a href=poj\\3011.txt>3011</a> <a href=poj\\3012.txt>3012</a> <a href=poj\\3013.txt>3013</a> <a href=poj\\3014.txt>3014</a> <a href=poj\\3015.txt>3015</a> <a href=poj\\3016.txt>3016</a> <a href=poj\\3017.txt>3017</a> <a href=poj\\3018.txt>3018</a> <a href=poj\\3019.txt>3019</a> <a href=poj\\3020.txt>3020</a> <a href=poj\\3021.txt>3021</a> <a href=poj\\3022.txt>3022</a> <a href=poj\\3023.txt>3023</a> <a href=poj\\3024.txt>3024</a> <a href=poj\\3025.txt>3025</a> <a href=poj\\3026.txt>3026</a> <a href=poj\\3027.txt>3027</a> <a href=poj\\3028.txt>3028</a> <a href=poj\\3029.txt>3029</a> <a href=poj\\3030.txt>3030</a> <a href=poj\\3031.txt>3031</a> <a href=poj\\3032.txt>3032</a> <a href=poj\\3033.txt>3033</a> <a href=poj\\3034.txt>3034</a> <a href=poj\\3035.txt>3035</a> <a href=poj\\3036.txt>3036</a> <a href=poj\\3037.txt>3037</a> <a href=poj\\3038.txt>3038</a> <a href=poj\\3039.txt>3039</a> <a href=poj\\3040.txt>3040</a> <a href=poj\\3041.txt>3041</a> <a href=poj\\3042.txt>3042</a> <a href=poj\\3043.txt>3043</a> <a href=poj\\3044.txt>3044</a> <a href=poj\\3045.txt>3045</a> <a href=poj\\3046.txt>3046</a> <a href=poj\\3047.txt>3047</a> <a href=poj\\3048.txt>3048</a> <a href=poj\\3049.txt>3049</a> <a href=poj\\3050.txt>3050</a> <a href=poj\\3051.txt>3051</a> <a href=poj\\3052.txt>3052</a> <a href=poj\\3053.txt>3053</a> <a href=poj\\3054.txt>3054</a> <a href=poj\\3055.txt>3055</a> <a href=poj\\3056.txt>3056</a> <a href=poj\\3057.txt>3057</a> <a href=poj\\3058.txt>3058</a> <a href=poj\\3059.txt>3059</a> <a href=poj\\3060.txt>3060</a> <a href=poj\\3061.txt>3061</a> <a href=poj\\3062.txt>3062</a> <a href=poj\\3063.txt>3063</a> <a href=poj\\3064.txt>3064</a> <a href=poj\\3065.txt>3065</a> <a href=poj\\3066.txt>3066</a> <a href=poj\\3067.txt>3067</a> <a href=poj\\3068.txt>3068</a> <a href=poj\\3069.txt>3069</a> <a href=poj\\3070.txt>3070</a> <a href=poj\\3071.txt>3071</a> <a href=poj\\3072.txt>3072</a> <a href=poj\\3073.txt>3073</a> <a href=poj\\3074.txt>3074</a> <a href=poj\\3075.txt>3075</a> <a href=poj\\3076.txt>3076</a> <a href=poj\\3077.txt>3077</a> <a href=poj\\3078.txt>3078</a> <a href=poj\\3079.txt>3079</a> <a href=poj\\3080.txt>3080</a> <a href=poj\\3081.txt>3081</a> <a href=poj\\3082.txt>3082</a> <a href=poj\\3083.txt>3083</a> <a href=poj\\3084.txt>3084</a> <a href=poj\\3085.txt>3085</a> <a href=poj\\3086.txt>3086</a> <a href=poj\\3087.txt>3087</a> <a href=poj\\3088.txt>3088</a> <a href=poj\\3089.txt>3089</a> <a href=poj\\3090.txt>3090</a> <a href=poj\\3091.txt>3091</a> <a href=poj\\3092.txt>3092</a> <a href=poj\\3093.txt>3093</a> <a href=poj\\3094.txt>3094</a> <a href=poj\\3095.txt>3095</a> <a href=poj\\3096.txt>3096</a> <a href=poj\\3097.txt>3097</a> <a href=poj\\3098.txt>3098</a> <a href=poj\\3099.txt>3099</a> <a href=poj\\3100.txt>3100</a> <a href=poj\\3101.txt>3101</a> <a href=poj\\3102.txt>3102</a> <a href=poj\\3103.txt>3103</a> <a href=poj\\3104.txt>3104</a> <a href=poj\\3105.txt>3105</a> <a href=poj\\3106.txt>3106</a> <a href=poj\\3107.txt>3107</a> <a href=poj\\3108.txt>3108</a> <a href=poj\\3109.txt>3109</a> <a href=poj\\3110.txt>3110</a> <a href=poj\\3111.txt>3111</a> <a href=poj\\3112.txt>3112</a> <a href=poj\\3113.txt>3113</a> <a href=poj\\3114.txt>3114</a> <a href=poj\\3115.txt>3115</a> <a href=poj\\3116.txt>3116</a> <a href=poj\\3117.txt>3117</a> <a href=poj\\3118.txt>3118</a> <a href=poj\\3119.txt>3119</a> <a href=poj\\3120.txt>3120</a> <a href=poj\\3121.txt>3121</a> <a href=poj\\3122.txt>3122</a> <a href=poj\\3123.txt>3123</a> <a href=poj\\3124.txt>3124</a> <a href=poj\\3125.txt>3125</a> <a href=poj\\3126.txt>3126</a> <a href=poj\\3127.txt>3127</a> <a href=poj\\3128.txt>3128</a> <a href=poj\\3129.txt>3129</a> <a href=poj\\3130.txt>3130</a> <a href=poj\\3131.txt>3131</a> <a href=poj\\3132.txt>3132</a> <a href=poj\\3133.txt>3133</a> <a href=poj\\3134.txt>3134</a> <a href=poj\\3135.txt>3135</a> <a href=poj\\3136.txt>3136</a> <a href=poj\\3137.txt>3137</a> <a href=poj\\3138.txt>3138</a> <a href=poj\\3139.txt>3139</a> <a href=poj\\3140.txt>3140</a> <a href=poj\\3141.txt>3141</a> <a href=poj\\3142.txt>3142</a> <a href=poj\\3143.txt>3143</a> <a href=poj\\3144.txt>3144</a> <a href=poj\\3145.txt>3145</a> <a href=poj\\3146.txt>3146</a> <a href=poj\\3147.txt>3147</a> <a href=poj\\3148.txt>3148</a> <a href=poj\\3149.txt>3149</a> <a href=poj\\3150.txt>3150</a> <a href=poj\\3151.txt>3151</a> <a href=poj\\3152.txt>3152</a> <a href=poj\\3153.txt>3153</a> <a href=poj\\3154.txt>3154</a> <a href=poj\\3155.txt>3155</a> <a href=poj\\3156.txt>3156</a> <a href=poj\\3157.txt>3157</a> <a href=poj\\3158.txt>3158</a> <a href=poj\\3159.txt>3159</a> <a href=poj\\3160.txt>3160</a> <a href=poj\\3161.txt>3161</a> <a href=poj\\3162.txt>3162</a> <a href=poj\\3163.txt>3163</a> <a href=poj\\3164.txt>3164</a> <a href=poj\\3165.txt>3165</a> <a href=poj\\3166.txt>3166</a> <a href=poj\\3167.txt>3167</a> <a href=poj\\3168.txt>3168</a> <a href=poj\\3169.txt>3169</a> <a href=poj\\3170.txt>3170</a> <a href=poj\\3171.txt>3171</a> <a href=poj\\3172.txt>3172</a> <a href=poj\\3173.txt>3173</a> <a href=poj\\3174.txt>3174</a> <a href=poj\\3175.txt>3175</a> <a href=poj\\3176.txt>3176</a> <a href=poj\\3177.txt>3177</a> <a href=poj\\3178.txt>3178</a> <a href=poj\\3179.txt>3179</a> <a href=poj\\3180.txt>3180</a> <a href=poj\\3181.txt>3181</a> <a href=poj\\3182.txt>3182</a> <a href=poj\\3183.txt>3183</a> <a href=poj\\3184.txt>3184</a> <a href=poj\\3185.txt>3185</a> <a href=poj\\3186.txt>3186</a> <a href=poj\\3187.txt>3187</a> <a href=poj\\3188.txt>3188</a> <a href=poj\\3189.txt>3189</a> <a href=poj\\3190.txt>3190</a> <a href=poj\\3191.txt>3191</a> <a href=poj\\3192.txt>3192</a> <a href=poj\\3193.txt>3193</a> <a href=poj\\3194.txt>3194</a> <a href=poj\\3195.txt>3195</a> <a href=poj\\3196.txt>3196</a> <a href=poj\\3197.txt>3197</a> <a href=poj\\3198.txt>3198</a> <a href=poj\\3199.txt>3199</a> <a href=poj\\3200.txt>3200</a> <a href=poj\\3201.txt>3201</a> <a href=poj\\3202.txt>3202</a> <a href=poj\\3203.txt>3203</a> <a href=poj\\3204.txt>3204</a> <a href=poj\\3205.txt>3205</a> <a href=poj\\3206.txt>3206</a> <a href=poj\\3207.txt>3207</a> <a href=poj\\3208.txt>3208</a> <a href=poj\\3209.txt>3209</a> <a href=poj\\3210.txt>3210</a> <a href=poj\\3211.txt>3211</a> <a href=poj\\3212.txt>3212</a> <a href=poj\\3213.txt>3213</a> <a href=poj\\3214.txt>3214</a> <a href=poj\\3215.txt>3215</a> <a href=poj\\3216.txt>3216</a> <a href=poj\\3217.txt>3217</a> <a href=poj\\3218.txt>3218</a> <a href=poj\\3219.txt>3219</a> <a href=poj\\3220.txt>3220</a> <a href=poj\\3221.txt>3221</a> <a href=poj\\3222.txt>3222</a> <a href=poj\\3223.txt>3223</a> <a href=poj\\3224.txt>3224</a> <a href=poj\\3225.txt>3225</a> <a href=poj\\3226.txt>3226</a> <a href=poj\\3227.txt>3227</a> <a href=poj\\3228.txt>3228</a> <a href=poj\\3229.txt>3229</a> <a href=poj\\3230.txt>3230</a> <a href=poj\\3231.txt>3231</a> <a href=poj\\3232.txt>3232</a> <a href=poj\\3233.txt>3233</a> <a href=poj\\3234.txt>3234</a> <a href=poj\\3235.txt>3235</a> <a href=poj\\3236.txt>3236</a> <a href=poj\\3237.txt>3237</a> <a href=poj\\3238.txt>3238</a> <a href=poj\\3239.txt>3239</a> <a href=poj\\3240.txt>3240</a> <a href=poj\\3241.txt>3241</a> <a href=poj\\3242.txt>3242</a> <a href=poj\\3243.txt>3243</a> <a href=poj\\3244.txt>3244</a> <a href=poj\\3245.txt>3245</a> <a href=poj\\3246.txt>3246</a> <a href=poj\\3247.txt>3247</a> <a href=poj\\3248.txt>3248</a> <a href=poj\\3249.txt>3249</a> <a href=poj\\3250.txt>3250</a> <a href=poj\\3251.txt>3251</a> <a href=poj\\3252.txt>3252</a> <a href=poj\\3253.txt>3253</a> <a href=poj\\3254.txt>3254</a> <a href=poj\\3255.txt>3255</a> <a href=poj\\3256.txt>3256</a> <a href=poj\\3257.txt>3257</a> <a href=poj\\3258.txt>3258</a> <a href=poj\\3259.txt>3259</a> <a href=poj\\3260.txt>3260</a> <a href=poj\\3261.txt>3261</a> <a href=poj\\3262.txt>3262</a> <a href=poj\\3263.txt>3263</a> <a href=poj\\3264.txt>3264</a> <a href=poj\\3265.txt>3265</a> <a href=poj\\3266.txt>3266</a> <a href=poj\\3267.txt>3267</a> <a href=poj\\3268.txt>3268</a> <a href=poj\\3269.txt>3269</a> <a href=poj\\3270.txt>3270</a> <a href=poj\\3271.txt>3271</a> <a href=poj\\3272.txt>3272</a> <a href=poj\\3273.txt>3273</a> <a href=poj\\3274.txt>3274</a> <a href=poj\\3275.txt>3275</a> <a href=poj\\3276.txt>3276</a> <a href=poj\\3277.txt>3277</a> <a href=poj\\3278.txt>3278</a> <a href=poj\\3279.txt>3279</a> <a href=poj\\3280.txt>3280</a> <a href=poj\\3281.txt>3281</a> <a href=poj\\3282.txt>3282</a> <a href=poj\\3283.txt>3283</a> <a href=poj\\3284.txt>3284</a> <a href=poj\\3285.txt>3285</a> <a href=poj\\3286.txt>3286</a> <a href=poj\\3287.txt>3287</a> <a href=poj\\3288.txt>3288</a> <a href=poj\\3289.txt>3289</a> <a href=poj\\3290.txt>3290</a> <a href=poj\\3291.txt>3291</a> <a href=poj\\3292.txt>3292</a> <a href=poj\\3293.txt>3293</a> <a href=poj\\3294.txt>3294</a> <a href=poj\\3295.txt>3295</a> <a href=poj\\3296.txt>3296</a> <a href=poj\\3297.txt>3297</a> <a href=poj\\3298.txt>3298</a> <a href=poj\\3299.txt>3299</a> <a href=poj\\3300.txt>3300</a> <a href=poj\\3301.txt>3301</a> <a href=poj\\3302.txt>3302</a> <a href=poj\\3303.txt>3303</a> <a href=poj\\3304.txt>3304</a> <a href=poj\\3305.txt>3305</a> <a href=poj\\3306.txt>3306</a> <a href=poj\\3307.txt>3307</a> <a href=poj\\3308.txt>3308</a> <a href=poj\\3309.txt>3309</a> <a href=poj\\3310.txt>3310</a> <a href=poj\\3311.txt>3311</a> <a href=poj\\3312.txt>3312</a> <a href=poj\\3313.txt>3313</a> <a href=poj\\3314.txt>3314</a> <a href=poj\\3315.txt>3315</a> <a href=poj\\3316.txt>3316</a> <a href=poj\\3317.txt>3317</a> <a href=poj\\3318.txt>3318</a> <a href=poj\\3319.txt>3319</a> <a href=poj\\3320.txt>3320</a> <a href=poj\\3321.txt>3321</a> <a href=poj\\3322.txt>3322</a> <a href=poj\\3323.txt>3323</a> <a href=poj\\3324.txt>3324</a> <a href=poj\\3325.txt>3325</a> <a href=poj\\3326.txt>3326</a> <a href=poj\\3327.txt>3327</a> <a href=poj\\3328.txt>3328</a> <a href=poj\\3329.txt>3329</a> <a href=poj\\3330.txt>3330</a> <a href=poj\\3331.txt>3331</a> <a href=poj\\3332.txt>3332</a> <a href=poj\\3333.txt>3333</a> <a href=poj\\3334.txt>3334</a> <a href=poj\\3335.txt>3335</a> <a href=poj\\3336.txt>3336</a> <a href=poj\\3337.txt>3337</a> <a href=poj\\3338.txt>3338</a> <a href=poj\\3339.txt>3339</a> <a href=poj\\3340.txt>3340</a> <a href=poj\\3341.txt>3341</a> <a href=poj\\3342.txt>3342</a> <a href=poj\\3343.txt>3343</a> <a href=poj\\3344.txt>3344</a> <a href=poj\\3345.txt>3345</a> <a href=poj\\3346.txt>3346</a> <a href=poj\\3347.txt>3347</a> <a href=poj\\3348.txt>3348</a> <a href=poj\\3349.txt>3349</a> <a href=poj\\3350.txt>3350</a> <a href=poj\\3351.txt>3351</a> <a href=poj\\3352.txt>3352</a> <a href=poj\\3353.txt>3353</a> <a href=poj\\3354.txt>3354</a> <a href=poj\\3355.txt>3355</a> <a href=poj\\3356.txt>3356</a> <a href=poj\\3357.txt>3357</a> <a href=poj\\3358.txt>3358</a> <a href=poj\\3359.txt>3359</a> <a href=poj\\3360.txt>3360</a> <a href=poj\\3361.txt>3361</a> <a href=poj\\3362.txt>3362</a> <a href=poj\\3363.txt>3363</a> <a href=poj\\3364.txt>3364</a> <a href=poj\\3365.txt>3365</a> <a href=poj\\3366.txt>3366</a> <a href=poj\\3367.txt>3367</a> <a href=poj\\3368.txt>3368</a> <a href=poj\\3369.txt>3369</a> <a href=poj\\3370.txt>3370</a> <a href=poj\\3371.txt>3371</a> <a href=poj\\3372.txt>3372</a> <a href=poj\\3373.txt>3373</a> <a href=poj\\3374.txt>3374</a> <a href=poj\\3375.txt>3375</a> <a href=poj\\3376.txt>3376</a> <a href=poj\\3377.txt>3377</a> <a href=poj\\3378.txt>3378</a> <a href=poj\\3379.txt>3379</a> <a href=poj\\3380.txt>3380</a> <a href=poj\\3381.txt>3381</a> <a href=poj\\3382.txt>3382</a> <a href=poj\\3383.txt>3383</a> <a href=poj\\3384.txt>3384</a> <a href=poj\\3385.txt>3385</a> <a href=poj\\3386.txt>3386</a> <a href=poj\\3387.txt>3387</a> <a href=poj\\3388.txt>3388</a> <a href=poj\\3389.txt>3389</a> <a href=poj\\3390.txt>3390</a> <a href=poj\\3391.txt>3391</a> <a href=poj\\3392.txt>3392</a> <a href=poj\\3393.txt>3393</a> <a href=poj\\3394.txt>3394</a> <a href=poj\\3395.txt>3395</a> <a href=poj\\3396.txt>3396</a> <a href=poj\\3397.txt>3397</a> <a href=poj\\3398.txt>3398</a> <a href=poj\\3399.txt>3399</a> <a href=poj\\3400.txt>3400</a> <a href=poj\\3401.txt>3401</a> <a href=poj\\3402.txt>3402</a> <a href=poj\\3403.txt>3403</a> <a href=poj\\3404.txt>3404</a> <a href=poj\\3405.txt>3405</a> <a href=poj\\3406.txt>3406</a> <a href=poj\\3407.txt>3407</a> <a href=poj\\3408.txt>3408</a> <a href=poj\\3409.txt>3409</a> <a href=poj\\3410.txt>3410</a> <a href=poj\\3411.txt>3411</a> <a href=poj\\3412.txt>3412</a> <a href=poj\\3413.txt>3413</a> <a href=poj\\3414.txt>3414</a> <a href=poj\\3415.txt>3415</a> <a href=poj\\3416.txt>3416</a> <a href=poj\\3417.txt>3417</a> <a href=poj\\3418.txt>3418</a> <a href=poj\\3419.txt>3419</a> <a href=poj\\3420.txt>3420</a> <a href=poj\\3421.txt>3421</a> <a href=poj\\3422.txt>3422</a> <a href=poj\\3423.txt>3423</a> <a href=poj\\3424.txt>3424</a> <a href=poj\\3425.txt>3425</a> <a href=poj\\3426.txt>3426</a> <a href=poj\\3427.txt>3427</a> <a href=poj\\3428.txt>3428</a> <a href=poj\\3429.txt>3429</a> <a href=poj\\3430.txt>3430</a> <a href=poj\\3431.txt>3431</a> <a href=poj\\3432.txt>3432</a> <a href=poj\\3433.txt>3433</a> <a href=poj\\3434.txt>3434</a> <a href=poj\\3435.txt>3435</a> <a href=poj\\3436.txt>3436</a> <a href=poj\\3437.txt>3437</a> <a href=poj\\3438.txt>3438</a> <a href=poj\\3439.txt>3439</a> <a href=poj\\3440.txt>3440</a> <a href=poj\\3441.txt>3441</a> <a href=poj\\3442.txt>3442</a> <a href=poj\\3443.txt>3443</a> <a href=poj\\3444.txt>3444</a> <a href=poj\\3445.txt>3445</a> <a href=poj\\3446.txt>3446</a> <a href=poj\\3447.txt>3447</a> <a href=poj\\3448.txt>3448</a> <a href=poj\\3449.txt>3449</a> <a href=poj\\3450.txt>3450</a> <a href=poj\\3451.txt>3451</a> <a href=poj\\3452.txt>3452</a> <a href=poj\\3453.txt>3453</a> <a href=poj\\3454.txt>3454</a> <a href=poj\\3455.txt>3455</a> <a href=poj\\3456.txt>3456</a> <a href=poj\\3457.txt>3457</a> <a href=poj\\3458.txt>3458</a> <a href=poj\\3459.txt>3459</a> <a href=poj\\3460.txt>3460</a> <a href=poj\\3461.txt>3461</a> <a href=poj\\3462.txt>3462</a> <a href=poj\\3463.txt>3463</a> <a href=poj\\3464.txt>3464</a> <a href=poj\\3465.txt>3465</a> <a href=poj\\3466.txt>3466</a> <a href=poj\\3467.txt>3467</a> <a href=poj\\3468.txt>3468</a> <a href=poj\\3469.txt>3469</a> <a href=poj\\3470.txt>3470</a> <a href=poj\\3471.txt>3471</a> <a href=poj\\3472.txt>3472</a> <a href=poj\\3473.txt>3473</a> <a href=poj\\3474.txt>3474</a> <a href=poj\\3475.txt>3475</a> <a href=poj\\3476.txt>3476</a> <a href=poj\\3477.txt>3477</a> <a href=poj\\3478.txt>3478</a> <a href=poj\\3479.txt>3479</a> <a href=poj\\3480.txt>3480</a> <a href=poj\\3481.txt>3481</a> <a href=poj\\3482.txt>3482</a> <a href=poj\\3483.txt>3483</a> <a href=poj\\3484.txt>3484</a> <a href=poj\\3485.txt>3485</a> <a href=poj\\3486.txt>3486</a> <a href=poj\\3487.txt>3487</a> <a href=poj\\3488.txt>3488</a> <a href=poj\\3489.txt>3489</a> <a href=poj\\3490.txt>3490</a> <a href=poj\\3491.txt>3491</a> <a href=poj\\3492.txt>3492</a> <a href=poj\\3493.txt>3493</a> <a href=poj\\3494.txt>3494</a> <a href=poj\\3495.txt>3495</a> <a href=poj\\3496.txt>3496</a> <a href=poj\\3497.txt>3497</a> <a href=poj\\3498.txt>3498</a> <a href=poj\\3499.txt>3499</a> <a href=poj\\3500.txt>3500</a> <a href=poj\\3501.txt>3501</a> <a href=poj\\3502.txt>3502</a> <a href=poj\\3503.txt>3503</a> <a href=poj\\3504.txt>3504</a> <a href=poj\\3505.txt>3505</a> <a href=poj\\3506.txt>3506</a> <a href=poj\\3507.txt>3507</a> <a href=poj\\3508.txt>3508</a> <a href=poj\\3509.txt>3509</a> <a href=poj\\3510.txt>3510</a> <a href=poj\\3511.txt>3511</a> <a href=poj\\3512.txt>3512</a> <a href=poj\\3513.txt>3513</a> <a href=poj\\3514.txt>3514</a> <a href=poj\\3515.txt>3515</a> <a href=poj\\3516.txt>3516</a> <a href=poj\\3517.txt>3517</a> <a href=poj\\3518.txt>3518</a> <a href=poj\\3519.txt>3519</a> <a href=poj\\3520.txt>3520</a> <a href=poj\\3521.txt>3521</a> <a href=poj\\3522.txt>3522</a> <a href=poj\\3523.txt>3523</a> <a href=poj\\3524.txt>3524</a> <a href=poj\\3525.txt>3525</a> <a href=poj\\3526.txt>3526</a> <a href=poj\\3527.txt>3527</a> <a href=poj\\3528.txt>3528</a> <a href=poj\\3529.txt>3529</a> <a href=poj\\3530.txt>3530</a> <a href=poj\\3531.txt>3531</a> <a href=poj\\3532.txt>3532</a> <a href=poj\\3533.txt>3533</a> <a href=poj\\3534.txt>3534</a> <a href=poj\\3535.txt>3535</a> <a href=poj\\3536.txt>3536</a> <a href=poj\\3537.txt>3537</a> <a href=poj\\3538.txt>3538</a> <a href=poj\\3539.txt>3539</a> <a href=poj\\3540.txt>3540</a> <a href=poj\\3541.txt>3541</a> <a href=poj\\3542.txt>3542</a> <a href=poj\\3543.txt>3543</a> <a href=poj\\3544.txt>3544</a> <a href=poj\\3545.txt>3545</a> <a href=poj\\3546.txt>3546</a> <a href=poj\\3547.txt>3547</a> <a href=poj\\3548.txt>3548</a> <a href=poj\\3549.txt>3549</a> <a href=poj\\3550.txt>3550</a> <a href=poj\\3551.txt>3551</a> <a href=poj\\3552.txt>3552</a> <a href=poj\\3553.txt>3553</a> <a href=poj\\3554.txt>3554</a> <a href=poj\\3555.txt>3555</a> <a href=poj\\3556.txt>3556</a> <a href=poj\\3557.txt>3557</a> <a href=poj\\3558.txt>3558</a> <a href=poj\\3559.txt>3559</a> <a href=poj\\3560.txt>3560</a> <a href=poj\\3561.txt>3561</a> <a href=poj\\3562.txt>3562</a> <a href=poj\\3563.txt>3563</a> <a href=poj\\3564.txt>3564</a> <a href=poj\\3565.txt>3565</a> <a href=poj\\3566.txt>3566</a> <a href=poj\\3567.txt>3567</a> <a href=poj\\3568.txt>3568</a> <a href=poj\\3569.txt>3569</a> <a href=poj\\3570.txt>3570</a> <a href=poj\\3571.txt>3571</a> <a href=poj\\3572.txt>3572</a> <a href=poj\\3573.txt>3573</a> <a href=poj\\3574.txt>3574</a> <a href=poj\\3575.txt>3575</a> <a href=poj\\3576.txt>3576</a> <a href=poj\\3577.txt>3577</a> <a href=poj\\3578.txt>3578</a> <a href=poj\\3579.txt>3579</a> <a href=poj\\3580.txt>3580</a> <a href=poj\\3581.txt>3581</a> <a href=poj\\3582.txt>3582</a> <a href=poj\\3583.txt>3583</a> <a href=poj\\3584.txt>3584</a> <a href=poj\\3585.txt>3585</a> <a href=poj\\3586.txt>3586</a> <a href=poj\\3587.txt>3587</a> <a href=poj\\3588.txt>3588</a> <a href=poj\\3589.txt>3589</a> <a href=poj\\3590.txt>3590</a> <a href=poj\\3591.txt>3591</a> <a href=poj\\3592.txt>3592</a> <a href=poj\\3593.txt>3593</a> <a href=poj\\3594.txt>3594</a> <a href=poj\\3595.txt>3595</a> <a href=poj\\3596.txt>3596</a> <a href=poj\\3597.txt>3597</a> <a href=poj\\3598.txt>3598</a> <a href=poj\\3599.txt>3599</a> <a href=poj\\3600.txt>3600</a> <a href=poj\\3601.txt>3601</a> <a href=poj\\3602.txt>3602</a> <a href=poj\\3603.txt>3603</a> <a href=poj\\3604.txt>3604</a> <a href=poj\\3605.txt>3605</a> <a href=poj\\3606.txt>3606</a> <a href=poj\\3607.txt>3607</a> <a href=poj\\3608.txt>3608</a> <a href=poj\\3609.txt>3609</a> <a href=poj\\3610.txt>3610</a> <a href=poj\\3611.txt>3611</a> <a href=poj\\3612.txt>3612</a> <a href=poj\\3613.txt>3613</a> <a href=poj\\3614.txt>3614</a> <a href=poj\\3615.txt>3615</a> <a href=poj\\3616.txt>3616</a> <a href=poj\\3617.txt>3617</a> <a href=poj\\3618.txt>3618</a> <a href=poj\\3619.txt>3619</a> <a href=poj\\3620.txt>3620</a> <a href=poj\\3621.txt>3621</a> <a href=poj\\3622.txt>3622</a> <a href=poj\\3623.txt>3623</a> <a href=poj\\3624.txt>3624</a> <a href=poj\\3625.txt>3625</a> <a href=poj\\3626.txt>3626</a> <a href=poj\\3627.txt>3627</a> <a href=poj\\3628.txt>3628</a> <a href=poj\\3629.txt>3629</a> <a href=poj\\3630.txt>3630</a> <a href=poj\\3631.txt>3631</a> <a href=poj\\3632.txt>3632</a> <a href=poj\\3633.txt>3633</a> <a href=poj\\3634.txt>3634</a> <a href=poj\\3635.txt>3635</a> <a href=poj\\3636.txt>3636</a> <a href=poj\\3637.txt>3637</a> <a href=poj\\3638.txt>3638</a> <a href=poj\\3639.txt>3639</a> <a href=poj\\3640.txt>3640</a> <a href=poj\\3641.txt>3641</a> <a href=poj\\3642.txt>3642</a> <a href=poj\\3643.txt>3643</a> <a href=poj\\3644.txt>3644</a> <a href=poj\\3645.txt>3645</a> <a href=poj\\3646.txt>3646</a> <a href=poj\\3647.txt>3647</a> <a href=poj\\3648.txt>3648</a> <a href=poj\\3649.txt>3649</a> <a href=poj\\3650.txt>3650</a> <a href=poj\\3651.txt>3651</a> <a href=poj\\3652.txt>3652</a> <a href=poj\\3653.txt>3653</a> <a href=poj\\3654.txt>3654</a> <a href=poj\\3655.txt>3655</a> <a href=poj\\3656.txt>3656</a> <a href=poj\\3657.txt>3657</a> <a href=poj\\3658.txt>3658</a> <a href=poj\\3659.txt>3659</a> <a href=poj\\3660.txt>3660</a> <a href=poj\\3661.txt>3661</a> <a href=poj\\3662.txt>3662</a> <a href=poj\\3663.txt>3663</a> <a href=poj\\3664.txt>3664</a> <a href=poj\\3665.txt>3665</a> <a href=poj\\3666.txt>3666</a> <a href=poj\\3667.txt>3667</a> <a href=poj\\3668.txt>3668</a> <a href=poj\\3669.txt>3669</a> <a href=poj\\3670.txt>3670</a> <a href=poj\\3671.txt>3671</a> <a href=poj\\3672.txt>3672</a> <a href=poj\\3673.txt>3673</a> <a href=poj\\3674.txt>3674</a> <a href=poj\\3675.txt>3675</a> <a href=poj\\3676.txt>3676</a> <a href=poj\\3677.txt>3677</a> <a href=poj\\3678.txt>3678</a> <a href=poj\\3679.txt>3679</a> <a href=poj\\3680.txt>3680</a> <a href=poj\\3681.txt>3681</a> <a href=poj\\3682.txt>3682</a> <a href=poj\\3683.txt>3683</a> <a href=poj\\3684.txt>3684</a> <a href=poj\\3685.txt>3685</a> <a href=poj\\3686.txt>3686</a> <a href=poj\\3687.txt>3687</a> <a href=poj\\3688.txt>3688</a> <a href=poj\\3689.txt>3689</a> <a href=poj\\3690.txt>3690</a> <a href=poj\\3691.txt>3691</a> <a href=poj\\3692.txt>3692</a> <a href=poj\\3693.txt>3693</a> <a href=poj\\3694.txt>3694</a> <a href=poj\\3695.txt>3695</a> <a href=poj\\3696.txt>3696</a> <a href=poj\\3697.txt>3697</a> <a href=poj\\3698.txt>3698</a> <a href=poj\\3699.txt>3699</a> <a href=poj\\3700.txt>3700</a> <a href=poj\\3701.txt>3701</a> <a href=poj\\3702.txt>3702</a> <a href=poj\\3703.txt>3703</a> <a href=poj\\3704.txt>3704</a> <a href=poj\\3705.txt>3705</a> <a href=poj\\3706.txt>3706</a> <a href=poj\\3707.txt>3707</a> <a href=poj\\3708.txt>3708</a> <a href=poj\\3709.txt>3709</a> <a href=poj\\3710.txt>3710</a> <a href=poj\\3711.txt>3711</a> <a href=poj\\3712.txt>3712</a> <a href=poj\\3713.txt>3713</a> <a href=poj\\3714.txt>3714</a> <a href=poj\\3715.txt>3715</a> <a href=poj\\3716.txt>3716</a> <a href=poj\\3717.txt>3717</a> <a href=poj\\3718.txt>3718</a> <a href=poj\\3719.txt>3719</a> <a href=poj\\3720.txt>3720</a> <a href=poj\\3721.txt>3721</a> <a href=poj\\3722.txt>3722</a> <a href=poj\\3723.txt>3723</a> <a href=poj\\3724.txt>3724</a> <a href=poj\\3725.txt>3725</a> <a href=poj\\3726.txt>3726</a> <a href=poj\\3727.txt>3727</a> <a href=poj\\3728.txt>3728</a> <a href=poj\\3729.txt>3729</a> <a href=poj\\3730.txt>3730</a> <a href=poj\\3731.txt>3731</a> <a href=poj\\3732.txt>3732</a> <a href=poj\\3733.txt>3733</a> <a href=poj\\3734.txt>3734</a> <a href=poj\\3735.txt>3735</a> <a href=poj\\3736.txt>3736</a> <a href=poj\\3737.txt>3737</a> <a href=poj\\3738.txt>3738</a> <a href=poj\\3739.txt>3739</a> <a href=poj\\3740.txt>3740</a> <a href=poj\\3741.txt>3741</a> <a href=poj\\3742.txt>3742</a> <a href=poj\\3743.txt>3743</a> <a href=poj\\3744.txt>3744</a> <a href=poj\\3745.txt>3745</a> <a href=poj\\3746.txt>3746</a> <a href=poj\\3747.txt>3747</a> <a href=poj\\3748.txt>3748</a> <a href=poj\\3749.txt>3749</a> <a href=poj\\3750.txt>3750</a> <a href=poj\\3751.txt>3751</a> <a href=poj\\3752.txt>3752</a> <a href=poj\\3753.txt>3753</a> <a href=poj\\3754.txt>3754</a> <a href=poj\\3755.txt>3755</a> <a href=poj\\3756.txt>3756</a> <a href=poj\\3757.txt>3757</a> <a href=poj\\3758.txt>3758</a> <a href=poj\\3759.txt>3759</a> <a href=poj\\3760.txt>3760</a> <a href=poj\\3761.txt>3761</a> <a href=poj\\3762.txt>3762</a> <a href=poj\\3763.txt>3763</a> <a href=poj\\3764.txt>3764</a> <a href=poj\\3765.txt>3765</a> <a href=poj\\3766.txt>3766</a> <a href=poj\\3767.txt>3767</a> <a href=poj\\3768.txt>3768</a> <a href=poj\\3769.txt>3769</a> <a href=poj\\3770.txt>3770</a> <a href=poj\\3771.txt>3771</a> <a href=poj\\3772.txt>3772</a> <a href=poj\\3773.txt>3773</a> <a href=poj\\3774.txt>3774</a> <a href=poj\\3775.txt>3775</a> <a href=poj\\3776.txt>3776</a> <a href=poj\\3777.txt>3777</a> <a href=poj\\3778.txt>3778</a> <a href=poj\\3779.txt>3779</a> <a href=poj\\3780.txt>3780</a> <a href=poj\\3781.txt>3781</a> <a href=poj\\3782.txt>3782</a> <a href=poj\\3783.txt>3783</a> <a href=poj\\3784.txt>3784</a> <a href=poj\\3785.txt>3785</a> <a href=poj\\3786.txt>3786</a> <a href=poj\\3787.txt>3787</a> <a href=poj\\3788.txt>3788</a> <a href=poj\\3789.txt>3789</a> <a href=poj\\3790.txt>3790</a> <a href=poj\\3791.txt>3791</a> <a href=poj\\3792.txt>3792</a> <a href=poj\\3793.txt>3793</a> <a href=poj\\3794.txt>3794</a> <a href=poj\\3795.txt>3795</a> <a href=poj\\3796.txt>3796</a> <a href=poj\\3797.txt>3797</a> <a href=poj\\3798.txt>3798</a> <a href=poj\\3799.txt>3799</a> <a href=poj\\3800.txt>3800</a> <a href=poj\\3801.txt>3801</a> <a href=poj\\3802.txt>3802</a> <a href=poj\\3803.txt>3803</a> <a href=poj\\3804.txt>3804</a> <a href=poj\\3805.txt>3805</a> <a href=poj\\3806.txt>3806</a> <a href=poj\\3807.txt>3807</a> <a href=poj\\3808.txt>3808</a> <a href=poj\\3809.txt>3809</a> <a href=poj\\3810.txt>3810</a> <a href=poj\\3811.txt>3811</a> <a href=poj\\3812.txt>3812</a> <a href=poj\\3813.txt>3813</a> <a href=poj\\3814.txt>3814</a> <a href=poj\\3815.txt>3815</a> <a href=poj\\3816.txt>3816</a> <a href=poj\\3817.txt>3817</a> <a href=poj\\3818.txt>3818</a> <a href=poj\\3819.txt>3819</a> <a href=poj\\3820.txt>3820</a> <a href=poj\\3821.txt>3821</a> <a href=poj\\3822.txt>3822</a> <a href=poj\\3823.txt>3823</a> <a href=poj\\3824.txt>3824</a> <a href=poj\\3825.txt>3825</a> <a href=poj\\3826.txt>3826</a> <a href=poj\\3827.txt>3827</a> <a href=poj\\3828.txt>3828</a> <a href=poj\\3829.txt>3829</a> <a href=poj\\3830.txt>3830</a> <a href=poj\\3831.txt>3831</a> <a href=poj\\3832.txt>3832</a> <a href=poj\\3833.txt>3833</a> <a href=poj\\3834.txt>3834</a> <a href=poj\\3835.txt>3835</a> <a href=poj\\3836.txt>3836</a> <a href=poj\\3837.txt>3837</a> <a href=poj\\3838.txt>3838</a> <a href=poj\\3839.txt>3839</a> <a href=poj\\3840.txt>3840</a> <a href=poj\\3841.txt>3841</a> <a href=poj\\3842.txt>3842</a> <a href=poj\\3843.txt>3843</a> <a href=poj\\3844.txt>3844</a> <a href=poj\\3845.txt>3845</a> <a href=poj\\3846.txt>3846</a> <a href=poj\\3847.txt>3847</a> <a href=poj\\3848.txt>3848</a> <a href=poj\\3849.txt>3849</a> <a href=poj\\3850.txt>3850</a> <a href=poj\\3851.txt>3851</a> <a href=poj\\3852.txt>3852</a> <a href=poj\\3853.txt>3853</a> <a href=poj\\3854.txt>3854</a> <a href=poj\\3855.txt>3855</a> <a href=poj\\3856.txt>3856</a> <a href=poj\\3857.txt>3857</a> <a href=poj\\3858.txt>3858</a> <a href=poj\\3859.txt>3859</a> <a href=poj\\3860.txt>3860</a> <a href=poj\\3861.txt>3861</a> <a href=poj\\3862.txt>3862</a> <a href=poj\\3863.txt>3863</a> <a href=poj\\3864.txt>3864</a> <a href=poj\\3865.txt>3865</a> <a href=poj\\3866.txt>3866</a> <a href=poj\\3867.txt>3867</a> <a href=poj\\3868.txt>3868</a> <a href=poj\\3869.txt>3869</a> <a href=poj\\3870.txt>3870</a> <a href=poj\\3871.txt>3871</a> <a href=poj\\3872.txt>3872</a> <a href=poj\\3873.txt>3873</a> <a href=poj\\3874.txt>3874</a> <a href=poj\\3875.txt>3875</a> <a href=poj\\3876.txt>3876</a> <a href=poj\\3877.txt>3877</a> <a href=poj\\3878.txt>3878</a> <a href=poj\\3879.txt>3879</a> <a href=poj\\3880.txt>3880</a> <a href=poj\\3881.txt>3881</a> <a href=poj\\3882.txt>3882</a> <a href=poj\\3883.txt>3883</a> <a href=poj\\3884.txt>3884</a> <a href=poj\\3885.txt>3885</a> <a href=poj\\3886.txt>3886</a> <a href=poj\\3887.txt>3887</a> <a href=poj\\3888.txt>3888</a> <a href=poj\\3889.txt>3889</a> <a href=poj\\3890.txt>3890</a> <a href=poj\\3891.txt>3891</a> <a href=poj\\3892.txt>3892</a> <a href=poj\\3893.txt>3893</a> <a href=poj\\3894.txt>3894</a> <a href=poj\\3895.txt>3895</a> <a href=poj\\3896.txt>3896</a> <a href=poj\\3897.txt>3897</a> <a href=poj\\3898.txt>3898</a> <a href=poj\\3899.txt>3899</a> <a href=poj\\3900.txt>3900</a> <a href=poj\\3901.txt>3901</a> <a href=poj\\3902.txt>3902</a> <a href=poj\\3903.txt>3903</a> <a href=poj\\3904.txt>3904</a> <a href=poj\\3905.txt>3905</a> <a href=poj\\3906.txt>3906</a> <a href=poj\\3907.txt>3907</a> <a href=poj\\3908.txt>3908</a> <a href=poj\\3909.txt>3909</a> <a href=poj\\3910.txt>3910</a> <a href=poj\\3911.txt>3911</a> <a href=poj\\3912.txt>3912</a> <a href=poj\\3913.txt>3913</a> <a href=poj\\3914.txt>3914</a> <a href=poj\\3915.txt>3915</a> <a href=poj\\3916.txt>3916</a> <a href=poj\\3917.txt>3917</a> <a href=poj\\3918.txt>3918</a> <a href=poj\\3919.txt>3919</a> <a href=poj\\3920.txt>3920</a> <a href=poj\\3921.txt>3921</a> <a href=poj\\3922.txt>3922</a> <a href=poj\\3923.txt>3923</a> <a href=poj\\3924.txt>3924</a> <a href=poj\\3925.txt>3925</a> <a href=poj\\3926.txt>3926</a> <a href=poj\\3927.txt>3927</a> <a href=poj\\3928.txt>3928</a> <a href=poj\\3929.txt>3929</a> <a href=poj\\3930.txt>3930</a> <a href=poj\\3931.txt>3931</a> <a href=poj\\3932.txt>3932</a> <a href=poj\\3933.txt>3933</a> <a href=poj\\3934.txt>3934</a> <a href=poj\\3935.txt>3935</a> <a href=poj\\3936.txt>3936</a> <a href=poj\\3937.txt>3937</a> <a href=poj\\3938.txt>3938</a> <a href=poj\\3939.txt>3939</a> <a href=poj\\3940.txt>3940</a> <a href=poj\\3941.txt>3941</a> <a href=poj\\3942.txt>3942</a> <a href=poj\\3943.txt>3943</a> <a href=poj\\3944.txt>3944</a> <a href=poj\\3945.txt>3945</a> <a href=poj\\3946.txt>3946</a> <a href=poj\\3947.txt>3947</a> <a href=poj\\3948.txt>3948</a> <a href=poj\\3949.txt>3949</a> <a href=poj\\3950.txt>3950</a> <a href=poj\\3951.txt>3951</a> <a href=poj\\3952.txt>3952</a> <a href=poj\\3953.txt>3953</a> <a href=poj\\3954.txt>3954</a> <a href=poj\\3955.txt>3955</a> <a href=poj\\3956.txt>3956</a> <a href=poj\\3957.txt>3957</a> <a href=poj\\3958.txt>3958</a> <a href=poj\\3959.txt>3959</a> <a href=poj\\3960.txt>3960</a> <a href=poj\\3961.txt>3961</a> <a href=poj\\3962.txt>3962</a> <a href=poj\\3963.txt>3963</a> <a href=poj\\3964.txt>3964</a> <a href=poj\\3965.txt>3965</a> <a href=poj\\3966.txt>3966</a> <a href=poj\\3967.txt>3967</a> <a href=poj\\3968.txt>3968</a> <a href=poj\\3969.txt>3969</a> <a href=poj\\3970.txt>3970</a> <a href=poj\\3971.txt>3971</a> <a href=poj\\3972.txt>3972</a> <a href=poj\\3973.txt>3973</a> <a href=poj\\3974.txt>3974</a> <a href=poj\\3975.txt>3975</a> <a href=poj\\3976.txt>3976</a> <a href=poj\\3977.txt>3977</a> <a href=poj\\3978.txt>3978</a> <a href=poj\\3979.txt>3979</a> <a href=poj\\3980.txt>3980</a> <a href=poj\\3981.txt>3981</a> <a href=poj\\3982.txt>3982</a> <a href=poj\\3983.txt>3983</a> <a href=poj\\3984.txt>3984</a> <a href=poj\\3985.txt>3985</a> <a href=poj\\3986.txt>3986</a> <a href=poj\\3987.txt>3987</a> <a href=poj\\3988.txt>3988</a> <a href=poj\\3989.txt>3989</a> <a href=poj\\3990.txt>3990</a> <a href=poj\\3991.txt>3991</a> <a href=poj\\3992.txt>3992</a> <a href=poj\\3993.txt>3993</a> <a href=poj\\3994.txt>3994</a> <a href=poj\\3995.txt>3995</a> <a href=poj\\3996.txt>3996</a> <a href=poj\\3997.txt>3997</a> <a href=poj\\3998.txt>3998</a> <a href=poj\\3999.txt>3999</a>', '', 'd:\\oj\\data\\1071', 'd:\\oj\\data\\1071', '', '', '', 'SWUST', '', '2007-05-14 20:03:06', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, '');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1072, '----', '大家都在我们的OJ做过题目了吧.做过前面"分花生游戏系列&quot;的题目的同学对博异论的题目都不会再陌生了吧.现在这里又有一个新的分花生游戏.游戏规则如下:\r\n桌上有一定数量的花生一堆,现在还是小谭和杨老师轮流取桌上的花生.这次杨老师先取,每次取花生都只能取走一个或者两个花生.小谭也是同样方法取花生.\r\n现在你的任务就是计算出对于给定的花生数N,那么最后由杨老师取完的方案有多少种?', '输入是多case的，每行一个整数 n (1 <= n <= 3000)，表示桌上总共有 n 颗花生.', '对于每个case，输出一行，为最后由杨老师取完的方案数.', 'd:\\oj\\data\\1072', 'd:\\oj\\data\\1072', '1\r\n2', '1\r\n1', '', 'SWUST.', '', '2007-05-14 20:17:03', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1073, '----', '农民约翰想让他的所有牛参加跳舞的训练，在训练舞会开始之前，n头公牛必须和n头母牛进行配对，每头牛只能参与一次配对。每一头牛都有高度值，配对后要使得所有奶牛对的高度差之和最小。高度值和最终结果都在32位整数范围内。', '第一行是整数n，1<=n<=1000。\r\n接下来的n行是公牛的高度，然后的n行是母牛的高度。', '一个整数，表示所有奶牛对的高度差之和最小值。', 'd:\\oj\\data\\1073', 'd:\\oj\\data\\1073', '4\r\n2\r\n8\r\n5\r\n5\r\n1\r\n4\r\n10\r\n7', '6', '配对方案是2-1 8-10 5-4 5-7。', 'oifans', '', '2007-05-14 22:23:42', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1074, '----', 'Bessie 处于半梦半醒的状态。过了一会儿，她意识到她好像在数羊，不能入睡。Bessie的大脑反应灵敏，仿佛真实地看到了她数过的一个又一个数。她开始注意每一个数码：每一个数码在计数的过程中出现过多少次？\r\n给出两个整数 M 和 N (1 <= M <= N <= 2,000,000,000 以及 N-M <= 500,000)，求每一个数码出现了多少次。\r\n例如考虑序列 129..137: 129, 130, 131, 132, 133, 134, 135, 136, 137。统计后发现：\r\n  1x0     1x5\r\n10x1     1x6\r\n  2x2     1x7\r\n  9x3     0x8\r\n  1x4     1x9', '共一行，两个用空格分开的整数 M 和 N', '共一行，十个用空格分开的整数，分别表示数码(0..9)在序列中出现的次数。', 'd:\\oj\\data\\1074', 'd:\\oj\\data\\1074', '129 137', '1 10 2 9 1 1 1 1 0 1', '', 'oifans', '', '2007-05-14 22:25:04', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1075, '----', 'Bessie 正在减肥，所以她规定每天不能吃超过 C (10 <= C <= 35,000)卡路里的食物。农民 John 在戏弄她，在她面前放了B (1 <= B <= 21) 捅食物。每桶内都有某个单位卡路里(范围：1..35,000)的食物(不一定相同)。Bessie 没有自控能力，一旦她开始吃一个桶中的食物，她就一定把这桶食物全部吃完。 \r\nBessie 对于组合数学不大在行。请确定一个最优组合，使得可以得到最多的卡路里，并且总量不超过C。\r\n例如，总量上限是40卡路里， 6 桶食物分别含有7, 13, 17, 19, 29, 和 31卡路里的食物。Bessie可以吃7 + 31 = 38卡路里，但是可以获取得更多： 7 + 13 + 19 = 39卡路里。没有更好的组合了。', '共两行。\r\n第一行，两个用空格分开的整数： C 和 B\r\n第二行，B个用空格分开的整数，分别表示每桶中食物所含的卡路里。', '共一行，一个整数，表示Bessie能获得的最大卡路里，使她不违反减肥的规则。', 'd:\\oj\\data\\1075', 'd:\\oj\\data\\1075', '40 6\r\n7 13 17 19 29 31', '39', '', 'oifans', '', '2007-05-14 22:26:10', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1076, '----', '给出一个小于10000的正整数，用4位数表示，不到4位前面不零。\r\n每次将中间两位取出，将其平方，构成一个新的数，也用4位数表示，这就是一轮操作。\r\n经过若干轮候，如果得到的数以前出现过，就停止。\r\n求需要经过几轮才能够停止。例如：\r\n4444 ... 44 ... 1936\r\n1936 ... 93 ... 8649\r\n8649 ... 64 ... 4096\r\n4096 ... 09 ... 0081\r\n0081 ... 08 ... 0064\r\n0064 ... 06 ... 0036\r\n0036 ... 03 ... 0009\r\n0009 ... 00 ... 0000\r\n0000 ... 00 ... 0000\r\n经过9轮，得到的0000以前得到过。', '一个整数，初始的数。', '一个整数，表示多少轮后出现重复停止。', 'd:\\oj\\data\\1076', 'd:\\oj\\data\\1076', '4444', '9', '', 'oifans', '', '2007-05-14 22:27:26', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1077, '----', '如果你看过《哈利·波特》，你就会知道魔法世界里的照片是很神奇的。也许是因为小魔法师佳佳长的\r\n太帅，很多人都找他要那种神奇的魔法照片，而且还都要佳佳和他的MM的合照。那些照片可是非常珍贵的，他到底应该把照片给谁呢？\r\n\r\n一共有n个人（以1--n编号）向佳佳要照片，而佳佳只能把照片给其中的k个人。佳佳按照与他们的关系好坏的程度给每个人赋予了一个初始权值W[i]。然后将初始权值从大到小进行排序，每人就有了一个序号D[i]（取值同样是1--n）。按照这个序号对10取模的值将这些人分为10类。也就是说定义每个人的类别序号C[i]的值为(D[i]-1) mod 10 +1，显然类别序号的取值为1--10。第i类的人将会额外得到E[i]的权值。你需要做的就是求出加上额外权值以后，最终的权值最大的k个人，并输出他们的编号。权值都是正整数。在排序中，如果两人的W[i]相同，编号小的优先。', '共三行：\r\n第一行输出用空格隔开的两个整数，分别是n和k。\r\n第二行给出了10个正整数，分别是E[1]到E[10]。\r\n第三行给出了n个正整数，第i个数表示编号为i的人的权值W[i]。', '只需输出一行用空格隔开的k个整数，分别表示最终的W[i]从高到低的人的编号。', 'd:\\oj\\data\\1077', 'd:\\oj\\data\\1077', '10 10\r\n1 2 3 4 5 6 7 8 9 10\r\n2 4 6 8 10 12 14 16 18 20', '10 9 8 7 6 5 4 3 2 1', '', 'oifans', '', '2007-05-14 22:29:24', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1078, '----', '正如你所知，奶牛们没有手指以至于不能玩“石头剪刀布”来任意地决定例如谁先挤奶的顺序。她们甚至也不能通过仍硬币的方式。\r\n\r\n所以她们通过"round number"竞赛的方式。第一头牛选取一个整数，小于20亿。第二头牛也这样选取一个整数。如果这两个数都是 "round numbers"，那么第一头牛获胜，否则第二头牛获胜。\r\n\r\n如果一个正整数N的二进制表示中，0的个数大于或等于1的个数，那么N就被称为"round number" 。例如，整数9，二进制表示是1001，1001 有两个&apos;0''和两个&apos;1''; 因此，9是一个round number。26 的二进制表示是 11010 ; 由于它有2个&apos;0''和3个&apos;1''，所以它不是round number。\r\n\r\n很明显，奶牛们会花费很大精力去转换进制，从而确定谁是胜者。Bessie 想要作弊，而且认为只要她能够知道在一个指定区间范围内的&quot;round numbers"个数。\r\n\r\n帮助她写一个程序，能够告诉她在一个闭区间中有多少round numbers。区间是[start, finish]，包含这两个数。 (1 <= Start < Finish <= 2,000,000,000)', '共一行，两个用空格分开的整数，分别表示Start 和 Finish。', 'Start..Finish范围内round numbers的个数', 'd:\\oj\\data\\1078', 'd:\\oj\\data\\1078', '2 12', '6', '2   10 1x0 + 1x1 ROUND\r\n3   11 0x0 + 2x1 NOT round\r\n4   100 2x0 + 1x1 ROUND\r\n5   101 1x0 + 2x1 NOT round\r\n6   110 1x0 + 2x1 NOT round\r\n7   111 0x0 + 3x1 NOT round\r\n8 1000 3x0 + 1x1 ROUND\r\n9 1001 2x0 + 2x1 ROUND\r\n10 1010 2x0 + 2x1 ROUND\r\n11 1011 1x0 + 3x1 NOT round\r\n12 1100 2x0 + 2x1 ROUND', 'oifans', '', '2007-05-14 22:34:51', 5000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1079, '----', '建造滑雪场的升降轨道。起点和终点的高度已知，x坐标分割成若干份，间隔为1，每一点都给出支架的高度。要选择尽可能少的支架顶端建立固定点，两个固定点之间用一条直钢轨连接，当然要求中间支架的高度都不能超过钢轨在那里的高度。而且两个相邻固定点之间的距离不能超过给定的K。', '第一行是N和K，2<=N<=5000，1<=K<=N-1。\r\n接下来N行，按顺序是支架的高度h，0<=h<=1000000000。', '一个整数，表示最少要选择几个固定点。第一个（起点）和最后一个（终点）一定是固定点。', 'd:\\oj\\data\\1079', 'd:\\oj\\data\\1079', '13 4\r\n0\r\n1\r\n0\r\n2\r\n4\r\n6\r\n8\r\n6\r\n8\r\n8\r\n9\r\n11\r\n12', '5', '可以选择第1、5、7、9、13个支架作为固定点。而且至少需要5个固定点。', 'oifans', '', '2007-05-14 22:47:50', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1080, '----', '实现浏览器的页面前后访问机制。有四种命令：\r\n1、BACK；\r\n2、FORWARD；\r\n3、VISIT：访问新的页面；\r\n4、QUIT：退出浏览器。\r\n请参考实际的浏览器按钮的功能。\r\n假设浏览器打开时，显示的页面是：http://www.acm.org/。', '一系列命令：以BACK、FORWARD、VISIT或QUIT开头。如果是VISIT，后面要跟URL，长度不超过70，且不含空格。最后总是以QUIT结尾。', '对于每一个命令（除了QUIT），输出浏览页面的URL，如果命令被忽略，输出：Ignored。', 'd:\\oj\\data\\1080', 'd:\\oj\\data\\1080', 'VISIT http://acm.ashland.edu/\r\nVISIT http://asm.baylor.edu/acmipc/\r\nBACK\r\nBACK\r\nBACK\r\nFORWARD\r\nVISIT http://www.ibm.com/\r\nBACK\r\nBACK\r\nFORWARD\r\nFORWARD\r\nFORWARD\r\nQUIT', 'http://acm.ashland.edu/\r\nhttp://asm.baylor.edu/acmipc/\r\nhttp://acm.ashland.edu/\r\nhttp://www.acm.org/\r\nIgnored\r\nhttp://acm.ashland.edu/\r\nhttp://www.ibm.com/\r\nhttp://acm.ashland.edu/\r\nhttp://www.acm.org/\r\nhttp://acm.ashland.edu/\r\nhttp://www.ibm.com/\r\nIgnored', '', 'oifans', '', '2007-05-14 22:49:24', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1081, '----', '', '', '', 'd:\\oj\\data\\1081', 'd:\\oj\\data\\1081', '', '', '', '', '', '2007-05-15 16:18:42', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1082, '----', '', '', '', 'd:\\oj\\data\\1082', 'd:\\oj\\data\\1082', '', '', '', '', '', '2007-05-15 16:18:47', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1083, '----', '', '', '', 'd:\\oj\\data\\1083', 'd:\\oj\\data\\1083', '', '', '', '', '', '2007-05-15 16:18:52', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1084, '----', '', '', '', 'd:\\oj\\data\\1084', 'd:\\oj\\data\\1084', '', '', '', '', '', '2007-05-15 16:18:56', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1085, '----', '', '', '', 'd:\\oj\\data\\1085', 'd:\\oj\\data\\1085', '', '', '', '', '', '2007-05-15 16:18:59', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1086, '----', '', '', '', 'd:\\oj\\data\\1086', 'd:\\oj\\data\\1086', '', '', '', '', '', '2007-05-15 16:19:02', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1087, '----', '', '', '', 'd:\\oj\\data\\1087', 'd:\\oj\\data\\1087', '', '', '', '', '', '2007-05-15 16:19:05', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1088, '----', '', '', '', 'd:\\oj\\data\\1088', 'd:\\oj\\data\\1088', '', '', '', '', '', '2007-05-15 16:19:08', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1089, '----', '', '', '', 'd:\\oj\\data\\1089', 'd:\\oj\\data\\1089', '', '', '', '', '', '2007-05-15 16:19:12', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1090, '----', '', '', '', 'd:\\oj\\data\\1090', 'd:\\oj\\data\\1090', '', '', '', '', '', '2007-05-15 16:19:15', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1091, '----', '', '', '', 'd:\\oj\\data\\1091', 'd:\\oj\\data\\1091', '', '', '', '', '', '2007-05-15 16:19:17', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1092, '----', '', '', '', 'd:\\oj\\data\\1092', 'd:\\oj\\data\\1092', '', '', '', '', '', '2007-05-15 16:19:21', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1093, '----', '', '', '', 'd:\\oj\\data\\1093', 'd:\\oj\\data\\1093', '', '', '', '', '', '2007-05-15 16:19:24', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1094, '----', '', '', '', 'd:\\oj\\data\\1094', 'd:\\oj\\data\\1094', '', '', '', '', '', '2007-05-15 16:19:26', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1095, '----', '', '', '', 'd:\\oj\\data\\1095', 'd:\\oj\\data\\1095', '', '', '', '', '', '2007-05-15 16:19:30', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1096, '----', '', '', '', 'd:\\oj\\data\\1096', 'd:\\oj\\data\\1096', '', '', '', '', '', '2007-05-15 16:19:33', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1097, '----', '', '', '', 'd:\\oj\\data\\1097', 'd:\\oj\\data\\1097', '', '', '', '', '', '2007-05-15 16:19:36', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1098, '----', '', '', '', 'd:\\oj\\data\\1098', 'd:\\oj\\data\\1098', '', '', '', '', '', '2007-05-15 16:19:38', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1099, '----', '', '', '', 'd:\\oj\\data\\1099', 'd:\\oj\\data\\1099', '', '', '', '', '', '2007-05-15 16:19:41', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1100, 'Nasty Hacks', 'You are the CEO of Nasty Hacks Inc., a company that creates small pieces of malicious software which teenagers may use\r\nto fool their friends. The company has just finished their first product and it is time to sell it. You want to make as much money as possible and consider advertising in order to increase sales. You get an analyst to predict the expected revenue, both with and without advertising. You now want to make a decision as to whether you should advertise or not, given the expected revenues.', 'The input consists of n cases, and the first line consists of one positive integer giving n. The next n lines each contain 3 integers, r, e and c. The first, r, is the expected revenue if you do not advertise, the second, e, is the expected revenue if you do advertise, and the third, c, is the cost of advertising. You can assume that the input will follow these restrictions: &#8722;106 ≤ r, e ≤ 106 and 0 ≤ c ≤ 106.', 'Output one line for each test case: “advertise”, “do not advertise” or “does not matter”, presenting whether it is most profitable to advertise or not, or whether it does not make any difference.', 'd:\\oj\\data\\1100', 'd:\\oj\\data\\1100', '3\r\n0 100 70\r\n100 130 30\r\n-100 -70 40', 'advertise\r\ndoes not matter\r\ndo not advertise', '', 'Nordic 2006', '', '2007-08-10 21:30:04', 1000, 65536, 'Y', NULL, 2, 3, 67, 1, 33, 2, 2, 30000, 0, ''),
(1101, 'THE DRUNK JAILER (数论)', 'A certain prison contains a long hall of n cells, each right next to each other. Each cell has a prisoner in it, and each cell is locked. \r\nOne night, the jailer gets bored and decides to play a game. For round 1 of the game, he takes a drink of whiskey,and then runs down the hall unlocking each cell. For round 2, he takes a drink of whiskey, and then runs down the \r\nhall locking every other cell (cells 2, 4, 6, ?). For round 3, he takes a drink of whiskey, and then runs down the hall. He visits every third cell (cells 3, 6, 9, ?). If the cell is locked, he unlocks it; if it is unlocked, he locks it. He \r\nrepeats this for n rounds, takes a final drink, and passes out. \r\nSome number of prisoners, possibly zero, realizes that their cells are unlocked and the jailer is incapacitated. They immediately escape. \r\nGiven the number of cells, determine how many prisoners escape jail.', 'The first line of input contains a single positive integer. This is the number of lines that follow. Each of the following lines contains a single integer between 5 and 100, inclusive, which is the number of cells n.', 'For each line, you must print out the number of prisoners that escape when the prison has n cells.', 'd:\\oj\\data\\1101', 'd:\\oj\\data\\1101', '2\r\n5\r\n100', '2\r\n10', '', 'Greater New York 2002', '', '2012-06-06 23:07:24', 1000, 65536, 'N', NULL, 80, 94, 85, 7, 11, 60, 59, 30000, 334, ''),
(1102, 'Web浏览(简单模拟)', '实现浏览器的页面前后访问机制。有四种命令： \r\n1、BACK； \r\n2、FORWARD； \r\n3、VISIT：访问新的页面； \r\n4、QUIT：退出浏览器。 \r\n请参考实际的浏览器按钮的功能。 \r\n假设浏览器打开时，显示的页面是：http://www.acm.org/。', '一系列命令：以BACK、FORWARD、VISIT或QUIT开头。如果是VISIT，后面要跟URL，长度不超过70，且不含空格。最后总是以QUIT结尾。', '对于每一个命令（除了QUIT），输出浏览页面的URL，如果命令被忽略，输出：Ignored。', 'd:\\oj\\data\\1102', 'd:\\oj\\data\\1102', 'VISIT http://acm.ashland.edu/\r\nVISIT http://asm.baylor.edu/acmipc/\r\nBACK\r\nBACK\r\nBACK\r\nFORWARD\r\nVISIT http://www.ibm.com/\r\nBACK\r\nBACK\r\nFORWARD\r\nFORWARD\r\nFORWARD\r\nQUIT', 'http://acm.ashland.edu/\r\nhttp://asm.baylor.edu/acmipc/\r\nhttp://acm.ashland.edu/\r\nhttp://www.acm.org/\r\nIgnored\r\nhttp://acm.ashland.edu/\r\nhttp://www.ibm.com/\r\nhttp://acm.ashland.edu/\r\nhttp://www.acm.org/\r\nhttp://acm.ashland.edu/\r\nhttp://www.ibm.com/\r\nIgnored', '', 'oifans', '', '2012-05-03 21:57:49', 1000, 65536, 'N', NULL, 45, 96, 47, 47, 54, 43, 40, 30000, 259, ''),
(1103, '快餐店', '有一个公司,在一条街上有N个快餐店,公司决定修K个仓库以满足这些快餐电的原料需求.\r\n\r\n现在给出N个快餐店的横坐标(他们都在一条直线上面),要求修K个仓库,使得所有的快餐店离其对应的仓库的距离最短.\r\n\r\n公式如下:\r\n\r\n<img src=images\\1103.GIF></img>\r\n\r\n1 <= n <= 200, 1 <= k <= 30, k <= n', '有很多次测试,对于每次测试首先输入N和K,然后输入 N 行正整数，表示这 N 个快餐店的坐标。当 N 和 K同时为0时，输入结束。', '对于每1组测试数据，首先输出一行 Chain 加上测试数据编号，第2行输出Total distance sum = 加上你的最小和。\r\n\r\n每组输出之后打一个空行,包括最后一组数据。', 'd:\\oj\\data\\1103', 'd:\\oj\\data\\1103', '6 3\r\n5\r\n6\r\n12\r\n19\r\n20\r\n27\r\n0 0', 'Chain 1\r\nTotal distance sum = 8', '', 'SWUST', '', '2011-11-11 10:45:18', 1000, 65536, 'N', NULL, 9, 45, 20, 12, 63, 8, 7, 30000, 133, ''),
(1104, '不断繁殖的细胞', '某种细胞（用''*''表示）繁殖遵循一定的规律。第一天的数量为1，以后按照如下方式繁殖：\r\n\r\n第一天:\r\n           \r\n                  *\r\n\r\n第二天:\r\n\r\n                  *\r\n                 ***\r\n                  *\r\n第三天:\r\n        \r\n                  *\r\n                 ***\r\n                *****\r\n                 ***\r\n                  *\r\n。。。。。。。。。\r\n\r\n你需要计算第x天的细胞数量。', '第一行一个N(<=1000),下面将有N行测试数据，每个测试数据为第x( 0 <= x <= 1000)天.\r\n输入0的时候输出为1.', '对于每个第X天，输出那一天的细胞数量。', 'd:\\oj\\data\\1104', 'd:\\oj\\data\\1104', '3\r\n1\r\n2\r\n3', '1\r\n5\r\n13', '', 'SWUST.Tax', '', '2012-06-17 15:45:08', 1000, 65536, 'N', NULL, 172, 336, 51, 138, 46, 169, 163, 30000, 329, ''),
(1105, 'Erdos’ Travel', 'Paul Erdos(1913-1996) is a legendary mathematician of the 20th century(For more information about Erdos, see Problem ‘Erdos Number’). Erdos likes to travel and visit other mathematicians. One day he comes to a strange country named ByteLand, where people live on small islands. The islands are connected by two-way bridges and the topology of the islands is a tree(i.e. you can go from any island to any other one via bridges, and if any bridge is broken then the islands will be separated into two mutually unreachable parts). See the picture below for an example of the topology of the islands.\r\n                         <IMG SRC=http://acm.tju.edu.cn/toj/contest/2797_travel.gif>\r\nErdos has heard before from legends that on each island of ByteLand lives a great mathematician, so he devised the following visiting plan before he arrives here: On each day he would randomly choose an island different from the one he is currently on and go to visit the mathematician there. He would spend the whole day on that island, discussing mathematical problems with his host, and moves on again the next day. Note Erdos might visit the same mathematician twice during a series of days. \r\nFor example, in the picture above, assume Erdos initially arrives in island 1 on the first day, he would randomly choose from islands 2, 3, 4, 5 and 6 as his next stop and travels there. If he chooses island 2, then on the second day his choice would be 1, 3, 4, 5 or 6.\r\n\r\nAlthough Erdos is very enthusiastic about his traveling plan, he hates to cross the old bridges every day! However he still stipulates to his random-traveling plan, because he is a strong believer in probability theory and he thinks that this is the best way to maximize the chance of discovering new mathematic theorems. \r\n\r\nNow Erdos would like to know, if his choice in each day is purely random(i.e. if there are n choices, then each one will be chosen with probability of 1/n), what is the expected(i.e. average) number of bridges he would cross during R days. In addition, the initial island which  Erdos arrives in is equally likely to be any of the islands of ByteLand.', 'On the first line of the input file are two integers N and R,(1<=N<=50000, 1<=R<=10000) the number of islands of ByteLand and the number of days Erdos would travel. The following N-1 lines each contain two number A and B, meaning there is a bridge between island A and B.\r\nNotes\r\n\r\n&#61548;	Islands are numbered from 1 to N.\r\n&#61548;	The topology of the given islands is a tree.\r\n&#61548;	A fraction A/B is reduced if and only if the greatest common divisor of A and B is 1.', 'Output on a single line the expected number of bridges Erdos would cross during R days. Output the answer as a reduced fraction A/B.', 'd:\\oj\\data\\1105', 'd:\\oj\\data\\1105', '3 1\r\n1 2\r\n2 3', '4/3', 'There are 3 islands. Connected by bridges as 1 – 2 – 3. Erdos would travel for 1 day. If he arrives in island 1 initially, he would pick island 2 or island 3 as his next stop, both with probability of 1/2, for an expected number of 1*1/2 + 2*1/2 = 3/2 bridges. If he arrives in island 2 initially, he would cross, on average, 1*1/2 + 1*1/2 = 1 bridge. He would cross an expected number of 2*1/2 + 1*1/2 = 3/2 bridges if he initially arrives in island 3. The expected number of bridges Erdos would cross is thus 3/2*1/3 + 1*1/3 + 3/2*1/3 = 4/3.\r\n\r\nSample Input 2\r\n\r\n2 2\r\n1 2\r\n\r\nSample Ouput 2\r\n\r\n2/1\r\n\r\nSample Input/Output 2 Clarification\r\n\r\nThere are only 2 islands, and Erdos would travel for 2 days. There are 2 equally likely paths that he would take during the 2 days: 1-2-1 and 2-1-2, so the answer is (2+2)*1/2 = 2.', 'The 5th UESTC Programming Contest', '', '2007-05-15 16:39:03', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 86, ''),
(1106, '交替排列的字符', '有2n字符挨个排成一排，前n个是''1'',后n个是''0''.如 11110000(此时2n=8),现在交换字符的位置，使之按照 10101010 的模式排列。而且要使字符移动的次数最少，编程计算最少的移动次数。', '第一行为测试次数t,下面有t行测试数据，每行给出一个整数N,代表有2N个字符.( N < 30000 )', '对于每个2N,输出最少的字符移动次数。', 'd:\\oj\\data\\1106', 'd:\\oj\\data\\1106', '3\r\n2\r\n3\r\n4', '1\r\n1 \r\n2', '', 'SWUST.Tax', '', '2012-05-23 18:19:15', 1000, 65536, 'N', NULL, 107, 151, 71, 33, 25, 109, 101, 30000, 264, ''),
(1107, '单向公路', '某个地区有许多城镇，但并不是每个城镇都跟其他城镇有公路连接，且有公路的并不都能双向行驶。现在我们把这些城镇间的公路分布及允许的行驶方向告诉你，你需要编程解决通过公路是否可以从一个城镇到达另一个城镇。（我们规定，城镇自己跟自己可互相到达，即A可到达A).', '第一行只有一个数N,下面将跟着2N行数据.\r\n\r\n在前N行数据中,对于每行数据,最开头一个数字number,表明这一行总共有number个数,number的下一个数为i,代表编号为i的那个城镇.这行余下的就是跟i有公路连接的城镇的名单，且只能从城镇i驶向其他城镇。如 4 1 2 3，表明:此行有4个数,跟城镇1有公路连接的城镇是编号为2和3的城镇，且只允许从城镇1驶向城镇2和3，而不能从2到1或3到1。\r\n\r\n在后N行数据中,每行由两个数字组成a,b.\r\n	\r\n对于每个输入的数有如下关系 0 <= input_number <= 1000 .', '对于输入数据中的每个a,b,判断是否可以从城镇a通过公路到达城镇b,如果可以,输出Yes;否则输出No.', 'd:\\oj\\data\\1107', 'd:\\oj\\data\\1107', '3\r\n4 1 2 3 \r\n3 4 5\r\n3 5 8\r\n1 2\r\n1 8\r\n4 8', 'Yes\r\nNo\r\nYes', '', 'SWUST.Tax', '', '2012-07-26 13:48:22', 5000, 65536, 'N', NULL, 50, 186, 27, 75, 72, 35, 29, 30000, 813, ''),
(1108, '密码生成器', '给定两个数M，N。我们将m 去 mod n 可以得到一个值，当然这个值必须是在[0,n-1]之间的，之后用m的2倍,m的3倍等等去 mod n，如果这些运算得到的结果正好可以取满[0,n-1]的话，我们就称M,N为一个好的密码生成器。例如M=3,N=5时, \r\n\r\n　 \r\n\r\n3*1 mod 5=3\r\n\r\n3*2 mod 5=1\r\n\r\n3*3 mod 5=4\r\n\r\n3*4 mod 5=2\r\n\r\n3*5 mod 5=0.\r\n\r\n    所有0至5-1之间的数都可以被取出来。但当M=15,N=20时就不可以了。现在你的问题在于：对于每一对给定的M，N，确定它们是否为一个好的密码生成器。', '输入情况包括有若干行，每一行两个数，第一个代表M，第二个代表N。\r\n输入一直处理倒EOF为止.', '每次测试输出一行,先将参与运算的M与N打印出来(之间用一个空格分开),如果它们是好的密码生成器就打印&quot;Good Choice",否则就打印”Bad Choice”.', 'd:\\oj\\data\\1108', 'd:\\oj\\data\\1108', '3 5', '3 5 Good Choice', '', 'SWUST', '', '2012-05-23 21:39:39', 1000, 65536, 'N', NULL, 69, 421, 16, 336, 86, 86, 56, 30000, 520, ''),
(1109, 'Rails  (堆栈)', 'There is a famous railway station in PopPush City. Country there is incredibly hilly. The station was built in last century. Unfortunately, funds were extremely limited that time. It was possible to establish only a surface track. Moreover, it turned out that the station could be only a dead-end one (see picture) and due to lack of available space it could have only one track. \r\n\r\n<IMG SRC=http://acm.pku.edu.cn/JudgeOnline/images/1363_1.jpg>\r\n\r\nThe local tradition is that every train arriving from the direction A continues in the direction B with coaches reorganized in some way. Assume that the train arriving from the direction A has N <= 1000 coaches numbered in increasing order 1, 2, ..., N. The chief for train reorganizations must know whether it is possible to marshal coaches continuing in the direction B so that their order will be a1, a2, ..., aN. Help him and write a program that decides whether it is possible to get the required order of coaches. You can assume that single coaches can be disconnected from the train before they enter the station and that they can move themselves until they are on the track in the direction B. You can also suppose that at any time there can be located as many coaches as necessary in the station. But once a coach has entered the station it cannot return to the track in the direction A and also once it has left the station in the direction B it cannot return back to the station.', 'The input consists of blocks of lines. Each block except the last describes one train and possibly more requirements for its reorganization. In the first line of the block there is the integer N described above. In each of the next lines of the block there is a permutation of 1, 2, ..., N. The last line of the block contains just 0. \r\n\r\nThe last block consists of just one line containing 0.', 'The output contains the lines corresponding to the lines with permutations in the input. A line of the output contains Yes if it is possible to marshal the coaches in the order required on the corresponding line of the input. Otherwise it contains No. In addition, there is one empty line after the lines corresponding to one block of the input. There is no line in the output corresponding to the last ``null'''' block of the input.', 'd:\\oj\\data\\1109', 'd:\\oj\\data\\1109', '5\r\n1 2 3 4 5\r\n5 4 1 2 3\r\n0\r\n6\r\n6 5 4 3 2 1\r\n0\r\n0', 'Yes\r\nNo\r\n\r\nYes', '', 'Central Europe 1997', '', '2012-09-05 16:03:52', 1000, 10000, 'N', NULL, 39, 70, 56, 28, 47, 34, 32, 30000, 350, ''),
(1110, 'local maxima', 'For a permutation, we call the element which is larger than any of its successors as "local maxima". \r\nYour task is to calculate the average number of local maxima in a random permutaion of n elements.', 'The input contains multiple cases. In each case, there is a single integer n (1<=n<=2^31-1) indicating \r\nthe number of elements of the permutation.', 'Ouput the average number of local maxima in a single line. Accurate the result up to 8 decimal numbers.', 'd:\\oj\\data\\1110', 'd:\\oj\\data\\1110', '2\r\n3', '1.50000000\r\n1.83333333', '', 'SOJ', '', '2012-03-06 17:08:32', 1000, 65536, 'N', NULL, 8, 82, 10, 74, 90, 13, 8, 30000, 137, ''),
(1111, '比赛冠军', '有n个选手参加比赛,比赛的制度为淘汰赛, \r\n即一场比赛,赢者晋级,输者离场并不再比赛 \r\n问:为决出冠军,最少需要多少场比赛', '输入是多case的,每行一个整数 n ( 1 <= n <= 2^31-1 ),当 n 为 0 时输入结束', '对于每个case,输出一行,为最少需要的比赛场次', 'd:\\oj\\data\\1111', 'd:\\oj\\data\\1111', '2\r\n0', '1', '', 'SOJ', '', '2012-05-23 20:20:47', 1000, 65536, 'N', NULL, 219, 383, 57, 115, 42, 172, 157, 30000, 364, ''),
(1112, '分花生游戏系列之3【高精度】', '大家都在我们的OJ做过题目了吧.做过前面"分花生游戏系列&quot;的题目的同学对博异论的题目都不会再陌生了吧.现在这里又有一个新的分花生游戏.游戏规则如下: \r\n桌上有一定数量的花生一堆,现在还是小谭和杨老师轮流取桌上的花生.这次杨老师先取,每次取花生都只能取走一个或者两个花生.小谭也是同样方法取花生. \r\n现在你的任务就是计算出对于给定的花生数N,那么最后由杨老师取完的方案有多少种?', '输入是多case的，每行一个整数 n (1 <= n <= 3000)，表示桌上总共有 n 颗花生.', '对于每个case，输出一行，为最后由杨老师取完的方案数.', 'd:\\oj\\data\\1112', 'd:\\oj\\data\\1112', '1\r\n2', '1\r\n1', '和博弈论无关...', 'SWUST.Larrous', '', '2012-04-18 11:26:13', 1000, 65536, 'N', NULL, 8, 22, 36, 11, 65, 8, 6, 30000, 115, ''),
(1113, '舞会跳舞', '农民约翰想让他的所有牛参加跳舞的训练，在训练舞会开始之前，n头公牛必须和n头母牛进行配对，每头牛只能参与一次配对。每一头牛都有高度值，配对后要使得所有奶牛对的高度差之和最小。高度值和最终结果都在32位整数范围内。', '第一行是整数n，1<=n<=1000。 \r\n接下来的n行是公牛的高度，然后的n行是母牛的高度', '一个整数，表示所有奶牛对的高度差之和最小值。', 'd:\\oj\\data\\1113', 'd:\\oj\\data\\1113', '4\r\n2\r\n8\r\n5\r\n5\r\n1\r\n4\r\n10\r\n7', '6', '配对方案是2-1 8-10 5-4 5-7。', 'oifans', '', '2012-05-23 20:45:08', 1000, 65536, 'N', NULL, 90, 155, 58, 65, 43, 95, 86, 30000, 309, ''),
(1114, '计数的梦', 'Bessie 处于半梦半醒的状态。过了一会儿，她意识到她好像在数羊，不能入睡。Bessie的大脑反应灵敏，仿佛真实地看到了她数过的一个又一个数。她开始注意每一个数码：每一个数码在计数的过程中出现过多少次？ \r\n给出两个整数 M 和 N (1 <= M <= N <= 2,000,000,000 以及 N-M <= 500,000)，求每一个数码出现了多少次。 \r\n例如考虑序列 129..137: 129, 130, 131, 132, 133, 134, 135, 136, 137。统计后发现： \r\n1x0 1x5 \r\n10x1 1x6 \r\n2x2 1x7 \r\n9x3 0x8 \r\n1x4 1x9', '共一行，两个用空格分开的整数 M 和 N', '共一行，十个用空格分开的整数，分别表示数码(0..9)在序列中出现的次数', 'd:\\oj\\data\\1114', 'd:\\oj\\data\\1114', '129 137', '1 10 2 9 1 1 1 1 0 1', '', 'oifans', '', '2012-05-02 12:49:01', 1000, 65536, 'N', NULL, 55, 103, 53, 45, 48, 55, 49, 30000, 273, ''),
(1115, '饮食问题', 'Bessie 正在减肥，所以她规定每天不能吃超过 C (10 <= C <= 35,000)卡路里的食物。农民 John 在戏弄她，在她面前放了B (1 <= B <= 100) 捅食物。每桶内都有某个单位卡路里(范围：1..35,000)的食物(不一定相同)。Bessie 没有自控能力，一旦她开始吃一个桶中的食物，她就一定把这桶食物全部吃完。 \r\nBessie 对于组合数学不大在行。请确定一个最优组合，使得可以得到最多的卡路里，并且总量不超过C。 \r\n例如，总量上限是40卡路里， 6 桶食物分别含有7, 13, 17, 19, 29, 和 31卡路里的食物。Bessie可以吃7 + 31 = 38卡路里，但是可以获取得更多： 7 + 13 + 19 = 39卡路里。没有更好的组合了。', '共两行。 \r\n第一行，两个用空格分开的整数： C 和 B \r\n第二行，B个用空格分开的整数，分别表示每桶中食物所含的卡路里。', '共一行，一个整数，表示Bessie能获得的最大卡路里，使她不违反减肥的规则。', 'd:\\oj\\data\\1115', 'd:\\oj\\data\\1115', '40 6\r\n7 13 17 19 29 31', '39', '', 'oifans', '', '2012-05-04 20:17:56', 1000, 65536, 'N', NULL, 96, 198, 48, 78, 55, 67, 65, 30000, 463, ''),
(1116, '中位平方', '给出一个小于10000的正整数，用4位数表示，不到4位前面补零。 \r\n每次将中间两位取出，将其平方，构成一个新的数，也用4位数表示，这就是一轮操作。 \r\n经过若干轮候，如果得到的数以前出现过，就停止。 \r\n求需要经过几轮才能够停止。例如： \r\n4444 ... 44 ... 1936 \r\n1936 ... 93 ... 8649 \r\n8649 ... 64 ... 4096 \r\n4096 ... 09 ... 0081 \r\n81 ... 08 ... 0064 \r\n0064 ... 06 ... 0036 \r\n0036 ... 03 ... 0009 \r\n0009 ... 00 ... 0000 \r\n0000 ... 00 ... 0000 \r\n经过9轮，得到的0000以前得到过。', '一个整数，初始的数。', '一个整数，表示多少轮后出现重复停止。', 'd:\\oj\\data\\1116', 'd:\\oj\\data\\1116', '4444', '9', '', 'oifans', '', '2012-05-18 16:32:09', 1000, 65536, 'N', NULL, 52, 142, 37, 87, 66, 52, 45, 30000, 340, ''),
(1117, '佳佳的魔法照片', '如果你看过《哈利·波特》，你就会知道魔法世界里的照片是很神奇的。也许是因为小魔法师佳佳长的 \r\n太帅，很多人都找他要那种神奇的魔法照片，而且还都要佳佳和他的MM的合照。那些照片可是非常珍贵的，他到底应该把照片给谁呢？ \r\n\r\n一共有n个人（以1--n编号）向佳佳要照片，而佳佳只能把照片给其中的k个人。佳佳按照与他们的关系好坏的程度给每个人赋予了一个初始权值W[i]。然后将初始权值从大到小进行排序，每人就有了一个序号D[i]（取值同样是1--n）。按照这个序号对10取模的值将这些人分为10类。也就是说定义每个人的类别序号C[i]的值为(D[i]-1) mod 10 +1，显然类别序号的取值为1--10。第i类的人将会额外得到E[i]的权值。你需要做的就是求出加上额外权值以后，最终的权值最大的k个人，并输出他们的编号。权值都是正整数。在排序中，如果两人的W[i]相同，编号小的优先。', '共三行： \r\n第一行输出用空格隔开的两个整数，分别是n和k( 0<= n,k <= 50000 )。 \r\n第二行给出了10个正整数，分别是E[1]到E[10]。 \r\n第三行给出了n个正整数，第i个数表示编号为i的人的权值W[i]。', '只需输出一行用空格隔开的k个整数，分别表示最终的W[i]从高到低的人的编号。', 'd:\\oj\\data\\1117', 'd:\\oj\\data\\1117', '10 10\r\n1 2 3 4 5 6 7 8 9 10\r\n2 4 6 8 10 12 14 16 18 20', '10 9 8 7 6 5 4 3 2 1', '最后不要输出换行。', 'oifans', '', '2012-04-02 22:41:42', 1000, 65536, 'N', NULL, 12, 81, 15, 66, 88, 17, 9, 30000, 184, ''),
(1118, 'Round Numbers', '正如你所知，奶牛们没有手指以至于不能玩“石头剪刀布”来任意地决定例如谁先挤奶的顺序。她们甚至也不能通过仍硬币的方式。 \r\n\r\n所以她们通过"round number"竞赛的方式。第一头牛选取一个整数，小于20亿。第二头牛也这样选取一个整数。如果这两个数都是 "round numbers"，那么第一头牛获胜，否则第二头牛获胜。 \r\n\r\n如果一个正整数N的二进制表示中，0的个数大于或等于1的个数，那么N就被称为"round number" 。例如，整数9，二进制表示是1001，1001 有两个&apos;0''和两个&apos;1''; 因此，9是一个round number。26 的二进制表示是 11010 ; 由于它有2个&apos;0''和3个&apos;1''，所以它不是round number。 \r\n\r\n很明显，奶牛们会花费很大精力去转换进制，从而确定谁是胜者。Bessie 想要作弊，而且认为只要她能够知道在一个指定区间范围内的&quot;round numbers"个数。 \r\n\r\n帮助她写一个程序，能够告诉她在一个闭区间中有多少round numbers。区间是[start, finish]，包含这两个数。 (1 <= Start < Finish <= 2,000,000,000)', '共一行，两个用空格分开的整数，分别表示Start 和 Finish。', 'Start..Finish范围内round numbers的个数', 'd:\\oj\\data\\1118', 'd:\\oj\\data\\1118', '2 12', '6', '2 10 1x0 + 1x1 ROUND \r\n3 11 0x0 + 2x1 NOT round \r\n4 100 2x0 + 1x1 ROUND \r\n5 101 1x0 + 2x1 NOT round \r\n6 110 1x0 + 2x1 NOT round \r\n7 111 0x0 + 3x1 NOT round \r\n8 1000 3x0 + 1x1 ROUND \r\n9 1001 2x0 + 2x1 ROUND \r\n10 1010 2x0 + 2x1 ROUND \r\n11 1011 1x0 + 3x1 NOT round \r\n12 1100 2x0 + 2x1 ROUND', 'oifans', '', '2012-04-02 11:59:57', 5000, 65536, 'N', NULL, 6, 35, 17, 28, 85, 14, 5, 30000, 156, ''),
(1119, 'Ski Lift', '建造滑雪场的升降轨道。起点和终点的高度已知，x坐标分割成若干份，间隔为1，每一点都给出支架的高度。要选择尽可能少的支架顶端建立固定点，两个固定点之间用一条直钢轨连接，当然要求中间支架的高度都不能超过钢轨在那里的高度。而且两个相邻固定点之间的距离不能超过给定的K。', '第一行是N和K，2<=N<=5000，1<=K<=N-1。 \r\n接下来N行，按顺序是支架的高度h，0<=h<=1000000000。', '一个整数，表示最少要选择几个固定点。第一个（起点）和最后一个（终点）一定是固定点。', 'd:\\oj\\data\\1119', 'd:\\oj\\data\\1119', '13 4\r\n0\r\n1\r\n0\r\n2\r\n4\r\n6\r\n8\r\n6\r\n8\r\n8\r\n9\r\n11\r\n12', '5', '可以选择第1、5、7、9、13个支架作为固定点。而且至少需要5个固定点。', 'oifans', '', '2011-03-17 10:35:06', 1000, 65536, 'N', NULL, 4, 14, 29, 10, 91, 2, 1, 30000, 80, ''),
(1120, '变位词', '如果两个单词的组成字母完全相同，只是字母的排列顺序不一样，则它们就是变位词，两个单词相同也被认为是变位词。如tea 与eat , nic 与cin, ddc与dcd, abc与abc 等。你的任务就是判断它们是否是变位词。', '第一行一个N,表示下面有N行测试数据。每行测试数据包括两个单词，如tea eat ,它们之间用空格割开。', '对于每个测试数据，如果它们是变位词，输出Yes,否则输出No.', 'd:\\oj\\data\\1120', 'd:\\oj\\data\\1120', '3\r\ntea eat\r\nddc cdd\r\ndee dde', 'Yes\r\nYes\r\nNo', '', 'SWUST.Tax', '', '2012-05-05 20:24:21', 1000, 10000, 'N', NULL, 138, 286, 48, 140, 53, 129, 122, 30000, 314, ''),
(1121, '寻找最接近自然数', '最接近自然数是指在给定的数中，它们的大小相差(用大数去减小数)是最小的，比如 3,4,6,6,7,则其中最接近自然数是6,6.你的任务就是输出它们的接近程度(对于这个例子是6-6=0）。', '第一行为输入自然数的个数N.第二行为N个自然数(每个数不超过100000).', '最接近自然数的接近程度(即差值,表示成非负数).', 'd:\\oj\\data\\1121', 'd:\\oj\\data\\1121', '10\r\n1 2 3 4 5 6 7 8 9 9', '0', '', 'SWUST.Tax', '', '2012-05-30 18:19:13', 1000, 2000, 'N', NULL, 135, 360, 38, 68, 37, 127, 114, 30000, 561, ''),
(1122, '取石子游戏   (经典博异论)', '有两堆石子，数量任意，可以不同。游戏开始由两个人轮流取石子。游戏规定，每次有两种不同的取法，一是可以在任意的一堆中取走任意多的石子；二是可以在两堆中同时取走相同数量的石子。最后把石子全部取完者为胜者。现在给出初始的两堆石子的数目，如果轮到你先取，假设双方都采取最好的策略，问最后你是胜者还是败者', '输入包含若干行，表示若干种石子的初始情况，其中每一行包含两个非负整数a和b，表示两堆石子的数目，a和b都不大于1,000,000,000。', '输出对应也有若干行，每行包含一个数字1或0，如果最后你是胜者，则为1，反之，则为0。', 'd:\\oj\\data\\1122', 'd:\\oj\\data\\1122', '2 1\r\n8 4\r\n4 7', '0\r\n1\r\n0', '经典博异论', 'NOI', '', '2012-05-13 19:29:38', 1000, 65536, 'N', NULL, 39, 69, 57, 29, 47, 41, 33, 30000, 243, ''),
(1123, '青蛙的约会  (数论)', '两只青蛙在网上相识了，它们聊得很开心，于是觉得很有必要见一面。它们很高兴地发现它们住在同一条纬度线上，于是它们约定各自朝西跳，直到碰面为止。可是它们出发之前忘记了一件很重要的事情，既没有问清楚对方的特征，也没有约定见面的具体位置。不过青蛙们都是很乐观的，它们觉得只要一直朝着某个方向跳下去，总能碰到对方的。但是除非这两只青蛙在同一时间跳到同一点上，不然是永远都不可能碰面的。为了帮助这两只乐观的青蛙，你被要求写一个程序来判断这两只青蛙是否能够碰面，会在什么时候碰面。 \r\n我们把这两只青蛙分别叫做青蛙A和青蛙B，并且规定纬度线上东经0度处为原点，由东往西为正方向，单位长度1米，这样我们就得到了一条首尾相接的数轴。设青蛙A的出发点坐标是x，青蛙B的出发点坐标是y。青蛙A一次能跳m米，青蛙B一次能跳n米，两只青蛙跳一次所花费的时间相同。纬度线总长L米。现在要你求出它们跳了几次以后才会碰面。', '有很多组测试数据,每次输入只包括一行5个整数x，y，m，n，L，其中x≠y < 2000000000，0 < m、n < 2000000000，0 < L < 2100000000。', '没次测试输出一行,输出碰面所需要的跳跃次数，如果永远不可能碰面则输出一行&quot;Impossible"', 'd:\\oj\\data\\1123', 'd:\\oj\\data\\1123', '1 2 3 4 5', '4', '', '浙江', '', '2012-08-14 17:11:23', 1000, 65536, 'N', NULL, 27, 104, 26, 63, 73, 37, 23, 30000, 211, ''),
(1124, 'Joseph  (学会打表)', 'The Joseph''s problem is notoriously known. For those who are not familiar with the original problem: from among n people, numbered 1, 2, . . ., n, standing in circle every mth is going to be executed and only the life of the last remaining person will be saved. Joseph was smart enough to choose the position of the last remaining person, thus saving his life to give us the message about the incident. For example when n = 6 and m = 5 then the people will be executed in the order 5, 4, 6, 2, 3 and 1 will be saved. \r\n\r\nSuppose that there are k good guys and k bad guys. In the circle the first k are good guys and the last k bad guys. You have to determine such minimal m that all the bad guys will be executed before the first good guy.', 'The input file consists of separate lines containing k. The last line in the input file contains 0. You can suppose that 0 < k < 14.', 'The output file will consist of separate lines containing m corresponding to k in the input file.', 'd:\\oj\\data\\1124', 'd:\\oj\\data\\1124', '3\r\n4\r\n0', '5\r\n30', '', 'Central Europe 1995', '', '2012-02-01 15:37:47', 1000, 10000, 'N', NULL, 21, 30, 70, 8, 31, 19, 18, 30000, 147, ''),
(1125, '乒乓球', '国际乒联现在主席沙拉拉自从上任以来就立志于推行一系列改革，以推动乒乓球运动在全球的普及。其中11分制改革引起了很大的争议，有一部分球员因为无法适应新规则只能选择退役。华华就是其中一位，他退役之后走上了乒乓球研究工作，意图弄明白11分制和21分制对选手的不同影响。在开展他的研究之前，他首先需要对他多年比赛的统计数据进行一些分析，所以需要你的帮忙。\r\n\r\n华华通过以下方式进行分析，首先将比赛每个球的胜负列成一张表，然后分别计算在11分制和21分制下，双方的比赛结果（截至记录末尾）。\r\n比如现在有这么一份记录，（其中W表示华华获得一分，L表示华华对手获得一分）：\r\nWWWWWWWWWWWWWWWWWWWWWWLW\r\n在11分制下，此时比赛的结果是华华第一局11比0获胜，第二局11比0获胜，正在进行第三局，当前比分1比1。而在21分制下，此时比赛结果是华华第一局21比0获胜，正在进行第二局，比分2比1。如果一局比赛刚开始，则此时比分为0比0。\r\n你的程序就是要对于一系列比赛信息的输入（WL形式），输出正确的结果。', '每个输入文件包含若干行字符串（每行至多20个字母），字符串有大写的W、L和E组成。其中E表示比赛信息结束，程序应该忽略E之后的所有内容。', '输出由两部分组成，每部分有若干行，每一行对应一局比赛的比分（按比赛信息输入顺序）。其中第一部分是11分制下的结果，第二部分是21分制下的结果，两部分之间由一个空行分隔。', 'd:\\oj\\data\\1125', 'd:\\oj\\data\\1125', 'WWWWWWWWWWWWWWWWWWWW\r\nWWLWE', '11:0\r\n11:0\r\n1:1\r\n\r\n21:0\r\n2:1', '', 'NOIP2003', '', '2012-02-23 23:53:55', 1000, 65536, 'N', NULL, 30, 161, 19, 100, 81, 31, 24, 30000, 239, ''),
(1126, '麦森数', '丁丁最近沉迷于一个数字游戏之中。这个游戏看似简单，但丁丁在研究了许多天之后却发觉原来在简单的规则下想要赢得这个游戏并不那么容易。游戏是这样的，在你面前有一圈整数（一共n个），你要按顺序将其分为m个部分，各部分内的数字相加，相加所得的m个结果对形如2^P-1的素数称为麦森数，这时P一定也是个素数。但反过来不一定，即如果P是个素数，2^P-1不一定也是素数。到1998年底，人们已找到了37个麦森数。最大的一个是P=3021377，它有909526位。麦森数有许多重要应用，它与完全数密切相关。\r\n任务：从文件中输入P（ 1000 < P < 3100000 ），计算2^P-1的位数和最后500位数字（用十进制高精度数表示）', '文件中只包含一个整数P（1000 < P < 3100000 ）', '第一行：十进制高精度数2P-1的位数。\r\n第二行:十进制高精度数2P-1的最后500位数字。（不足500位时高位补0）\r\n不必验证2P-1与P是否为素数。', 'd:\\oj\\data\\1126', 'd:\\oj\\data\\1126', '1279', '386\r\n00000000000000000000000000000000000000000000000000\r\n00000000000000000000000000000000000000000000000000\r\n00000000000000104079321946643990819252403273640855\r\n38615262247266704805319112350403608059673360298012\r\n23944173232418484242161395428100779138356624832346\r\n49081399066056773207629241295093892203457731833496\r\n61583550472959420547689811211693677147548478866962\r\n50138443826029173234888531116082853841658502825560\r\n46662248318909188018470682222031405210266984354887\r\n32958028878050869736186900714720710555703168729087', '', 'NOIP2003', '', '2012-07-24 21:30:58', 1000, 65536, 'N', NULL, 11, 88, 13, 77, 92, 19, 7, 30000, 168, ''),
(1127, '挑战题之排列生成', '一自然数N，设N为3，则关于N的字典序排列为123，132，213，232，312，321。对于一个自然数N(1<= N <= 9 ) , 你要做的便是生成它的字典序排列。', '输入一行为自然数N。', '输出对应于N的字典序排列,每个排列占一行。', 'd:\\oj\\data\\1127', 'd:\\oj\\data\\1127', '3', '123\r\n132\r\n213\r\n231\r\n312\r\n321', '最好使用scanf和printf。', 'SWUST.Tax', '', '2012-07-06 22:45:30', 1000, 65536, 'N', NULL, 111, 190, 58, 75, 48, 88, 81, 30000, 448, '');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1128, 'Automatic Correction of Misspellings', 'Some text editors offer a feature to correct words which seem to be written incorrectly. In this problem you are asked to implement a simple Automatic Correction of Misspellings (ACM). \r\n\r\nACM takes care of the following misspellings of words: \r\n\r\nOne letter is missing (e.g., letter is written leter) or too much (e.g., letter is written lettter). \r\nOne letter is wrong (e.g., letter is written ketter) \r\nThe order of two adjacent letters is wrong (e.g., letter is written lettre) \r\nACM is based on a dictionary of known words. When a text contains a word which is not in the dictionary, ACM will try to replace it by a similar word of the dictionary. Two words are similar if we can transform one word into the other by doing exactly one of the misspellings listed above. An unknown word is left unchanged if there is no similar word in the dictionary.', 'The first line of the input file will give the number n of words in the dictionary (n ≤ 10000). The next n lines contain the dictionary words. The following line contains an integer q ≤ 1000, the number of query words. The next q lines contain the query words. You may assume that each word in the input consists of 1 to 25 lower case letters (''a'' to ''z'').', 'For each query word, print one line with the query word followed by one of the following possibilities:\r\n\r\n1.is correct, if the word occurs in the dictionary. \r\n2.is a misspelling of <x>, where <x> is a word of the dictionary similar to the query word, and the query word is not in the dictionary. In the case that there are several possibilities, select the word from the dictionary which appeared earlier in the input. \r\n3.is unknown, if cases 1 and 2 do not apply.', 'd:\\oj\\data\\1128', 'd:\\oj\\data\\1128', '10\r\nthis\r\nis\r\na\r\ndictionary\r\nthat\r\nwe\r\nwill\r\nuse\r\nfor\r\nus\r\n6\r\nsu\r\nas\r\nthe\r\ndictonary\r\nus\r\nwilll', 'su is a misspelling of us\r\nas is a misspelling of is\r\nthe is unknown\r\ndictonary is a misspelling of dictionary\r\nus is correct\r\nwilll is a misspelling of will', '', 'University of Ulm Local Contest 2006', '', '2009-12-03 15:50:16', 1000, 65536, 'N', NULL, 1, 3, 33, 2, 67, 3, 1, 30000, 65, ''),
(1129, 'Basic wall maze', 'In this problem you have to solve a very simple maze consisting of: \r\n\r\na 6 by 6 grid of unit squares \r\n3 walls of length between 1 and 6 which are placed either horizontally or vertically to separate squares \r\none start and one end marker \r\nA maze may look like this:\r\n<IMG SRC="http://www.informatik.uni-ulm.de/acm/Locals/2006/html/images/construct.png">\r\n \r\nYou have to find a shortest path between the square with the start marker and the square with the end marker. Only moves between adjacent grid squares are allowed; adjacent means that the grid squares share an edge and are not separated by a wall. It is not allowed to leave the grid.', 'The input consists of several test cases. Each test case consists of five lines: The first line contains the column and row number of the square with the start marker, the second line the column and row number of the square with the end marker. The third, fourth and fifth lines specify the locations of the three walls. The location of a wall is specified by either the position of its left end point followed by the position of its right end point (in case of a horizontal wall) or the position of its upper end point followed by the position of its lower end point (in case of a vertical wall). The position of a wall end point is given as the distance from the left side of the grid followed by the distance from the upper side of the grid. \r\n\r\nYou may assume that the three walls don''t intersect with each other, although they may touch at some grid corner, and that the wall endpoints are on the grid. Moreover, there will always be a valid path from the start marker to the end marker. Note that the sample input specifies the maze from the picture above. \r\n\r\nThe last test case is followed by a line containing two zeros.', 'For each test case print a description of a shortest path from the start marker to the end marker. The description should specify the direction of every move (''N'' for up, ''E'' for right, ''S'' for down and ''W'' for left).\r\n\r\nThere can be more than one shortest path, in this case you can print any of them.', 'd:\\oj\\data\\1129', 'd:\\oj\\data\\1129', '1 6\r\n2 6\r\n0 0 1 0\r\n1 5 1 6\r\n1 5 3 5\r\n0 0', 'NEEESWW', '', 'University of Ulm Local Contest 2006', '', '2009-12-03 15:48:16', 1000, 65536, 'N', NULL, 1, 5, 20, 4, 80, 3, 1, 30000, 45, ''),
(1130, 'Construct the wall maze', 'In this problem you have to construct a maze using a maze construction kit consisting of: \r\n\r\na 6 by 6 grid of unit squares \r\n3 walls of length between 1 and 6 which are placed either horizontally or vertically to separate squares \r\none start and one end marker \r\nA maze may look like this:\r\n<IMG SRC=http://www.informatik.uni-ulm.de/acm/Locals/2006/html/images/construct.png>\r\n \r\nWhen a maze is finished, a shortest path between the square with the start marker and the square with the end marker is determined. Only moves between adjacent grid squares are allowed; adjacent means that the grid squares share an edge and are not separated by a wall. It is not allowed to leave the grid.\r\n\r\nYour task is: given a shortest path of some maze, construct this maze. Obviously, the maze you construct should be valid, i.e., all 3 walls should be used, they should not intersect with each other (although they may touch at some grid corner), and the walls should not stick out of the grid. Moreover, the given path should be valid for this maze, i.e., it should lead from the square with the start marker to the square with the end marker without crossing any wall or going outside of the grid, and there shouldn''t exist any shorter valid path', 'The input consists of several test cases. Every test case starts with a line containing three positive integers, the length of the three walls of the maze construction kit. The next line consists of 1 to 25 characters from the set {''N'', ''E'', ''S'', ''W''} and describes a shortest path from the start to the end marker in the maze to be constructed. Each character specifies the direction of the next move (see picture). You may assume that each test case has at least one solution. \r\n\r\nThe last test case is followed by a line containing three zeros.', 'For each test case produce five lines of output: First the column and row number of the square containing the start marker, then the column and row number of the square containing the end marker, then the location of the three walls (in the same order as the given lengths in the input). The location of a wall should be specified by either the position of its left end point followed by the position of its right end point (in case of a horizontal wall) or the position of its upper end point followed by the position of its lower end point (in case of a vertical wall). The position of a wall end point should be given as the distance from the left side of the grid followed by the distance from the upper side of the grid. \r\n\r\nThere can be several valid solutions for a given test case (for example the test case in the sample input). Your program may print any of those solutions. Note that the sample output specifies the maze from the picture above.', 'd:\\oj\\data\\1130', 'd:\\oj\\data\\1130', '1 1 2\r\nNEEESWW\r\n0 0 0', '1 6\r\n2 6\r\n0 0 1 0\r\n1 5 1 6\r\n1 5 3 5', 'You may use your solution to problem 1129 to verify the output of your program (it should not find a shorter path from the start marker to the end marker than the path given in the input).', 'University of Ulm Local Contest 2006', '', '2007-05-30 14:56:19', 1000, 65536, 'N', NULL, 0, 1, 0, 1, 100, 1, 0, 30000, 42, ''),
(1131, 'Dihedral groups', 'Consider n points on a unit circle with numbers k = 0, 1, ..., n-1. Initially point k makes an angle of 360 · k / n degrees to the x-axis, measured in counter-clockwise direction. We are going to perform two different kind of operations on that set of points:\r\n\r\nrotation by 360 / n degrees in clockwise direction \r\nreflection with respect to the x-axis \r\nThe following picture shows an example of these operations:\r\n\r\n <IMG SRC=http://www.informatik.uni-ulm.de/acm/Locals/2006/html/images/dihedral.png>\r\nGiven a sequence of operations, we are interested in the shortest sequence of operations which gives the same result, i.e., the position of every single point is the same after performing either of those sequences of operations. \r\n\r\nThe sequence is given as a string consisting of the characters ''r'' and ''m'' which represent clockwise rotation and reflection respectively ("to the right" and "mirror"). Multiple consecutive occurrences of the same character are collected into the representation <character><number>, and for convenience this will also be done for single occurrences. So "rrmrrrrrrrrrrrr" will be abbreviated to "r2 m1 r12". The representations of different operations are always separated by a single space.', 'The input file consists of several test cases. Each test case starts with a line containing n (3 ≤ n ≤ 108), the number of points. The second line of each test case consists of an abbreviated sequence of operations as described above. All numbers will be positive and less than 108. There will be no empty line in the input file, and no line will contain more than 100000 characters. The last test case is followed by a line containing 0.', 'For each test case print one line containing the abbreviated format of the sequence with the minimum number of operations which results in the same configuration of points as the input sequence. In case of multiple optimal solutions, print any solution.', 'd:\\oj\\data\\1131', 'd:\\oj\\data\\1131', '4\r\nr2\r\n100\r\nm1 r100 m1\r\n54\r\nr218 m3 r1\r\n0', 'r2\r\n\r\nr1 m1', 'Note that the second line of the sample output is a blank line', 'University of Ulm Local Contest 2006', '', '2007-06-27 18:01:46', 1000, 65536, 'N', NULL, 1, 2, 50, 1, 50, 2, 1, 30000, 41, ''),
(1132, 'Economic phone calls', 'The phone you bought a long time ago has a built-in memory that keeps track of all the calls you receive. It logs the date (month and day) and the time (hour and minute) of each call along with the caller''s number. Only a limited number of calls can be logged (memory was still expensive then). \r\n\r\nYou discover that the limit is almost reached and therefore plan to delete some entries from the log. In choosing the entries to delete you have to consider two restrictions: \r\n\r\n1.There are some (important) entries you want to keep. \r\n2.You want to be able to recover the year (which the phone does not log) of each call you keep. The recovery procedure is described below. \r\nCalculate the minimal number of entries that must be kept to satisfy these requirements. \r\nRecovery of years\r\nGiven a list of timestamps (consisting of month, day, hour, and minute) of calls, you find out the year of each call by the following procedure: \r\n\r\n1.The last call in the list occurred in the current year. \r\n\r\n2.You compare its timestamp t to the timestamp t'' of the previous call. If t'' < t, you assume that both calls occurred in the same year. If t''≥t, you assume that the previous call occured the year before. \r\n\r\n3.You iterate backwards through the list and reason as in 2. at each step. \r\nNote that this procedure is not correct in general, but you may assume that it is for the input you get, and you have to ensure that it gives the same result for the shortened log.', 'The input consists of several test cases. Every test case starts with the number of entries n in the log, where 1≤n≤1000. Each of the next n lines contains an entry. \r\n\r\nEvery entry has the format mm:dd:HH:MM number ±, describing the month mm, day dd, hour HH, minute MM, and number (having 1-16 digits) of each call, followed by + marking a call you definitively want to keep and by - marking the other calls. The entries come directly from the log of the phone, that is, they are sorted by time of reception of the corresponding call (the last entry is the most recent). \r\n\r\nYou may assume that the recovery procedure described above yields the correct year of each call.\r\n\r\nThe last test case is followed by a 0.', 'For each test case, output the minimal number of entries that must be kept to satisfy the requirements stated above. In particular, the recovery procedure described above must yield for each remaining entry the same year as derived from the corresponding input.', 'd:\\oj\\data\\1132', 'd:\\oj\\data\\1132', '7\r\n12:31:23:59 0123456789012345 +\r\n07:21:19:00 1337 -\r\n01:01:00:00 0987654321 -\r\n07:21:14:00 1337 -\r\n11:11:11:11 11111111111 +\r\n01:01:00:00 0123456789 +\r\n01:01:00:00 0987654321 -\r\n0', '6', 'Due to an error in the phone''s software no calls have been logged on February 29.', 'University of Ulm Local Contest 2006', '', '2007-06-27 18:02:45', 1000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 37, ''),
(1133, 'Flavius Josephus Reloaded', 'Flavius Josephus once was trapped in a cave together with his comrade soldiers surrounded by Romans. All of Josephus'' fellow soldiers preferred not to surrender but to commit suicide. So they all formed a circle and agreed on a number k. Every k-th person in the circle would then commit suicide. However, Josephus had different priorities and didn''t want to die just yet. According to the legend he managed to find the safe spot in the circle where he would be the last one to commit suicide. He surrendered to the Romans and became a citizen of Rome a few years later. \r\n\r\nIt is a lesser known fact that the souls of Josephus and his comrades were all born again in modern times. Obviously Josephus and his reborn fellow soldiers wanted to avoid a similar fiasco in the future. Thus they asked a consulting company to work out a better decision scheme. The company came up with the following scheme: \r\n\r\n.For the sake of tradition all soldiers should stand in a circle. This way a number between 0 and N-1 is assigned to each soldier, where N is the number of soldiers. \r\n.As changing numbers in the old scheme turned out to be horribly inefficient, the number assigned to a soldier will not change throughout the game. \r\n.The consulting company will provide two numbers a and b which will be used to calculate the number of the next soldier as follows: Let x be the number of the current soldier, then the number of the next soldier is the remainder of a·x2 + b mod N. \r\n.We start with the soldier with number 0 and each soldier calculates the number of the next soldier according to the formula above. \r\n.As everyone deserves a second chance a soldier will commit suicide once his number is calculated for the second time. \r\n.In the event that the number of a soldier is calculated for the third time the game will end and all remaining soldiers will surrender. \r\n\r\nYou are to write a program that given the number of soldiers N and the constants a and b determines the number of survivors', 'The input file consists of several test cases. Each test case consists of a single line containing the three integers N (2 ≤ N ≤ 109), a and b (0 ≤ a,b < N) separated by white space. You may safely assume that the first soldier dies after no more than one million (106) steps. The input is terminated by a single number 0 which should not be processed.', 'For each test case output a single line containing the number of soldiers that survive.', 'd:\\oj\\data\\1133', 'd:\\oj\\data\\1133', '2 1 1\r\n5 1 1\r\n10 3 7\r\n101 9 2\r\n698253463 1 181945480\r\n1000000000 999999999 999999999\r\n0', '0\r\n2\r\n4\r\n96\r\n698177783\r\n999999994', '', 'University of Ulm Local Contest 2006', '', '2007-06-27 18:04:04', 4000, 65536, 'N', NULL, 2, 2, 100, 0, 0, 2, 2, 30000, 45, ''),
(1134, 'Wine trading in Gergovia', 'As you may know from the comic "Asterix and the Chieftain''s Shield", Gergovia consists of one street, and every inhabitant of the city is a wine salesman. You wonder how this economy works? Simple enough: everyone buys wine from other inhabitants of the city. Every day each inhabitant decides how much wine he wants to buy or sell. Interestingly, demand and supply is always the same, so that each inhabitant gets what he wants.\r\n\r\nThere is one problem, however: Transporting wine from one house to another results in work. Since all wines are equally good, the inhabitants of Gergovia don''t care which persons they are doing trade with, they are only interested in selling or buying a specific amount of wine. They are clever enough to figure out a way of trading so that the overall amount of work needed for transports is minimized.\r\n\r\nIn this problem you are asked to reconstruct the trading during one day in Gergovia. For simplicity we will assume that the houses are built along a straight line with equal distance between adjacent houses. Transporting one bottle of wine from one house to an adjacent house results in one unit of work.', 'The input consists of several test cases.\r\nEach test case starts with the number of inhabitants n (2 ≤ n ≤ 100000). The following line contains n integers ai (-1000 ≤ ai ≤ 1000). If ai ≥ 0, it means that the inhabitant living in the ith house wants to buy ai bottles of wine, otherwise if ai < 0, he wants to sell -ai bottles of wine. You may assume that the numbers ai sum up to 0.\r\nThe last test case is followed by a line containing 0.', 'For each test case print the minimum amount of work units needed so that every inhabitant has his demand fulfilled. You may assume that this number fits into a signed 64-bit integer (in C/C++ you can use the data type "long long", in JAVA the data type "long").', 'd:\\oj\\data\\1134', 'd:\\oj\\data\\1134', '5\r\n5 -4 1 -3 1\r\n6\r\n-1000 -1000 -1000 1000 1000 1000\r\n0', '9\r\n9000', '', 'University of Ulm Local Contest 2006', '', '2007-06-27 18:05:17', 1000, 65536, 'N', NULL, 2, 2, 100, 0, 0, 2, 2, 30000, 45, ''),
(1135, 'Homogeneous squares', 'Assume you have a square of size n that is divided into n×n positions just as a checkerboard. Two positions (x1,y1) and (x2,y2), where 1 ≤ x1,y1,x2,y2 ≤ n, are called "independent" if they occupy different rows and different columns, that is, x1≠x2 and y1≠y2. More generally, n positions are called independent if they are pairwise independent. It follows that there are n! different ways to choose n independent positions. \r\n\r\nAssume further that a number is written in each position of such an n×n square. This square is called "homogeneous" if the sum of the numbers written in n independent positions is the same, no matter how the positions are chosen. Write a program to determine if a given square is homogeneous!', 'The input contains several test cases. \r\nThe first line of each test case contains an integer n (1 ≤ n ≤ 1000). Each of the next n lines contains n numbers, separated by exactly one space character. Each number is an integer from the interval [-1000000,1000000]. \r\nThe last test case is followed by a zero.', 'For each test case output whether the specified square is homogeneous or not. Adhere to the format shown in the sample output.', 'd:\\oj\\data\\1135', 'd:\\oj\\data\\1135', '2\r\n1 2\r\n3 4\r\n3\r\n1 3 4\r\n8 6 -2\r\n-3 4 0\r\n0', 'homogeneous\r\nnot homogeneous', '', 'University of Ulm Local Contest 2006', '', '2010-05-11 19:36:40', 4000, 65536, 'N', NULL, 4, 12, 33, 8, 73, 4, 3, 30000, 51, ''),
(1136, '田忌赛马', 'Here is a famous story in Chinese history. \r\n\r\n\r\nThat was about 2300 years ago. General Tian Ji was a high official in the country Qi. He likes to play horse racing with the king and others. \r\n\r\nBoth of Tian and the king have three horses in different classes, namely, regular, plus, and super. The rule is to have three rounds in a match; each of the horses must be used in one round. The winner of a single round takes two hundred silver dollars from the loser. \r\n\r\nBeing the most powerful man in the country, the king has so nice horses that in each class his horse is better than Tian''s. As a result, each time the king takes six hundred silver dollars from Tian. \r\n\r\nTian Ji was not happy about that, until he met Sun Bin, one of the most famous generals in Chinese history. Using a little trick due to Sun, Tian Ji brought home two hundred silver dollars and such a grace in the next match. \r\n\r\nIt was a rather simple trick. Using his regular class horse race against the super class from the king, they will certainly lose that round. But then his plus beat the king''s regular, and his super beat the king''s plus. What a simple trick. And how do you think of Tian Ji, the high ranked official in China? \r\n\r\n<IMG SRC=http://acm.pku.edu.cn/JudgeOnline/images/2287_1.jpg>\r\n\r\nWere Tian Ji lives in nowadays, he will certainly laugh at himself. Even more, were he sitting in the ACM contest right now, he may discover that the horse racing problem can be simply viewed as finding the maximum matching in a bipartite graph. Draw Tian''s horses on one side, and the king''s horses on the other. Whenever one of Tian''s horses can beat one from the king, we draw an edge between them, meaning we wish to establish this pair. Then, the problem of winning as many rounds as possible is just to find the maximum matching in this graph. If there are ties, the problem becomes more complicated, he needs to assign weights 0, 1, or -1 to all the possible edges, and find a maximum weighted perfect matching... \r\n\r\nHowever, the horse racing problem is a very special case of bipartite matching. The graph is decided by the speed of the horses -- a vertex of higher speed always beat a vertex of lower speed. In this case, the weighted bipartite matching algorithm is a too advanced tool to deal with the problem. \r\n\r\nIn this problem, you are asked to write a program to solve this special case of matching problem.', 'The input consists of up to 50 test cases. Each case starts with a positive integer n ( n<=1000) on the first line, which is the number of horses on each side. The next n integers on the second line are the speeds of Tian''s horses. Then the next n integers on the third line are the speeds of the king''s horses. The input ends with a line that has a single `0'' after the last test case.', 'For each input case, output a line containing a single number, which is the maximum money Tian Ji will get, in silver dollars.', 'd:\\oj\\data\\1136', 'd:\\oj\\data\\1136', '3\r\n92 83 71\r\n95 87 74\r\n2\r\n20 20\r\n20 20\r\n2\r\n20 19\r\n22 18\r\n0', '200\r\n0\r\n0', '', 'Shanghai 2004', '', '2012-07-03 21:38:37', 5000, 65536, 'N', NULL, 19, 67, 28, 47, 78, 20, 13, 30000, 181, ''),
(1137, 'Sticks', 'George took sticks of the same length and cut them randomly until all parts became at most 50 units long. Now he wants to return sticks to the original state, but he forgot how many sticks he had originally and how long they were originally. Please help him and design a program which computes the smallest possible original length of those sticks. All lengths expressed in units are integers greater than zero.', 'The input contains blocks of 2 lines. The first line contains the number of sticks parts after cutting, there are at most 64 sticks. The second line contains the lengths of those parts separated by the space. The last line of the file contains zero.', 'The output should contains the smallest possible length of original sticks, one per line.', 'd:\\oj\\data\\1137', 'd:\\oj\\data\\1137', '9\r\n5 2 1 5 2 1 5 2 1\r\n4\r\n1 2 3 4\r\n0', '6\r\n5', '', 'Central Europe 1995', '', '2011-12-08 21:32:59', 1000, 65536, 'N', NULL, 21, 62, 34, 36, 69, 26, 16, 300000, 196, ''),
(1138, 'Easier Done Than Said?', 'Password security is a tricky thing. Users prefer simple passwords that are easy to remember (like buddy), but such passwords are often insecure. Some sites use random computer-generated passwords (like xvtpzyo), but users have a hard time remembering them and sometimes leave them written on notes stuck to their computer. One potential solution is to generate "pronounceable" passwords that are relatively secure but still easy to remember. \r\n\r\nFnordCom is developing such a password generator. You work in the quality control department, and it''s your job to test the generator and make sure that the passwords are acceptable. To be acceptable, a password must satisfy these three rules: \r\n\r\nIt must contain at least one vowel. \r\n\r\nIt cannot contain three consecutive vowels or three consecutive consonants. \r\n\r\nIt cannot contain two consecutive occurrences of the same letter, except for ''ee'' or ''oo''. \r\n\r\n(For the purposes of this problem, the vowels are ''a'', ''e'', ''i'', ''o'', and ''u''; all other letters are consonants.) Note that these rules are not perfect; there are many common/pronounceable words that are not acceptable.', 'The input consists of one or more potential passwords, one per line, followed by a line containing only the word ''end'' that signals the end of the file. Each password is at least one and at most twenty letters long and consists only of lowercase letters.', 'For each password, output whether or not it is acceptable, using the precise format shown in the example.', 'd:\\oj\\data\\1138', 'd:\\oj\\data\\1138', 'a\r\ntv\r\nptoui\r\nbontres\r\nzoggax\r\nwiinq\r\neep\r\nhouctuh\r\nend', 'a is acceptable.\r\ntv is not acceptable.\r\nptoui is not acceptable.\r\nbontres is not acceptable.\r\nzoggax is not acceptable.\r\nwiinq is not acceptable.\r\neep is acceptable.\r\nhouctuh is acceptable.', '', 'Mid-Central USA 2000', '', '2012-02-06 09:42:07', 1000, 65536, 'N', NULL, 17, 36, 47, 19, 54, 17, 16, 30000, 101, ''),
(1139, '子字符串寻址', '给定两字符串S和s(字符串仅由a~z组成)，扫描s是否在S中出现.如果出现,给出它出现的位置和S中与串s相邻的字符,例如：S = "abcdefg", s = "cd", 则输出为 3 b e ; 否则输出0.', '第一行为测试样例数N. 对于每个样例，包含字符串S和s,它们之间用 换行符&apos;\\n''隔开。0 < N < 100 , 0 < strlen(s) <= strlen(S) <= 1000000.', '对于每一对S与s, 输出一相应的结果.', 'd:\\oj\\data\\1139', 'd:\\oj\\data\\1139', '3\r\nhheef \r\nhh\r\nccdde \r\nde\r\nfedd  \r\nze', '1 e\r\n4 d\r\n0', '', 'SWUST.Tax', '', '2012-05-13 15:40:46', 1000, 10000, 'N', NULL, 73, 248, 29, 57, 52, 69, 53, 30000, 568, ''),
(1140, '三角形', '每当输入一个字符（A--Z）或数字（1--9），应该生成一个如下规律的三角形，如输入1，F，其中1为测试次数，应该输出\r\n     A\r\n    ABA\r\n   ABCBA\r\n  ABCDCBA\r\n ABCDEDCBA\r\nABCDEFEDCBA', '有t组此时情况，接着的t行为数字（1--9）或着字符（A--Z）', '输出按此规律的三角形,格式参照Sample Output', 'd:\\oj\\data\\1140', 'd:\\oj\\data\\1140', '2\r\n3\r\nF', '1\r\n 121\r\n12321\r\n     A\r\n    ABA\r\n   ABCBA\r\n  ABCDCBA\r\n ABCDEDCBA\r\nABCDEFEDCBA', '', 'SWUST.myler', '', '2012-04-01 22:24:02', 1000, 65536, 'N', NULL, 97, 217, 45, 107, 56, 85, 83, 30000, 421, ''),
(1141, 'Combination', 'We use C(n, m) to denote the number of combinations of n things taken m at a time. We know that:\r\n\r\n(1)   C(n, m) = C(n-1, m-1) + C(n-1, m)\r\n\r\n(2)   C(n, m) = n! / ((n-m)!*m!)\r\n\r\nThe question here is very simple: given 3 integers n, m and k, can k divide C(n, m) exactly?', 'The first line is number of test cases.\r\n\r\nFor each test case, there is one line containing 3 integers – n, m (n>=m>=0) and k.', 'For each test case, if k divides C(n, m) exactly, output “Yes”, otherwise output “No”.', 'd:\\oj\\data\\1141', 'd:\\oj\\data\\1141', '4\r\n100 48 4\r\n100 48 8\r\n100 48 27\r\n100 48 81', 'Yes\r\nNo\r\nYes\r\nNo', '', 'Sichuan University Programming Contest 2007 Preliminary', '', '2007-09-01 17:57:34', 1000, 65536, 'N', NULL, 1, 21, 5, 20, 95, 6, 1, 30000, 78, ''),
(1142, 'In a Line', 'There are n (2<=n<=50) integers. Arrange them in a row so that the maximal difference between adjacent numbers is minimal.', 'The first line contains one integer, indicating the number of test cases. For each test case, there is one line containing the n numbers.', 'Output one line for each test case containing an arrangement of the numbers which minimizes the maximal difference. Numbers should be separated by one space. If there are several arrangements that meet the requirement, output the lexicographically smallest one.', 'd:\\oj\\data\\1142', 'd:\\oj\\data\\1142', '2\r\n5 1 3\r\n1 8 2 4', '1 3 5\r\n1 2 4 8', '', 'Sichuan University Programming Contest 2007 Preliminary', '', '2012-04-14 15:04:28', 1000, 65536, 'N', NULL, 64, 137, 47, 71, 56, 64, 56, 30000, 377, ''),
(1143, 'Endless Wars', 'We live in a truceless three-dimensional world. But is the two-dimensional peaceful? No, not at all. It is also full of wars. Now, the 2007th world war has started.\r\n\r\nA country i in the two-dimensional world can be denoted as a point with coordinate (xi, yi), where yi is the height above the sea level and is always non-negative. \r\n\r\nCountries in the two-dimensional world use strange missiles to attack enemy countries. Missiles can only travel in a straight line. So if another country is in the way, it is impossible for the two countries to attack each other. More precisely, we can draw a straight line that connects the two countries, if any country between them is above the line, they cannot attack each other.\r\n\r\nGiven the coordinates of the N countries, you are to find out how many pairs of countries can attack each other.', 'The first line is the number of test cases.\r\n\r\nFor each test case, the first line is an integer N (2<=N<=2000), the number of countries, followed by n lines, each containing two integers xi (-100000<=xi<=100000) and yi (0<=yi<=100000), the coordinate of country i.', 'For each query, output one line containing the answer.', 'd:\\oj\\data\\1143', 'd:\\oj\\data\\1143', '2\r\n4\r\n0 1\r\n2 1\r\n3 1\r\n4 1\r\n3\r\n0 0\r\n10 10\r\n21 20', '6\r\n2', '', 'Sichuan University Programming Contest 2007 Preliminary', '', '2007-05-30 08:17:59', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 67, ''),
(1144, '分苹果', '小明的妈妈买了N个苹果，想把它们都分给她的M个孩子。为了公平起见，她想让所有的孩子都分到一样多的苹果。那么她至少要再买多少个苹果呢？', '每一组测试数据包括两个整数：N和M\r\n处理到文件结束为止。', '每一组测试数据输出一个整数：至少要买的苹果数目', 'd:\\oj\\data\\1144', 'd:\\oj\\data\\1144', '3 1\r\n3 2', '0\r\n1', '', 'SOJ', '', '2012-04-27 10:07:27', 1000, 65536, 'N', NULL, 100, 243, 41, 137, 59, 98, 94, 30000, 371, ''),
(1145, '字典排序POJ1256', '', '', '', 'd:\\oj\\data\\1145', 'd:\\oj\\data\\1145', '', '', '', '', '', '2009-03-06 20:39:11', 1000, 65536, 'Y', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 1, ''),
(1146, '百度时间', 'Baidu的服务器上使用的不是北京时间，而是Baidu时间。Baidu时间的时分秒与北京时间相同，\r\n但是日期与北京时间不同，是用一个正整数表示从2000年1月1日开始经过了几天。\r\n现在就请大家设计一个程序将北京时间转换为百度时间。在本题中，闰年的年份是400的倍数，\r\n或者是4的倍数但不是100的倍数。比如2000和8888均为闰年，但6100不是。', '输入数据的每一行为一个待转化的北京时间（不含空格和TAB），正确的格式包括两种：\r\n一种为：YYYY-MM-DD，（YYYY表示四位数年份，MM为两位月份，DD为两位日期）；\r\n另一种为：MM/DD/YYYY，（YYYY表示四位数年份，MM为两位月份，DD为两位日期）；', '每个数据输出一行。如果可以成功转换，输出一个正整数，否则输出Error。', 'd:\\oj\\data\\1146', 'd:\\oj\\data\\1146', '2000-01-01\r\nAStar2007\r\n05/26/2007', '0\r\nError\r\n2702', '时间格式必须严格上述2种格式;\r\n测试数据中不会有空行;\r\n测试数据中时间范围为2000年到9999年;\r\n测试数据中不会出现2000-01-01号以前的日期.', 'Astar2007百度之星程序设计大赛', '', '2012-03-16 23:49:38', 1000, 65536, 'N', NULL, 13, 116, 11, 90, 87, 32, 13, 30000, 256, ''),
(1147, 'Fib数列问题', 'Fib数列是这样的数列: 1,1,2,3,5,8,13,21,,,,,,. 你能确定它的第n项吗,假设它的第n项为N,你需要编程解决对于另一个输入数M,N % M的值.', '第一行有用空格隔开的两个整数T,M. \r\n以下有T行数据,每行表示Fib数列的第n项. \r\n对于所有输入的数有 1 <= input_number <= 33000000 .', '对于每个n,输出N%M.', 'd:\\oj\\data\\1147', 'd:\\oj\\data\\1147', '3 5\r\n1 \r\n2 \r\n5', '1\r\n1\r\n0', '', 'SWUST.TAX', '', '2012-07-21 22:03:25', 2000, 150000, 'N', NULL, 101, 646, 16, 502, 87, 123, 75, 30000, 877, ''),
(1148, '最长公共子串问题', '所谓最长公共子串，比如串A "acedfe", 串B "aede", 则它们的最长公共子串为串 "aede", 即不论串中字符是否相邻，只要它是给定各个串都包含的，且长度最长的串。给定两个不包含空格的字符串和一整数n , 如果最长公共串长度大于或等于n,输出Not Smaller, 否则输出Smaller.', '第一行仅一个整数N,(1<= N <= 100).表示包含N个测试样例. \r\n每个测试样例由两个字符串A,B( 0< strlen(A),strlen(B) <= 1000) 和一个整数n( 0 <= n <= 1000)构成.', '对于每个测试样例,输出Not Smaller 或 Smaller.', 'd:\\oj\\data\\1148', 'd:\\oj\\data\\1148', '3\r\nacedsd\r\nacdd\r\n2\r\needfd\r\nzzxxxx\r\n3\r\nfeefs\r\nas\r\n1', 'Not Smaller\r\nSmaller\r\nNot Smaller', '', 'SWUST.TAX', '', '2012-08-25 12:03:53', 1000, 65536, 'N', NULL, 64, 293, 22, 208, 81, 78, 49, 30000, 477, ''),
(1149, '分石头', '现有一些石头，其重量分别为W1...Wn, 请你把石头分成为2堆,并使到2堆石头的重量之差为最小.', '输入包括n(1<=n<=20),和n块石头的重量W1...Wn, (1 <= Wi <= 100000),数字之间以空格隔开或在新的一行输入.', '输出2堆石头的最小重量差', 'd:\\oj\\data\\1149', 'd:\\oj\\data\\1149', '5\r\n5\r\n8\r\n13\r\n27\r\n14', '3', '', 'SWUST.Larrouse', '', '2009-08-14 15:46:10', 5000, 65536, 'Y', NULL, 3, 3, 100, 0, 0, 3, 3, 30000, 4, ''),
(1150, 'Welcome To ACM Programming League Matches', '各位同学：\r\n大家好！\r\n非常高兴你们能参加这个比赛，希望我们能一起度过充实而又开心的一个赛季。参加我们的ACM联赛，不仅希望你们能学到基本的算法，提高你们的实际编程能力,还希望你们能收获自信，同时，也希望你们能真切体会一下成功带来的喜悦。\r\n相信自己，你能行的！', '没有输入!', '只需要输出以下三句话：\r\nJoin the ACM programming league matches.\r\nIf you try,you can!\r\nNothing is impossible!', 'd:\\oj\\data\\1150', 'd:\\oj\\data\\1150', '', 'Join the ACM programming league matches.\r\nIf you try,you can!\r\nNothing is impossible!', '', 'SWUST.Larrouse', '', '2012-09-07 10:00:18', 1000, 65536, 'N', NULL, 311, 532, 58, 206, 42, 290, 281, 30000, 379, ''),
(1151, '走楼梯', 'Larrouse总是喜欢思考些无聊的事情,一天吃完饭回宿舍的时候,Larrouse看到同学们在上楼梯的时候走的方式总是不同的.有的人总是一步一个台阶,有的人总是一步2个台阶,还有的是混杂着在走.Larrouse就是属于那种喜欢混杂着走的,于是他便想到了一个无聊的问题,对于一定数量台阶数的楼梯,从底层到最高层一共有多少种走法呢??(每一步只能上一个或者2个台阶).现在Larrouse把这个问题留给大家,希望大家能帮助他解决这个问题.', '第一行,输入一个整数T,表示测试的次数;\r\n以下T行每行一个正整数N,表示楼梯的台阶数( 1 <= N <= 40 ).', '对于每个测试数据,输出一行,表示从楼梯底层走到顶层的方法的总数.', 'd:\\oj\\data\\1151', 'd:\\oj\\data\\1151', '2\r\n1\r\n2', '1\r\n2', '', 'SWUST.Larrouse', '', '2012-04-29 08:32:13', 1000, 65536, 'N', NULL, 130, 293, 44, 157, 57, 134, 117, 30000, 409, ''),
(1152, '谁是第一？', '这是一个简单的题目。', '输入N（不大于60）表示学生的人数，在下一行分别输入没个学生的名字(字符，不超过20个)，和分数(整数)，每一个学生的信息占一行。', '输出第一名学生的名字和分数，中间空一格，如果有两个或者更多的最高分数，以先输入的为第一名。', 'd:\\oj\\data\\1152', 'd:\\oj\\data\\1152', '4\r\nli 98\r\nhuan 95\r\nyang 92\r\nliu 98', 'li 98', '', 'SWUST.Myler', '', '2012-05-24 12:15:56', 1000, 65536, 'N', NULL, 175, 321, 55, 126, 45, 163, 154, 30000, 349, ''),
(1153, '阶乘', '', '输入的第一行含一个正整数k (1 <= k <= 10 )，表示测试例的个数，后面紧接着k行，每行对应一个测试例，包含一个整数N。', '输出N的阶乘\r\n保证输出小于2*10^9.', 'd:\\oj\\data\\1153', 'd:\\oj\\data\\1153', '2\r\n1\r\n2', '1\r\n2', '', 'SWUST.Myler', '', '2012-09-11 12:34:40', 1000, 65536, 'N', NULL, 195, 367, 53, 145, 49, 158, 150, 30000, 467, ''),
(1154, '字符大小写转换', '你的任务就是把一串字符串的大写变小写，并把他们升序排序后输出，enjoy it。', '输入的第一行含一个正整数k (1 <= k <= 10 )，表示测试例的个数，后面紧接着k行，每行对应一个测试例，包含一个字符串（不超过100个字符）。', '输出变换后的结果.', 'd:\\oj\\data\\1154', 'd:\\oj\\data\\1154', '2\r\nAbd\r\nACED', 'abd\r\nacde', '', 'SWUST.Myler', '', '2012-09-10 12:35:29', 1000, 65536, 'N', NULL, 70, 134, 52, 60, 48, 81, 66, 30000, 345, ''),
(1155, '二进制码', '大家都知道电脑是以二进制码存储数据的。有一个文件存储了60000个二进制码，每行有100个，现在你的任务很简单：把这个文件存储的二进制码输出。\r\n<a href=../gongju/b.txt>文件下载</a>\r\n注意本OJ限制代码长度为30000b。', '无。\r\n<a href=../gongju/b.txt>文件下载</a>\r\n点击右键另存为', '输出文件内容。', 'd:\\oj\\data\\1155', 'd:\\oj\\data\\1155', '', '0000100101001111001010111101000100000000111101001101011110000110011010110011111101011010101000101101\r\n...', '', 'power', '', '2012-01-09 23:50:50', 1000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 129, ''),
(1156, 'Magic Bracelet', 'Ginny''s birthday is comming soon. Harry Potter is preparing a birthday present for his new gf. The present is a magic bracelet which consists of n magic beads. There are m kinds of different magic beans. Each kind has its unique property and by stringing them together a beautiful magic bracelet will be made. As Harry''s friend Hermione has pointed out, ceitain pair of kinds will interact with each other and explode. So Harry must be very careful to make sure that these pairs of kinds will never be stringed next to each other.\r\n\r\nAssuming each kind has infinite beads. How many different bracelet can Harry make? Repetitions that are produced by rotation around the center of the circular bracelet are all neglected. \r\nYou only need to print the answer module 9973.', 'The first line of the input contains the number of test cases.\r\n\r\nEach test cases starts with a line containing three integers n (1 ≤ n ≤ 109, gcd(n, 9973) = 1), m (1 ≤ m ≤ 10), k (1 ≤ k ≤ m(m &#8722; 1) &#8260; 2). The next k lines each contain two integers a and b (1 ≤ a, b ≤ m), indicating beads of kind a cannot be stringed to beads of kind b.', 'Output the answer of each test case on a separate line.', 'd:\\oj\\data\\1156', 'd:\\oj\\data\\1156', '4\r\n3 2 0\r\n3 2 1\r\n1 2\r\n3 2 2\r\n1 1\r\n1 2\r\n3 2 3\r\n1 1\r\n1 2\r\n2 2', '4\r\n2\r\n1\r\n0', '', 'POJ --cuiaoxiang', '', '2012-03-11 18:39:22', 2000, 65536, 'N', NULL, 9, 24, 38, 4, 50, 6, 4, 30000, 115, ''),
(1157, '表达式的值', '如果给你一个只包含+,-,*,/,(,),及非负整数数字和空格组成的字符串表达式，你能编程计算它的值吗？不忙回答，，试试就知道了。', '第一行为一个N,表示测试样例数。\r\n以下N行每个样例为一个字符串表达式,每个表达式至少一个字符,可能包含空格，但长度不超过50.', '对每一测试样例，输出它的值。', 'd:\\oj\\data\\1157', 'd:\\oj\\data\\1157', '3\r\n(2+3/3)+1\r\n2+1/2-5\r\n10*(2-2 )', '4\r\n-3\r\n0', '题目输入的表达式都是合法的.\r\n在测试2中,我们认为1/2=0,所以最后答案为-3.', 'SWUST', '', '2012-04-15 14:21:41', 1000, 65536, 'N', NULL, 29, 103, 28, 64, 78, 27, 18, 30000, 212, ''),
(1158, '函数求值', '函数CAR的作用是获取一个字符串的第一个字符，然后将这个字符串返回，注意传给它的参数是一个长度至少为1的字符串。函数CDR的作用结果是CAR作用结果的补，它返回的是除第一个字符外另外的所有字符，它需要的参数是一个长度至少为2的字符串。即，设有两字符串变量A,D, 如果令A = CAR("abc"),则A == ''a''; 如果令D = CDR("abc"),则D == "bc".', '首行一个整数N.代表测试样例数.每个测试样例由函数CAR及CDR的表达式混合组成,表达式中仅包含数字,大小写字母及双引号,其中数字和双引号仅出现在对字符串的描述中，字符串长度不超过30.', '对每一测试样例，输出最终的值。', 'd:\\oj\\data\\1158', 'd:\\oj\\data\\1158', '3\r\nCDR(CDR("ccd"))\r\nCAR(CDR(CDR("cced")))\r\nCDR(CDR("ad222d"))', 'd\r\ne\r\n222d', '', 'SWUST.Tax', '', '2011-09-28 18:22:50', 1000, 65536, 'N', NULL, 18, 49, 37, 18, 50, 20, 18, 30000, 261, ''),
(1159, '小游戏', '让我们一起做个小小游戏。游戏规则是：\r\n给你两个字符串，A（a1,a2,a3,……am）和B(b1,b2,b3,……,bn),则可能存在两个递增序列I（i1,i2,i3,……，ik）和J（j1,j2,j3,……jk）对于所有的t=1,2,3,……k,使ait = bjt成立，你只需输出k的最大值。若不存在，输出0。\r\n例如：给出串A”qweasdfa”和串B”tquefasdf”,我们可找出序列I（1,3,4,5,6,7）和J(2,4,6,7,8,9)\r\n使得a1=b2,a3=b4,a4=b6,a5=b7,a6=b8,a7=b9，当k=6时公共子序列”qeasdf”为最长,因此输出6。', '第一行输入一个正整数N表示有N个测试数据。\r\n每个测试数据有一行，包括两个字符串', '每一种测试数据对应一个输出，独占一行。', 'd:\\oj\\data\\1159', 'd:\\oj\\data\\1159', 'qweasdfa tquefasdf\r\nwordw dword\r\n123word word123\r\n12asdwordiop iopword12\r\n123 word', '6\r\n4\r\n4\r\n4\r\n0', '', 'SWUST.afei', '', '2012-08-08 12:31:39', 1000, 65536, 'N', NULL, 33, 93, 35, 49, 66, 25, 25, 30000, 253, ''),
(1160, '明明的随机数', '明明想在学校中请一些同学一起做一项问卷调查，为了实验的客观性，他先用计算机生成了N个1到1000之间的随机整数（N≤100），对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。然后再把这些数从小到大排序，按照排好的顺序去找同学做调查。请你协助明明完成“去重”与“排序”的工作。', '输入文件有2行，第1行为1个正整数，表示所生成的随机数的个数：N\r\n第2行有N个用空格隔开的正整数，为所产生的随机数。', '输出文件也是2行，第1行为1个正整数M，表示不相同的随机数的个数。第2行为M个用空格隔开的正整数，为从小到大排好序的不相同的随机数。', 'd:\\oj\\data\\1160', 'd:\\oj\\data\\1160', '10\r\n20 40 32 67 40 20 89 300 400 15', '8\r\n15 20 32 40 67 89 300 400', '', 'NOIP2006普及组', '', '2012-05-13 18:14:01', 1000, 65536, 'N', NULL, 124, 237, 52, 110, 50, 117, 109, 30000, 347, ''),
(1161, '开心的金明【(0-1)背包问题】', '金明今天很开心，家里购置的新房就要领钥匙了，新房里有一间他自己专用的很宽敞的房间。更让他高兴的是，妈妈昨天对他说：“你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过N元钱就行”。今天一早金明就开始做预算，但是他想买的东西太多了，肯定会超过妈妈限定的N元。于是，他把每件物品规定了一个重要度，分为5等：用整数1~5表示，第5等最重要。他还从因特网上查到了每件物品的价格（都是整数元）。他希望在不超过N元（可以等于N元）的前提下，使每件物品的价格与重要度的乘积的总和最大。\r\n设第j件物品的价格为v[j]，重要度为w[j]，共选中了k件物品，编号依次为j1，j2，……，jk，则所求的总和为：\r\nv[j1]*w[j1]+v[j2]*w[j2]+ …+v[jk]*w[jk]。（其中*为乘号）\r\n请你帮助金明设计一个满足要求的购物单。', '输入文件的第1行，为两个正整数，用一个空格隔开：N  m\r\n（其中N（&lt;30000）表示总钱数，m（&lt;25）为希望购买物品的个数。）\r\n从第2行到第m+1行，第j行给出了编号为j-1的物品的基本数据，每行有2个非负整数\r\nv  p\r\n（其中v表示该物品的价格(v<=10000)，p表示该物品的重要度(1~5)）', '输出文件只有一个正整数，为不超过总钱数的物品的价格与重要度乘积的总和的最大值（<100000000）。', 'd:\\oj\\data\\1161', 'd:\\oj\\data\\1161', '1000 5\r\n800 2\r\n400 5\r\n300 5\r\n400 3\r\n200 2', '3900', '', 'NOIP2006普及组', '', '2012-04-19 13:37:14', 1000, 65536, 'N', NULL, 84, 161, 52, 70, 54, 66, 60, 30000, 287, ''),
(1162, 'Jam的计数法', 'Jam是个喜欢标新立异的科学怪人。他不使用阿拉伯数字计数，而是使用小写英文字母计数，他觉得这样做，会使世界更加丰富多彩。在他的计数法中，每个数字的位数都是相同的（使用相同个数的字母），英文字母按原先的顺序，排在前面的字母小于排在它后面的字母。我们把这样的“数字”称为Jam数字。在Jam数字中，每个字母互不相同，而且从左到右是严格递增的。每次，Jam还指定使用字母的范围，例如，从2到10，表示只能使用{b,c,d,e,f,g,h,i,j}这些字母。如果再规定位数为5，那么，紧接在Jam数字“bdfij”之后的数字应该是“bdghi”。（如果我们用U、V依次表示Jam数字“bdfij”与“bdghi”，则U<V，且不存在Jam数字P，使U<P<V）。你的任务是：对于从文件读入的一个Jam数字，按顺序输出紧接在后面的5个Jam数字，如果后面没有那么多Jam数字，那么有几个就输出几个。', '输入文件有2行，第1行为3个正整数，用一个空格隔开：s t w\r\n（其中s为所使用的最小的字母的序号，t为所使用的最大的字母的序号。w为数字的位数，这3个数满足：1≤s<t≤26, 2≤w≤t-s ） \r\n第2行为具有w个小写字母的字符串，为一个符合要求的Jam数字。\r\n所给的数据都是正确的，不必验证。', '输出文件 最多为5行，为紧接在输入的Jam数字后面的5个Jam数字，如果后面没有那么多Jam数字，那么有几个就输出几个。每行只输出一个Jam数字，是由w个小写字母组成的字符串，不要有多余的空格。', 'd:\\oj\\data\\1162', 'd:\\oj\\data\\1162', '2 10 5\r\nbdfij', 'bdghi\r\nbdghj\r\nbdgij\r\nbdhij\r\nbefgh', '', 'NOIP2006普及组', '', '2012-03-01 16:04:12', 1000, 65536, 'N', NULL, 7, 17, 41, 10, 59, 10, 7, 30000, 100, ''),
(1163, '数列', '给定一个正整数k(3≤k≤15),把所有k的方幂及所有有限个互不相等的k的方幂之和构成一个递增的序列，例如，当k=3时，这个序列是：\r\n1，3，4，9，10，12，13，…\r\n（该序列实际上就是：3^0，3^1，3^0+3^1，3^2，3^0+3^2，3^1+3^2，3^0+3^1+3^2，…）\r\n请你求出这个序列的第N项的值（用10进制数表示）。\r\n例如，对于k=3，N=100，正确答案应该是981。', '输入文件 只有1行，为2个正整数，用一个空格隔开：\r\nk N\r\n（k、N的含义与上述的问题描述一致，且3≤k≤15，10≤N≤1000）。', '输出文件为计算结果，是一个正整数（在所有的测试数据中，结果均不超过2.1*10^9）。（整数前不要有空格和其他符号）。', 'd:\\oj\\data\\1163', 'd:\\oj\\data\\1163', '3 100', '981', '', 'NOIP2006普及组', '', '2012-04-21 18:20:57', 1000, 65536, 'N', NULL, 41, 113, 36, 68, 67, 41, 34, 30000, 264, '');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1164, '能量项链', '在Mars星球上，每个Mars人都随身佩带着一串能量项链。在项链上有N颗能量珠。能量珠是一颗有头标记与尾标记的珠子，这些标记对应着某个正整数。并且，对于相邻的两颗珠子，前一颗珠子的尾标记一定等于后一颗珠子的头标记。因为只有这样，通过吸盘（吸盘是Mars人吸收能量的一种器官）的作用，这两颗珠子才能聚合成一颗珠子，同时释放出可以被吸盘吸收的能量。如果前一颗能量珠的头标记为m，尾标记为r，后一颗能量珠的头标记为r，尾标记为n，则聚合后释放的能量为 m * r * n（Mars单位），新产生的珠子的头标记为m，尾标记为n。\r\n需要时，Mars人就用吸盘夹住相邻的两颗珠子，通过聚合得到能量，直到项链上只剩下一颗珠子为止。显然，不同的聚合顺序得到的总能量是不同的，请你设计一个聚合顺序，使一串项链释放出的总能量最大。\r\n例如：设N=4，4颗珠子的头标记与尾标记依次为(2，3) (3，5) (5，10) (10，2)。我们用记号⊕表示两颗珠子的聚合操作?j⊕k)表示第j，k两颗珠子聚合后所释放的能量。则第4、1两颗珠子聚合后释放的能量为：\r\n(4?)=10*2*3=60。\r\n这一串项链可以得到最优值的一个聚合顺序所释放的总能量为\r\n((4?)?)?）=10*2*3+10*3*5+10*5*10=710。', '输入文件的第一行是一个正整数N（4≤N≤100），表示项链上珠子的个数。第二行是N个用空格隔开的正整数，所有的数均不超过1000。第i个数为第i颗珠子的头标记（1≤i≤N），当i<N时，第i颗珠子的尾标记应该等于第i+1颗珠子的头标记。第N颗珠子的尾标记应该等于第1颗珠子的头标记。\r\n至于珠子的顺序，你可以这样确定：将项链放到桌面上，不要出现交叉，随意指定第一颗珠子，然后按顺时针方向确定其他珠子的顺序。', '输出文件只有一行，是一个正整数E（E≤2.1*10^9），为一个最优聚合顺序所释放的总能量。', 'd:\\oj\\data\\1164', 'd:\\oj\\data\\1164', '4\r\n2  3  5  10', '710', '', 'NOIP2006提高组', '', '2011-07-20 21:40:18', 1000, 65536, 'N', NULL, 13, 40, 33, 17, 61, 12, 11, 30000, 220, ''),
(1165, '金明的预算方案', '金明今天很开心，家里购置的新房就要领钥匙了，新房里有一间金明自己专用的很宽敞的房间。更让他高兴的是，妈妈昨天对他说：“你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过N元钱就行”。今天一早，金明就开始做预算了，他把想买的物品分为两类：主件与附件，附件是从属于某个主件的，下表就是一些主件与附件的例子：\r\n主件	附件\r\n电脑	打印机，扫描仪\r\n书柜	图书\r\n书桌	台灯，文具\r\n工作椅	无\r\n如果要买归类为附件的物品，必须先买该附件所属的主件。每个主件可以有0个、1个或2个附件。附件不再有从属于自己的附件。金明想买的东西很多，肯定会超过妈妈限定的N元。于是，他把每件物品规定了一个重要度，分为5等：用整数1~5表示，第5等最重要。他还从因特网上查到了每件物品的价格（都是10元的整数倍）。他希望在不超过N元（可以等于N元）的前提下，使每件物品的价格与重要度的乘积的总和最大。\r\n设第j件物品的价格为v[j]，重要度为w[j]，共选中了k件物品，编号依次为j1，j2，……，jk，则所求的总和为：\r\nv[j1]*w[j1]+v[j2]*w[j2]+ …+v[jk]*w[jk]。（其中*为乘号）\r\n请你帮助金明设计一个满足要求的购物单。', '输入文件的第1行，为两个正整数，用一个空格隔开：N  m\r\n（其中N（&lt;32000）表示总钱数，m（&lt;60）为希望购买物品的个数。）\r\n从第2行到第m+1行，第j行给出了编号为j-1的物品的基本数据，每行有3个非负整数\r\nv  p  q\r\n（其中v表示该物品的价格（v<10000），p表示该物品的重要度（1~5），q表示该物品是主件还是附件。如果q=0，表示该物品为主件，如果q>0，表示该物品为附件，q是所属主件的编号）', '输出文件只有一个正整数，为不超过总钱数的物品的价格与重要度乘积的总和的最大值（<200000）。', 'd:\\oj\\data\\1165', 'd:\\oj\\data\\1165', '1000 5\r\n800 2 0\r\n400 5 1\r\n300 5 1\r\n400 3 0\r\n500 2 0', '2200', '', 'NOIP2006提高组', '', '2012-04-18 17:30:31', 1000, 65536, 'N', NULL, 14, 54, 26, 40, 80, 12, 10, 30000, 110, ''),
(1166, '作业调度方案', '我们现在要利用m台机器加工n个工件，每个工件都有m道工序，每道工序都在不同的指定的机器上完成。每个工件的每道工序都有指定的加工时间。\r\n每个工件的每个工序称为一个操作，我们用记号j-k表示一个操作，其中j为1到n中的某个数字，为工件号；k为1到m中的某个数字，为工序号，例如2-4表示第2个工件第4道工序的这个操作。在本题中，我们还给定对于各操作的一个安排顺序。\r\n例如，当n=3，m=2时，“1-1，1-2，2-1，3-1，3-2，2-2”就是一个给定的安排顺序，即先安排第1个工件的第1个工序，再安排第1个工件的第2个工序，然后再安排第2个工件的第1个工序，等等。\r\n一方面，每个操作的安排都要满足以下的两个约束条件。\r\n(1) 对同一个工件，每道工序必须在它前面的工序完成后才能开始；\r\n(2) 同一时刻每一台机器至多只能加工一个工件。\r\n另一方面，在安排后面的操作时，不能改动前面已安排的操作的工作状态。\r\n由于同一工件都是按工序的顺序安排的，因此，只按原顺序给出工件号，仍可得到同样的安排顺序，于是，在输入数据中，我们将这个安排顺序简写为“1 1 2 3 3 2”。\r\n还要注意，“安排顺序”只要求按照给定的顺序安排每个操作。不一定是各机器上的实际操作顺序。在具体实施时，有可能排在后面的某个操作比前面的某个操作先完成。\r\n例如，取n=3,m=2，已知数据如下：\r\n工件号	机器号/加工时间\r\n	工序1	工序2\r\n1	1/3	2/2\r\n2	1/2	2/5\r\n3	2/2	1/4\r\n则对于安排顺序“1 1 2 3 3 2”，下图中的两个实施方案都是正确的。但所需要的总时间分别是10与12。\r\n<img src=images\\1166.jpg></img>\r\n \r\n    当一个操作插入到某台机器的某个空档时（机器上最后的尚未安排操作的部分也可以看作一个空档），可以靠前插入，也可以靠后或居中插入。为了使问题简单一些，我们约定：在保证约束条件（1）（2）的条件下，尽量靠前插入。并且，我们还约定，如果有多个空档可以插入，就在保证约束条件（1）（2）的条件下，插入到最前面的一个空档。于是，在这些约定下，上例中的方案一是正确的，而方案二是不正确的。\r\n显然，在这些约定下，对于给定的安排顺序，符合该安排顺序的实施方案是唯一的，请你计算出该方案完成全部任务所需的总时间。', '输入文件的第1行为两个正整数，用一个空格隔开：m n\r\n（其中m（&lt;20）表示机器数，n（&lt;20）表示工件数）\r\n第2行：m * n 个用空格隔开的数，为给定的安排顺序。\r\n接下来的2n行，每行都是用空格隔开的m个正整数，每个数不超过20。\r\n其中前n行依次表示每个工件的每个工序所使用的机器号，第1个数为第1个工序的机器号，第2个数为第2个工序机器号，等等。\r\n后n行依次表示每个工件的每个工序的加工时间。\r\n可以保证，以上各数据都是正确的，不必检验。', '输出文件只有一个正整数，为最少的加工时间。', 'd:\\oj\\data\\1166', 'd:\\oj\\data\\1166', '2 3\r\n1 1 2 3 3 2\r\n1 2 \r\n1 2 \r\n2 1\r\n3 2 \r\n2 5 \r\n2 4', '10', '', 'NOIP2006提高组', '', '2012-04-08 11:58:20', 1000, 65536, 'N', NULL, 3, 6, 50, 3, 50, 4, 3, 30000, 64, ''),
(1167, '2^k进制数', '设r是个2^k 进制数，并满足以下条件：\r\n（1）r至少是个2位的2k 进制数。\r\n（2）作为2^k 进制数，除最后一位外，r的每一位严格小于它右边相邻的那一位。\r\n（3）将r转换为2进制数q后，则q的总位数不超过w。\r\n在这里，正整数k（1≤k≤9）和w（k<w≤30000）是事先给定的。\r\n问：满足上述条件的不同的r共有多少个？\r\n我们再从另一角度作些解释：设S是长度为w 的01字符串（即字符串S由w个“0”或“1”组成），S对应于上述条件（3）中的q。将S从右起划分为若干个长度为k 的段，每段对应一位2k进制的数，如果S至少可分成2段，则S所对应的二进制数又可以转换为上述的2k 进制数r。\r\n例：设k=3，w=7。则r是个八进制数（2^3=8）。由于w=7，长度为7的01字符串按3位一段分，可分为3段（即1，3，3，左边第一段只有一个二进制位），则满足条件的八进制数有：\r\n2位数：高位为1：6个（即12，13，14，15，16，17），高位为2：5个，…，高位为6：1个（即67）。共6+5+…+1=21个。\r\n3位数：高位只能是1，第2位为2：5个（即123，124，125，126，127），第2位为3：4个，…，第2位为6：1个（即167）。共5+4+…+1=15个。\r\n所以，满足要求的r共有36个。', '输入文件只有1行，为两个正整数，用一个空格隔开：k  W', '输出文件digital.out为1行，是一个正整数，为所求的计算结果，即满足条件的不同的r的个数（用十进制数表示），要求最高位不得为0，各数字之间不得插入数字以外的其他字符（例如空格、换行符、逗号等）。', 'd:\\oj\\data\\1167', 'd:\\oj\\data\\1167', '3  7', '36', '作为结果的正整数可能很大，但不会超过200位', 'NOIP2006提高组', '', '2007-10-17 18:04:23', 1000, 65536, 'N', NULL, 2, 2, 100, 0, 0, 2, 2, 30000, 104, ''),
(1168, '神经网络', '人工神经网络（Artificial Neural Network）是一种新兴的具有自我学习能力的计算系统，在模式识别、函数逼近及贷款风险评估等诸多领域有广泛的应用。对神经网络的研究一直是当今的热门方向，兰兰同学在自学了一本神经网络的入门书籍后，提出了一个简化模型，他希望你能帮助他用程序检验这个神经网络模型的实用性。\r\n\r\n在兰兰的模型中，神经网络就是一张有向图，图中的节点称为神经元，而且两个神经\r\n元之间至多有一条边相连，下图是一个神经元的例子：\r\n<img src=images\\1168.jpg></img>\r\n                              神经元〔编号为1）\r\n    图中，X1—X3是信息输入渠道，Y1－Y2是信息输出渠道，C1表示神经元目前的状态，\r\nUi是阈值，可视为神经元的一个内在参数。\r\n    神经元按一定的顺序排列，构成整个神经网络。在兰兰的模型之中，神经网络中的神\r\n经无分为几层；称为输入层、输出层，和若干个中间层。每层神经元只向下一层的神经元\r\n输出信息，只从上一层神经元接受信息。下图是一个简单的三层神经网络的例子。\r\n<img src=images\\1168p2.jpg></img>\r\n兰兰规定，Ci服从公式：（其中n是网络中所有神经元的数目）\r\n<img src=images\\1168p3.jpg></img>\r\n    公式中的Wji（可能为负值）表示连接j号神经元和 i号神经元的边的权值。当 Ci大于0时，该神经元处于兴奋状态，否则就处于平静状态。当神经元处于兴奋状态时，下一秒\r\n它会向其他神经元传送信号，信号的强度为Ci。\r\n    如此．在输入层神经元被激发之后，整个网络系统就在信息传输的推动下进行运作。\r\n现在，给定一个神经网络，及当前输入层神经元的状态（Ci），要求你的程序运算出最后网\r\n络输出层的状态。', '输入文件第一行是两个整数n（1 ≤ n ≤ 20）和p。接下来n行，每行两个整数，第i＋1行是神经元i最初状态和其阈值（Ui），非输入层的神经元开始时状态必然为0。再下面P行，每行由两个整数i，j及一个整数Wij，表示连接神经元i、j的边权值为Wij。', '输出文件包含若干行，每行有两个整数，分别对应一个神经元的编号，及其最后的状\r\n态，两个整数间以空格分隔。仅输出最后状态非零的输出层神经元状态，并且按照编号由\r\n小到大顺序输出！\r\n若输出层的神经元最后状态均为 0，则输出 NULL。', 'd:\\oj\\data\\1168', 'd:\\oj\\data\\1168', '5 6\r\n1 0\r\n1 0\r\n0 1\r\n0 1\r\n0 1\r\n1 3 1\r\n1 4 1\r\n1 5 1\r\n2 3 1\r\n2 4 1\r\n2 5 1', '3 1\r\n4 1\r\n5 1', '', 'NOIP2003提高组', '', '2011-02-21 21:46:30', 1000, 65536, 'N', NULL, 2, 2, 100, 0, 0, 2, 2, 30000, 67, ''),
(1169, '侦探推理', '明明同学最近迷上了侦探漫画《柯南》并沉醉于推理游戏之中，于是他召集了一群同学玩推理游戏。游戏的内容是这样的，明明的同学们先商量好由其中的一个人充当罪犯（在明明不知情的情况下），明明的任务就是找出这个罪犯。接着，明明逐个询问每一个同学，被询问者可能会说：\r\n<img src=images\\1169.jpg></img>\r\n证词中出现的其他话，都不列入逻辑推理的内容。\r\n明明所知道的是，他的同学中有N个人始终说假话，其余的人始终说真。\r\n现在，明明需要你帮助他从他同学的话中推断出谁是真正的凶手，请记住，凶手只有一个！', '输入由若干行组成，第一行有二个整数，M（1≤M≤20）、N（1≤N≤M）和P（1≤P≤100）；\r\nM是参加游戏的明明的同学数，N是其中始终说谎的人数，P是证言的总数。接下来M行，\r\n每行是明明的一个同学的名字（英文字母组成，没有主格，全部大写）。\r\n往后有P行，每行开始是某个同学的名宇，紧跟着一个冒号和一个空格，后面是一句证词，符合前表中所列格式。证词每行不会超过250个字符。\r\n    输入中不会出现连续的两个空格，而且每行开头和结尾也没有空格。', '如果你的程序能确定谁是罪犯，则输出他的名字；如果程序判断出不止一个人可能是\r\n罪犯，则输出 Cannot Determine；如果程序判断出没有人可能成为罪犯，则输出 Impossible。', 'd:\\oj\\data\\1169', 'd:\\oj\\data\\1169', '3 1 5\r\nMIKE\r\nCHARLES\r\nKATE\r\nMIKE:I am guilty.\r\nMIKE:Today is Sunday.\r\nCHARLES:MIKE is guilty.\r\nKATE:I am guilty.\r\nKATE:How are you??', 'MIKE', '', 'NOIP2003提高组', '', '2007-07-04 19:54:32', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 75, ''),
(1170, 'Fib数列问题2', 'Fib数列是这样的数列: 1,1,2,3,5,8,13,21,,,,,,. 你能确定它的第n项吗,假设它的第n项为N,你需要编程解决对于另一个输入数M,N % M的值.', '第一行有用空格隔开的两个整数T,M. \r\n以下有T行数据,每行表示Fib数列的第n项. \r\n对于所有输入的数有 1 <= input_number <= 33000000 .', '对于每个n,输出N%M.', 'd:\\oj\\data\\1170', 'd:\\oj\\data\\1170', '3 5\r\n1 \r\n2 \r\n5', '1\r\n1\r\n0', '本题除了内存限制，其它都和&lt;a href=http://222.196.33.254/oj/showproblem?problem_id=1147>1147</a>题完全一样。', 'power', '', '2012-08-19 13:41:15', 2000, 65536, 'N', NULL, 44, 118, 37, 70, 70, 38, 30, 30000, 827, ''),
(1171, '走楼梯2', 'Larrouse总是喜欢思考些无聊的事情,一天吃完饭回宿舍的时候,Larrouse看到同学们在上楼梯的时候走的方式总是不同的.有的人总是一步一个台阶,有的人总是一步2个台阶,还有的是混杂着在走.Larrouse就是属于那种喜欢混杂着走的,于是他便想到了一个无聊的问题,对于一定数量台阶数的楼梯,每步至少上一个台阶，最多上M(1<=M<=30)个台阶。从底层到最高层一共有多少种走法呢??.现在Larrouse把这个问题留给大家,希望大家能帮助他解决这个问题.可是结果可能非常大，所以你只需要输出 mod 9876543的值。', '第一行,输入一个整数T,表示测试的次数;\r\n以下T行每行两个正整数N和M,N表示楼梯的台阶数( 1 <= N <= 10^18 )，M表示每步最多可以上M个台阶.', '对于每个测试数据,输出一行,表示从楼梯底层走到顶层的方法的总数.', 'd:\\oj\\data\\1171', 'd:\\oj\\data\\1171', '2\r\n1 10\r\n2 10', '1\r\n2', '', 'power', '', '2007-07-04 19:57:12', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1172, '', '', '', '', 'd:\\oj\\data\\1172', 'd:\\oj\\data\\1172', '', '', '', '', '', '2007-07-04 19:57:15', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1173, '', '', '', '', 'd:\\oj\\data\\1173', 'd:\\oj\\data\\1173', '', '', '', '', '', '2007-07-04 19:57:18', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1174, '', '', '', '', 'd:\\oj\\data\\1174', 'd:\\oj\\data\\1174', '', '', '', '', '', '2007-07-04 19:57:20', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1175, '', '', '', '', 'd:\\oj\\data\\1175', 'd:\\oj\\data\\1175', '', '', '', '', '', '2007-07-04 19:57:22', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1176, '', '', '', '', 'd:\\oj\\data\\1176', 'd:\\oj\\data\\1176', '', '', '', '', '', '2007-07-04 19:57:25', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1177, '', '', '', '', 'd:\\oj\\data\\1177', 'd:\\oj\\data\\1177', '', '', '', '', '', '2007-07-04 19:57:28', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1178, '', '', '', '', 'd:\\oj\\data\\1178', 'd:\\oj\\data\\1178', '', '', '', '', '', '2007-07-04 19:57:31', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1179, '', '', '', '', 'd:\\oj\\data\\1179', 'd:\\oj\\data\\1179', '', '', '', '', '', '2007-07-04 19:57:34', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1180, '', '', '', '', 'd:\\oj\\data\\1180', 'd:\\oj\\data\\1180', '', '', '', '', '', '2007-07-04 19:57:37', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1181, '', '', '', '', 'd:\\oj\\data\\1181', 'd:\\oj\\data\\1181', '', '', '', '', '', '2007-07-04 19:57:40', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1182, '', '', '', '', 'd:\\oj\\data\\1182', 'd:\\oj\\data\\1182', '', '', '', '', '', '2007-07-04 19:57:43', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1183, '', '', '', '', 'd:\\oj\\data\\1183', 'd:\\oj\\data\\1183', '', '', '', '', '', '2007-07-04 19:57:46', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1184, '', '', '', '', 'd:\\oj\\data\\1184', 'd:\\oj\\data\\1184', '', '', '', '', '', '2007-07-04 19:57:50', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1185, '', '', '', '', 'd:\\oj\\data\\1185', 'd:\\oj\\data\\1185', '', '', '', '', '', '2007-07-04 19:57:53', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1186, '', '', '', '', 'd:\\oj\\data\\1186', 'd:\\oj\\data\\1186', '', '', '', '', '', '2007-07-04 19:57:56', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1187, '', '', '', '', 'd:\\oj\\data\\1187', 'd:\\oj\\data\\1187', '', '', '', '', '', '2007-07-04 19:57:59', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1188, '', '', '', '', 'd:\\oj\\data\\1188', 'd:\\oj\\data\\1188', '', '', '', '', '', '2007-07-04 19:58:02', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1189, '', '', '', '', 'd:\\oj\\data\\1189', 'd:\\oj\\data\\1189', '', '', '', '', '', '2007-07-04 19:58:04', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1190, '', '', '', '', 'd:\\oj\\data\\1190', 'd:\\oj\\data\\1190', '', '', '', '', '', '2007-07-04 19:58:07', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1191, '', '', '', '', 'd:\\oj\\data\\1191', 'd:\\oj\\data\\1191', '', '', '', '', '', '2007-07-04 19:58:10', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1192, '', '', '', '', 'd:\\oj\\data\\1192', 'd:\\oj\\data\\1192', '', '', '', '', '', '2007-07-04 19:58:13', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1193, '', '', '', '', 'd:\\oj\\data\\1193', 'd:\\oj\\data\\1193', '', '', '', '', '', '2007-07-04 19:58:15', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1194, '', '', '', '', 'd:\\oj\\data\\1194', 'd:\\oj\\data\\1194', '', '', '', '', '', '2007-07-04 19:58:18', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1195, '', '', '', '', 'd:\\oj\\data\\1195', 'd:\\oj\\data\\1195', '', '', '', '', '', '2007-07-04 19:58:20', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1196, '', '', '', '', 'd:\\oj\\data\\1196', 'd:\\oj\\data\\1196', '', '', '', '', '', '2007-07-04 19:58:23', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1197, '', '', '', '', 'd:\\oj\\data\\1197', 'd:\\oj\\data\\1197', '', '', '', '', '', '2007-07-04 19:58:26', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1198, '', '', '', '', 'd:\\oj\\data\\1198', 'd:\\oj\\data\\1198', '', '', '', '', '', '2007-07-04 19:58:29', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1199, '', '', '', '', 'd:\\oj\\data\\1199', 'd:\\oj\\data\\1199', '', '', '', '', '', '2007-07-04 19:58:32', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1200, '加分二叉树', '设一个n个节点的二叉树tree的中序遍历为（l,2,3,…,n），其中数字1,2,3,…,n为节点编号。每个节点都有一个分数（均为正整数），记第j个节点的分数为di，tree及它的每个子树都有一个加分，任一棵子树subtree（也包含tree本身）的加分计算方法如下：\r\n    subtree的左子树的加分× subtree的右子树的加分＋subtree的根的分数\r\n    若某个子树为主，规定其加分为1，叶子的加分就是叶节点本身的分数。不考虑它的空\r\n子树。\r\n    试求一棵符合中序遍历为（1,2,3,…,n）且加分最高的二叉树tree。要求输出；\r\n    （1）tree的最高加分\r\n    （2）tree的前序遍历', '第1行：一个整数n（n＜30），为节点个数。\r\n    第2行：n个用空格隔开的整数，为每个节点的分数（分数＜100）。', '第1行：一个整数，为最高加分（结果不会超过4,000,000,000）。\r\n    第2行：n个用空格隔开的整数，为该树的前序遍历。', 'd:\\oj\\data\\1200', 'd:\\oj\\data\\1200', '5\r\n5 7 1 2 10', '145\r\n3 1 2 4 5', '', 'NOIP2003提高组', '', '2011-02-27 09:03:15', 1000, 65536, 'N', NULL, 2, 7, 29, 5, 71, 3, 2, 30000, 68, ''),
(1201, '传染病控制', '近来，一种新的传染病肆虐全球。蓬莱国也发现了零星感染者，为防止该病在蓬莱国大范围流行，该国政府决定不惜一切代价控制传染病的蔓延。不幸的是，由于人们尚未完全认识这种传染病，难以准确判别病毒携带者，更没有研制出疫苗以保护易感人群。于是，蓬莱国的疾病控制中心决定采取切断传播途径的方法控制疾病传播。经过 WHO（世界卫生组织）以及全球各国科研部门的努力，这种新兴传染病的传播途径和控制方法已经研究消楚，剩下的任务就是由你协助蓬莱国疾控中心制定一个有效的控制办法。研究表明，这种传染病的传播具有两种很特殊的性质；\r\n    第一是它的传播途径是树型的，一个人X只可能被某个特定的人Y感染，只要Y不得病，或者是XY之间的传播途径被切断，则X就不会得病。\r\n    第二是，这种疾病的传播有周期性，在一个疾病传播周期之内，传染病将只会感染一代患者，而不会再传播给下一代。\r\n\r\n    这些性质大大减轻了蓬莱国疾病防控的压力，并且他们已经得到了国内部分易感人群的潜在传播途径图（一棵树）。但是，麻烦还没有结束。由于蓬莱国疾控中心人手不够，同时也缺乏强大的技术，以致他们在一个疾病传播周期内，只能设法切断一条传播途径，而没有被控制的传播途径就会引起更多的易感人群被感染（也就是与当前已经被感染的人有传播途径相连，且连接途径没有被切断的人群）。当不可能有健康人被感染时，疾病就中止传播。所以，蓬莱国疾控中心要制定出一个切断传播途径的顺序，以使尽量少的人被感染。\r\n   你的程序要针对给定的树，找出合适的切断顺序。', '输入格式的第一行是两个整数n（1≤n≤300）和p。接下来p行，每一行有两个整数i和j，表示节点i和j间有边相连（意即，第i人和第j人之间有传播途径相连）。其中节点1是已经被感染的患者。', '只有一行，输出总共被感染的人数。', 'd:\\oj\\data\\1201', 'd:\\oj\\data\\1201', '7 6\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3 6\r\n3 7', '3', '', 'NOIP2003提高组', '', '2011-03-18 22:26:16', 1000, 65536, 'N', NULL, 1, 3, 33, 2, 67, 3, 1, 30000, 48, ''),
(1202, 'A + B Problem (Big integer version) 【高精度】', 'Input and output are the same with problem 1001.\r\nBut A and B are big non-negative integers.\r\nThe biggest integer is less than 10^500.', 'Input contains multiple test cases. \r\nEach case have two big non-negative integers a,b.', 'For each case,Output a+b.', 'd:\\oj\\data\\1202', 'd:\\oj\\data\\1202', '1234567890987654321\r\n9876543210123456789\r\n123456789123456789\r\n321654987321654987\r\n9081321110693270343633073697474256143563558458718976746753830538032062222085722974121768604305613921745580037409259811952655310075487163797179490457039169594160088430571674960498834085812920457916453747019461644031395307920624947349951053530086146486307198155590763466429392673709525428510973272600608981219760099374675982933766845473509473676470788342281338779191792495900393751209539300628363443012\r\n6538005862664913074813656220643842443844131905754565672075358391135537108795991638155474452610874309742867231360502542308382199053675592825240788613991898567277116881793749340807728335795394301261629479870548736450984003401594705923178314906195914825136973281314862289454100745237769034410057080703111299605127114594552921209928891515242515620324828055912854227507525717981351447473570262981491527798', '11111111101111111110\r\n445111776445111776\r\n15619326973358183418446729918118098587407690364473542418829188929167599330881714612277243056916488231488447268769762354261037509129162756622420279071031068161437205312365424301306562421608314759178083226890010380482379311322219653273129368436282061311444171436905625755883493418947294462921030353303720280824887213969228904143695736988751989296795616398194193006699318213881745198683109563609854970810', 'Note that there are leading zeros!', 'SWUST.Larrouse', '', '2012-05-30 18:44:27', 1000, 65536, 'N', NULL, 103, 593, 17, 449, 85, 134, 78, 30000, 676, ''),
(1203, 'Maya Calendar', 'During his last sabbatical, professor M. A. Ya made a surprising discovery about the old Maya calendar. From an old knotted message, professor discovered that the Maya civilization used a 365 day long year, called Haab, which had 19 months. Each of the first 18 months was 20 days long, and the names of the months were pop, no, zip, zotz, tzec, xul, yoxkin, mol, chen, yax, zac, ceh, mac, kankin, muan, pax, koyab, cumhu. Instead of having names, the days of the months were denoted by numbers starting from 0 to 19. The last month of Haab was called uayet and had 5 days denoted by numbers 0, 1, 2, 3, 4. The Maya believed that this month was unlucky, the court of justice was not in session, the trade stopped, people did not even sweep the floor. \r\n\r\nFor religious purposes, the Maya used another calendar in which the year was called Tzolkin (holly year). The year was divided into thirteen periods, each 20 days long. Each day was denoted by a pair consisting of a number and the name of the day. They used 20 names: imix, ik, akbal, kan, chicchan, cimi, manik, lamat, muluk, ok, chuen, eb, ben, ix, mem, cib, caban, eznab, canac, ahau and 13 numbers; both in cycles. \r\n\r\nNotice that each day has an unambiguous description. For example, at the beginning of the year the days were described as follows: \r\n\r\n1 imix, 2 ik, 3 akbal, 4 kan, 5 chicchan, 6 cimi, 7 manik, 8 lamat, 9 muluk, 10 ok, 11 chuen, 12 eb, 13 ben, 1 ix, 2 mem, 3 cib, 4 caban, 5 eznab, 6 canac, 7 ahau, and again in the next period 8 imix, 9 ik, 10 akbal . . . \r\n\r\nYears (both Haab and Tzolkin) were denoted by numbers 0, 1, : : : , where the number 0 was the beginning of the world. Thus, the first day was: \r\n\r\nHaab: 0. pop 0 \r\n\r\nTzolkin: 1 imix 0 \r\nHelp professor M. A. Ya and write a program for him to convert the dates from the Haab calendar to the Tzolkin calendar.', 'The date in Haab is given in the following format: \r\nNumberOfTheDay. Month Year \r\n\r\nThe first line of the input file contains the number of the input dates in the file. The next n lines contain n dates in the Haab calendar format, each in separate line. The year is smaller then 5000.', 'The date in Tzolkin should be in the following format: \r\nNumber NameOfTheDay Year \r\n\r\nThe first line of the output file contains the number of the output dates. In the next n lines, there are dates in the Tzolkin calendar format, in the order corresponding to the input dates.', 'd:\\oj\\data\\1203', 'd:\\oj\\data\\1203', '3\r\n10. zac 0\r\n0. pop 0\r\n10. zac 1995', '3\r\n3 chuen 0\r\n1 imix 0\r\n9 cimi 2801', '', 'Central Europe 1995', '', '2011-07-08 11:20:24', 1000, 65536, 'N', NULL, 12, 20, 60, 7, 44, 10, 9, 30000, 61, ''),
(1204, 'Sticks', 'George took sticks of the same length and cut them randomly until all parts became at most 50 units long. Now he wants to return sticks to the original state, but he forgot how many sticks he had originally and how long they were originally. Please help him and design a program which computes the smallest possible original length of those sticks. All lengths expressed in units are integers greater than zero.', 'The input contains blocks of 2 lines. The first line contains the number of sticks parts after cutting, there are at most 64 sticks. The second line contains the lengths of those parts separated by the space. The last line of the file contains zero.', 'The output should contains the smallest possible length of original sticks, one per line.', 'd:\\oj\\data\\1204', 'd:\\oj\\data\\1204', '9\r\n5 2 1 5 2 1 5 2 1\r\n4\r\n1 2 3 4\r\n0', '6\r\n5', '', 'Central Europe 1995', '', '2012-05-20 16:34:32', 1000, 65536, 'N', NULL, 66, 210, 31, 89, 75, 40, 30, 30000, 994, ''),
(1205, 'The TSP problem', 'Give you n citys,the cost of travel from one city to another,you job is to find the minimum \r\ncost cycle which travels each city one time.', 'The first line of the input file contains a single integer t(1<=t<=10),the number of test case,\r\nfollowed by the input data for each test case.Each test case consists of two parts,the first \r\npart contains a integer n (1<=n<=20),the num of citys ,the second part contains n lines,each \r\nlines contain n positive integer,the j_th num in the i_th line means the cost of travel from \r\nthe i_th city to the j_th city.The cost of travle from the i_th city to j_th city is equal to \r\nthe cost of travle from the j_th city to i_th city.', 'There should be one line per test case in the output file containing a single integer,the \r\nminimum cost you find.', 'd:\\oj\\data\\1205', 'd:\\oj\\data\\1205', '1\r\n4\r\n0 30 6 4\r\n30 0 5 10\r\n6 5 0 20\r\n4 10 20 0', '25', '', '经典问题', '', '2007-07-21 09:16:16', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1206, 'Cheapest Palindrome', 'Keeping track of all the cows can be a tricky task so Farmer John\r\nhas installed a system to automate it. He has installed on each cow\r\nan electronic ID tag that the system will read as the cows pass by\r\na scanner. Each ID tag''s contents are currently a single string\r\nwith length M (1 <= M <= 2,000) characters drawn from an alphabet\r\nof N (1 <= N <= 26) different symbols (namely, the lower-case roman\r\nalphabet).\r\n\r\nCows, being the mischievous creatures they are, sometimes try to\r\nspoof the system by walking backwards. While a cow whose ID is\r\n"abcba" would read the same no matter which direction the she walks,\r\na cow with the ID "abcb" can potentially register as two different\r\nIDs ("abcb" and "bcba").\r\n\r\nFJ would like to change the cows''s ID tags so they read the same\r\nno matter which direction the cow walks by. For example, "abcb" can\r\nbe changed by adding "a" at the end to form "abcba" so that the ID\r\nis palindromic (reads the same forwards and backwards). Some other\r\nways to change the ID to be palindromic are include adding the three\r\nletters "bcb" to the begining to yield the ID "bcbabcb" or removing\r\nthe letter "a" to yield the ID "bcb". One can add or remove characters\r\nat any location in the string yielding a string longer or shorter\r\nthan the original string.\r\n\r\nUnfortunately as the ID tags are electronic, each character insertion\r\nor deletion has a cost (0 <= cost <= 10,000) which varies depending\r\non exactly which character value to be added or deleted. Given the\r\ncontent of a cow''s ID tag and the cost of inserting or deleting\r\neach of the alphabet''s characters, find the minimum cost to change\r\nthe ID tag so it satisfies FJ''s requirements. An empty ID tag is\r\nconsidered to satisfy the requirements of reading the same forward\r\nand backward. Only letters with associated costs can be added to a\r\nstring.', '* Line 1: Two space-separated integers: N and M\r\n\r\n* Line 2: This line contains exactly M characters which constitute the\r\n       initial ID string\r\n\r\n* Lines 3..N+2: Each line contains three space-separated entities: a\r\n       character of the input alphabet and two integers which are\r\n       respectively the cost of adding and deleting that character.', '* Line 1: A single line with a single integer that is the minimum cost\r\n       to change the given name tag.', 'd:\\oj\\data\\1206', 'd:\\oj\\data\\1206', '3 4\r\nabcb\r\na 1000 1100\r\nb 350 700\r\nc 200 800', '900', 'The nametag is "abcb" with these per-operation costs:\r\n Insert Delete\r\na  1000   1100\r\nb   350    700\r\nc   200    800\r\n\r\nIf we insert an "a" on the end to get "abcba", the cost would be\r\n1000. If we delete the "a" on the beginning to get "bcb", the cost\r\nwould be 1100. If we insert "bcb" at the begining of the string, the\r\ncost would be 350+200+350=900, which is the minimum.', 'USACO 2007 GOLD', '', '2010-10-05 14:45:31', 1000, 65536, 'N', NULL, 3, 3, 100, 0, 0, 3, 3, 30000, 43, ''),
(1207, 'Dining', 'Cows are such finicky eaters. Each cow has a preference for certain\r\nfoods and drinks, and she will consume no others.\r\n\r\nFarmer John has cooked fabulous meals for his cows, but he forgot\r\nto check his menu against their preferences. Although he might not\r\nbe able to stuff everybody, he wants to give a complete meal of\r\nboth food and drink to as many cows as possible.\r\n\r\nFarmer John has cooked F (1 <= F <= 100) types of foods and prepared\r\nD (1 <= D <= 100) types of drinks. Each of his N (1 <= N <= 100)\r\ncows has decided whether she is willing to eat a particular food\r\nor drink a particular drink. Farmer John must assign a food type\r\nand a drink type to each cow to maximize the number of cows who get\r\nboth.\r\n\r\nEach dish or drink can only be consumed by one cow (i.e., once food\r\ntype 2 is assigned to a cow, no other cow can be assigned food type\r\n2).', '* Line 1: Three space-separated integers: N, F, and D\r\n\r\n* Lines 2..N+1: Each line i starts with a two integers F_i and D_i,\r\n       the number of dishes that cow i likes and the number of drinks\r\n       that cow i likes. The next F_i integers  denote the dishes\r\n       that cow i will eat, and the D_i integers following that\r\n       denote the drinks that cow i will drink.', '* Line 1: A single integer that is the maximum number of cows that can\r\n       be fed both food and drink that conform to their wishes', 'd:\\oj\\data\\1207', 'd:\\oj\\data\\1207', '4 3 3\r\n2 2 1 2 3 1\r\n2 2 2 3 1 2\r\n2 2 1 3 1 2\r\n2 1 1 3 3', '3', 'INPUT DETAILS:\r\n\r\nCow 1:  foods from {1,2}, drinks from {1,3}\r\nCow 2:  foods from {2,3}, drinks from {1,2}\r\nCow 3:  foods from {1,3}, drinks from {1,2}\r\nCow 4:  foods from {1,3}, drinks from {3}\r\nOUTPUT DETAILS:\r\n\r\nOne way to satisfy three cows is:\r\nCow 1: no meal\r\nCow 2: Food #2, Drink #2\r\nCow 3: Food #1, Drink #1\r\nCow 4: Food #3, Drink #3\r\nThe pigeon-hole principle tells us we can do no better since there are only\r\nthree kinds of food or drink. Other test data sets are more challenging, of\r\ncourse.', 'USACO 2007 GOLD', '', '2011-07-30 19:12:23', 1000, 65536, 'N', NULL, 3, 5, 60, 2, 40, 3, 3, 30000, 55, ''),
(1208, 'City Horizon', 'Farmer John has taken his cows on a trip to the city! As the sun\r\nsets, the cows gaze at the city horizon and observe the beautiful\r\nsilhouettes formed by the rectangular buildings.\r\n\r\nThe entire horizon is represented by a number line with N (1 <= N\r\n<= 40,000) buildings. Building i''s silhouette has a base that spans\r\nlocations A_i through B_i along the horizon (1 <= A_i < B_i <=\r\n1,000,000,000) and has height H_i (1 <= H_i <= 1,000,000,000).\r\nDetermine the area, in square units, of the aggregate silhouette\r\nformed by all N buildings.', '* Line 1: A single integer: N\r\n\r\n* Lines 2..N+1: Input line i+1 describes building i with three\r\n        space-separated integers: A_i, B_i, and H_i', '* Line 1: The total area, in square units, of the silhouettes formed\r\n        by all N buildings', 'd:\\oj\\data\\1208', 'd:\\oj\\data\\1208', '4\r\n2 5 1\r\n9 10 4\r\n6 8 2\r\n4 6 3', '16', 'The first building overlaps with the fourth building for an area of 1\r\nsquare unit, so the total area is just 3*1 + 1*4 + 2*2 + 2*3 - 1 = 16.', 'USACO 2007 SILVER', '', '2012-02-18 21:31:57', 1000, 65536, 'N', NULL, 9, 24, 38, 13, 81, 4, 3, 30000, 68, ''),
(1209, 'Catch That Cow', 'Farmer John has been informed of the location of a fugitive cow and\r\nwants to catch her immediately. He starts at a point N (0 <= N <=\r\n100,000) on a number line and the cow is at a point K (0 <= K <=\r\n100,000) on the same number line. Farmer John has two modes of\r\ntransportation: walking and teleporting.\r\n\r\n    * Walking: FJ can move from any point X to the points X-1 or\r\n      X+1 in a single minute\r\n\r\n    * Teleporting: FJ can move from any point X to the point 2*X\r\n      in a single minute.\r\n\r\nIf the cow, unaware of its pursuit, does not move at all, how long\r\ndoes it take for Farmer John to retrieve it?', '* Line 1: Two space-separated integers: N and K', '* Line 1: The least amount of time, in minutes, it takes for Farmer\r\n        John to catch the fugitive cow.', 'd:\\oj\\data\\1209', 'd:\\oj\\data\\1209', '5 17', '4', 'INPUT DETAILS:\r\nFarmer John starts at point 5 and the fugitive cow is at point 17.\r\nOUTPUT DETAILS:\r\nThe fastest way for Farmer John to reach the fugitive cow is to\r\nmove along the following path: 5-10-9-18-17, which takes 4 minutes.', 'USACO 2007 SILVER', '', '2012-04-01 22:46:46', 1000, 65536, 'N', NULL, 61, 181, 34, 102, 72, 54, 39, 30000, 871, ''),
(1210, 'Fliptile', 'Farmer John knows that an intellectually satisfied cow is a happy\r\ncow who will give more milk. He has arranged a brainy activity for\r\ncows in which they manipulate an M x N grid (1 <= M <= 15; 1 <= N\r\n<= 15) of square tiles, each of which is colored black on one side\r\nand white on the other side.\r\n\r\nAs one would guess, when a single white tile is flipped, it changes\r\nto black; when a single black tile is flipped, it changes to white.\r\nThe cows are rewarded when they flip the tiles so that each tile\r\nhas the white side face up. However, the cows have rather large\r\nhooves and when they try to flip a certain tile, they also flip all\r\nthe adjacent tiles (tiles that share a full edge with the flipped\r\ntile). Since the flips are tiring, the cows want to minimize the\r\nnumber of flips they have to make.\r\n\r\nHelp the cows determine the minimum number of flips required, and\r\nthe locations to flip to achieve that minimum. If there are multiple\r\nways to achieve the task with the minimum amount of flips, return\r\nthe one with the least lexicographical ordering in the output when\r\nconsidered as a string.  If the task is impossible, print one line\r\nwith the word "IMPOSSIBLE".', '* Line 1: Two space-separated integers: M and N\r\n\r\n* Lines 2..M+1: Line i+1 describes the colors (left to right) of row i\r\n        of the grid with N space-separated integers which are 1 for\r\n        black and 0 for white', '* Lines 1..M: Each line contains N space-separated integers, each\r\n        specifying how many times to flip that particular location.', 'd:\\oj\\data\\1210', 'd:\\oj\\data\\1210', '4 4\r\n1 0 0 1\r\n0 1 1 0\r\n0 1 1 0\r\n1 0 0 1', '0 0 0 0\r\n1 0 0 1\r\n1 0 0 1\r\n0 0 0 0', 'After flipping at row 2 column 1, the board will look like:\r\n0 0 0 1\r\n1 0 1 0\r\n1 1 1 0\r\n1 0 0 1\r\n\r\nAfter flipping at row 2 column 4, the board will look like:\r\n0 0 0 0\r\n1 0 0 1\r\n1 1 1 1\r\n1 0 0 1\r\n\r\nAfter flipping at row 3 column 1, the board will look like:\r\n0 0 0 0\r\n0 0 0 1\r\n0 0 1 1\r\n0 0 0 1\r\n\r\nAfter flipping at row 3 column 4, the board will look like:\r\n0 0 0 0\r\n0 0 0 0\r\n0 0 0 0\r\n0 0 0 0\r\n\r\nAnother solution might be:\r\n0 1 1 0\r\n0 0 0 0\r\n0 0 0 0\r\n0 1 1 0\r\nbut this solution is lexicographically higher than the solution above.', 'USACO 2007 SILVER', '', '2011-04-27 15:13:45', 1000, 65536, 'N', NULL, 9, 16, 56, 7, 58, 5, 5, 30000, 62, ''),
(1211, 'Cow Solitaire', 'Late summer on the farm is a slow time, very slow. Betsy has little\r\nto do but play cow solitaire. For self-evident reasons, cow solitaire\r\nis not so challenging as any number of solitaire games played by\r\nhumans.\r\n\r\nCow solitaire is played using an N x N (3 <= N <= 7) grid of ordinary\r\nplaying cards with four suits (Clubs, Diamonds, Hearts, and Spaces)\r\nof 13 cards (Ace, 2, 3, 4, ..., 10, Jack, Queen, King). Cards are\r\nnamed with two characters: their value (A, 2, 3, 4, ..., 9, T, J,\r\nQ, K) followed by their suit (C, D, H, S). Below is a typical grid\r\nwhen N = 4:\r\n\r\n     8S AD 3C AC     (Eight of Spades, Ace of Diamonds, etc.)\r\n     8C 4H QD QS\r\n     5D 9H KC 7H\r\n     TC QC AS 2D\r\n\r\nTo play this solitaire game, Betsy starts in the lower left corner\r\n(TC) and proceeds using exactly 2*N-2 moves of ''right'' or ''up'' to\r\nthe upper right corner. Along the way, she accumulates points for\r\neach card (Ace is worth 1 point, 2 is worth 2 points, ..., 9 is\r\nworth 9 points, T is worth 10 points, J is 11, Q is 12, and K is\r\n13) she traverses. Her goal is to amass the highest score.\r\n\r\nIf Betsy''s path was TC-QC-AS-2C-7H-QS-AC, her score would be\r\n10+12+1+2+7+12+1=45. Had she taken the left side then top\r\n(TC-5D-8C-8S-AD-3C-AC), her score would be 10+5+8+8+1+3+1=36, not\r\nas good as the other route. The best score for this grid is 69\r\npoints (TC-QC-9H-KC-QD-QS-AC => 10+12+9+13+12+12+1).\r\n\r\nBetsy wants to know the best score she can achieve. One of the geek\r\ncows once told her something about "working from the end back to\r\nthe beginning," but she didn''t understand what they meant.', '* Line 1: A single integer: N\r\n\r\n* Lines 2..N+1: Line i+1 lists the cards on row i (row 1 is the top\r\n        row) using N space-separated card names arranged in the\r\n        obvious order.', '* Line 1: A single line with an integer that is the best possible\r\n        score Betsy can achieve.', 'd:\\oj\\data\\1211', 'd:\\oj\\data\\1211', '4\r\n8S AD 3C AC\r\n8C 4H QD QS\r\n5D 9H KC 7H\r\nTC QC AS 2D', '69', '', 'USACO 2007', '', '2010-05-12 17:19:59', 1000, 65536, 'N', NULL, 4, 11, 36, 7, 64, 5, 4, 30000, 73, ''),
(1212, 'The Flower Garden', 'Imagine Betsy''s surprise as she rounded the barn and discovered\r\nthat Farmer John had built a secret greenhouse that was now brimming\r\nwith gorgeous flowers. Her mind ran wild as visions of a gorgeous\r\ncolorful garden swirled through her little bovine brain.\r\n\r\n"I think I''ll make a long row of F (7 <= F <= 10,000) flowers against\r\nthe far fence," she thought.  "I''ll plant roses in every 3rd slot,\r\nbegonias in every 7th slot that is still open, and daisies in every\r\n4th slot that is still open." Betsy wondered how many open slots\r\nwould remain. She realized that the number would depend on which\r\nslot she started planting when she intended to fill every Nth slot\r\nwith a kind of flower.\r\n\r\nHelp Betsy know how many open slots will remain. Read a set of K\r\n(1 <= K <= 100) planting descriptors, each of which tells a starting\r\nlocation L (1 <= L <= F) -- L=1 is the first flower -- and an\r\ninterval I (1 <= I <= F) for planting flowers. Deduce the number\r\nof empty slots that remain after planting the entire set.\r\n\r\nIf Betsy followed through on her initial vision, she might specify\r\nthe planting as:\r\n      30 3     [30 slots total; 3 kinds of flowers]\r\n      1 3      [start at slot 1 and plant roses every 3rd slot]\r\n      3 7      [start at slot 3 and plant begonias every 7rd slot]\r\n      1 4      [start at slot 1 and plant daisies in every 4th slot]\r\n\r\nThus, the empty garden looks like this:\r\n     . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\nThen, after the rose planting:\r\n     R . . R . . R . . R . . R . . R . . R . . R . . R . . R . .\r\nThen, after the begonia planting:\r\n     R . B R . . R . . R . . R . . R B . R . . R . B R . . R . .\r\nThen, after the daisy planting:\r\n     R . B R D . R . D R . . R . . R B . R . D R . B R . . R D .\r\n\r\n13 empty slots remain after all the planting.', '* Line 1: Two space-separated integers: F and K\r\n\r\n* Lines 2..K+1: Line j contains two space-separated integers that\r\n        specify the planting of one kind of flower: L_j and I_j', '* Line 1: A single line with a single integer that is the number of\r\n        empty flower slots that remain after the planting is complete', 'd:\\oj\\data\\1212', 'd:\\oj\\data\\1212', '30 3\r\n1 3\r\n3 7\r\n1 4', '13', '', 'USACO 2007', '', '2007-08-10 12:14:37', 1000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 39, ''),
(1213, 'Cow Counting', 'Farmer John wants to label his N (1 <= N <= 1,000,000) cows, but\r\ncows don''t like having the digit L (0 <= L <= 9) written on them,\r\nso he avoids that.\r\n\r\nIf the cows are labeled with the smallest set of N positive integers\r\nthat don''t have the digit L, what is the largest number that Farmer\r\nJohn has to write on any cow?', '* Line 1: Two space-separated integers: N and L.', 'Farmer John has 10 cows he needs to label without using the digit 1.', 'd:\\oj\\data\\1213', 'd:\\oj\\data\\1213', '10 1', '22', 'The smallest 10 numbers he can use are: 2, 3, 4, 5, 6, 7, 8, 9, 20, and 22.', 'USACO 2007', '', '2011-03-15 21:29:33', 1000, 65536, 'N', NULL, 24, 47, 51, 20, 51, 19, 19, 30000, 66, ''),
(1214, 'Bronze Cow Party', 'One cow from each of N farms (1 <= N <= 1000) conveniently numbered\r\n1..N is attending the big cow party to be held at farm #X (1 <= X\r\n<= N). Each of M (1 <= M <= 100,000) bidirectional roads connects\r\none farm to another. It is always possible to travel from one farm\r\nto another on the roads. Traversing road i requires Ti (1 <= Ti\r\n<= 100) units of time. One or more pairs of farms might be directly\r\nconnected by more than one road.\r\n\r\nAfter all the cows gathered at farm #X, they realized that every\r\nsingle cow left her party favors back at the farm. They decided to\r\nsuspend the party and send all the cows back to get the party favors.\r\nThe cows all travel optimal routes to their home farm and back to\r\nthe party. What is the minimum number of time units the party must\r\nbe suspended?', '* Line 1: Three space-separated integers, respectively: N, M, and X\r\n\r\n* Lines 2..M+1: Line i+1 describes road i with three space-separated\r\n        integers, respectively: Ai, Bi, and Ti. The described road\r\n        connects Ai and Bi and requires Ti time units to traverse.', '* Line 1: One integer: the minimum amount of time the party must be\r\n        suspended.', 'd:\\oj\\data\\1214', 'd:\\oj\\data\\1214', '4 8 2\r\n1 2 7\r\n1 3 8\r\n1 4 4\r\n2 1 3\r\n2 3 1\r\n3 1 2\r\n3 4 6\r\n4 2 2', '6', 'Direct paths connects farm 2 to each of the other farms (to farm\r\n1: 7 and 3; to farm 3: 1; to farm 4: 2). The longest path is length\r\n3, so the round-trip time is 6.', 'USACO 2007', '', '2007-09-26 09:07:45', 1000, 65536, 'N', NULL, 1, 2, 50, 1, 50, 2, 1, 30000, 38, '');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1215, 'Cow Dominoes', 'The cows are playing dominoes with N (1 <= N <= 40) domino tiles.  Each\r\n domino has two numbers in the range 0..9 arranged one on top of the other,\r\n like this:\r\n<img src=images\\1215.gif></img> \r\n The particular game the cows are playing requires laying down the N\r\n dominoes (choosing the order and the rotation) so that the sum of the two\r\n base 10 representations is maximized.  For the example above, the maximum\r\n sum is 775. Your job is to calculate that maximum sum.', '* Line 1: One line with a single integer: N\r\n \r\n * Lines 2..N+1: Each line contains two integers describing a domino.', 'One line with a single integer that is the maximum possible sum of the base\r\n10 representations of the dominoes laid out side-by-side.', 'd:\\oj\\data\\1215', 'd:\\oj\\data\\1215', '3\r\n1 4\r\n2 5\r\n3 4', '775', '', 'USACO 2002', '', '2011-10-20 20:21:49', 1000, 65536, 'N', NULL, 7, 19, 37, 12, 63, 10, 7, 30000, 68, ''),
(1216, 'Cow Plumbing', 'The cows want to move water from the pond to the barn, a distance of D (7\r\n <= D <= 100,000).  They have a set of P (1 <= P <= 350) pipes, each with\r\n positive integer length Li and positive integer capacity Ci (both numbers\r\n fit in 24 bits).\r\n \r\n The pipes can be connected in series into a run: the connected pipes have\r\n the capacity that is the least of all pipes'' individual capacities.  A run\r\n must reach precisely D units (i.e., the sum of the Li''s for the pipes in\r\n a run must be D).\r\n \r\n Find the maximum amount of water that can be moved from the pond to the\r\n barn in one single run of pipe.', '* Line 1: One line with two integers: D and P\r\n \r\n * Lines 2..P+1: Each line contains two integers describing a pipe: Li\r\n           and Ci', 'One line with a single integer that is the maximum possible legal flow.', 'd:\\oj\\data\\1216', 'd:\\oj\\data\\1216', '7 6\r\n 4 5\r\n 3 6\r\n 2 7\r\n 1 4\r\n 6 7\r\n 1 5', '5', '', 'USACO 2002', '', '2010-09-08 21:03:27', 1000, 65536, 'N', NULL, 7, 17, 41, 7, 58, 6, 5, 30000, 41, ''),
(1217, 'Dinner Time', 'Farmer John has N (3 <= N <= 50000) cows, each branded with a unique serial\r\n number in the range 1..N.  Each night, they line up for dinner by forming\r\n a line (queue) with the cows in a relatively random order.  Any given\r\n ordering can be expressed as an N digit number in base N.\r\n \r\n Farmer John doesn''t like random ordering.  He wants the cows to line up in\r\n a way such that the number that represents the ordering is minimized.  The\r\n cows, however, don''t like do be told exactly what to do all the time.\r\n \r\n FJ and the cows have reached a compromise:  the cows will line up and then\r\n rearrange themselves into a certain new order that minimizes the ordering''s\r\n representation.  The trick is that each serial number in the new ordering\r\n can differ by no more than 1 from the serial number that used to occupy\r\n that slot.\r\n \r\n If 8 cows lined up like this:   8 5 7 3 6 4 2 1\r\n Then the new ordering would be: 7 4 8 2 6 5 3 1\r\n because:\r\n         * No slot in the second list contains a digit that differs from\r\n           the digit above by more than 1 (sometimes the difference is 0)\r\n         * This is the smallest number that can be obtained using the rules.\r\n \r\n Your job is to tell FJ the new ordering of cows so he can ensure they\r\n are lined up properly.', '* Line 1: One line with a single integer: N\r\n \r\n * Lines 2..N+1: Each line contains a single integer that is the serial\r\n           number of a cow in the respective slot.  The left-hand cow\r\n           is given first.', 'N lines, each with a single integer that tells which cow belongs in the\r\n respective slot.  The first output line should contain the serial\r\n number of the cow in the left-hand slot (and so on).', 'd:\\oj\\data\\1217', 'd:\\oj\\data\\1217', '8\r\n 8\r\n 5\r\n 7\r\n 3\r\n 6\r\n 4\r\n 2\r\n 1', '7\r\n 4\r\n 8\r\n 2\r\n 6\r\n 5\r\n 3\r\n 1', '', 'USACO 2002', '', '2007-08-16 15:32:59', 1000, 65536, 'N', NULL, 0, 1, 0, 1, 100, 1, 0, 30000, 40, ''),
(1218, 'Cowese', 'It is a little known fact that the cows love word games.  They have their\r\n own cow crossword puzzles, cow word-find grids, and all sorts of other cow\r\n word games.\r\n \r\n The cows need some computer assistance, though, in order to design certain\r\n word games.  They have lists of N distinct words (2 <= N <= 20,000) no\r\n longer than 100 characters, all of which are lower-case and contain only\r\n the letters ''a''..''z''.\r\n \r\n They need to find two words in the list that share the longest prefix\r\n (i.e., the first C characters of the words match and C is the longest\r\n length for all possible pairs of words).  The input datasets are guaranteed\r\n to have at least one pair of words with a shared prefix.\r\n \r\n If more than two word pairs share prefixes of the same maximal size, the\r\n cows want to see the pair whose first word is closest to the beginning of\r\n the supplied list and whose other maximal-prefix word is closest to the\r\n beginning of the list.', '* Line 1: One line with a single integer: N\r\n \r\n * Lines 2..N+1: Each line contains a single word.', 'Two lines, each with a single word.', 'd:\\oj\\data\\1218', 'd:\\oj\\data\\1218', '9\r\n noon\r\n is\r\n lunch\r\n for\r\n most\r\n noone\r\n waits\r\n until\r\n two', 'noon\r\n noone', '', 'USACO 2002', '', '2010-05-12 20:23:15', 1000, 65536, 'N', NULL, 2, 13, 15, 11, 85, 4, 2, 30000, 33, ''),
(1219, '[Traditional]', 'Powers of two are just so easy to calculate. To find the Nth power of 2,\r\njust multiply 2 by itself N times (where 2 to the 0th power is 1 and 2 to\r\nthe 1st power is 2).  Thus, we have a power table:\r\n\r\nN-----2 to the Nth power\r\n2-----4\r\n5-----32\r\n10----1024\r\n\r\nWrite a program that reads N (1 <= N <= 30) and prints 2 to the Nth power.\r\nDo not use a table of precalculated numbers in your program.', 'A single line with integer N.', 'A single line with 2 to the Nth power.', 'd:\\oj\\data\\1219', 'd:\\oj\\data\\1219', '10', '1024', '', 'USACO 2002', '', '2012-04-10 17:27:32', 1000, 65536, 'N', NULL, 117, 146, 80, 24, 19, 106, 103, 30000, 218, ''),
(1220, 'Dictionary Numbers', 'The number 79 becomes "seven nine" when translated digit by digit into a\r\nstring of words. Likewise 80 becomes "eight zero"\r\n \r\nWhen sorted as numbers, 79 comes before 80. But as a translated string,\r\nthe number "eight zero" comes before "seven nine" in dictionary order.\r\n \r\nWrite a program that reads two whole numbers M and N (1 <= M < N <= 999)\r\nand finds the first and last numbers in dictionary order of the numbers\r\nin the range M..N inclusive', 'A single line with two integers: M and N', 'A single line with two space-separated integers that are the first and last\r\nnumbers when the numbers are sorted in dictionary sequence.', 'd:\\oj\\data\\1220', 'd:\\oj\\data\\1220', '7 20', '8 20', '', 'USACO 2002', '', '2011-05-21 14:56:44', 1000, 65536, 'N', NULL, 4, 13, 31, 9, 69, 5, 4, 30000, 47, ''),
(1221, 'Hungry Cows', 'The cows are lined up at their feed trough, which has individualized\r\nfeeding buckets numbered sequentially from 1 through N (1 <= N <= 2000).\r\nEach night a lucky cow gets to eat from a number of buckets according to\r\nFarmer John''s rules.\r\n\r\nFarmer John posts a list of no more than B bucket-sequences (a bucket\r\nsequence is a pair of integers (a pair like start-end where 1 <= start <=\r\nend <= N and the sequence includes buckets start through end, e.g., 1-3,\r\n7-8, 3-4). FJ''s rules allow the cow to choose as many of the intervals as\r\nshe wishes, as long as no bucket is mentioned more than once in the total\r\nset of chosen intervals.\r\n\r\nOf course, cows are like anyone else and want as much feed as they can get.\r\nGiven a set of bucket-sequences, help the lucky cow find the best sequence\r\nwhich yields the greatest amount of feed.\r\n\r\nIn the example above, bucket-sequences 1-3 and 3-4 overlap; the wise cow\r\nchooses the set of {1-3, 7-8} for a lavish dinner of five buckets.', '* Line 1: One integer B (1 <= B <= 1000)\r\n\r\n* Lines 2..B+1: Each line contains a two integer bucket sequence with\r\n          the smaller bucket number first', 'A single line with a single integer that is the greatest number of feed\r\nbuckets the lucky cow can eat.', 'd:\\oj\\data\\1221', 'd:\\oj\\data\\1221', '3\r\n1 3\r\n7 8\r\n3 4', '5', '', 'USACO 2002', '', '2010-10-17 22:39:16', 1000, 65536, 'N', NULL, 1, 3, 33, 2, 67, 2, 1, 30000, 45, ''),
(1222, 'Cow Shuffle', 'Each time cows shuffle a deck of 2N (1 <= N <= 9,000) cards marked 1..2N\r\nthey do it as follows:\r\n\r\n* Cut the deck exactly in half to form two piles (A and B) of N cards each.\r\n  A is the top N cards and B is the bottom N cards.\r\n\r\n* Combine the cards back together into a single pile by taking one card\r\n  from pile A and placing it face down on a new pile and then one card from\r\n  pile B and placing it face down on top of the first card, then one from\r\n  A and one from B and so on until all the cards are perfectly shuffled\r\n  back into a single pile.\r\n\r\nThey repeat this cow shuffle again and again until the cards are back in\r\ntheir original order.\r\n\r\nGiven N, how many cow shuffles does it take to return the cards to their\r\noriginal order?\r\n\r\nEXAMPLE:\r\n\r\nLet N be 3; therefore, the the cards are {1, 2, 3, 4, 5, 6} and the\r\nshuffles go like this:\r\n\r\norig   shuf1  shuf2   shuf3  shuf4\r\n  1      6      1      6      1\r\n  2      3      5      4      2   \r\n  3   -> 5   -> 4   -> 2   -> 3\r\n  4      2      3      5      4\r\n  5      4      2      3      5\r\n  6      1      6      1      6\r\n\r\nSo, four cow shuffles suffice to put the deck of 2*3 cards back in order.', 'A single line with the integer N', 'A single line with the integer number of shuffles required to return\r\n2N cards to their original order.', 'd:\\oj\\data\\1222', 'd:\\oj\\data\\1222', '3', '4', '', 'USACO 2002', '', '2007-08-28 09:49:04', 1000, 65536, 'N', NULL, 4, 5, 80, 1, 33, 2, 2, 30000, 41, ''),
(1223, 'Negative Powers', 'Negative powers of two are kind of easy to calculate. To find the -Nth\r\npower of 2, just find the Nth power of 2 (see Problem 5) and invert it: 2\r\nto the -1st power is 0.5; 2 to the -10th power is 0.0009765625).  Thus, we\r\nhave a power table:\r\n\r\nN---2 to the -Nth power\r\n2---0.25\r\n5---0.03125\r\n10--0.0009765625\r\n\r\nWrite a program that reads N (1 <= N <= 999) and prints 2 to the -Nth power.\r\nPrint the number with precisely one lead 0, the decimal point, and then\r\nthe rest of the digits.  Do not print trailing 0''s.', 'A single line with integer N.', 'A single line with 2 to the -Nth power in the format specified above.', 'd:\\oj\\data\\1223', 'd:\\oj\\data\\1223', '10', '0.0009765625', '', 'USACO 2002', '', '2011-11-15 15:54:02', 1000, 65536, 'N', NULL, 12, 23, 52, 11, 50, 12, 11, 30000, 63, ''),
(1224, 'The Idiot of the Year Contest! 【高精度】', 'There is just one basic rule in the Idiot of the Year Contest (IYC)! The contestant picks a random digit between 0 and 9, computes the factorial of the day of the year he/she is born, and counts the how many times the digit picked appears in the factorial. The contestant with highest count is the Idiot of the Year! For example, if you are born on 5th of Mordad which is the 129th day of the year, and you pick the digit 6, your score will be the number of times the digit 6 appears in 129! (that is 1 × 2 × 3 × ... × 129).\r\n\r\nThe chief judge of IYC wants you to write a program to get an integer which is the day of the year a contestant is born on and a digit and report the number of times the digit appears in the factorial of the first number.', 'Each test cases containing the data for a test case having two numbers. The first number is the day of the year a contestant is born and the second one is the digit he/she has picked.', 'The output contains T lines, each having one integer which is the number of times the digit appears in the factorial of the first number.', 'd:\\oj\\data\\1224', 'd:\\oj\\data\\1224', '5 2\r\n7 0', '1\r\n2', '', 'Tehran 2006 Preliminary', '', '2012-01-25 23:25:06', 1000, 65536, 'N', NULL, 17, 28, 61, 11, 42, 16, 15, 30000, 137, ''),
(1225, 'Expression Evaluator', 'This problem is about evaluating some C-style expressions. The expressions to be evaluated will contain only simple integer variables and a limited set of operators; there will be no constants in the expressions. There are 26 variables in the program, named by lower case letters a through z. Before evaluation, the initial values of these variables are a = 1, b = 2, ..., z = 26.\r\n\r\nThe operators allowed are addition and subtraction (binary + and -), with their known meaning. So, the expression a + c - d + b has the value 2 (1 + 3 - 4 + 2). Additionally, ++ and –- operators are allowed in the input expression too, which are unary operators, and may come before or after variables. If the ++ operator comes before a variable, then that variable''s value is increased (by one) before the variable''s value is used in calculating the value of the whole expression. Thus the value of ++ c - b is 2. When ++ comes after a variable, that variable is increased (by one) after its value is used to calculate the value of the whole expression. So, the value of the c ++ - b is 1, though c is incremented after the value for entire expression is computed; its value will be 4 too. The -- operator behaves the same way, except that it decreases the value of its operand. \r\n\r\nMore formally, an expression is evaluated in the following manner: \r\n\r\nIdentify every variable that are preceded by ++. Write an assignment statement for incrementing the value of each of them, and omit the ++ from before that variable in the expression.\r\nDo similarly for the variables with ++ after them.\r\nAt this point, there is no ++ operator in the expression. Write a statement evaluating the remaining expression after the statements determined in step 1, and before those determined in step 2.\r\nExecute the statements determined in step 1, then those written in step 3, and finally the one written in step 2.\r\nThis way, evaluating ++ a + b ++ is the same as computing a = a + 1, result = a + b, and b = b + 1.', 'The first line of the input contains a single integer T which is the number of test cases, followed by T lines each containing the input expression for a test case. Ignore blanks in the input expression. Be sure that no ambiguity is in the input expressions (like a+++b). Similarly, ++ or -- operators do not appear both before and after one single variable (like ++a++). You may safely assume each variable appears only once in an expression.', 'For each test case, write each expression as it appears in the input (exactly), then write the value of the complete expression. After this, on separate lines, write the value of each variable after evaluating the expression (write them in sorted order of the variable names). Write only the values of the variables that are used in the expressions. To find out about the output format, follow the style used in the sample output below.', 'd:\\oj\\data\\1225', 'd:\\oj\\data\\1225', '2\r\na+b\r\nc+f--+--a', 'Expression: a+b\r\nvalue = 3\r\na = 1\r\nb = 2\r\nExpression: c+f--+--a\r\nvalue = 9\r\na = 0\r\nc = 3\r\nf = 5', '', 'Tehran 2006 Preliminary', '', '2011-01-12 23:04:49', 1000, 65536, 'N', NULL, 13, 46, 28, 14, 67, 7, 7, 30000, 29, ''),
(1226, 'The Triangle  经典DP', '<img src=images\\1226.gif></img> \r\nFigure 1 shows a number triangle. Write a program that calculates the highest sum of numbers passed on a route that starts at the top and ends somewhere on the base. Each step can go either diagonally down to the left or diagonally down to the right.', 'The input consists of several test cases. \r\nFor each testcase,The first line contains one integer N: the number of rows in the triangle. The following N lines describe the data of the triangle. The number of rows in the triangle is > 1 but <= 100. The numbers in the triangle, all integers, are between 0 and 99.', 'Your program is to write to standard output. The highest sum is written as an integer.\r\nEach testcase output one line.', 'd:\\oj\\data\\1226', 'd:\\oj\\data\\1226', '5\r\n7\r\n3 8\r\n8 1 0 \r\n2 7 4 4\r\n4 5 2 6 5', '30', '', 'IOI 1994', '', '2012-05-12 16:26:07', 1000, 65536, 'N', NULL, 96, 239, 40, 129, 65, 76, 69, 30000, 749, ''),
(1227, 'Pasture Fences', 'Farmer John has a long fence made of fence poles and rails.  Each of the N (1 <= N <= 3000) \r\nfence poles carries a sign with a single number from -1000 through +1000.  Some poles might \r\nhave the same number on their sign as other poles. While chewing their cud, the cows made up\r\n a game.  The cow who can find the "best fence sum" gets ice cream for dessert.\r\n\r\nTo win the game, the winning cow must find the longest contiguous set of poles whose sum has \r\nthe smallest absolute value.  Help them determine the winning sum.', '* Line 1: One line with a single integer: N\r\n\r\n* Lines 2..N+1: Each line contains a pole''s label.  Line 2 contains\r\n  the value for pole with sequence number 1, etc.', 'A single line with three numbers:\r\n  * the sequence number of the pole that is first to be summed,\r\n  * the sequence number of the pole that is last to be summed, and\r\n  * the absolute value of the sum of the labels of those poles. If more than one \r\nsequence has the same "best fence sum" and same maximum length, report the sequence\r\n with the lowest first sequence number.', 'd:\\oj\\data\\1227', 'd:\\oj\\data\\1227', '6\r\n5\r\n10\r\n-5\r\n-6\r\n2\r\n4', '4 6 0', '', 'USACO 2002', '', '2007-12-29 20:52:56', 2000, 65536, 'N', NULL, 7, 31, 23, 20, 77, 6, 6, 30000, 31, ''),
(1228, '聚餐', '紧张的假期ACM培训结束后，ACM所有成员N (3 <= N <= 200)，准备在一起聚餐，为了使这次聚餐更有意义，大家决定将自己最拿手的食品（单位是“盘”）带到晚会上来。这里总共有D (5 <= D <= 100)种不同的食品，每种食品用一个整数表示（1..D）。\r\n\r\n但考虑到同种食品带的太多了会因为没有人愿意吃而浪费，所以他们给每种食品的总盘数分别规定了不同的上限值。每个队员可以带K (1 <= K <= 5)盘食品，当然这些食品是不同的。\r\n但这样让他们很伤脑筋：究竟要怎样做，才能让晚会上的食品总盘数尽量多呢？\r\n\r\n作为队里最优秀的程序员，你一定不愿意看到自己的对友为此而大伤脑筋吧？', '第一行：三个整数 N K D\r\n第二行：D 个非负数整数：每种食品的上限\r\n接下来的N行每行包含一个整数Z (1 <= Z <= D)表示每名队员会做的食品的种类数，紧接的Z个正数表示食品的种类', '输出晚会上食品总盘数', 'd:\\oj\\data\\1228', 'd:\\oj\\data\\1228', '4 3 5\r\n2 2 2 2 3\r\n4 1 2 3 4\r\n4 2 3 4 5\r\n3 1 2 4\r\n3 1 2 3', '9', '', 'SWUST.Flying', '', '2011-07-30 18:08:22', 1000, 65536, 'N', NULL, 20, 64, 31, 42, 72, 21, 16, 30000, 138, ''),
(1229, 'Strolling Cows', 'Before going to the barn for dinner, the cows like to stroll the N (1 <= N <= 30,000)\r\n pastures while watching the sun set.  Each pasture leads to precisely one pasture, though\r\n some pastures have more than one pasture emptying into them.  For a valid strolling experience,\r\n the cows can start in any pasture and must finish in that same pasture without visiting any \r\nother pasture twice.  Given a description of the pasture paths, deduce the longest possible \r\nvalid stroll the cows can take.', '* Line 1: One integer: N\r\n\r\n* Lines 2..N+1: Line M tells the pasture number that pasture M-1 connects\r\n  to (so line 2 tells which pasture is accessible from pasture 1, etc.)', 'A single line with the integer that is the largest number of pastures that can be visited \r\non a legal stroll.', 'd:\\oj\\data\\1229', 'd:\\oj\\data\\1229', '5\r\n2\r\n4\r\n5\r\n5\r\n2', '3', '[by visiting pasture 2, then 4, then 5]', 'USACO 2002', '', '2007-08-18 17:06:13', 1000, 65536, 'N', NULL, 0, 5, 0, 5, 100, 2, 0, 30000, 28, ''),
(1230, 'Grazing Sets', 'Farmer John''s N (4 <= N <= 10,000) cows live at various points within a circular field.  \r\nFJ wants to partition his cows by building K (3 <= K <= 1000) fences radially outward \r\nfrom the center of the field at evenly-spaced angles (each measuring 360/K degrees).  \r\nDepending on how he rotates this system of fences, he can partition the cows into K \r\nsubsets, each containing a different subset of cows (potentially an empty subset). \r\nDefine the RANGE of this partition as the number of cows in the largest set minus \r\nthe number of cows in the smallest set.  Determine the minimum attainable RANGE value \r\nfor a given set of cows.\r\n\r\nOf course, no cow can straddle a fence.  Cows must be in one partition or the other.\r\n\r\nTo avoid problems with rounding, the input data will not contain cows that are very \r\nclose to an integer multiple of 360/K degrees apart.', '* Line 1: Two integers: N and K\r\n\r\n* Lines 2..N+1: Each line contains a single double that tells the angle at\r\n  which a cow is grazing.  Angles are expressed in degrees, 0 <= angle <\r\n  360.', 'A single line with the integer that is the minimum attainable RANGE value \r\nfor the set of cows.', 'd:\\oj\\data\\1230', 'd:\\oj\\data\\1230', '4 3\r\n30\r\n60\r\n150.003\r\n240', '1', '', 'USACO 2002', '', '2007-08-30 23:15:51', 5000, 65536, 'N', NULL, 42, 82, 51, 39, 87, 7, 6, 30000, 82, ''),
(1231, 'Factorial Power', 'The factorial power of a whole number N is defined like this:\r\n\r\n     N! = 1 * 2 * 3 * ... * N-1 * N\r\n\r\nFor example, 12! = 1*2*3*4*5*6*7*8*9*10*11*12 = 479001600\r\n\r\nThe rightmost non-zero digit in 12! is 6; two zeroes follow it.  \r\nWrite a program that will compute the right-most non-zero digit \r\nin the decimal representation of N! and also find the number of \r\nzeroes after it.', 'One line with a single integer: N, 1 <= N <= 1,000,000', 'A single line with two numbers:\r\n\r\n* The right most non-zero digit of N!\r\n* The number of zeroes that follow it', 'd:\\oj\\data\\1231', 'd:\\oj\\data\\1231', '12', '6 2', '', 'USACO 2002', '', '2011-07-31 13:28:09', 1000, 65536, 'N', NULL, 24, 107, 22, 63, 82, 23, 14, 30000, 73, ''),
(1232, 'Friday the Thirteenth', 'Is Friday the 13th really an unusual event? \r\n\r\nThat is, does the 13th of the month land on a Friday less often than on \r\nany other day of the week? To answer this question, write a program that \r\nwill compute the frequency that the 13th of each month lands on Sunday, \r\nMonday, Tuesday, Wednesday, Thursday, Friday, and Saturday over a given \r\nperiod of N years. The time period to test will be from January 1, 1900 \r\nto December 31, 1900+N-1 for a given number of years, N. N is non-negative \r\nand will not exceed 400.\r\n\r\nThere are few facts you need to know before you can solve this\r\nproblem: \r\n* January 1, 1900 was on a Monday. \r\n* Thirty days has September, April, June, and November, all the rest have\r\n  31 except for February which has 28 except in leap years\r\n  when it has 29.\r\n* Every year evenly divisible by 4 is a leap year (1992 = 4*498 so 1992\r\n  will be a leap year, but the year 1990 is not a leap year)\r\n* The rule above does not hold for century years. Century years divisible\r\n  by 400 are leap years, all other are not. Thus, the century years 1700,\r\n  1800, 1900 and 2100 are not leap years, but 2000 is a leap year.\r\n\r\nDo not use any built-in date functions in your computer language. \r\n\r\nDon''t just precompute the answers, either.', 'One line with the integer N.', 'Seven space separated integers on one line. These integers represent the \r\nnumber of times the 13th falls on Saturday, Sunday, Monday, Tuesday, ..., Friday.', 'd:\\oj\\data\\1232', 'd:\\oj\\data\\1232', '20', '36 33 34 33 35 35 34', '', 'USACO 2002', '', '2007-12-15 19:36:32', 1000, 65536, 'N', NULL, 6, 7, 86, 1, 14, 6, 6, 30000, 34, ''),
(1233, 'Beef McNuggets', 'Farmer Brown''s cows are up in arms, having heard that McDonalds is considering \r\nthe introduction of a new product: Beef McNuggets.  The cows are trying to find \r\nany possible way to put such a product in a negative light.\r\n\r\nOne strategy the cows are pursuing is that of `inferior packaging''. ``Look,'''' say \r\nthe cows, ``if you have Beef McNuggets in boxes of 3, 6, and 10, you can not satisfy \r\na customer who wants 1, 2, 4, 5, 7, 8, 11, 14, or 17 McNuggets. Bad packaging: bad product.''''\r\n\r\nHelp the cows. Given N (the number of packaging options, 1 <= N <= 10), and a set \r\nof N positive integers (1 <= i <= 256) that represent the number of nuggets in the \r\nvarious packages, output the largest number of nuggets that can not be purchased by \r\nbuying nuggets in the given sizes. Print 0 if all possible purchases can be made or \r\nif there is no bound to the largest number.\r\n\r\nThe largest impossible number (if it exists) will be no larger than 2,000,000,000.', '* Line 1: N, the number of packaging options\r\n\r\n* Line 2..N+1: The number of nuggets in one kind of box', 'The output file should contain a single line containing a single integer that \r\nrepresents the largest number of nuggets that can not be represented or 0 if all \r\npossible purchases can be made or if there is no bound to the largest number.', 'd:\\oj\\data\\1233', 'd:\\oj\\data\\1233', '3\r\n3\r\n6\r\n10', '17', '', 'USACO 2002', '', '2007-08-18 15:13:30', 1000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 38, ''),
(1234, 'Calf Flac', 'It is said that if you give an infinite number of cows an infinite number of \r\nheavy-duty laptops (with very large keys), that they will ultimately produce \r\nall the world''s great palindromes. Your job will be to detect these bovine beauties.\r\n\r\nIgnore punctuation, whitespace, and case when testing for palindromes, but \r\nkeep these extra characters around so that you can print them out as the \r\nanswer; just consider the letters `A-Z'' and `a-z''.\r\n\r\nFind any largest palindrome in a string no more than 20,000 characters long. \r\nThe largest palindrome is guaranteed to be at most 2,000 characters long before \r\nwhitespace and punctuation are removed.', 'A file with no more than 20,000 characters.', 'The first line of the output should be the length of the longest palindrome found. \r\nThe next line or lines should be the actual text of the palindrome (without any \r\nsurrounding white space or punctuation but with all other characters) printed on a line \r\n(or more than one line if newlines are included in the palindromic text). If there are \r\nmultiple palindromes of longest length, outputthe one that appears first.', 'd:\\oj\\data\\1234', 'd:\\oj\\data\\1234', 'Confucius say: Madam, I''m Adam.', '11\r\nMadam, I''m Adam', '', 'USACO 2002', '', '2010-12-07 19:13:00', 1000, 65536, 'N', NULL, 20, 79, 25, 58, 76, 25, 18, 30000, 90, ''),
(1235, 'Fiber Communications', 'Farmer John wants to connect his N (1 <= N <= 1,000) barns (numbered 1..N) with a new fiber-optic network. However, the barns are located in a circle around the edge of a large pond, so he can only connect pairs of adjacent barns. The circular configuration means that barn N is adjacent to barn 1. \r\n\r\nFJ doesn''t need to connect all the barns, though, since only certain pairs of cows wish to communicate with each other. He wants to construct as few \r\nconnections as possible while still enabling all of these pairs to communicate through the network. Given the list of barns that wish to communicate with each other, determine the minimum number of lines that must be laid. To communicate from barn 1 to barn 3, lines must be laid from barn 1 to barn 2 and also from barn 2 to barn 3(or just from barn 3 to 1,if n=3).', '* Line 1: Two integers, N and P (the number of communication pairs, 1 <= P <= 10,000) \r\n\r\n* Lines 2..P+1: two integers describing a pair of barns between which communication is desired. No pair is duplicated in the list.', 'One line with a single integer which is the minimum number of direct connections FJ needs to make.', 'd:\\oj\\data\\1235', 'd:\\oj\\data\\1235', '5 2\r\n1 3\r\n4 5', '3', '[Which connect barn pairs 1-2, 2-3, and 4-5.]', 'USACO 2002', '', '2007-08-10 21:50:40', 1000, 65536, 'N', NULL, 2, 2, 100, 0, 0, 2, 2, 30000, 27, ''),
(1236, 'Power Hungry Cows', 'FJ''s cows would like to be able to compute integer powers P (1 <= P <= 20,000) of numbers very quickly, but need your help. Because they''re going to be computing powers of very large numbers, they can only keep around two work variables for intermediate results. \r\n\r\nThe first of those work variables is initialized to the number (denoted x) for which they are calculating the power; the other is initialized to 1. The cows can both multiply and divide any pair of the work variables and store the result in any work variable, but all results are stored as integers. \r\n\r\nFor example, if they want to compute x^31, one way to perform the calculation is: \r\n\r\n\r\n                                              WV1  WV2\r\n                                      Start:   x    1\r\n   Multiply first by first, store in second:   x   x^2\r\n                  Multiply second by second:   x   x^4\r\n                  Multiply second by second:   x   x^8\r\n                  Multiply second by second:   x   x^16\r\n                  Multiply second by second:   x   x^32\r\n                     Divide second by first:   x   x^31\r\n\r\nThus, x^31 can computed in six operations. Given the power to be computed and the the number of work variables, find the minimum number of operations to calculate the power.', 'A single line with one integer: P.', 'A single line with a single integer that is the minimum number of operations it requires to compute the power.', 'd:\\oj\\data\\1236', 'd:\\oj\\data\\1236', '31', '6', '', 'USACO 2002', '', '2011-04-27 16:21:33', 1000, 65536, 'N', NULL, 2, 8, 25, 6, 75, 6, 2, 30000, 57, ''),
(1237, 'Cow Cycling', 'The cow bicycling team consists of N (1 <= N <= 20) cyclists.  They wish to determine \r\na race strategy which will get one of them across the finish line as fast as possible.\r\n\r\nLike everyone else, cows race bicycles in packs because that''s the most efficient \r\nway to beat the wind.  While travelling at x laps/minute (x is always an integer), \r\nthe head of the pack expends x*x energy/minute while the rest of pack drafts behind \r\nhim using only x energy/minute.  Switching leaders requires no time though can only \r\nhappen after an integer number of minutes.  Of course, cows can drop out of the race \r\nat any time.\r\n\r\nThe cows have entered a race D (1 <= D <= 100) laps long.  Each cow has the same \r\ninitial energy, E (1 <= E <= 100).\r\n\r\nWhat is the fastest possible finishing time?  Only one cow has to cross the line.  \r\nThe finish time is an integer.  Overshooting the line during some minute is no \r\ndifferent than barely reaching it at the beginning of the next minute (though the cow \r\nmust have the energy left to cycle the entire minute).  N, D, and E are integers.', 'A single line with three integers: N, E, and D', 'A single line with the integer that is the fastest possible finishing time for the \r\nfastest possible cow.  Output 0 if the cows are not strong enough to finish the race.', 'd:\\oj\\data\\1237', 'd:\\oj\\data\\1237', '3 30 20', '7', '[as shown in this chart:\r\n	                            leader E\r\n	               pack  total used this\r\n	time  leader  speed   dist   minute\r\n	  1      1      5       5      25\r\n	  2      1      2       7       4\r\n	  3      2*     4      11      16\r\n	  4      2      2      13       4\r\n	  5      3*     3      16       9\r\n	  6      3      2      18       4\r\n	  7      3      2      20       4\r\n	* = leader switch', 'USACO 2002', '', '2007-08-22 22:57:12', 1000, 65536, 'N', NULL, 1, 9, 11, 8, 89, 2, 1, 30000, 25, ''),
(1238, 'Rebuilding Roads', 'The cows have reconstructed Farmer John''s farm, with its N barns (1 <= N <= 150, \r\nnumber 1..N) after the terrible earthquake last May. The cows didn''t have time to \r\nrebuild any extra roads, so now there is exactly one way to get from any given barn \r\nto any other barn.  Thus, the farm transportation system can be represented as a tree.\r\n\r\nFarmer John wants to know how much damage another earthquake could do.  He wants to \r\nknow the minimum number of roads whose destruction would isolate a subtree of exactly \r\nP (1 <= P <= N) barns from the rest of the barns.', '* Line 1: Two integers, N and P\r\n\r\n* Lines 2..N: N-1 lines, each with two integers I and J.  Node I is\r\n          node J''s parent in the tree of roads.', 'A single line containing the integer that is the minimum number of roads that need \r\nto be destroyed for a subtree of P nodes to be isolated.', 'd:\\oj\\data\\1238', 'd:\\oj\\data\\1238', '11 6\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n2 6\r\n2 7\r\n2 8\r\n4 9\r\n4 10\r\n4 11', '2', '[A subtree with nodes (1, 2, 3, 6, 7, 8) will become isolated if roads 1-4 and \r\n1-5 are destroyed.]', 'USACO 2002', '', '2009-03-06 20:49:04', 1000, 65536, 'N', NULL, 4, 4, 100, 0, 0, 4, 4, 30000, 26, ''),
(1239, 'Triangular Pastures', 'Like everyone, cows enjoy variety.  Their current fancy is new shapes for pastures.  \r\nThe old rectangular shapes are out of favor; new geometries are the favorite.\r\n\r\nI. M. Hei, the lead cow pasture architect, is in charge of creating a triangular \r\npasture surrounded by nice white fence rails.  She is supplied with N (3 <= N <= 40) \r\nfence segments (each of integer length Li (1 <= Li <= 40) and must arrange them into \r\na triangular pasture with the largest grazing area.  Ms. Hei must use all the rails \r\nto create three sides of non-zero length.\r\n\r\nHelp Ms. Hei convince the rest of the herd that plenty of grazing land will be available.  \r\nCalculate the largest area that may be enclosed with a supplied set of fence segments.', '* Line 1: A single integer N\r\n\r\n* Lines 2..N+1: N lines, each with a single integer representing one\r\n          fence segment''s length.  The lengths are not necessarily unique.', 'A single line with the integer that is the truncated integer representation of the \r\nlargest possible enclosed area multiplied by 100.  Output -1 if no triangle of positive \r\narea may be constructed.', 'd:\\oj\\data\\1239', 'd:\\oj\\data\\1239', '5\r\n1\r\n1\r\n3\r\n3\r\n4', '692', '[which is 100x the area of an equilateral triangle with side length 4]', 'USACO 2002', '', '2007-08-23 15:35:44', 1000, 65536, 'N', NULL, 6, 21, 29, 10, 71, 5, 4, 30000, 51, ''),
(1240, 'Chores', 'Farmer John''s family pitches in with the chores during milking, doing all \r\nthe chores as quickly as possible. At FJ''s house, some chores cannot be \r\nstarted until others have been completed, e.g., it is impossible to wash \r\nthe cows until they are in the stalls.\r\n\r\nFarmer John has a list of N (3 <= N <= 10,000) chores that must be completed. \r\nEach chore requires an integer time (1 <= length of time <= 100) to complete \r\nand there may be other chores that must be completed before this chore is started.  \r\nWe will call these prerequisite chores. At least one chore has no prerequisite: \r\nthe very first one, number 1. Farmer John''s list of chores is nicely ordered, and \r\nchore K (K > 1) can have only chores 1,.K-1 as prerequisites. Write a program that \r\nreads a list of chores from 1 to N with associated times and all perquisite chores. \r\nNow calculate the shortest time it will take to complete all N chores. Of course, \r\nchores that do not depend on each other can be performed simultaneously.', '* Line 1: One integer, N\r\n\r\n* Lines 2..N+1: N lines, each with several space-separated integers. Line 2\r\n          contains chore 1; line 3 contains chore 2, and so on.  Each line\r\n          contains the length of time to complete the chore, the number of\r\n          the prerequisites, Pi,  (0 <= Pi <= 100), and the Pi prerequisites\r\n          (range 1..N, of course).', 'A single line with an integer which is the least amount of time required to perform \r\nall the chores.', 'd:\\oj\\data\\1240', 'd:\\oj\\data\\1240', '7\r\n5 0\r\n1 1 1\r\n3 1 2\r\n6 1 1\r\n1 2 2 4\r\n8 2 2 4\r\n4 3 3 5 6', '23', '[Here is one task schedule:\r\n        Chore 1 starts at time 0, ends at time 5.\r\n        Chore 2 starts at time 5, ends at time 6.\r\n        Chore 3 starts at time 6, ends at time 9.\r\n        Chore 4 starts at time 5, ends at time 11.\r\n        Chore 5 starts at time 11, ends at time 12.\r\n        Chore 6 starts at time 11, ends at time 19.\r\n        Chore 7 starts at time 19, ends at time 23.\r\n]', 'USACO 2002', '', '2007-08-22 22:15:38', 3000, 65536, 'N', NULL, 4, 7, 57, 3, 43, 4, 4, 30000, 25, ''),
(1241, 'Dessert', 'FJ has a new rule about the cows lining up for dinner.  Not only must the N (3 <= N <= 15) \r\ncows line up for dinner in order, but they must place a napkin between each pair of cows \r\nwith a "+", "-", or "." on it.  In order to earn their dessert, the cow numbers and the \r\nnapkins must form a numerical expression that evaluates to 0.  The napkin with a "." \r\nenables the cows to build bigger numbers.  Consider this equation for seven cows:\r\n\r\n      1 - 2 . 3 - 4 . 5 + 6 . 7\r\n\r\nThis means 1-23-45+67, which evaluates to 0.  You job is to assist the cows in getting dessert.  \r\n(Note: "... 10 . 11 ...") will use the number 1011 in its calculation.)', 'One line with a single integer, N', 'One line of output for each of the first 20 possible expressions -- then a line with a single \r\ninteger that is the total number of possible answers. Each expression line has the general \r\nformat of number, space, napkin, space, number, space, napkin, etc. etc.  The output order \r\nis lexicographic, with "+" coming before "-" coming before ".".  If fewer than 20 expressions \r\ncan be formed, print all of the expressions.', 'd:\\oj\\data\\1241', 'd:\\oj\\data\\1241', '7', '1 + 2 - 3 + 4 - 5 - 6 + 7\r\n1 + 2 - 3 - 4 + 5 + 6 - 7\r\n1 - 2 + 3 + 4 - 5 + 6 - 7\r\n1 - 2 - 3 - 4 - 5 + 6 + 7\r\n1 - 2 . 3 + 4 + 5 + 6 + 7\r\n1 - 2 . 3 - 4 . 5 + 6 . 7\r\n6', '', 'USACO 2002', '', '2007-08-10 21:54:23', 1000, 65536, 'N', NULL, 2, 2, 100, 0, 0, 2, 2, 30000, 31, ''),
(1242, 'Extra Krunch', 'A krunched word has no vowels ("A", "E", "I", "O", and "U") and no repeated letters.  Removing \r\nvowels and letters that appear twice or more from MISSISSIPPI yields MSP.  In a krunched word, \r\na letter appears only once, the first time it would appear in the unkrunched word.  Vowels never \r\nappear.\r\n\r\nKrunched phrases similarly have no vowels and no repeated letters. Consider this phrase:\r\n\r\n        RAILROAD CROSSING\r\n\r\nand its krunched version:\r\n\r\n        RLD CSNG\r\n\r\nBlanks are krunched differently. Blanks are removed so that a krunched phrase has no blanks on \r\nits beginning or end, never has two blanks in a row, and has no blanks before punctuation.  \r\nOtherwise, blanks not removed. If we represent blanks by "_",\r\n\r\n        MADAM_I_SAY_I_AM_ADAM__\r\n\r\nkrunches to:\r\n\r\n        MD_SY\r\n\r\nwhere the single remaining blank is shown by "_".\r\n\r\nWrite a program that reads a line of input (whose length ranges from 2 to 70 characters), \r\nand krunches it.  Put the krunched word or phrase in the output file.  The input line has \r\nonly capital letters, blanks, and the standard punctuation marks: period, comma, and \r\nquestion mark.', 'A single line to be krunched.', 'A single krunched line that follows the rules above.', 'd:\\oj\\data\\1242', 'd:\\oj\\data\\1242', 'NOW IS THE TIME FOR ALL GOOD MEN TO COME TO THE AID OF THEIR COUNTRY.', 'NW S TH M FR L GD C Y.', '', 'USACO 2002', '', '2010-11-11 20:30:52', 1000, 65536, 'N', NULL, 8, 36, 22, 26, 79, 8, 7, 30000, 45, ''),
(1243, 'BUY LOW, BUY LOWER', 'The advice to "buy low" is half the formula to success in the bovine stock market.  \r\nTo be considered a great investor you must also follow this problems'' advice:\r\n\r\n                    "Buy low; buy lower"\r\n\r\nEach time you buy a stock, you must purchase it at a lower price than the previous \r\ntime you bought it. The more times you buy at a lower price than before, the better! \r\nYour goal is to see how many times you can continue purchasing at ever lower prices.\r\n\r\nYou will be given the daily selling prices of a stock (positive 16-bit\r\nintegers) over a period of time.  You can choose to buy stock on any of the days. \r\nEach time you choose to buy, the price must be strictly lower than the previous time \r\nyou bought stock.  Write a program which identifies which days you should buy stock \r\nin order to maximize the number of times you buy.\r\n\r\nHere is a list of stock prices:\r\n\r\n Day   1  2  3  4  5  6  7  8  9 10 11 12\r\nPrice 68 69 54 64 68 64 70 67 78 62 98 87\r\n\r\nThe best investor (by this problem, anyway) can buy at most four times if each purchase \r\nis lower then the previous purchase. One four day sequence (there might be others) of \r\nacceptable buys is:\r\n\r\nDay    2  5  6 10\r\nPrice 69 68 64 62', '* Line 1: N (1 <= N <= 5000), the number of days for which stock prices\r\n          are given\r\n\r\n* Lines 2..etc: A series of N space-separated integers, ten per line except\r\n          the final line which might have fewer integers.', 'Two integers on a single line:\r\n   * The length of the longest sequence of decreasing prices\r\n   * The number of sequences that have this length (guaranteed to fit in 31 bits)\r\n\r\nIn counting the number of solutions, two potential solutions are considered the same \r\n(and would only count as one solution) if they repeat the same string of decreasing \r\nprices, that is, if they "look the same" when the successive prices are compared. \r\nThus, two different sequence of "buy" days could produce the same string of decreasing \r\nprices and be counted as only a single solution.', 'd:\\oj\\data\\1243', 'd:\\oj\\data\\1243', '12\r\n68 69 54 64 68 64 70 67 78 62\r\n98 87', '4 2', '', 'USACO 2002', '', '2008-04-18 09:22:51', 1000, 65536, 'N', NULL, 8, 15, 53, 4, 40, 7, 6, 30000, 41, ''),
(1244, 'Hypnotic Milk Improvement', 'FJ hires a dairy hypnotist to improve milk production using hypnotic\r\nsuggestions.  FJ knows how much milk each cow currently has for milking\r\n(an integer number of liters) and has asked the hypnotist to manipulate\r\nthe cows to maximize total milk production.  FJ has arranged 36 cows on a\r\n6x6 grid.\r\n\r\nThe hypnotist can spin his watch so that it is seen by the six cows in any\r\none row, column, or the major diagonal (upper left to lower right) His\r\npower of suggestion can increase or decrease the amount of milk a cow can\r\ngive by one liter.  Of course, if he asks for too much milk (more than 9\r\nliters), the cow gets confused and will give 0 liters.  Similarly, a cow\r\nasked to reduce from 0 liters will be confused and give 9 liters instead.\r\n\r\nBelow is the arrangement of the milk production for the cows along with\r\nthe results of hypnotizing cows in various rows and columns:\r\n<img src=images\\1244.gif></img>\r\n\r\nUsing an unlimited number of hypnotic suggestions, maximize the amount of\r\nmilk that FJ can expect.  The moves shown above were surely not optimal!', 'Six lines each containing six integers which represent the current\r\nstate of a given cow''s milk production.  The first line is\r\nthe uppermost row as illustrated above, and so on.', 'A single integer which is the largest amount of milk the hypnotist\r\ncan coax from the cows.', 'd:\\oj\\data\\1244', 'd:\\oj\\data\\1244', '5 9 7 1 5 8\r\n2 5 3 5 2 0\r\n6 8 1 5 0 3\r\n4 8 2 6 9 2\r\n9 1 6 5 3 2\r\n7 0 2 4 3 1', '273', '', 'USACO 2002', '', '2007-08-10 20:28:37', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 29, ''),
(1245, 'Happy Cows', 'While standing in a perfect N x M (1 <= N,M <= 50) rectangle, the herd of\r\nFarmer John''s cows has been reading psychology books together. One book\r\nhad a test to rate "happiness" so each calculated their "happiness rating",\r\nan integer range from -100..100 inclusive.\r\n\r\nAnother book suggested that a sub-rectangle of cows has an aggregate\r\nhappiness rating that is the product of all the happiness ratings for the\r\nindividual cows of the sub-rectangle.  This is interesting in that two\r\nunhappy cows pretty much cancel each other''s unhappiness while wallowing\r\nin each other''s self-pity.\r\n\r\nFind the happiest sub-rectangle of the herd of cows.  A sub-rectangle is\r\na p x q rectangle of contiguous cows culled from the larger herd.', 'INPUT FORMAT:\r\n\r\n* Line 1: Two integers: N and M.\r\n\r\n* Line 2..N + 1: Each line contains M integers that tell the cows''\r\n          happiness ratings; line 2 is row 1, etc.  The first integer\r\n          on each line is is column 1, etc.', 'A single line with four integers that define the happiest sub-group.  The\r\nfirst two integers are the (row,column) position of the upper left corner\r\nof the happiest sub-rectangle The next two integers are the (row,column)\r\nposition of the lower right corner of the happiest sub-rectangle\r\n\r\nIn the case where more than one sub-rectangle has the maximum product,\r\noutput the one with the smallest number of elements. If more than one has\r\nthe smallest number of elements, output the one the most left, and if more\r\nthan one is most left, output the sub-rectangle closer to the top.', 'd:\\oj\\data\\1245', 'd:\\oj\\data\\1245', '4 2\r\n-1 4\r\n5 3\r\n-6 -2\r\n2 1', '2 1 4 2', '', 'USACO 2002', '', '2007-08-24 14:59:20', 1000, 65536, 'N', NULL, 0, 1, 0, 1, 100, 1, 0, 30000, 41, ''),
(1246, 'Unary Cow Counting', 'As you know, cows have no fingers.  Thus, they do not use base 10.  They\r\nuse a sort of base 1 (a ''unary'' system) with operations that extend its\r\npower.\r\n\r\nA cow number includes ones, pluses, minuses, asterisks (denoting\r\nmultiplication) and potentially pairs of parentheses.  Not all cow numbers\r\ninclude all the various symbols.\r\n\r\nCow numbers are powerful and can represent any positive integer.  For\r\nexample, 22 = 1+1 + ((1+1+1+1) * (1+1+1+1+1)), which has a UCC length of\r\n11, since 11 ones are present.\r\n\r\nAnother cow number representation of 22 is\r\n       1 + (1+1+1) * (1+(1+1)*(1+1+1))\r\nwhich has a UCC length of 10, since 10 ones are present.  There are no\r\nshorter ways to represent 22 in cow numbers.\r\n\r\nBeing lazy, the cows are always seeking shorter ways to represent numbers.\r\nWrite a program that tells them the shortest way to represent an input\r\nnumber smaller than 2,000,000.', 'A single line with a positive integer (1 <= integer <= 2,000,000) to be\r\nrepresented as a cow number.', 'A single line with an integer that is the minimum UCC length of any cow\r\nnumber equal to the input', 'd:\\oj\\data\\1246', 'd:\\oj\\data\\1246', '22', '10', '', 'USACO 2002', '', '2007-08-10 20:36:42', 2000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 41, '');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1247, 'Dairy Route', 'Consider the ''map'' below of Farmer John''s milk delivery service.  It has\r\nN (2 <= N <= 100) rows and M ( 2 <= M <= 80) columns.\r\n \r\n             North\r\n        . . . . . . . T\r\n        . . . . . . C .\r\n        . . . . C S . .\r\n        . S . . C . S .\r\n        D C . . S . . .\r\n\r\nFarmer John delivers milk to his rural customers (denoted as ''C'') as he\r\ntravels from the dairy (denoted as ''D'' and always located in the lower left\r\nhand corner) to the town (denoted as ''T'' and always located in the upper\r\nright corner). He traverses roads on the square grid by moving either\r\nhorizontally to the right or vertically toward the top, never diagonally.\r\nFJ never travels toward the left or toward the bottom of his map.  Some\r\nroads are blocked by snow (denoted as ''S'') which means FJ can not traverse\r\nthat square.\r\n\r\nWrite a program that cowculates the total number of different milk routes\r\navailable from the dairy to the town.  Two routes are different if they\r\ndiffer on any part of the path.  FJ routes are always arranged so that all\r\ncustomers can be reached while moving north and east.  The total number of\r\ndifferent milk routes will fit in a 32-bit signed integer.', '* Line 1: Four integers: N, M, C (the number of customers, 1 <= C),\r\n	  and S (the number of snow drifts, 0 <= S)\r\n\r\n* Lines 2..C+1: Each line contains a pair of space separated integers that\r\n	  give, respectively, the row and column of a customer.  The dairy\r\n	  is located in the lower left corner at (1,1).  Customers will\r\n	  not be located at the dairy or in the town.\r\n\r\n\r\n* Lines C+2..C+S+1: If S > 0, each line contains a pair of space separated\r\n	  integers that give, respectively, the row and column of a\r\n	  snowdrift.', 'A single integer that is the total number of different milk routes\r\navailable for FJ to deliver his milk.', 'd:\\oj\\data\\1247', 'd:\\oj\\data\\1247', '5 8 4 4\r\n1 2\r\n2 5\r\n3 5\r\n4 7\r\n1 5\r\n2 2\r\n2 7\r\n3 6', '4', '[Here are all four routes for the example input/output:\r\n . . . . . . . * --. . . . . . . * --. . . . . . * * --. . . . . . * *\r\n . . . . * * * * --. . . . * * * * --. . . . * * * . --. . . . * * * .\r\n . . . . * S . . --. . . . * S . . --. . . . * S . . --. . . . * S . .\r\n . S * * * . S . --. S . * * . S . --. S * * * . S . --. S . * * . S .\r\n * * * . S . . . --* * * * S . . . --* * * . S . . . --* * * * S . . .\r\n]', 'USACO 2002', '', '2007-08-23 20:49:00', 1000, 65536, 'N', NULL, 1, 9, 11, 6, 86, 2, 1, 30000, 30, ''),
(1248, 'Calf Numbers', 'The calves are not so good at speaking. They use funny words for digits.\r\nFor calves, the digits from zero to nine are spoken and written as:\r\n\r\n       0 no      3 ci      6 xa      9 so\r\n       1 pa      4 vo      7 ze\r\n       2 re      5 mu      8 bi\r\n\r\nLarger numbers are created by gluing together the names of the digits.\r\nFor example, 123 is ''pareci''.  A single space can be placed between the\r\ndigits, so 123 can also be written as ''pa reci'', ''pare ci'' or even ''pa re ci''.\r\n\r\nHelp the calves learn arithmetic.  Write a program that reads in six\r\nnumbers of no more than 15 calf digits and sums them.  The output, of\r\ncourse, must be in the calf numbers.', 'Six lines, each with a calf number of no more than 15 digits', 'A single line with a single calf number that is the sum of the six input\r\ncalf numbers. The output line contains no spaces.', 'd:\\oj\\data\\1248', 'd:\\oj\\data\\1248', 'pa\r\npapa\r\ncivo\r\nxaze\r\nbiso\r\nno', 'renore', '', 'USACO 2002', '', '2012-02-09 23:14:42', 1000, 65536, 'N', NULL, 8, 48, 17, 40, 85, 10, 7, 30000, 64, ''),
(1249, 'Hide and Seek', 'Farmer John and three of his calves are playing hide and seek, with Farmer\r\nJohn seeking. FJ, being a busy person, doesn''t like to play this game as\r\nit wastes his time -- and the calves know it.\r\n\r\nThe calves make use of the FJ''s poor farm planning to hide. He has built\r\na number of barns, each located at a spot (x, y) on the plane (x,y are\r\nintegers; -1000000 <= x, y <= 1000000). The three calves always hide in at\r\nmost three barns. When FJ can''t find them, they only come out and return\r\nto the main barn if Farmer John shouts the correct geometric shape that\r\nthe occupied barns form.\r\n\r\nFJ only pretends to be unable to find the calves.  He has installed a\r\nsensor in each barn so he knows exactly where each calf is. He is, however,\r\nnot that good with geometry. Write a program to help him determine the\r\ngeometric shape formed by the barns in which the calves are hiding\r\n(''triangle'', ''line'', or ''point''). As a check to your work, also print a\r\ncheck number that is: the area of the triangle, the length of the line, or\r\n0.00 for a point.  Print exactly two digits after the decimal point.  Use\r\nyour language''s standard output formatting, do not perform any rounding.\r\n\r\nYou might not already know Hero''s formula for calculating the area of a\r\ntriangle given its sides.  Given sides of length a, b, and c, first\r\ncalculate\r\n\r\n        s = (a + b + c) / 2\r\n\r\nthen the area is:\r\n\r\n        a = sqrt(s * (s-a) * (s-b) * (s-c))', 'Three lines, each with two space-separated numbers that represent the x\r\nand y coordinates of a barn a calf occupy.', 'A single line with a single letter followed by a space followed by a number\r\nprinted with exactly two decimal places.  The letter should be ''t'' for a\r\ntriangle, ''l'' for a line, or ''p'' for a point.  The number should be as\r\ndescribed above.', 'd:\\oj\\data\\1249', 'd:\\oj\\data\\1249', '2 3\r\n5 3\r\n4 6', 't 4.50', '', 'USACO 2002', '', '2010-06-20 21:44:22', 1000, 65536, 'N', NULL, 7, 40, 17, 33, 85, 8, 6, 30000, 53, ''),
(1250, 'Mountain Majesties', 'The cows are summering near the Front Range of the Rocky Mountains, not so\r\nfar from Coach Rob''s house.  Visible on the horizon are N mountains (N <=\r\n100,000), for example (here, N=5):\r\n<img src=images\\1250.gif></img> \r\nEach mountain is an isosceles triangle whose height is exactly twice the\r\nlength of its base.  A mountain is described by specifying the x-coordinate\r\nof each of the two endpoints of its base; these coordinates will be\r\npositive integers that fit nicely in a 16-bit signed entity.  Your task is\r\nto compute the total area of the union of these mountains.', '* Line 1: A single integer, N\r\n\r\n* Lines 2..N+1: Each line describes a single mountain with two\r\n          sorted space-separated integers.', 'A single integer, giving the area of the union of the mountains.  This area\r\nwill always be an integer and will always fit into 32 signed bits.', 'd:\\oj\\data\\1250', 'd:\\oj\\data\\1250', '5\r\n2 7\r\n6 9\r\n12 15\r\n14 21\r\n20 25', '114', '', 'USACO 2002', '', '2007-08-23 22:18:53', 1000, 65536, 'N', NULL, 2, 5, 40, 3, 60, 2, 2, 30000, 36, ''),
(1251, 'Secret Milk Pipes', 'Farmer John wants to connect his water distribution system cheaply, but he\r\ndoesn''t want his rival, Farmer Snidely, to be able to predict the actual\r\nroutes he chooses.  FJ knows that this kind of problem usually asks for\r\nthe cheapest way to connect water pipes, so he decides to avoid that and\r\nuse the second cheapest way instead.\r\n\r\nGiven a list of all the bidirectional pipes that might connect a set of W\r\n(3 <= W <= 2000) water stations (any one of which can be made into a well)\r\nalong with the costs for no more than P (P <= 20,000) pipes, find the second\r\ncheapest way to distribute water.  No pipe connects a station to itself;\r\nno two pipes connect the same pair of stations.\r\n\r\nIt is guaranteed that there is only one cheapest way to distribute the\r\nwater and that there are at least two ways to distribute the water.  All\r\ncosts are positive integers that fit into a signed 16-bit entity.  A water\r\nstation is identified by its ID number, which is an integer in the range\r\n1..W.', '* Line 1: Two space-separated integers, W and P\r\n\r\n* Lines 2..P+1: Each line describes a single pipe and contains three\r\n  space-separated integers: a water station that is one endpoint\r\n  of a pipe, a water station that is the other endpoint of a pipe,\r\n  and the cost of that pipe.', 'A single line with a single integer that is the second lowest cost to\r\nconstruct a water distribution system.', 'd:\\oj\\data\\1251', 'd:\\oj\\data\\1251', '5 7\r\n1 2 3\r\n2 3 4\r\n1 4 7\r\n2 4 11\r\n2 5 9\r\n5 4 5\r\n3 5 8', '20', '', 'USACO 2002', '', '2011-04-04 19:36:46', 1000, 65536, 'N', NULL, 0, 1, 0, 1, 100, 1, 0, 30000, 97, ''),
(1252, 'Circus Tickets', 'Farmer John is taking 16 cows to see the three ring circus.  Being cows,\r\nthey are seated in the cow section, a 4x4 set of seats near the front of\r\nthe audience.  The seats, rows, and columns are numbered thusly:\r\n<img src=images\\1252.gif></img>\r\nGiven the actual seating arrangement of the cows, determine a very good\r\nset of rotations to rearrange cows so that their tickets and seat numbers\r\nmatch.  At least one solution always exists.\r\n\r\nYour score for each test case will depend on how close you get to the best\r\nnumber of rotations submitted by other contestants for that case.  Your\r\noutput sequence must be shorter than 500 operations in order to receive\r\ncredit for this problem.\r\n\r\nHINT: The sequence 1l 1l 1l 4u 1r 4d 1l 1l 4u 1r 4u 4u 4u swaps the cow in\r\nthe upper left seat with the cow to her right.', 'Four lines, each with four space separated integers.  Line 1 is the first\r\nrow; line 2 is the second row; and so on.', 'A series of output lines that contain the ordered sequence of rotations\r\nthat will arrange the cows.  Each line contains a row or column number\r\n(1..4) followed by a space followed by a lower-case letter that indicates\r\nthe operation to be performed: ''r'' for rotate a row right, ''l'' for rotate\r\na row left, ''u'' for rotate a column up, and ''d'' for rotate a column down.', 'd:\\oj\\data\\1252', 'd:\\oj\\data\\1252', '4 1 2 3\r\n6 7 8 5\r\n10 11 12 9\r\n14 15 16 13', '1 l\r\n2 r\r\n3 r\r\n4 r', '[Other correct sequences are equally valid though might not garner as many\r\npoints.]', 'USACO 2002', '', '2007-08-10 20:57:13', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 27, ''),
(1253, 'Life Cycle', 'The cows are calculating the "life cycle" for each of their identification\r\ntag numbers.\r\n\r\nTake any positive integer N (1 <= N <= 9999), say 57, square all the digits\r\nand add them up:  5^2 + 7^2 to get 25 + 49 = 74. Now do the same procedure\r\nwith the result 74 to get the next number in the sequence 65. Continuing\r\nto apply this procedure to a sequence of terms eventually repeats one\r\nnumber of the sequence.\r\n\r\nWhen starting with 57, the sequence repeats for the first time with 37,\r\nwhich is the next number in this part of the sequence:\r\n\r\n      57, 74, 65, 61, \r\n\r\n>From then on the sequence is trapped in a "life cycle":\r\n\r\n      37, 58, 89, 145, 42, 20, 4, 16, 37, . . .\r\n\r\nIf we cube the digits instead of squaring them the sequence has a similar\r\nfate. Your job is to write a program that computes how long the sequence\r\nlasts until it falls into a life cycle given a starting positive integer\r\nand a power P (1 <= P <= 5).', 'A single line with two space-separated integers: N and P.', 'Length of the sequence until it enters a life cycle, not including the\r\nfirst number in the cycle.', 'd:\\oj\\data\\1253', 'd:\\oj\\data\\1253', '57 2', '4', '[This corresponds to the sequence: 57, 74, 65, 61, 37, ...; 37 is the first\r\nnumber that is repeated.]', 'USACO 2002', '', '2011-07-31 20:42:49', 1000, 65536, 'N', NULL, 17, 64, 27, 19, 54, 19, 16, 30000, 47, ''),
(1254, 'Wiggle Numbers', 'These positive integers:  3748, 67, 869, 32435465768 are all wiggle numbers\r\nbecause if you examine the digits of each number they go up, down, up,\r\ndown, ...  or  down, up, down, up, down, up, ... For example:\r\n\r\n3 < 7 > 4 < 8  and  3 > 2 < 4 > 3 < 5 > 4 < 6 > 5 < 7 > 6 < 8  \r\n\r\nA single digit is a wiggle number of length 1.\r\n\r\nWrite a program that will determine how many of the initial digits of a\r\nnumber form a wiggle number.  The answer could, of course, be the length\r\nof the number in some cases.', 'A single line with a single positive integer no longer than 75 digits.', 'A single integer that is the number of initial digits of the number that\r\nform a wiggle number.', 'd:\\oj\\data\\1254', 'd:\\oj\\data\\1254', '3748', '4', '', 'USACO 2002', '', '2011-01-13 10:55:58', 1000, 65536, 'N', NULL, 4, 47, 9, 31, 89, 11, 4, 30000, 34, ''),
(1255, 'Life Cycle Ⅱ', 'The cows are calculating the "life cycle" for each of their identification\r\ntag numbers.\r\n\r\nTake any positive integer N (1 <= N <= 9999), say 57, square the digits\r\nand add them up:  5^2 + 7^2 to get 25 + 49 = 74. Now do the same procedure\r\nwith the result 74 to get the next number in the sequence 65. Continuing\r\nto apply this procedure to a sequence of terms eventually repeats one\r\nnumber of the sequence.\r\n\r\nWhen starting with 57, the sequence repeats for the first time with 37:\r\n\r\n      57, 74, 65, 61, \r\n\r\nand from then on the sequence is trapped in a "life cycle":\r\n\r\n      37, 58, 89, 145, 42, 20, 4, 16, 37, . . .\r\n\r\nIf we cube the digits instead of squaring them the sequence has a similar\r\nfate. Your job is to write a program that computes how long the sequence\r\nlasts until it falls into a life cycle given a starting positive integer\r\nand a power P (1 <= P <= 5).', 'A single line with two space-separated integers: N and P.', 'Length of the sequence until it enters a life cycle, not including the\r\nfirst number in the cycle.', 'd:\\oj\\data\\1255', 'd:\\oj\\data\\1255', '57 2', '4', '[This corresponds to the sequence: 57, 74, 65, 61, 37, ...; 37 is the first\r\nnumber that is repeated.]', 'USACO 2002', '', '2012-04-01 14:45:48', 1000, 65536, 'N', NULL, 2, 5, 40, 3, 60, 3, 2, 30000, 54, ''),
(1256, 'Superwords', 'The cows are playing dictionary games again; there''s not much else to do\r\nwhile chewing one''s cud.  The new game is a simple one but they need to\r\nverify their answers.\r\n\r\nGiven a list of N (1 <= N <= 100) words, what is the smallest "superword"\r\nthat contains all of them, in order, as subwords?  Consider an example\r\nusing three words: ''big'', ''green'', and ''engine''.  To make a "superword"\r\n(which, regrettably, rarely appears in the dictionary), one combines them\r\ncarefully to yield: ''bigreengine''.\r\n\r\nWords appear sequentially in a superword when the first letter of a\r\nconstituent word appears strictly later in the superword than the first\r\nletter of the previous word and the last letter of that word appears\r\nstrictly later in the superword than the last letter of the previous word.\r\nHere are some two word examples:\r\n       sin in  -> sinin\r\n       sin si  -> sinsi\r\n       sin int -> sint\r\n\r\nYour task is to find superwords.', '* Line 1: A single integer, N\r\n\r\n* Lines 2..N+1:  Each line contains a single word that contains only lower\r\n  case letters (''a''..''z'').  No word is longer than 75 characters.', 'A single line that contains the "superword".', 'd:\\oj\\data\\1256', 'd:\\oj\\data\\1256', '3\r\nbig\r\ngreen\r\nengine', 'bigreengine', '', 'USACO 2002', '', '2012-04-01 16:51:18', 1000, 65536, 'N', NULL, 3, 14, 21, 11, 79, 6, 3, 30000, 48, ''),
(1257, 'Cow Brainiacs', 'One afternoon as the cows were chewing their cud, Bessie said, "Let''s have\r\na contest to see who is the smartest cow.  Here''s the contest:  we will\r\nchoose a positive number N (no larger than 2,000,000) and whoever computes\r\nthe rightmost non-zero digit of N factorial will be crowned the smartest\r\ncow."\r\n\r\nThe other cows demurred, however, mooing, "We did that last year."\r\n\r\n"Oh," said Bessie, "but there''s a catch.  We''re not necessarily going to\r\nuse base 10.  I know my hooves don''t have that many digits!  We''ll just\r\nspecify a positive number base B from 2 through 30."\r\n\r\nWrite a program to help the cows judge their intelligence contest.', 'A single line with integers N and B', 'A single line with the decimal-representation of the "digit" that is the\r\nrightmost non-zero digit for N! in base B.  If B > 10, go ahead and output\r\na two-digit decimal number as a representation of the final "digit".', 'd:\\oj\\data\\1257', 'd:\\oj\\data\\1257', '13 3', '2', '[13*12*11*10*9*8*7*6*5*4*3*2*1=6227020800 base 10, which in base 3 is\r\n121001222020102200000, so the right-most non-zero digit is 2.]', 'USACO 2002', '', '2012-05-19 20:01:22', 1000, 65536, 'N', NULL, 20, 75, 27, 49, 80, 16, 12, 30000, 159, ''),
(1258, 'The Collatz Code', 'The cows are having a merry little game with numbers.  One of the cows\r\npicks a positive integer N that is smaller than 32000.  The cows then\r\nplace bets on whether the length of the ''Collatz Sequence'' will exceed\r\na number like 100.\r\n\r\nThe Collatz Sequence is calculated thusly.  Start with an integer, C.\r\n	* if C is 1, the sequence has ended\r\n	Otherwise,\r\n	* if C is even, then divide it by two to yield a new C\r\n	* if C is odd, then replace it by 3*C+1\r\n        Continue the rules until the sequence ends.\r\n\r\nConsider the Collatz Sequence that starts with the integer 10:\r\n	10, 5, 16, 8, 4, 2, 1\r\nIt has length 7.\r\n\r\nHelp one of the cows cheat.  Given N, calculate the length of the\r\nCollatz Sequence.', 'A single line with a single integer: N', 'A single line with a single integer that is the length of the Collatz\r\nSequence starting with N', 'd:\\oj\\data\\1258', 'd:\\oj\\data\\1258', '10', '7', '', 'USACO 2003', '', '2012-04-09 19:14:43', 1000, 65536, 'N', NULL, 87, 107, 81, 17, 18, 77, 75, 30000, 259, ''),
(1259, 'Cow Fibonacci Numbers', 'The cows have discovered the Fibonacci sequence:  1, 1, 2, 3, 5, 8,\r\n13, 21, 34. ...  where the next element in the sequence is the sum of\r\nthe previous two (and the sequence starts with 1, 1). \r\n\r\nUnfortunately, the silly cows did not discover the ''space'' character\r\nand have computed the sequence and recorded it with no punctuation or\r\nspaces between the numbers, like this:  112358132134.....\r\n\r\nThis does pose an interesting problem, though. Given the first two\r\nnumbers in the sequence (each of which is positive and less than 100),\r\ncalculate the Kth digit (where 1 <= K <= 500).  It is guaranteed that\r\nevery number you will encounter in the sequence will fit in a normal\r\n32-bit integer.', 'A single line with three space-separated integers:\r\n   * the first value of the cowfib sequence\r\n   * the second value of the cowfib sequence\r\n   * K', 'A single line with a single digit that is the Kth digit in the specified\r\nsequence.', 'd:\\oj\\data\\1259', 'd:\\oj\\data\\1259', '1 1 10', '1', '', 'USACO 2003', '', '2010-05-18 19:06:39', 1000, 65536, 'N', NULL, 10, 19, 53, 7, 47, 12, 8, 30000, 59, ''),
(1260, 'Shopping Spree', 'Farmer John needs to do some Christmas shopping for the herd. He has\r\nUS$10 to spend on toys that cost, respectively, US$5, US$2, US$1,\r\nUS$1/2, and US$1/4.  He can buy two $5 toys and run out of money. Or\r\nhe can buy 20 toys at $1/4 and two at $2 and one at $1 and run out of\r\nmoney. This got him to wondering: How many different ways can be buy\r\ntoys with his $10 (while spending all the money, of course)?\r\n\r\nWrite a program that computes the number of different ways Farmer John\r\ncan buy selections of toys (prices as before) by completely spending\r\nN (N is an integer, 1 <= N <= 150) dollars.', 'A single line with a single integer: N', 'A single line with a single integer that is the number of different\r\nways N dollars can be spent on toys with prices as listed.', 'd:\\oj\\data\\1260', 'd:\\oj\\data\\1260', '10', '343', '', 'USACO 2003', '', '2010-05-18 18:33:42', 1000, 65536, 'N', NULL, 11, 38, 29, 27, 73, 11, 10, 30000, 36, ''),
(1261, 'Cow Words', 'The cows have obtained one of those `Word Find'' books with all sorts of\r\npuzzles like this:\r\n\r\n       H A F B T H E W\r\n       J B S Y O Y J S\r\n       L G B E S T Y U\r\n       T S C O L T E D\r\n       J T F S D O W L\r\n       W T S E T N O C\r\n\r\nand the goal is to search for words like ''BEST'' and ''CONTEST''. You can\r\nsee ''BEST'' on the third line:\r\n\r\n       L G>B*E*S*TT*S*E*T*N*O*C<\r\n\r\nWords can start on any character and proceed up, down, right, left,\r\nor diagonally to the upper right, upper left, lower right, or lower\r\nleft.\r\n\r\nYour goal is to help the cows find the more difficult words. Given an\r\nN wide x M high character grid (3 <= N <= 80, 3 <= M <= 50) and a\r\nword that is hidden in the grid, find it and tell the cows how to\r\nlocate it.', '* Line 1: Two space-separated integers: N and M\r\n\r\n* Line 2: The search word (upper case)\r\n\r\n* Lines 3..M+2: Each line has exactly N characters (all upper case).\r\n          Line 3 is row 1; line 4 is row 2; etc.', '* Line 1: Two space-separated integers: the row and column respectively\r\n          of the location of the words'' first character\r\n\r\n* Line 2: The direction the rest of the word is found, relative to the\r\n          first letter.  Directions are like the compass.   If the first\r\n          letter of the word is the ''x'', the various directions are\r\n          as follows:\r\n\r\n                     NW   N   NE\r\n\r\n                      W   x   E\r\n\r\n                     SW   S   SE', 'd:\\oj\\data\\1261', 'd:\\oj\\data\\1261', '8 6\r\nCONTEST\r\nHAFBTHEW\r\nJBSYOYJS\r\nLGBESTYU\r\nTSCOLTED\r\nJTFSDOWL\r\nWTSETNOC', '6 8\r\nW', '', 'USACO 2003', '', '2011-04-27 17:10:34', 1000, 65536, 'N', NULL, 7, 20, 35, 2, 33, 5, 4, 30000, 76, ''),
(1262, 'Cow Math', 'Taking their cue from the builders of the USA''s Interstate Highway system, the cows have introduced the Interpasture Path numbering system. They have already numbered the N (2 <= N <= 25) pastures with the integers 1..N and now are numbering each path between two pastures with its own distinct Interpasture Path number in the range 1..2000 \r\n(e.g., I-9 and I-16). \r\n\r\nIn an example Interpasture Path map, four pastures numbered 1, 2, 3, and 4 are connected by Interpasture Paths I-3, I-6, I-9, and I-16: \r\n<img src=images\\1262.jpg></img>  \r\n\r\nBessie likes to walk from pasture 1 to pasture 2 on the nifty new Interpasture system. During each walk, she never visits the same pasture twice, so possible walks on the sample map above are 1-4-2 and 1-3-2. \r\n\r\nOver the years, Bessie has developed an amazing mathematical skill that she likes to exercise. During each walk, she enjoys finding the greatest common factor (GCF) of the Interpasture Paths that she traverses. For instance, the walk designated 1-4-2 touches I-16 and I-6 which have the greatest common factor of 2 (since 2 properly divides into 16 and 6 but no larger integer does). \r\n\r\nAs she walks the pastures day after day, she takes all the possible routes from pasture 1 to pasture 2 and remembers each of the GCFs. After she has taken every possible walk once, she computes the least common multiple (LCM) of all the GCFs. For this example, the two GCF values are 2 and 3 (GCF(6,16)=2 and GCF(3,9)=3), so the LCM is 6. \r\n\r\nFor large networks of paths, Bessie might get tired of all the walking, but she really wants to know the LCM for every map. Calculate that number for her.', '* Line 1: N \r\n\r\n* Lines 2..N+1: These N lines represent the symmetric Interpasture Path connectivity matrix of the pastures. Line L shows the connectivity between pasture L-1 and the other pastures with its N space-separated integers. The first integer on each line is the Interpasture Path number that connects pasture L-1 and and pasture 1; the second integer is the IP number connecting pasture L-1 and pasture 2; etc. If pasture A connects to pasture B, then pasture B connects to Pasture A. When no Interpasture Path is available, the integer is 0.', 'A single line with a single integer that is the LCM of the GCFs of all the possible walks from pasture 1 to pasture 2. It is guaranteed that the answer is in the range of 64-bit digit.', 'd:\\oj\\data\\1262', 'd:\\oj\\data\\1262', '4\r\n0 0 3 16\r\n0 0 9 6\r\n3 9 0 0 \r\n16 6 0 0', '6', '', 'USACO 2003', '', '2012-04-11 11:06:35', 1000, 65536, 'N', NULL, 5, 15, 33, 10, 67, 6, 5, 30000, 154, ''),
(1263, 'Cow Imposters', 'FJ no longer uses the barbaric custom of branding to mark the cows that he owns. Instead, he creates a binary code of B (1 <= B <= 16) bits for each cow and embosses it onto a metal strip that is fastened to each cow''s ear. \r\n\r\nThe cows have taken in a stray and wish to create an ID strip for it. Unknown to FJ, they have created a machine that can make a new ID strip by combining two existing ID strips using the XOR operation (ID strips are not consumed by this machine, and the same ID strip can be used for both inputs). \r\n\r\nThe cows wish to create a specific ID strip for the stray or at least get as close to a desired ID as possible -- with the smallest possible number of bits differing between the goal ID strip and the best possible new ID strip. \r\n\r\nGiven a set of E (1 <= E <= 100) existing ID strips, the goal ID strip, and a large number of blank ID strips to hold intermediate results, calculate the closest possible ID strip that can be created from the existing ID strips. \r\n\r\nIf more than one ID is closest, choose the one that can be created in the fewest steps. If there is still a tie, choose the `smallest'' ID (i.e., if you sorted all the IDs, the one that is first).', '* Line 1: Two space-separated integers: B and E. \r\n\r\n* Line 2: The goal ID string, represented as a string of B 0''s and 1''s (with no spaces). \r\n\r\n* Lines 3..E+2: Each line contains an existing ID string, represented as a string of B 0''s and 1''s (with no spaces).', '* Line 1: A single integer that is the minimum number of steps required to create the best possible ID strip. \r\n\r\n* Line 2: A single line with the best possible ID strip that can be created from the E existing ID strips', 'd:\\oj\\data\\1263', 'd:\\oj\\data\\1263', '5 3\r\n11100\r\n10000\r\n01000\r\n00100', '2\r\n11100', '', 'USACO 2003', '', '2007-08-10 21:57:02', 1000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 40, ''),
(1264, 'Traffic Lights', 'The cows are going downtown! Just like everyone else, they want to optimize their driving time. \r\n\r\nThey have noted that when driving on a straight road with traffic lights, the best strategy to get to their destination as quickly as possible is not necessarily to drive as fast as possible to the next traffic light, brake if it''s red, wait for a green light, accelerate, and then drive on. It is often better to approach a traffic light more slowly in order to have some speed when the light turns green. \r\n\r\nThe cows have observed the traffic lights for a very long time. They know that each traffic light behaves in the following way: \r\n\r\n\r\nit is green for a certain amount of time Tg, \r\n\r\nthen it is red for an amount of time Tr, \r\n\r\nthen green again, \r\n\r\nand so on.\r\n\r\nGiven \r\n\r\nthe integer length of the road L (1 <= L <= 100) \r\n\r\nthe number of traffic lights N (0 <= N <= L+1) along with information about each light: \r\n\r\n*the unique position (0 <= position <= L) \r\n\r\n*Tg (1 <= Tg <= 10) \r\n\r\n*Tr (1 <= Tr <= 10) \r\n\r\n*color at t=0 (R or G) \r\n\r\n*Tc (the integer amount of time since the light last changed)\r\n\r\n\r\nwrite a program to determine the minimal amount of time needed to get to the end of the road. Note that at each discrete time (starting at t=0), a car may either change its speed (expressed in positional units per time unit) by one or keep it constant. The speed is always 0 or positive, of course. No driving backwards! \r\n\r\nThe car starts at position zero has has speed zero. The car must complete its trip at position L, also with speed zero. The car must stop at all lights that are red when encountered -- be sure its speed is 0 at the red light''s position if it encounters a red light. The car may move when the light changes from red to green, but not when it changes from green to red.', '* Line 1: Two space-separated integers: L and N \r\n\r\n* Lines 2..N+1: Line Q gives the information for light Q-1. The information is five space separated entities, all but the fourth of which are integers. The fourth entity is a single character, R or G. In order, the fields are: P, Tg, Tr, initial color (R or G), and Tc.', 'A single line with a single integer that is the minimal time needed.', 'd:\\oj\\data\\1264', 'd:\\oj\\data\\1264', '4 1\r\n1 10 10 R 0', '12', '', 'USACO 2003', '', '2007-08-29 22:19:44', 1000, 65536, 'N', NULL, 0, 3, 0, 3, 100, 1, 0, 30000, 41, ''),
(1265, 'Farm Tour', 'When FJ''s friends visit him on the farm, he likes to show them around. His farm comprises N (1 <= N <= 1000) fields numbered 1..N, the first of which contains his house and the Nth of which contains the big barn. A total M (1 <= M <= 10000) paths that connect the fields in various ways. Each path connects two different fields and has a nonzero length smaller than 35,000. \r\n\r\nTo show off his farm in the best way, he walks a tour that starts at his house, potentially travels through some fields, and ends at the barn. Later, he returns (potentially through some fields) back to his house again. \r\n\r\nHe wants his tour to be as short as possible, however he doesn''t want to walk on any given path more than once. Calculate the shortest tour possible. FJ is sure that some tour exists for any given farm.', '* Line 1: Two space-separated integers: N and M. \r\n\r\n* Lines 2..M+1: Three space-separated integers that define a path: The starting field, the end field, and the path''s length.', 'A single line containing the length of the shortest tour.', 'd:\\oj\\data\\1265', 'd:\\oj\\data\\1265', '4 5\r\n1 2 1\r\n2 3 1\r\n3 4 1\r\n1 3 2\r\n2 4 2', '6', '', 'USACO 2003', '', '2011-04-25 23:12:44', 1000, 65536, 'N', NULL, 6, 20, 30, 12, 71, 7, 5, 30000, 54, ''),
(1266, 'Vertical Histogram', 'Write a program to read four lines of upper case (i.e., all CAPITAL LETTERS) text input (no more than 72 characters per line) from the input file and print a vertical histogram that shows how many times each letter (but not blanks, digits, or punctuation) appears in the all-upper-case input. Format your output exactly as shown.', '* Lines 1..4: Four lines of upper case text, no more than 72 characters per line.', '* Lines 1..??: Several lines with asterisks and spaces followed by one line with the upper-case alphabet separated by spaces. Do not print unneeded blanks at the end of any line. Do not print any leading blank lines.', 'd:\\oj\\data\\1266', 'd:\\oj\\data\\1266', 'THE QUICK BROWN FOX JUMPED OVER THE LAZY DOG.\r\nTHIS IS AN EXAMPLE TO TEST FOR YOUR\r\nHISTOGRAM PROGRAM.\r\nHELLO!', '*\r\n                            *\r\n        *                   *\r\n        *                   *     *   *\r\n        *                   *     *   *\r\n*       *     *             *     *   *\r\n*       *     * *     * *   *     * * *\r\n*       *   * * *     * *   * *   * * * *\r\n*     * * * * * *     * * * * *   * * * *     * *\r\n* * * * * * * * * * * * * * * * * * * * * * * * * *\r\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z', '', 'USACO 2003', '', '2011-05-22 19:14:05', 1000, 65536, 'N', NULL, 12, 54, 22, 42, 84, 11, 8, 30000, 66, ''),
(1267, 'Cowties', 'N cows (3 <= N <= 100) are eating grass in the middle of a field. So that they don''t get lost, Farmer John wants to tie them together in a loop so that cow i is attached to cows i-1 and i+1. Note that cow N will be tied to cow 1 to complete the loop. \r\n\r\nEach cow has a number of grazing spots she likes and will only be happy if she ends up situated at one of these spots. Given that Farmer John must ensure the happiness of his cows when placing them, compute the shortest length of rope he needs to tie them all in a loop. It is possible for different parts of the loop to cross each other.', '* Line 1: The integer N. \r\n\r\n* Lines 2..N+1: Each line describes one cow using several space-separated integers. The first integer is the number of locations S (1 <= S <= 40) which are preferred by that cow. This is followed by 2*S integers giving the (x,y) coordinates of these locations respectively. The coordinates lie in the range -100..100', 'A single line containing a single integer, 100 times the minimum length of rope needed (do not perform special rounding for this result).', 'd:\\oj\\data\\1267', 'd:\\oj\\data\\1267', '4\r\n1 0 0\r\n2 1 0 2 0\r\n3 -1 -1 1 1 2 2\r\n2 0 1 0 2', '400', '[Cow 1 is located at (0,0); cow 2 at (1,0); cow 3 at (1,1); and cow 4 at (0,1).]', 'USACO 2003', '', '2007-08-30 22:51:38', 1000, 65536, 'N', NULL, 2, 3, 67, 1, 33, 2, 2, 30000, 30, ''),
(1268, 'Travel Games', 'The cows are taking a trip to the lakes in Minnesota. Like everyone else, they are bored and are playing "travel games" to pass the time away. \r\n\r\nIn this travel game, the first cow thinks of a three letter word from the Sacred Travel Game Dictionary (STGD). The next cow in line must add a letter to the word (at the beginning, between two letters, or at the end) to make another word in the STGD. The cows are curious as to just how big the final word can be. \r\n\r\nGiven a dictionary of D (1 <= D <= 1000) words and a starting word, find any of the longest possible words that can be formed playing this travel game.', '* Line 1: The integer D followed by a space followed by a legal three letter word. \r\n\r\n* Line 2 through D+1: Each line contains a legal word no longer than 80 characters, consisting only of lowercase letters, from the STGD.', 'A single line with the longest word that can be formed by extending the input seed. \r\nThe input ensure the correct result will be unique.', 'd:\\oj\\data\\1268', 'd:\\oj\\data\\1268', '9 cal\r\ncal\r\ncalf\r\ncalfs\r\ncall\r\ncalls\r\nchoral\r\nchorale\r\ncoal\r\ncoral', 'chorale', '[From the sequence: cal, coal, coral, choral, chorale]', 'USACO 2003', '', '2007-08-31 09:34:45', 3000, 65536, 'N', NULL, 5, 12, 42, 5, 50, 7, 5, 30000, 38, ''),
(1269, 'Best Cow Fences', 'Farmer John''s farm consists of a long row of N (1 <= N <= 100,000)fields. Each field contains a certain number of cows, 1 <= ncows <= 2000. \r\n\r\nFJ wants to build a fence around a contiguous group of these fields in order to maximize the average number of cows per field within that block. The block must contain at least F (1 <= F <= N) fields, where F given as input. \r\n\r\nCalculate the fence placement that maximizes the average, given the constraint.', '* Line 1: Two space-separated integers, N and F. \r\n\r\n* Lines 2..N+1: Each line contains a single integer, the number of cows in a field. Line 2 gives the number of cows in field 1,line 3 gives the number in field 2, and so on.', '* Line 1: A single integer that is 1000 times the maximal average.Do not perform rounding, just print the integer that is 1000*ncows/nfields.', 'd:\\oj\\data\\1269', 'd:\\oj\\data\\1269', '10 6\r\n6 \r\n4\r\n2\r\n10\r\n3\r\n8\r\n5\r\n9\r\n4\r\n1', '6500', '', 'USACO 2003', '', '2012-06-12 23:59:44', 1000, 65536, 'N', NULL, 1, 8, 13, 7, 88, 2, 1, 30000, 49, ''),
(1270, 'Cornfields', 'FJ has decided to grow his own corn hybrid in order to help the cows make the best possible milk. To that end, he''s looking to build the cornfield on the flattest piece of land he can find. \r\n\r\nFJ has, at great expense, surveyed his square farm of N x N hectares (1 <= N <= 250). Each hectare has an integer elevation (0 <= elevation <= 250) associated with it. \r\n\r\nFJ will present your program with the elevations and a set of K (1 <= K <= 100,000) queries of the form "in this B x B submatrix, what is the maximum and minimum elevation?". The integer B (1 <= B <= N) is the size of one edge of the square cornfield and is a constant for every inquiry. Help FJ find the best place to put his cornfield.', '* Line 1: Three space-separated integers: N, B, and K. \r\n\r\n* Lines 2..N+1: Each line contains N space-separated integers. Line 2 represents row 1; line 3 represents row 2, etc. The first integer on each line represents column 1; the second integer represents column 2; etc. \r\n\r\n* Lines N+2..N+K+1: Each line contains two space-separated integers representing a query. The first integer is the top row of the query; the second integer is the left column of the query. The integers are in the range 1..N-B+1.', '* Lines 1..K: A single integer per line representing the difference between the max and the min in each query.', 'd:\\oj\\data\\1270', 'd:\\oj\\data\\1270', '5 3 1\r\n5 1 2 6 3\r\n1 3 5 2 7\r\n7 2 4 6 1\r\n9 9 8 6 5\r\n0 6 9 3 9\r\n1 2', '5', '', 'USACO 2003', '', '2007-08-30 22:52:49', 1000, 65536, 'N', NULL, 11, 17, 65, 5, 38, 8, 8, 30000, 48, ''),
(1271, 'Six Degrees of Cowvin Bacon', 'The cows have been making movies lately, so they are ready to play a variant of the famous game "Six Degrees of Kevin Bacon". \r\n\r\nThe game works like this: each cow is considered to be zero degrees of separation (degrees) away from herself. If two distinct cows have been in a movie together, each is considered to be one ''degree'' away from the other. If a two cows have never worked together but have both worked with a third cow, they are considered to be two ''degrees'' away from each other (counted as: one degree to the cow they''ve worked with and one more to the other cow). This scales to the general case. \r\n\r\nThe N (2 <= N <= 300) cows are interested in figuring out which cow has the smallest average degree of separation from all the other cows. excluding herself of course. The cows have made M (1 <= M <= 10000) movies and it is guaranteed that some relationship path exists between every pair of cows.', '* Line 1: Two space-separated integers: N and M \r\n\r\n* Lines 2..M+1: Each input line contains a set of two or more space-separated integers that describes the cows appearing in a single movie. The first integer is the number of cows participating in the described movie, (e.g., Mi); the subsequent Mi integers tell which cows were.', '* Line 1: A single integer that is 100 times the shortest mean degree of separation of any of the cows.', 'd:\\oj\\data\\1271', 'd:\\oj\\data\\1271', '4 2\r\n3 1 2 3\r\n2 3 4', '100', '[Cow 3 has worked with all the other cows and thus has degrees of separation: 1, 1, and 1 -- a mean of 1.00 .]', 'USACO 2003', '', '2007-08-30 22:49:12', 1000, 65536, 'N', NULL, 4, 9, 44, 3, 50, 3, 3, 30000, 36, ''),
(1272, 'Herd Sums', 'The cows in farmer John''s herd are numbered and branded with consecutive integers from 1 to N (1 <= N <= 10,000,000). When the cows come to the barn for milking, they always come in sequential order from 1 to N. \r\n\r\nFarmer John, who majored in mathematics in college and loves numbers, often looks for patterns. He has noticed that when he has exactly 15 cows in his herd, there are precisely four ways that the numbers on any set of one or more consecutive cows can add up to 15 (the same as the total number of cows). They are: 15, 7+8, 4+5+6, and 1+2+3+4+5. \r\n\r\nWhen the number of cows in the herd is 10, the number of ways he can sum consecutive cows and get 10 drops to 2: namely 1+2+3+4 and 10. \r\n\r\nWrite a program that will compute the number of ways farmer John can sum the numbers on consecutive cows to equal N. Do not use precomputation to solve this problem.', '* Line 1: A single integer: N', '* Line 1: A single integer that is the number of ways consecutive cow brands can sum to N.', 'd:\\oj\\data\\1272', 'd:\\oj\\data\\1272', '15', '4', '', 'USACO 2003', '', '2012-03-26 11:36:16', 1000, 65536, 'N', NULL, 56, 96, 58, 39, 43, 54, 51, 30000, 263, ''),
(1273, '', '', '', '', 'd:\\oj\\data\\1273', 'd:\\oj\\data\\1273', '', '', '', '', '', '2007-08-10 22:06:17', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1274, '', '', '', '', 'd:\\oj\\data\\1274', 'd:\\oj\\data\\1274', '', '', '', '', '', '2007-08-10 22:06:20', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1275, '', '', '', '', 'd:\\oj\\data\\1275', 'd:\\oj\\data\\1275', '', '', '', '', '', '2007-08-10 22:06:22', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1276, '', '', '', '', 'd:\\oj\\data\\1276', 'd:\\oj\\data\\1276', '', '', '', '', '', '2007-08-10 22:06:25', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1277, '', '', '', '', 'd:\\oj\\data\\1277', 'd:\\oj\\data\\1277', '', '', '', '', '', '2007-08-10 22:06:27', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1278, '', '', '', '', 'd:\\oj\\data\\1278', 'd:\\oj\\data\\1278', '', '', '', '', '', '2007-08-10 22:06:30', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1279, '', '', '', '', 'd:\\oj\\data\\1279', 'd:\\oj\\data\\1279', '', '', '', '', '', '2007-08-10 22:06:32', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1280, '', '', '', '', 'd:\\oj\\data\\1280', 'd:\\oj\\data\\1280', '', '', '', '', '', '2007-08-10 22:06:35', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1281, '', '', '', '', 'd:\\oj\\data\\1281', 'd:\\oj\\data\\1281', '', '', '', '', '', '2007-08-10 22:06:37', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1282, '', '', '', '', 'd:\\oj\\data\\1282', 'd:\\oj\\data\\1282', '', '', '', '', '', '2007-08-10 22:06:40', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1283, '', '', '', '', 'd:\\oj\\data\\1283', 'd:\\oj\\data\\1283', '', '', '', '', '', '2007-08-10 22:06:42', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1284, '', '', '', '', 'd:\\oj\\data\\1284', 'd:\\oj\\data\\1284', '', '', '', '', '', '2007-08-10 22:06:45', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1285, '', '', '', '', 'd:\\oj\\data\\1285', 'd:\\oj\\data\\1285', '', '', '', '', '', '2007-08-10 22:06:47', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1286, '', '', '', '', 'd:\\oj\\data\\1286', 'd:\\oj\\data\\1286', '', '', '', '', '', '2007-08-10 22:06:50', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1287, '', '', '', '', 'd:\\oj\\data\\1287', 'd:\\oj\\data\\1287', '', '', '', '', '', '2007-08-10 22:06:52', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1288, '', '', '', '', 'd:\\oj\\data\\1288', 'd:\\oj\\data\\1288', '', '', '', '', '', '2007-08-10 22:06:55', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1289, '', '', '', '', 'd:\\oj\\data\\1289', 'd:\\oj\\data\\1289', '', '', '', '', '', '2007-08-10 22:06:57', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1290, '', '', '', '', 'd:\\oj\\data\\1290', 'd:\\oj\\data\\1290', '', '', '', '', '', '2007-08-10 22:07:00', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1291, '', '', '', '', 'd:\\oj\\data\\1291', 'd:\\oj\\data\\1291', '', '', '', '', '', '2007-08-10 22:07:02', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1292, '', '', '', '', 'd:\\oj\\data\\1292', 'd:\\oj\\data\\1292', '', '', '', '', '', '2007-08-10 22:07:04', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1293, '', '', '', '', 'd:\\oj\\data\\1293', 'd:\\oj\\data\\1293', '', '', '', '', '', '2007-08-10 22:07:07', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1294, '', '', '', '', 'd:\\oj\\data\\1294', 'd:\\oj\\data\\1294', '', '', '', '', '', '2007-08-10 22:07:10', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1295, '', '', '', '', 'd:\\oj\\data\\1295', 'd:\\oj\\data\\1295', '', '', '', '', '', '2007-08-10 22:07:12', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1296, '', '', '', '', 'd:\\oj\\data\\1296', 'd:\\oj\\data\\1296', '', '', '', '', '', '2007-08-10 22:07:15', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1297, '', '', '', '', 'd:\\oj\\data\\1297', 'd:\\oj\\data\\1297', '', '', '', '', '', '2007-08-10 22:07:17', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1298, '', '', '', '', 'd:\\oj\\data\\1298', 'd:\\oj\\data\\1298', '', '', '', '', '', '2007-08-10 22:07:20', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1299, '', '', '', '', 'd:\\oj\\data\\1299', 'd:\\oj\\data\\1299', '', '', '', '', '', '2007-08-10 22:07:23', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1300, 'Message Decowding', 'The cows are thrilled because they''ve just learned about encrypting messages. They think they will be able to use secret messages to plot meetings with cows on other farms. \r\n\r\nCows are not known for their intelligence. Their encryption method is nothing like DES or BlowFish or any of those really good secret coding methods. No, they are using a simple substitution cipher. \r\n\r\nThe cows have a decryption key and a secret message. Help them decode it. The key looks like this: \r\n\r\n\r\n        yrwhsoujgcxqbativndfezmlpk\r\n\r\nWhich means that an ''a'' in the secret message really means ''y''; a ''b'' in the secret message really means ''r''; a ''c'' decrypts to ''w''; and so on. Blanks are not encrypted; they are simply kept in place. \r\n\r\nInput text is in upper or lower case, both decrypt using the same decryption key, keeping the appropriate case, of course.', '* Line 1: 26 lower case characters representing the decryption key \r\n\r\n* Line 2: As many as 80 characters that are the message to be decoded', '* Line 1: A single line that is the decoded message. It should have the same length as the second line of input.', 'd:\\oj\\data\\1300', 'd:\\oj\\data\\1300', 'eydbkmiqugjxlvtzpnwohracsf\r\nKifq oua zarxa suar bti yaagrj fa xtfgrj', 'Jump the fence when you seeing me coming', '', 'USACO 2003', '', '2012-04-19 01:36:52', 1000, 65536, 'N', NULL, 69, 113, 61, 39, 45, 49, 48, 30000, 233, ''),
(1301, 'Mountain Walking', 'Farmer John and Bessie the cow have embarked on one of those ''active'' vacations. They spend entire days walking in the mountains and then, at the end of the day, they tire and return to their vacation cabin. \r\n\r\nSince climbing requires a lot of energy and they are already tired, they wish to return to the cabin using a path that has the least difference between its highest and lowest elevations, no matter how long that path is. Help FJ find this easy-to-traverse path. \r\n\r\nThe map of the mountains is given by an N x N (2 <= N <= 100) matrix of integer elevations (0 <= any elevation <= 110) FJ and Bessie are currently at the upper left position (row 1, column 1) and the cabin is at the lower right (row N, column N). They can travel right, left, toward the top, or toward the bottom of the grid. They can not travel on a diagonal.', '* Line 1: The single integer, N \r\n\r\n* Lines 2..N+1: Each line contains N integers, each of which specifies a square''s height. Line 2 contains the first (top) row of the grid; line 3 contains the second row, and so on. The first number on the line corresponds to the first (left) column of the grid, and so on.', '* Line 1: An integer that is the minimal height difference on the optimal path.', 'd:\\oj\\data\\1301', 'd:\\oj\\data\\1301', '5\r\n1 1 3 6 8\r\n1 2 2 5 5\r\n4 4 0 3 3\r\n8 0 2 3 4\r\n4 3 0 2 1', '2', '', 'USACO 2003', '', '2012-03-23 17:53:37', 1000, 65536, 'N', NULL, 12, 39, 31, 26, 76, 13, 8, 30000, 198, '');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1302, 'Millenium Leapcow', 'The cows have revised their game of leapcow. They now play in the middle of a huge pasture upon which they have marked a grid that bears a remarkable resemblance to a chessboard of N rows and N columns (3 <= N <= 365). \r\n\r\nHere''s how they set up the board for the new leapcow game: \r\n\r\n* First, the cows obtain N x N squares of paper. They write the integers from 1 through N x N, one number on each piece of paper. \r\n\r\n* Second, the ''number cow'' places the papers on the N x N squares in an order of her choosing. \r\n\r\nEach of the remaining cows then tries to maximize her score in the game. \r\n\r\n* First, she chooses a starting square and notes its number. \r\n\r\n* Then, she makes a ''knight'' move (like the knight on a chess board) to a square with a higher number. If she''s particularly strong, she leaps to the that square; otherwise she walks. \r\n\r\n* She continues to make ''knight'' moves to higher numbered squares until no more moves are possible. \r\n\r\nEach square visited by the ''knight'' earns the competitor a single point. The cow with the most points wins the game. \r\n\r\nHelp the cows figure out the best possible way to play the game.', '* Line 1: A single integer: the size of the board \r\n\r\n* Lines 2.. ...: These lines contain space-separated integers that tell the contents of the chessboard. The first set of lines (starting at the second line of the input file) represents the first row on the chessboard; the next set of lines represents the next row, and so on. To keep the input lines of reasonable length, when N > 15, a row is broken into successive lines of 15 numbers and a potentially shorter line to finish up a row. Each new row begins on its own line.', '* Line 1: A single integer that is the winning cow''s score; call it W. \r\n\r\n* Lines 2..W+1: Output, one per line, the integers that are the starting square, the next square the winning cow visits, and so on through the last square. If a winning cow can choose more than one path, show the path that would be the ''smallest'' if the paths were sorted by comparing their respective ''square numbers''.', 'd:\\oj\\data\\1302', 'd:\\oj\\data\\1302', '4\r\n1 3 2 16\r\n4 10 6 7\r\n8 11 5 12\r\n9 13 14 15', '7\r\n2\r\n4\r\n5\r\n9\r\n10\r\n12\r\n13', '', 'USACO 2003', '', '2007-09-05 09:56:29', 2000, 65536, 'N', NULL, 4, 7, 57, 3, 43, 4, 4, 30000, 40, ''),
(1303, 'Optimal Milking', 'FJ has moved his K (1 <= K <= 30) milking machines out into the cow pastures among the C (1 <= C <= 200) cows. A set of paths of various lengths runs among the cows and the milking machines. The milking machine locations are named by ID numbers 1..K; the cow locations are named by ID numbers K+1..K+C. \r\n\r\nEach milking point can "process" at most M (1 <= M <= 15) cows each day. \r\n\r\nWrite a program to find an assignment for each cow to some milking machine so that the distance the furthest-walking cow travels is minimized (and, of course, the milking machines are not overutilized). At least one legal assignment is possible for all input data sets. Cows can traverse several paths on the way to their milking machine.', '* Line 1: A single line with three space-separated integers: K, C, and M. \r\n\r\n* Lines 2.. ...: Each of these K+C lines of K+C space-separated integers describes the distances between pairs of various entities. The input forms a symmetric matrix. Line 2 tells the distances from milking machine 1 to each of the other entities; line 3 tells the distances from machine 2 to each of the other entities, and so on. Distances of entities directly connected by a path are positive integers no larger than 200. Entities not directly connected by a path have a distance of 0. The distance from an entity to itself (i.e., all numbers on the diagonal) is also given as 0. To keep the input lines of reasonable length, when K+C > 15, a row is broken into successive lines of 15 numbers and a potentially shorter line to finish up a row. Each new row begins on its own line.', 'A single line with a single integer that is the minimum possible total distance for the furthest walking cow.', 'd:\\oj\\data\\1303', 'd:\\oj\\data\\1303', '2 3 2\r\n0 3 2 1 1\r\n3 0 3 2 0\r\n2 3 0 1 0\r\n1 2 1 0 2\r\n1 0 0 2 0', '2', '', 'USACO 2003', '', '2011-03-06 18:02:32', 2000, 65536, 'N', NULL, 2, 8, 25, 6, 75, 2, 2, 1000, 59, ''),
(1304, 'Sum', 'Larrouse is given n numbers and an extra integer x, he wants to know whether there are two numbers whose sum is x.', 'The input file contains several test cases. The first line of each test case contains two integers, n(<=1000001) and x. From the next line of each test case, there are n numbers.', 'Each test case corresponds to a line in the output, which is either "YES" if there exists an answer or "NO" if not.', 'd:\\oj\\data\\1304', 'd:\\oj\\data\\1304', '3 3\r\n1 2 3\r\n2 3\r\n1 3', 'YES\r\nNO', '', 'modified by SWUST.myler', '', '2012-05-06 22:34:52', 3000, 65536, 'N', NULL, 111, 432, 26, 76, 52, 92, 71, 30000, 569, ''),
(1305, '地震预测', '怀特先生是一名研究地震的科学家，最近他发现如果知道某一段时间内的地壳震动能量采样的最小波动值之和，可以有效地预测大地震的发生。\r\n\r\n假设已知一段时间的n次地壳震动能量的采样值为a1,a2,…an，那么第i 次采样的最小波动值为min{ |ai-aj| | i < j <= n}，即第i 次采样的\r\n最小波动值是其后n-i次采样值与第i次采样值之差的绝对值中最小的值，特别地，第n次采样的最小波动值为an。\r\n\r\n请编写一个程序计算这n次采样的最小波动值之和。', '本题有多组输入数据，你必须处理到EOF为止\r\n\r\n输入数据第一行有一个数n(1 <= n <= 10^5) ,表示采样的次数。\r\n\r\n第二行有n个整数，表示n次地壳震动能量的采样值a1,a2,…an (0 <= ai <= 10^7)。', '输出n次采样的最小波动值之和。', 'd:\\oj\\data\\1305', 'd:\\oj\\data\\1305', '4\r\n2 0 3 10', '21', '', 'SWUST', '', '2011-03-24 22:19:13', 1000, 65536, 'N', NULL, 10, 61, 16, 51, 88, 20, 7, 30000, 65, ''),
(1306, 'Word List', 'In this problem the input will consist of a number of lines of English text consisting of the\r\nletters of the English alphabet, the punctuation marks , . ! ? ( ) ! " '' : ;and white space characters (blank, newline). \r\nYour task is print the words (not include numbers)in the text in lexicographic order (that is, dictionary order).\r\nEach word should appear exactly once in your list. You can ignore the case (for instance, "The" and "the" \r\nare to be treated as the same word.) There should be no uppercase letters in the output. \r\nFor example, consider the following candidate for the input text: \r\nThis is a sample piece of text to illustrate this \r\nproblem.\r\nThe corresponding output would read as:\r\na\r\nillustrate\r\nis\r\nof\r\npiece\r\nproblem\r\nsample\r\ntext\r\nthis\r\nto', 'The first line of input contains a single integer N, indicating the number of lines in the input. This \r\nis followed by N lines of input text. \r\nYou may assume that N ≤ 10000 and that there are at most 120 characters in each line. You may also assume \r\nthat there are at the most 1000 distinct words in the given text.', 'For each test case, \r\nThe first line of output contains a single integer M indicating the number of distinct words in the given \r\ntext. The next M lines list out these words in lexicographic order.', 'd:\\oj\\data\\1306', 'd:\\oj\\data\\1306', '2\r\nThis is a sample piece of text to illustrate this \r\nproblem.', '10\r\na\r\nillustrate\r\nis\r\nof\r\npiece\r\nproblem\r\nsample\r\ntext\r\nthis\r\nto', '', 'SWUST.Flying', '', '2011-09-05 20:24:27', 1000, 65536, 'N', NULL, 20, 94, 21, 23, 74, 22, 8, 30000, 85, ''),
(1307, 'Another A+B Problem !', 'You know that the first problem of an online judge system should be the "A+B Problem", but TOJ not. What a terrible! So now it comes... \r\n\r\nGiven a series of numbers, your task is to find the largest number C in the sequence, which is the sum of two other numbers A and B in \r\nthe sequence. Please note that A and B may have the same value, but cannot be the same number.', 'The first line of each test case is an integer N (1 ≤ N ≤ 1000), which is the amount of the numbers, followed by a line of N numbers. \r\n\r\nYou can assume all the numbers in the sequence are nonnegative and not more than 10^8. \r\n\r\nThe input will be terminated by a zero.', 'Output one line for each test case, indicating the largest number. If there is no such number, output "-1".', 'd:\\oj\\data\\1307', 'd:\\oj\\data\\1307', '5\r\n8 3 4 3 6\r\n0', '6', '', 'SWUST.Larrouse(Last Modified)', '', '2012-04-02 18:40:15', 1000, 65536, 'N', NULL, 61, 286, 21, 205, 83, 52, 41, 30000, 410, ''),
(1308, '(i,j)', '给出两组正整数 pi(1 <= i <= a) 和 qj(1 <= j <= b)和一个正整数s。\r\n问题是：使得pi + qj = s的不同的(i, j)对有多少个。', '文件是多case的,每个case\r\n\r\n第一行` 一个正整数 s(1<=s<=10000)\r\n第二行` 两个正整数 a b(1<=a,b<=10000)\r\n第三行` a个正整数,为 pi (1<=pi<=10000)\r\n第四行` b个正整数,为 qj (1<=qj<=10000)\r\n\r\n当s为0时,输入结束', '每个case输出一行,为使得pi + qj = s的不同的(i, j)对数', 'd:\\oj\\data\\1308', 'd:\\oj\\data\\1308', '99\r\n2 2\r\n49 49\r\n50 50\r\n11\r\n9 10\r\n1 2 3 4 5 6 7 8 9\r\n10 9 8 7 6 5 4 3 2 1\r\n0', '4\r\n9', '', 'SWUST.Flying', '', '2012-03-11 18:05:20', 1000, 65536, 'N', NULL, 68, 153, 44, 83, 60, 69, 56, 30000, 137, ''),
(1309, 'Party at Hali-Bula', 'Dear Contestant,\r\nI''m going to have a party at my villa at Hali-Bula to celebrate my retirement from BCM. I wish I could invite all my co-workers, but imagine how an employee can enjoy a party when he finds his boss among the guests! So, I decide not to invite both an employee and his/her boss. The organizational hierarchy at BCM is such that nobody has more than one boss, and there is one and only one employee with no boss at all (the Big Boss)! Can I ask you to please write a program to determine the maximum number of guests so that no employee is invited when his/her boss is invited too? I''ve attached the list of employees and the organizational hierarchy of BCM.\r\n\r\nBest,\r\n--Brian Bennett\r\n\r\nP.S. I would be very grateful if your program can indicate whether the list of people is uniquely determined if I choose to invite the maximum number of guests with that condition.', 'The input consists of multiple test cases. Each test case is started with a line containing an integer n (1 ≤ n ≤ 200), the number of BCM employees. The next line contains the name of the Big Boss only. Each of the following n-1 lines contains the name of an employee together with the name of his/her boss. All names are strings of at least one and at most 100 letters and are separated by blanks. The last line of each test case contains a single 0.', 'For each test case, write a single line containing a number indicating the maximum number of guests that can be invited according to the required condition, and a word Yes or No, depending on whether the list of guests is unique in that case.', 'd:\\oj\\data\\1309', 'd:\\oj\\data\\1309', '6\r\nJason\r\nJack Jason\r\nJoe Jack\r\nJill Jason\r\nJohn Jack\r\nJim Jill\r\n2\r\nMing\r\nCho Ming\r\n0', '4 Yes\r\n1 No', '', 'Asia - Tehran 2006', '', '2012-03-11 18:16:58', 1000, 65536, 'N', NULL, 2, 3, 67, 1, 50, 2, 1, 30000, 50, ''),
(1310, 'Barbara Bennett''s Wild Numbers', 'A wild number is a string containing digits and question marks (like 36?1?8). A number X matches a wild number W if they have the same length, and every non-question mark character in X is equal to the character in the same position in W (it means that you can replace a question mark with any digit). For example, 365198 matches the wild number 36?1?8, but 360199, 361028, or 36128 does not. Write a program that reads a wild number W and a number X from input, both of length n, and determines the number of n-digit numbers that match W and are greater than X.', 'There are multiple test cases in the input. Each test case consists of two lines of the same length. The first line contains a wild number W, and the second line contains an integer number X. The length of input lines is between 1 and 10 characters. The last line of input contains a single character #.', 'For each test case, write a single line containing the number of n-digit numbers matching W and greater than X (n is the length of W and X).', 'd:\\oj\\data\\1310', 'd:\\oj\\data\\1310', '36?1?8\r\n236428\r\n8?3\r\n910\r\n?\r\n5\r\n#', '100\r\n0\r\n4', '', 'Asia - Tehran 2006', '', '2007-08-14 17:49:02', 1000, 65536, 'N', NULL, 2, 4, 50, 1, 33, 2, 2, 30000, 36, ''),
(1311, 'Against Mammoths', 'Back to year 3024, humans finally developed a new technology that enables them to conquer the alien races. The new technology made it possible to produce huge spaceships known as Saber Tooth spaceships as powerful as the aliens'' defending mammoths. At that time, humans ruled several planets while some others were under control of the aliens. Using Saber Tooth ships, humans finally defeated aliens and this became the first Planet War in history. Our goal is to run a simulation of the ancient war to verify some historical hypotheses. \r\n\r\nProducing each spaceship takes an amount of time which is constant for each planet but may vary among different planets. We call the number of spaceships each planet can produce in a year, the production rate of that planet. Note that each planet has a number of spaceships in it initially (before the simulation starts). The planets start producing  ships when the simulation starts, so if a planet has n ships initially, and has the production rate p, it will have n + p ships at the beginning of year 1, and n + i × p ships at the beginning of year i (years are started from zero).\r\n\r\nBradley Bennett, the commander in chief of the human armies, decided a strategy for the war. For each alien planet A, he chooses a corresponding human planet P, and produces spaceships in P until a certain moment at which he sends all spaceships in P to invade the planet A. No alien planet is invaded by two human planets and no human planet sends its spaceships to two different alien planets. \r\n\r\nThe defense power of the alien planets comes from their powerful mammoths. Each alien planet contains a number of mammoths initially and produces a number of mammoths each year (called the production rate of the planet). When a fight between spaceships and mammoths takes place, the side having the greater number of troops is the winner. If the spaceships win, the alien planet is defeated. In case the number of mammoths and spaceships are equal, the spaceships win.\r\n\r\nThe difficulty with planning this strategy is that it takes some time for the spaceships to reach the alien planets, and during this time, the aliens produce mammoths. The time required for spaceships to travel from each human planet to each alien planet is known. The ships can leave their planets only at the beginning of years (right after the ships are produced) and reach the alien planets at the beginning of years too (right after the mammoths are produced). \r\n\r\nAs an example, consider a human planet with two initial spaceships and production rate three invading an alien planet with two initial mammoths and production rate two. The time required to travel between the two planets is two years and the ships are ordered to leave at year one. In this case, five ships leave the human planet. When they reach the alien planet, they confront eight mammoths and will be defeated during the fight.\r\n\r\nBennett decided to prepare a plan that destroys every alien planet in the shortest possible time. Your task is to write a program to generate such a plan. The output is the shortest possible time (in years) in which every alien planet is defeated.', 'There are multiple test cases in the input. The first line of each test case contains two numbers H and A which are the number of planets under the control of humans and aliens respectively (both between 1 and 250). The second line of the test case contains H non-negative integers n1 m1 n2 m2 … nH mH. The number ni is the initial number of Saber Tooth spaceships in the ith human planet and mi is the production rate of that planet. The third line contains A non-negative integers which specify the initial number of mammoths and the production rate of the alien planets in the same format as the second line. After the third line, there are H lines each containing A positive integers. The jth number on the ith line shows how many years it takes a spaceship to travel from the ith human planet to the jth alien planet. The last line of the input contains two zero numbers. Every number in the input except H and A is between 0 and 40000.', 'The output for each test case contains a single integer which is the minimum time in which all alien planets can be defeated. If it is impossible to destroy all alien planets, the output should be IMPOSSIBLE.', 'd:\\oj\\data\\1311', 'd:\\oj\\data\\1311', '2 1\r\n2 3 0 3\r\n2 2\r\n2\r\n2\r\n0 0', '6', '', 'Asia - Tehran 2006', '', '2007-08-12 11:24:41', 2000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 27, ''),
(1312, 'Bribing FIPA', 'There is going to be a voting at FIPA (Fédération Internationale de Programmation Association) to determine the host of the next IPWC (International Programming World Cup). Benjamin Bennett, the delegation of Diamondland to FIPA, is trying to seek other delegation’s support for a vote in favor of hosting IWPC in Diamondland. Ben is trying to buy the votes by diamond gifts. He has figured out the voting price of each and every country. However, he knows that there is no need to diamond-bribe every country, since there are small poor countries that take vote orders from their respected superpowers. So, if you bribe a country, you have gained the vote of any other country under its domination (both directly and via other countries domination).  For example, if C is under domination of B, and B is under domination of A, one may get the vote of all three countries just by bribing A. Note that no country is under domination of more than one country, and the domination relationship makes no cycle. You are to help him, against a big diamond, by writing a program to find out the minimum number of diamonds needed such that at least m countries vote in favor of Diamondland. Since Diamondland is a candidate, it stands out of the voting process.', 'The input consists of multiple test cases. Each test case starts with a line containing two integers n (1 &#61603; n &#61603; 200) and m (0 &#61603; m &#61603; n) which are the number of countries participating in the voting process, and the number of votes Diamondland needs. The next n lines, each describing one country, are of the following form:\r\n\r\nCountryName DiamondCount DCName1 DCName2 ...\r\n\r\nCountryName, the name of the country, is a string of at least one and at most 100 letters and DiamondCount is a positive integer which is the number of diamonds needed to get the vote of that country and all of the countries that their names come in the list DCName1 DCName2 ... which means they are under direct domination of that country. Note that it is possible that some countries do not have any other country under domination. The end of the input is marked by a single line containing a single # character.', 'For each test case, write a single line containing a number showing the minimum number of diamonds needed to gain the vote of at least m countries.', 'd:\\oj\\data\\1312', 'd:\\oj\\data\\1312', '3 2\r\nAland 10\r\nBoland 20 Aland\r\nColand 15\r\n#', '20', '', 'Asia - Tehran 2006', '', '2007-08-12 11:27:47', 1000, 65536, 'N', NULL, 1, 2, 50, 0, 0, 1, 1, 30000, 28, ''),
(1313, 'Treasure of the Chimp Island', 'Bob Bennett, the young adventurer, has found the map to the treasure of the Chimp Island, where the ghost zombie pirate LeChimp, the infamous evil pirate of the Caribbeans has hidden somewhere inside the Zimbu Memorial Monument (ZM2). ZM2 is made up of a number of corridors forming a maze. To protect the treasure, LeChimp has placed a number of stone blocks inside the corridors to block the way to the treasure. The map shows the hardness of each stone block which determines how long it takes to destroy the block. ZM2 has a number of gates on the boundary from which Bob can enter the corridors. Fortunately, there may be a pack of dynamites at some gates, so that if Bob enters from such a gate, he may take the pack with him. Each pack has a number of dynamites that can be used to destroy the stone blocks in a much shorter time. Once entered, Bob cannot exit ZM2 and enter again, nor can he walk on the area of other gates (so, he cannot pick more than one pack of dynamites).\r\n\r\nThe hardness of the stone blocks is an integer between 1 and 9, showing the number of days required to destroy the block. We neglect the time required to travel inside the corridors. Using a dynamite, Bob can destroy a block almost immediately, so we can ignore the time required for it too. The problem is to find the minimum time at which Bob can reach the treasure. He may choose any gate he wants to enter ZM2.', 'The input consists of multiple test cases. Each test case contains the map of ZM2 viewed from the above. The map is a rectangular matrix of characters. Bob can move in four directions up, down, left, and right, but cannot move diagonally. He cannot enter a location shown by asterisk characters (*), even using all his dynamites! The character ($) shows the location of the treasure. A digit character (between 1 and 9) shows a stone block of hardness equal to the value of the digit. A hash sign (#) which can appear only on the boundary of the map indicates a gate without a dynamite pack. An uppercase letter on the boundary shows a gate with a pack of dynamites. The letter A shows there is one dynamite in the pack, B shows there are two dynamite in the pack and so on. All other characters on the boundary of the map are asterisks. Corridors are indicated by dots (.). There is a blank line after each test case. The width and the height of the map are at least 3 and at most 100 characters. The last line of the input contains two dash characters (--).', 'For each test case, write a single line containing a number showing the minimum number of days it takes Bob to reach the treasure, if possible. If the treasure is unreachable, write IMPOSSIBLE.', 'd:\\oj\\data\\1313', 'd:\\oj\\data\\1313', '*****#*********\r\n*.1....4..$...*\r\n*..***..2.....*\r\n*..2..*****..2*\r\n*..3..******37A\r\n*****9..56....*\r\n*.....******..*\r\n***CA**********\r\n\r\n*****\r\n*$3**\r\n*.2**\r\n***#*\r\n\r\n--', '1\r\nIMPOSSIBLE', '', 'Asia - Tehran 2006', '', '2007-08-12 11:28:00', 1000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 82, ''),
(1314, 'Combinations', 'Computing the exact number of ways that N things can be taken M at a time can be a great challenge when N and/or M become very large. Challenges are the stuff of contests. Therefore, you are to make just such a computation given the following: \r\nGIVEN: 5 <= N <= 100; 5 <= M <= 100; M <= N \r\nCompute the EXACT value of: C = N! / (N-M)!M! \r\nYou may assume that the final value of C will fit in a 32-bit Pascal LongInt or a C long. For the record, the exact value of 100! is: \r\n93,326,215,443,944,152,681,699,238,856,266,700,490,715,968,264,381,621, 468,592,963,895,217,599,993,229,915,608,941,463,976,156,518,286,253, 697,920,827,223,758,251,185,210,916,864,000,000,000,000,000,000,000,000', 'The input to this program will be one or more lines each containing zero or more leading spaces, a value for N, one or more spaces, and a value for M. The last line of the input file will contain a dummy N, M pair with both values equal to zero. Your program should terminate when this line is read.', 'The output from this program should be in the form: \r\nN things taken M at a time is C exactly.', 'd:\\oj\\data\\1314', 'd:\\oj\\data\\1314', '100  6\r\n20  5\r\n18  6\r\n0  0', '100 things taken 6 at a time is 1192052400 exactly.\r\n20 things taken 5 at a time is 15504 exactly.\r\n18 things taken 6 at a time is 18564 exactly.', '', 'UVA Volume III 369', '', '2011-03-23 14:53:21', 1000, 65536, 'N', NULL, 20, 52, 38, 25, 68, 13, 12, 30000, 40, ''),
(1315, 'Big Number', 'In many applications very large integers numbers are required. Some of these applications are using keys for secure transmission of data, encryption, etc. In this problem you are given a number, you have to determine the number of digits in the factorial of the number.', 'Input consists of several lines of integer numbers. The first line contains an integer n, which is the number of cases to be tested, followed by n lines, one integer 1 <= m <= 10^7 on each line.', 'The output contains the number of digits in the factorial of the integers appearing in the input.', 'd:\\oj\\data\\1315', 'd:\\oj\\data\\1315', '2\r\n10\r\n20', '7\r\n19', '', 'Dhaka 2002', '', '2012-04-14 23:11:22', 1000, 65536, 'N', NULL, 31, 60, 52, 27, 50, 30, 27, 30000, 126, ''),
(1316, 'World Cup Noise', 'Background \r\n"KO-RE-A, KO-RE-A" shout 54.000 happy football fans after their team has reached the semifinals of the FIFA World Cup in their home country. But although their excitement is real, the Korean people are still very organized by nature. For example, they have organized huge trumpets (that sound like blowing a ship''s horn) to support their team playing on the field. The fans want to keep the level of noise constant throughout the match. \r\nThe trumpets are operated by compressed gas. However, if you blow the trumpet for 2 seconds without stopping it will break. So when the trumpet makes noise, everything is okay, but in a pause of the trumpet,the fans must chant "KO-RE-A"! \r\nBefore the match, a group of fans gathers and decides on a chanting pattern. The pattern is a sequence of 0''s and 1''s which is interpreted in the following way: If the pattern shows a 1, the trumpet is blown. If it shows a 0, the fans chant "KO-RE-A". To ensure that the trumpet will not break, the pattern is not allowed to have two consecutive 1''s in it. \r\nProblem \r\nGiven a positive integer n, determine the number of different chanting patterns of this length, i.e., determine the number of n-bit sequences that contain no adjacent 1''s. For example, for n = 3 the answer is 5 (sequences 000, 001, 010, 100, 101 are acceptable while 011, 110, 111 are not).', 'The first line contains the number of scenarios. \r\nFor each scenario, you are given a single positive integer less than 45 on a line by itself.', 'The output for every scenario begins with a line containing "Scenario #i:", where i is the number of the scenario starting at 1. Then print a single line containing the number of n-bit sequences which have no adjacent 1''s. Terminate the output for the scenario with a blank line.', 'd:\\oj\\data\\1316', 'd:\\oj\\data\\1316', '2\r\n3\r\n1', 'Scenario #1:\r\n5\r\n\r\nScenario #2:\r\n2', '', 'TUD Programming Contest 2002', '', '2010-05-22 12:59:14', 1000, 65536, 'N', NULL, 13, 25, 52, 12, 50, 13, 12, 30000, 38, ''),
(1317, 'Square', 'Given a set of sticks of various lengths, is it possible to join them end-to-end to form a square?', 'The first line of input contains N, the number of test cases. Each test case begins with an integer 4 ≤ M ≤ 20, the number of sticks. M integers follow; each gives the length of a stick - an integer between 1 and 10,000.', 'For each case, output a line containing "yes" if is is possible to form a square; otherwise output "no".', 'd:\\oj\\data\\1317', 'd:\\oj\\data\\1317', '3\r\n4 1 1 1 1\r\n5 10 20 30 40 50\r\n8 1 7 2 6 4 4 3 5', 'yes\r\nno\r\nyes', '', 'Waterloo Local Contest Sep. 21, 2002', '', '2012-03-08 14:38:14', 3000, 65536, 'N', NULL, 46, 169, 27, 100, 78, 34, 29, 30000, 620, ''),
(1318, 'Catch That Cow', 'Farmer John has been informed of the location of a fugitive cow and wants to catch her immediately. He starts at a point N (0 ≤ N ≤ 100,000) on a number line and the cow is at a point K (0 ≤ K ≤ 100,000) on the same number line. Farmer John has two modes of transportation: walking and teleporting.\r\n\r\n* Walking: FJ can move from any point X to the points X - 1 or X + 1 in a single minute\r\n* Teleporting: FJ can move from any point X to the point 2 × X in a single minute.\r\n\r\nIf the cow, unaware of its pursuit, does not move at all, how long does it take for Farmer John to retrieve it?', 'Line 1: Two space-separated integers: N and K', 'Line 1: The least amount of time, in minutes, it takes for Farmer John to catch the fugitive cow.', 'd:\\oj\\data\\1318', 'd:\\oj\\data\\1318', '5 17', '4', 'The fastest way for Farmer John to reach the fugitive cow is to move along the following path: 5-10-9-18-17, which takes 4 minutes.', 'USACO 2007 Open Silver', '', '2007-08-14 11:08:56', 2000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 2, ''),
(1319, 'Robot in Maze', 'There is a robot trapped in the maze. Now you have to send out some instructions, telling it how to reach its destination. \r\n\r\nThe maze is an M * N grid. Some of the cells are empty, while others are occupied by the wall. Of course the robot can''t move into the wall, and the robot can''t move outside the grid too. The robot can only accept three commands: TURN LEFT, TURN RIGHT and GO. The robot may face to North, South, East or West during the movement. When it receive a TURN LEFT command, it will rotate 90 degree to the left. That is, if it faces to east before the command, it will face to north after the TURN LEFT command. The TURN RIGHT command is almost the same, except that the direction is opposite. When receive the GO command, the robot will move 1 unit towards its orientation, unless there is a nonempty cell in front of it. \r\n<font color=red>\r\nPlease note the robot is always face to north at the beginning, i.e., face to the upper border in the maze map. (The maze map will be described below.) </font>\r\n\r\nYou want to use minimum number of instructions, so you should write a program for help.', 'The first line of the input is the number of test cases. \r\n\r\nThe first line of each test case contains two integers M and N, indicating the size of the maze. There are M lines followed, each line contains exactly N characters, describing an M * N maze. The ''#'' indicating the wall, the ''.'' indicating the empty cell, the ''S'' and ''T'' indicating the start point and the destination of the robot respectively. There are no other characters in the maze map. \r\n\r\nThe orientation of the maze map is just the same as the common sense. That is, the upper-left corner of the maze map indicating the north-west direction, and the lower-right corner indicating the south-east. \r\n\r\nYou can assume 1 ≤ M ≤ 100 and 1 ≤ N ≤ 100. There is only one ''S'' and one ''T'' in the maze.', 'Output one line for each test case, indicating the minimum number of instructions needed. Or output -1 if it''s impossible to reach the robot''s destination.', 'd:\\oj\\data\\1319', 'd:\\oj\\data\\1319', '2\r\n5 5\r\n#####\r\n#...#\r\n#.#.#\r\n#S#T#\r\n#####\r\n4 5\r\n#.#.#\r\n#.#.#\r\n#S#T#\r\n#####', '8\r\n-1', 'The best instruction sequence for the first sample test case should be: GO, GO, TURN RIGHT, GO, GO, TURN RIGHT, GO, GO. And the length is 8.', '', '', '2012-04-20 12:19:12', 1000, 65536, 'N', NULL, 40, 173, 23, 46, 70, 26, 20, 30000, 908, ''),
(1320, 'The Circumference of the Circle', 'To calculate the circumference of a circle seems to be an easy task - provided you know its diameter. But what if you don''t? \r\nYou are given the cartesian coordinates of three non-collinear points in the plane.\r\nYour job is to calculate the circumference of the unique circle that intersects all three points.', 'The input file will contain one or more test cases. Each test case consists of one line containing six real numbers x1,y1, x2,y2,x3,y3, representing the coordinates of the three points. The diameter of the circle determined by the three points will never exceed a million. Input is terminated by end of file.', 'For each test case, print one line containing one real number telling the circumference of the circle determined by the three points. The circumference is to be printed accurately rounded to two decimals. The value of pi is approximately 3.141592653589793.', 'd:\\oj\\data\\1320', 'd:\\oj\\data\\1320', '0.0 -0.5 0.5 0.0 0.0 0.5\r\n0.0 0.0 0.0 1.0 1.0 1.0\r\n5.0 5.0 5.0 7.0 4.0 6.0\r\n0.0 0.0 -1.0 7.0 7.0 7.0\r\n50.0 50.0 50.0 70.0 40.0 60.0\r\n0.0 0.0 10.0 0.0 20.0 1.0\r\n0.0 -500000.0 500000.0 0.0 0.0 500000.0', '3.14\r\n4.44\r\n6.28\r\n31.42\r\n62.83\r\n632.24\r\n3141592.65', '', '', '', '2007-08-14 11:18:18', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1321, 'Knight Moves', 'A friend of you is doing research on the Traveling Knight Problem (TKP) where you are to find the shortest closed tour of knight moves that visits each square of a given set of n squares on a chessboard exactly once. He thinks that the most difficult part of the problem is determining the smallest number of knight moves between two given squares and that, once you have accomplished this, finding the tour would be easy.\r\nOf course you know that it is vice versa. So you offer him to write a program that solves the "difficult" part. \r\nYour job is to write a program that takes two squares a and b as input and then determines the number of knight moves on a shortest route from a to b.', 'The input file will contain one or more test cases. Each test case consists of one line containing two squares separated by one space. A square is a string consisting of a letter (a-h) representing the column and a digit (1-8) representing the row on the chessboard.', 'For each test case, print one line saying "To get from xx to yy takes n knight moves.".', 'd:\\oj\\data\\1321', 'd:\\oj\\data\\1321', 'e2 e4\r\na1 b2\r\nb2 c3\r\na1 h8\r\na1 h7\r\nh8 a1\r\nb1 c3\r\nf6 f6', 'To get from e2 to e4 takes 2 knight moves.\r\nTo get from a1 to b2 takes 4 knight moves.\r\nTo get from b2 to c3 takes 2 knight moves.\r\nTo get from a1 to h8 takes 6 knight moves.\r\nTo get from a1 to h7 takes 5 knight moves.\r\nTo get from h8 to a1 takes 6 knight moves.\r\nTo get from b1 to c3 takes 1 knight moves.\r\nTo get from f6 to f6 takes 0 knight moves.', '', '', '', '2007-08-14 11:20:41', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1322, 'Rank of Tetris', '自从Lele开发了Rating系统，他的Tetris事业更是如虎添翼，不久他遍把这个游戏推向了全球。\r\n\r\n为了更好的符合那些爱好者的喜好，Lele又想了一个新点子：他将制作一个全球Tetris高手排行榜，定时更新，名堂要比福布斯富豪榜还响。关于如何排名，这个不用说都知道是根据Rating从高到低来排，如果两个人具有相同的Rating，那就按这几个人的RP从高到低来排。\r\n\r\n终于，Lele要开始行动了，对N个人进行排名。为了方便起见，每个人都已经被编号，分别从0到N-1,并且编号越大，RP就越高。\r\n同时Lele从狗仔队里取得一些（M个）关于Rating的信息。这些信息可能有三种情况，分别是"A > B","A = B","A < B"，分别表示A的Rating高于B,等于B,小于B。\r\n\r\n现在Lele并不是让你来帮他制作这个高手榜，他只是想知道，根据这些信息是否能够确定出这个高手榜，是的话就输出"OK"。否则就请你判断出错的原因，到底是因为信息不完全（输出&quot;UNCERTAIN"），还是因为这些信息中包含冲突（输出"CONFLICT"）。\r\n注意，如果信息中同时包含冲突且信息不完全，就输出"CONFLICT"。', '本题目包含多组测试，请处理到文件结束。\r\n每组测试第一行包含两个整数N,M(0<=N<=10000,0<=M<=20000),分别表示要排名的人数以及得到的关系数。\r\n接下来有M行，分别表示这些关系', '对于每组测试，在一行里按题目要求输出', 'd:\\oj\\data\\1322', 'd:\\oj\\data\\1322', '3 3\r\n0 > 1\r\n1 < 2\r\n0 > 2\r\n4 4\r\n1 = 2\r\n1 > 3\r\n2 > 0\r\n0 > 1\r\n3 3\r\n1 > 0\r\n1 > 2\r\n2 < 1', 'OK\r\nCONFLICT\r\nUNCERTAIN', '', 'HUD', '', '2007-08-14 11:21:20', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1323, 'WTommy''s Trouble', 'As the captain, WTommy often has to inform all the TJU ACM team members of something important. But it will cost much time to inform all the members one by one. So WTommy chooses some people to inform, then he lets them inform all the people they know, and these informed people will inform more people. At last all the people will be informed. \r\n\r\nGiven the time cost to inform each person at the beginning, WTommy wants to find the minimum time he has to spend, so that at last all the people will be informed. Because the number of people can be as large as ten thousand, (eh... Maybe all the students in the university will join the ACM team? ) WTommy turns to you for help. \r\n\r\nPlease note it''s possible that A knows B but B doesn''t know A.', 'The first line of each test case contains two integers N and M, indicating the number of people and the number of relationships between them. The second line contains N numbers indicating the time cost to inform each people. Then M lines followed, each contains two numbers Ai and Bi, indicating that Ai knows Bi. \r\n\r\nYou can assume that 1 ≤ N ≤ 10000, 0 ≤ M ≤ 200000. The time costs for informing each people will be positive and no more than 10000. All the people are numbered from 1 to N. \r\n\r\nThe input is terminated by a line with N = M = 0.', 'Output one line for each test case, indicating the minimum time WTommy has to spend.', 'd:\\oj\\data\\1323', 'd:\\oj\\data\\1323', '4 3\r\n30 20 10 40\r\n1 2\r\n2 1\r\n2 3\r\n0 0', '60', 'For the sample input, WTommy should inform two members, No.2 and No.4, which costs 20 + 40 = 60.', 'TJU.Roba', '', '2007-08-14 11:23:20', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1324, 'The K-th City', 'Given a map of your country, there are N cities. The cities are labeled as 0, 1, ..., N - 1, and you live in city 0. Can you calculate out the K-th nearest city form you? If two or more cities have the same distance form you, you may assume that the city with smaller label is nearer than the city with bigger one.', 'There are several cases. The first line of each case is two integers N and M (1 ≤ N ≤ 200, 0 ≤ M ≤ 10000), which is the number of cities in your country and the total number of roads in your country. There are three integers in each of the following M lines, A, B, C, which descript one road. A and B are the two cities that connected by that road, and C is the length of that road (1 ≤ C ≤ 2000). The roads are of both directions, and no two roads connect two same cities. There is at least one path between any two cities. At the last line of each case is a single integer K (1 ≤ K < N).\r\nThe last case is followed by a line with a single 0.', 'Print the label of the K-th nearest city.', 'd:\\oj\\data\\1324', 'd:\\oj\\data\\1324', '4 3\r\n0 1 120\r\n0 2 180\r\n1 3 40\r\n3\r\n4 3\r\n0 1 120\r\n0 3 60\r\n3 2 30\r\n1\r\n0', '2\r\n3', '', 'TJU Team Selection Contest 3', '', '2007-08-14 11:24:25', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1325, 'Labyrinth', 'The northern part of the Pyramid contains a very large and complicated labyrinth. The labyrinth is divided into square blocks, each of them either filled by rock, or free. There is also a little hook on the floor in the center of every free block. The ACM have found that two of the hooks must be connected by a rope that runs through the hooks in every block on the path between the connected ones. When the rope is fastened, a secret door opens. The problem is that we do not know which hooks to connect. That means also that the neccessary length of the rope is unknown. Your task is to determine the maximum length of the rope we could need for a given labyrinth.', 'The input consists of T test cases. The number of them (T) is given on the first line of the input. Each test case begins with a line containing two integers C and R (3 ≤ C, R ≤ 1000) indicating the number of columns and rows. Then exactly R lines follow, each containing C characters. These characters specify the labyrinth. Each of them is either a hash mark (#) or a period (.). Hash marks represent rocks, periods are free blocks. It is possible to walk between neighbouring blocks only, where neighbouring blocks are blocks sharing a common side. We cannot walk diagonally and we cannot step out of the labyrinth. \r\n\r\nThe labyrinth is designed in such a way that there is exactly one path between any two free blocks. Consequently, if we find the proper hooks to connect, it is easy to find the right path connecting them.', 'Your program must print exactly one line of output for each test case. The line must contain the sentence "Maximum rope length is X." where Xis the length of the longest path between any two free blocks, measured in blocks.', 'd:\\oj\\data\\1325', 'd:\\oj\\data\\1325', '2\r\n3 3\r\n###\r\n#.#\r\n###\r\n7 6\r\n#######\r\n#.#.###\r\n#.#.###\r\n#.#.#.#\r\n#.....#\r\n#######', 'Maximum rope length is 0.\r\nMaximum rope length is 8.', '', 'Central European 1999', '', '2011-06-23 07:03:21', 2000, 65536, 'N', NULL, 15, 60, 25, 17, 71, 14, 7, 30000, 106, ''),
(1326, 'Checking an Alibi', 'A crime has been comitted: a load of grain has been taken from the barn by one of FJ''s cows. FJ is trying to determine which of his C (1 <= C <= 100) cows is the culprit. Fortunately, a passing satellite took an image of his farm M (1 <= M <= 70000) seconds before the crime took place, giving the location of all of the cows. He wants to know which cows had time to get to the barn to steal the grain. \r\n\r\nFarmer John''s farm comprises F (1 <= F <= 500) fields numbered 1..F and connected by P (1 <= P <= 1,000) bidirectional paths whose traversal time is in the range 1..70000 seconds (cows walk very slowly). Field 1 contains the barn. It takes no time to travel within a field (switch paths). \r\n\r\nGiven the layout of Farmer John''s farm and the location of each cow when the satellite flew over, determine set of cows who could be guilty. \r\n\r\nNOTE: Do not declare a variable named exactly ''time''. This will reference the system call and never give you the results you really want.', '* Line 1: Four space-separated integers: F, P, C, and M \r\n\r\n* Lines 2..P+1: Three space-separated integers describing a path: F1,F2, and T. The path connects F1 and F2 and requires T seconds to traverse. \r\n\r\n* Lines P+2..P+C+1: One integer per line, the location of a cow. The first line gives the field number of cow 1, the second of cow 2, etc.', '* Line 1: A single integer N, the number of cows that could be guilty of the crime. \r\n\r\n* Lines 2..N+1: A single cow number on each line that is one of the cows that could be guilty of the crime. The list must be in ascending order.', 'd:\\oj\\data\\1326', 'd:\\oj\\data\\1326', '7 6 5 8\r\n1 4 2\r\n1 2 1\r\n2 3 6\r\n3 5 5\r\n5 4 6\r\n1 7 9\r\n1\r\n4\r\n5\r\n3\r\n7', '4\r\n1\r\n2\r\n3\r\n4', 'Any cow except cow 5 could have done it. Cow 5 would take 9 seconds to get to the barn.', 'USACO 2005', '', '2008-04-22 20:16:49', 1000, 65536, 'N', NULL, 7, 8, 87, 1, 17, 5, 5, 30000, 34, ''),
(1327, 'WordStack', 'As editor of a small-town newspaper, you know that a substantial number of your readers enjoy the daily word games that you publish, but that some are getting tired of the conventional crossword puzzles and word jumbles that you have been buying for years. You decide to try your hand at devising a new puzzle of your own. \r\nGiven a collection of N words, find an arrangement of the words that divides them among N lines, padding them with leading spaces to maximize the number of non-space characters that are the same as the character immediately above them on the preceding line. Your score for this game is that number.', 'Input data will consist of one or more test sets. \r\n\r\nThe first line of each set will be an integer N (1 ≤ N ≤ 10) giving the number of words in the test case. The following N lines will contain the words, one word per line. Each word will be made up of the characters ''a'' to ''z'' and will be between 1 and 10 characters long (inclusive). \r\n\r\nEnd of input will be indicated by a non-positive value for N.', 'Your program should output a single line containing the maximum possible score for this test case, printed with no leading or trailing spaces.', 'd:\\oj\\data\\1327', 'd:\\oj\\data\\1327', '5\r\nabc\r\nbcd\r\ncde\r\naaa\r\nbfcde\r\n0', '8', 'One possible arrangement yielding this score is: \r\n\r\naaa\r\nabc\r\n bcd\r\n  cde\r\nbfcde', 'Mid Atlantic North America 2005', '', '2007-08-14 11:29:00', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 37, ''),
(1328, 'Scales', 'Farmer John has a balance for weighing the cows. He also has a set of N (1 <= N <= 1000) weights with known masses (all of which fit in 31 bits) for use on one side of the balance. He places a cow on one side of the balance and then adds weights to the other side until they balance. (FJ cannot put weights on the same side of the balance as the cow, because cows tend to kick weights in his face whenever they can.) The balance has a maximum mass rating and will break if FJ uses more than a certain total mass C (1 <= C < 2^30) on one side. \r\n\r\nThe weights have the curious property that when lined up from smallest to biggest, each weight (from the third one on) has at least as much mass as the previous two combined. \r\n\r\nFJ wants to determine the maximum mass that he can use his weights to measure exactly. Since the total mass must be no larger than C, he might not be able to put all the weights onto the scale. \r\n\r\nWrite a program that, given a list of weights and the maximum mass the balance can take, will determine the maximum legal mass that he can weigh exactly.', 'Line 1: Two space-separated positive integers, N and C. \r\n\r\nLines 2..N+1: Each line contains a single positive integer that is the mass of one weight. The masses are guaranteed to be in non-decreasing order.', 'Line 1: A single integer that is the largest mass that can be accurately and safely measured.', 'd:\\oj\\data\\1328', 'd:\\oj\\data\\1328', '3 15\r\n1\r\n10\r\n20', '11', 'Explanation of the sample: \r\n\r\nFJ has 3 weights, with masses of 1, 10, and 20 units. He can put at most 15 units on one side of his balance. \r\n\r\nThe 1 and 10 weights are used to measure 11. Any greater weight that can be formed from the weights will break the balance.', 'USACO 2005 December Silver', '', '2010-05-22 10:52:04', 1000, 65536, 'N', NULL, 13, 55, 24, 41, 79, 16, 11, 30000, 49, '');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1329, 'Gone Fishing', 'John is going on a fishing trip. He has h hours available (1 <= h <= 16), and there are n lakes in the area (2 <= n <= 25) all reachable along a single, one-way road. John starts at lake 1, but he can finish at any lake he wants. He can only travel from one lake to the next one, but he does not have to stop at any lake unless he wishes to. For each i = 1,...,n - 1, the number of 5-minute intervals it takes to travel from lake i to lake i + 1 is denoted ti (0 < ti <=192). For example, t3 = 4 means that it takes 20 minutes to travel from lake 3 to lake 4. To help plan his fishing trip, John has gathered some information about the lakes. For each lake i, the number of fish expected to be caught in the initial 5 minutes, denoted fi( fi >= 0 ), is known. Each 5 minutes of fishing decreases the number of fish expected to be caught in the next 5-minute interval by a constant rate of di (di >= 0). If the number of fish expected to be caught in an interval is less than or equal to di , there will be no more fish left in the lake in the next interval. To simplify the planning, John assumes that no one else will be fishing at the lakes to affect the number of fish he expects to catch. \r\nWrite a program to help John plan his fishing trip to maximize the number of fish expected to be caught. The number of minutes spent at each lake must be a multiple of 5.', 'You will be given a number of cases in the input. Each case starts with a line containing n. This is followed by a line containing h. Next, there is a line of n integers specifying fi (1 <= i <=n), then a line of n integers di (1 <=i <=n), and finally, a line of n - 1 integers ti (1 <=i <=n - 1). Input is terminated by a case in which n = 0.', 'For each test case, print the number of minutes spent at each lake, separated by commas, for the plan achieving the maximum number of fish expected to be caught (you should print the entire plan on one line even if it exceeds 80 characters). This is followed by a line containing the number of fish expected. \r\nIf multiple plans exist, choose the one that spends as long as possible at lake 1, even if no fish are expected to be caught in some intervals. If there is still a tie, choose the one that spends as long as possible at lake 2, and so on. Insert a blank line between cases.', 'd:\\oj\\data\\1329', 'd:\\oj\\data\\1329', '2 \r\n1 \r\n10 1 \r\n2 5 \r\n2 \r\n4 \r\n4 \r\n10 15 20 17 \r\n0 3 4 3 \r\n1 2 3 \r\n4 \r\n4 \r\n10 15 50 30 \r\n0 3 4 3 \r\n1 2 3 \r\n0', '45, 5 \r\nNumber of fish expected: 31 \r\n\r\n240, 0, 0, 0 \r\nNumber of fish expected: 480 \r\n\r\n115, 10, 50, 35 \r\nNumber of fish expected: 724', 'Please be careful!', 'East Central North America 1999', '', '2007-08-14 11:35:31', 2000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1330, '正方形', '在平面 N*N ( N <= 1000 ) 的格子上有一些障碍物\r\n要求找到一个最大的正方形，它的内部不包含障碍物', '输入包含多组数据\r\n每组数据第一行两个正整数，以空格隔开，第一个数 N ( 1 <= N <= 1000 ) 表示格子的大小N,第二个数 M 表示在 N*N 里障碍物的个数\r\n下面的 M 行分别描述每个障碍物位置，每一行两个数 i j (1 <= i,j <= N) 以空格隔开，分别表示障碍物位于第i行，第j列', '每组数据输出一行，为最大正方形的边长', 'd:\\oj\\data\\1330', 'd:\\oj\\data\\1330', '5 4\r\n1 2\r\n3 4\r\n5 2\r\n4 5', '3', '', 'SWUST.Flying', '', '2012-02-01 19:27:04', 1000, 65536, 'N', NULL, 64, 155, 41, 15, 38, 31, 25, 30000, 462, ''),
(1331, 'Agri-Net', 'Farmer John has been elected mayor of his town! One of his campaign promises was to bring internet connectivity to all farms in the area. He needs your help, of course. \r\nFarmer John ordered a high speed connection for his farm and is going to share his connectivity with the other farmers. To minimize cost, he wants to lay the minimum amount of optical fiber to connect his farm to all the other farms. \r\nGiven a list of how much fiber it takes to connect each pair of farms, you must find the minimum amount of fiber needed to connect them all together. Each farm must connect to some other farm such that a packet can flow from any one farm to any other farm. \r\nThe distance between any two farms will not exceed 100,000.', 'The input includes several cases. For each case, the first line contains the number of farms, N (3 <= N <= 100). The following lines contain the N x N conectivity matrix, where each element shows the distance from on farm to another. Logically, they are N lines of N space-separated integers. Physically, they are limited in length to 80 characters, so some lines continue onto others. Of course, the diagonal will be 0, since the distance from farm i to itself is not interesting for this problem.', 'For each case, output a single integer length that is the sum of the minimum length of fiber required to connect the entire set of farms.', 'd:\\oj\\data\\1331', 'd:\\oj\\data\\1331', '4\r\n0 4 9 21\r\n4 0 8 17\r\n9 8 0 16\r\n21 17 16 0', '28', '', 'USACO 102', '', '2007-08-16 15:19:10', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1332, 'Ultra-QuickSort', 'In this problem, you have to analyze a particular sorting algorithm. The algorithm processes a sequence of n distinct integers by swapping two adjacent sequence elements until the sequence is sorted in ascending order. For the input sequence \r\n9 1 0 5 4 , \r\nUltra-QuickSort produces the output \r\n0 1 4 5 9 . \r\nYour task is to determine how many swap operations Ultra-QuickSort needs to perform in order to sort a given input sequence.', 'The input contains several test cases. Every test case begins with a line that contains a single integer n < 500,000 -- the length of the input sequence. Each of the the following n lines contains a single integer 0 ≤ a[i] ≤ 999,999,999, the i-th input sequence element. Input is terminated by a sequence of length n = 0. This sequence must not be processed.', 'For every input sequence, your program prints a single line containing an integer number op, the minimum number of swap operations necessary to sort the given input sequence.', 'd:\\oj\\data\\1332', 'd:\\oj\\data\\1332', '5\r\n9\r\n1\r\n0\r\n5\r\n4\r\n3\r\n1\r\n2\r\n3\r\n0', '6\r\n0', '', '', '', '2007-08-17 09:08:15', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1333, 'Gamblers', 'A group of n gamblers decide to play a game: \r\n\r\nAt the beginning of the game each of them will cover up his wager on the table and the assitant must make sure that there are no two gamblers have put the same amount. If one has no money left, one may borrow some chips and his wager amount is considered to be negative. Assume that they all bet integer amount of money. \r\n\r\nThen when they unveil their wagers, the winner is the one who''s bet is exactly the same as the sum of that of 3 other gamblers. If there are more than one winners, the one with the largest bet wins. \r\n\r\nFor example, suppose Tom, Bill, John, Roger and Bush bet $2, $3, $5, $7 and $12, respectively. Then the winner is Bush with $12 since $2 + $3 + $7 = $12 and it''s the largest bet.', 'Wagers of several groups of gamblers, each consisting of a line containing an integer 1 <= n <= 1000 indicating the number of gamblers in a group, followed by their amount of wagers, one per line. Each wager is a distinct integer between -536870912 and +536870911 inclusive. The last line of input contains 0.', 'For each group, a single line containing the wager amount of the winner, or a single line containing "no solution".', 'd:\\oj\\data\\1333', 'd:\\oj\\data\\1333', '5\r\n2 \r\n3 \r\n5 \r\n7 \r\n12\r\n5\r\n2 \r\n16 \r\n64 \r\n256 \r\n1024\r\n0', '12\r\nno solution', '', '', '', '2007-08-17 09:09:15', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1334, 'Super Prime', 'In these days, skywind had thought a series of new problem. But he must keep these problem for the coming important contests such as "JiLin Provincial Collegiate Programming Contest" and "The 2007 ACM Asia Programming Contest Changchun Site Network Preliminary Contest". This time, he brings out a easy problem.\r\n\r\nSuperprime is such integer that all part of it from lowest digit is prime. For example, 9547 is a superprime because 7, 47, 547 and 9547 is all prime. Given a index i, your task is to find the i-th superprime. Noting that in this problem, 1 is considered as a prime, but 2 is NOT.', 'Each line of input is a integer i, that you should print the i-th superprime in each line. The maximal superprime in output is less than 10^9;', '', 'd:\\oj\\data\\1334', 'd:\\oj\\data\\1334', '1\r\n2\r\n212', '1\r\n3\r\n9547', '', 'swust.myler', '', '2010-09-03 16:18:06', 3000, 65536, 'N', NULL, 16, 39, 41, 15, 68, 8, 7, 30000, 74, ''),
(1335, 'How Many Ways', 'If we say a + x = b, we can easily get x from a and b. But when we change the plus sign into other operators, the problem becomes much harder.', 'Mutiple cases. In the format of a b op, where a and b are 32 bit signed integers and op can be one of &, | and ^ which are defined in the C language.', 'One number n on a single line, denoting the number of x satisfying a op x = b and x is a 32 bit signed integer.', 'd:\\oj\\data\\1335', 'd:\\oj\\data\\1335', '1 3 |\r\n1 3 ^\r\n3 1 &', '2\r\n1\r\n1073741824', 'For the first sample, only 2 and 3 satisfy the equation, so the answer is 2.\r\n\r\nFor the second sample, only 2 satisfies the equation, so the answer is 1.\r\n\r\nFor the third sample, there are as many as 1073741824 x satisfying the equation, such as 1, 5, -3, etc.', 'SWUST.Flying', '', '2007-08-20 17:34:55', 1000, 65536, 'N', NULL, 5, 12, 42, 5, 62, 4, 3, 30000, 41, ''),
(1336, 'Cows(凸包)', 'Your friend to the south is interested in building fences and turning plowshares into swords. In order to help with his overseas adventure, they are forced to save money on buying fence posts by using trees as fence posts wherever possible. Given the locations of some trees, you are to help farmers try to create the largest pasture that is possible. Not all the trees will need to be used.\r\n\r\nHowever, because you will oversee the construction of the pasture yourself, all the farmers want to know is how many cows they can put in the pasture. It is well known that a cow needs at least 50 square metres of pasture to survive.', 'The first line of input contains a single integer, n (1 ≤ n ≤ 10000), containing the number of trees that grow on the available land. The next n lines contain the integer coordinates of each tree given as two integers x and y separated by one space (where -1000 ≤ x, y ≤ 1000). The integer coordinates correlate exactly to distance in metres (e.g., the distance between coordinate (10; 11) and (11; 11) is one metre).', 'You are to output a single integer value, the number of cows that can survive on the largest \r\nfield you can construct using the available trees.', 'd:\\oj\\data\\1336', 'd:\\oj\\data\\1336', '4\r\n0 0\r\n0 101\r\n75 0\r\n75 101', '151', '', 'modified by myler', '', '2010-12-10 19:01:02', 1000, 65536, 'N', NULL, 3, 20, 15, 13, 81, 4, 3, 30000, 49, ''),
(1337, '最优分解方案', '把正整数 n 分解成若干个互不相等的自然数的和，且使这些自然数的乘积最大。 \r\n请你编写一个算法，由键盘输入 n，求满足条件的分解方案。', '输入文件有若干组数据组成，每一行是一个正整数 n ,保证n在int范围以内.并且n>=3.', '对每个输入数据，输出两行 \r\n第一行是一个整数 k，表示把 n 分解成 k 个整数，接下来是 k 个整数，相邻两数用空格隔开 \r\n第二行是这 k 个数的乘积.', 'd:\\oj\\data\\1337', 'd:\\oj\\data\\1337', '10\r\n3', '3 2 3 5\r\n30\r\n2 1 2\r\n2', '', 'NJU.Butterfly', '', '2011-11-29 20:34:38', 10000, 65536, 'N', NULL, 10, 156, 6, 36, 86, 38, 6, 4000, 136, ''),
(1338, '食堂吃饭问题', '信息学院ACM集训队的队员们利用暑假的时间,去SCU参加了他们的假期集训.在集训期间队员们遇到了很多麻烦的问题,其中一个问题就是在SCU的食堂吃饭的问题.由于只有一张饭卡,队员们就把钱都打到了卡上,然后各自记录自己当天用的钱和冲到卡上的钱,队员们都觉得每个人都去记帐太麻烦了,所以就把这个事情推给了myler(他脾气最好,呵呵).每个队员都会把自己每天用的钱和冲的钱告诉给myler,由于走的时候要清算,所以你的问题就是帮助myler计算最后每个队员还剩下多少钱.', '有多组测试数据,一直处理到文件结束.\r\n\r\n每个测试数据:\r\n第一行:2个正整数N,D( N < 1000 , D < 1000 ).分别代表队员的人数和在SCU集训的天数(假定每天都在食堂吃饭);\r\n第i( 2 <= i<= N+1)行:一个仅由字母和数字组成的长度不超过20的字符串，代表第i-1名队员的Nick Name;\r\n第j( N+2 <= j <= N+D+1)行:每行N个整数,分别代表第1-N名队员每天冲的钱和用的钱的总和.', '对于每组测试数据按照队员们最后剩余的钱从多到少依次输出N+1行(如果剩余钱相同先输出编号小的队员).\r\n第1-N行:每行先输出队员的Nick Name,然后再输出剩余的钱,中间用一个空格分开.\r\n第N+1行:空行.', 'd:\\oj\\data\\1338', 'd:\\oj\\data\\1338', '7 5\r\nLarrouse\r\nMyler\r\nFlying\r\nafei\r\nDreamone\r\nTrisun\r\nTax\r\n30 30 30 30 30 30 30\r\n-10 -9 -9 -9 -10 -10 -8\r\n-12 0 -9 -9 -9 -8 -11\r\n12 -9 -9 -9 -9 15 12\r\n-8 -8 7 8 10 -5 12', 'Tax 35\r\nTrisun 22\r\nLarrouse 12\r\nDreamone 12\r\nafei 11\r\nFlying 10\r\nMyler 4', '', 'SWUST.Larrouse', '', '2012-04-02 12:17:25', 2000, 65536, 'N', NULL, 101, 552, 18, 406, 84, 104, 75, 30000, 357, ''),
(1339, '实况足球', '大家都知道,在5月底结束的2007ESWC中国区总决赛上，我校信息学院通信0404班的刘超同学成功夺得《实况足球》项目冠军，并将去法国与来自全球50多个国家的电子竞技选手进行最后的角逐,ACM集训队的队员们也因此重新对实况产生了浓厚的兴趣.\r\n\r\n搞ACM是一件很辛苦的事，所以每个队员都有自己的放松方式，Myler和Larrouse，就喜欢去玩PS（虽然他们和超哥比起来很菜），和很多PS店不同的是老板是按局来收钱，每局x(x为正整数)；\r\n\r\n由于Myler和Larrouse玩的太投入，已经不知道自己玩了多少局了！\r\n\r\n幸运的是他们知道自己的得分分别用整数a,b表示（一场比赛获胜的一方得3分，输的一方得0分，平局双方各得1分），但是不幸的是得分系统有问题，显示的得分有可能根本不可能形成。如果比分正确输出最少要负多少钱，如果比分不正确输出-1。', '多组测试数据\r\n每行3个数据 a,b,x', '如果分数正确输出最少要负多少钱，如果比分不正确输出-1。', 'd:\\oj\\data\\1339', 'd:\\oj\\data\\1339', '1 1 1\r\n-1 1 1', '1\r\n-1', '', 'SWUST.Flying', '', '2012-05-23 19:57:09', 1000, 65536, 'N', NULL, 94, 353, 27, 251, 75, 104, 84, 30000, 446, ''),
(1340, 'Bale Figures', 'Cows like to build shapes out of hay bales. Each new shape\r\nis constructed from N (1 <= N <= 25,000) 1 x 1 x 1 cubic bales.\r\n\r\nBale 1 lies on the floor. After placing it, each successive bale from\r\n2 through N is attached to the shape by placing the new bale in the\r\nproper relative position to one of the bales already placed.  For\r\ninstance, imagine the following figure:\r\n\r\n     Bale 1 - on the floor\r\n     Bale 2 - RIGHT Bale 1 (to Bale 1''s right)\r\n     Bale 3 - FRONT Bale 2 (in front of Bale 2) \r\n     Bale 4 - FRONT Bale 3\r\n\r\nThis results in an (inverted) L-shape:\r\n\r\n   <img src=images\\1340_1.jpg></img>\r\n\r\nAdding another bale:\r\n\r\n    Bale 5 - OVER Bale 1\r\n\r\nadds height to the shape:\r\n\r\n<img src=images\\1340_2.jpg></img>                          \r\n\r\nBut adding another directive:\r\n\r\n    Bale 6 - BACK Bale 4\r\n\r\nresults in an invalid shape, since bales 3 and 6 would overlap.\r\n\r\nGiven N bales and placements described as above, output the exposed\r\nsurface area of the solid figure if the shape is valid.  A face is\r\nconsidered exposed if it is not touched by any face of any other bale\r\nand does not touch the floor (i.e., is not the bottom of a cube on\r\nthe floor).  Output -1 if the shape is invalid.  No bale will be\r\nplaced farther than 25 bale-widths from the first bale.  No bale\r\nwill be placed below the floor level.', '* Line 1: A single integer, N\r\n\r\n* Lines 2..N: These lines describe the placement of bales 2..N in the\r\n        form "j X". Line 2 describes bale 2; line 3 describes bale 3;\r\n        and so on. The letter "X" is one of: "L" (left), "R" (right),\r\n        "F" (front), "B" (back), "O" (over), or "U" (under). The bales\r\n        can be glued and require no underlying support if extended\r\n        over an empty space.', '* Line 1: The exposed surface area of the resulting solid.  If the\r\n        solid is invalid, output "-1".', 'd:\\oj\\data\\1340', 'd:\\oj\\data\\1340', '5\r\n1 R\r\n2 F\r\n3 F\r\n1 O', '18', 'On a per-bale basis:\r\nBale 1: 3 faces exposed\r\nBale 2: 3 faces exposed\r\nBale 3: 3 faces exposed\r\nBale 4: 4 faces exposed\r\nBale 5: 5 faces exposed', 'USACO 2002', '', '2007-08-21 20:50:03', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 31, ''),
(1341, 'Jumping Cows', 'Farmer John''s cows would like to jump over the moon, just like the\r\ncows in their favorite nursery rhyme.  Unfortunately, cows can not\r\njump.\r\n\r\nThe local witch doctor has mixed up P (1 <= P <= 150,000) potions to aid\r\nthe cows in their quest to jump.  These potions must be administered\r\nexactly in the order they were created, though some may be skipped.\r\n\r\nEach potion has a ''strength'' (1 <= strength <= 500) that enhances the cows''\r\njumping ability. Taking a potion during an odd time step increases the\r\ncows'' jump; taking a potion during an even time step decreases the jump. \r\nBefore taking any potions the cows'' jumping ability is, of course, 0.\r\n\r\nNo potion can be taken twice, and once the cow has begun taking\r\npotions, one potion must be taken during each time step, starting at\r\ntime 1. One or more potions may be skipped in each turn.\r\n\r\nDetermine which potions to take to get the highest jump.', '* Line 1: A single integer, P\r\n\r\n* Lines 2..P+1: Each line contains a single integer that is the\r\n        strength of a potion. Line 2 gives the strength of the first\r\n        potion; line 3 gives the strength of the second potion; and so\r\n        on.', '* Line 1: A single integer that is the maximum possible jump.', 'd:\\oj\\data\\1341', 'd:\\oj\\data\\1341', '8\r\n7\r\n2\r\n1\r\n8\r\n4\r\n3\r\n5\r\n6', '17', 'Skipping the second potion (2), fifth potion (4), and 7th potion (5) yields a\r\nsequence of strengths: 7, 1, 8, 3, 6; and a jump of +7-1+8-3+6 = 17.', 'USACO 2002', '', '2011-11-11 10:53:31', 1000, 65536, 'N', NULL, 9, 17, 53, 8, 50, 9, 8, 30000, 55, ''),
(1342, 'Lost Cows', 'N (2 <= N <= 8,000) cows have unique brands in the range 1..N. In a\r\nspectacular display of poor judgment, they visited the neighborhood\r\n''watering hole'' and drank a few too many beers before dinner.  When\r\nit was time to line up for their evening meal, they did not line up\r\nin the required ascending numerical order of their brands.\r\n\r\nRegrettably, FJ does not have a way to sort them.  Furthermore, he''s\r\nnot very good at observing problems.  Instead of writing down each\r\ncow''s brand, he determined a rather silly statistic:  For each cow in\r\nline, he knows the number of cows that precede that cow in line that\r\ndo, in fact, have smaller brands than that cow.\r\n\r\nGiven this data, tell FJ the exact ordering of the cows.', '* Line 1: A single integer, N\r\n\r\n* Lines 2..N: These N-1 lines describe the number of cows that precede\r\n        a given cow in line and have brands smaller than that cow.  Of\r\n        course, no cows precede the first cow in line, so she is not\r\n        listed. Line 2 of the input describes the number of preceding\r\n        cows whose brands are smaller than the cow in slot #2; line 3\r\n        describes the number of preceding cows whose brands are\r\n        smaller than the cow in slot #3; and so on.', '* Lines 1..N: Each of the N lines of output tells the brand of a cow\r\n        in line.  Line #1 of the output tells the brand of the first\r\n        cow in line; line 2 tells the brand of the second cow; and so\r\n        on.', 'd:\\oj\\data\\1342', 'd:\\oj\\data\\1342', '5\r\n1\r\n2\r\n1\r\n0', '2\r\n4\r\n5\r\n3\r\n1', '', 'USACO 2002', '', '2012-06-09 22:51:56', 1000, 65536, 'N', NULL, 15, 19, 79, 4, 29, 12, 10, 30000, 99, ''),
(1343, 'Bovine Math Geniuses', 'Farmer John loves to help the cows further their mathematical skills.\r\nHe has promised them Hay-flavored ice cream if they can solve various\r\nmathematical problems.\r\n\r\nHe said to Bessie, "Choose a six digit integer, and tell me what it\r\nis. Then extract the middle four digits. Square them and discard\r\ndigits at the top until you have another number six digits or shorter.\r\nTell me the result."\r\n\r\nBessie, a mathematical genius in disguise, chose the six digit number\r\n655554. "Moo: 6 5 5 5 5 4", she said. She then extracted the middle\r\nfour digits:  5555 and squared them: 30858025. She kept only the\r\nbottom six digits:  858025. "Moo: 8 5 8 0 2 5", she replied to FJ.\r\n\r\nFJ nodded wisely, acknowledging Bessie''s prowess in arithmetic.  "Now\r\nkeep doing that until you encounter a number that repeats a number\r\nalready seen," he requested.\r\n\r\nBessie decided she''d better create a table to keep everything straight:\r\n\r\n<img src=images\\1343_1.jpg></img>\r\n\r\nBessie showed her table to FJ who smiled and produced a big dish of\r\ndelicious hay ice cream.  "That''s right, Bessie," he praised. "The\r\nchain repeats in a loop of four numbers, of which the first\r\nencountered was 217600.  The loop was detected after nine iterations."\r\n\r\nHelp the other cows win ice cream treats.  Given a six digit number,\r\ncalculate the total number of iterations to detect a loop, the first\r\nlooping number encountered, and also the length of the loop.\r\n\r\nFJ wondered if Bessie knew all the tricks. He had made a table to help\r\nher, but she never asked:\r\n\r\n<img src=images\\1343_2.jpg></img>\r\n\r\nwhose results would be: three iterations to detect a loop, looping on\r\n0, and a length of loop equal to 1.\r\n\r\nRemember: Your program can use no more than 16MB of memory.', '* Line 1: A single six digit integer that is the start of the sequence\r\n        testing.', '* Line 1: Three space-separated integers: the first number of a loop,\r\n        the length of the loop, and the minimum number of iterations\r\n        to detect the loop.', 'd:\\oj\\data\\1343', 'd:\\oj\\data\\1343', '655554', '217600 4 9', '', 'USACO 2002', '', '2008-04-27 15:21:44', 1000, 65536, 'N', NULL, 5, 9, 56, 4, 44, 6, 5, 30000, 29, ''),
(1344, '均分纸牌', '有 N 堆纸牌，编号分别为 1，2，…, N。每堆上有若干张，但纸牌总数必为 N 的倍数。可以在任一堆上取若于张纸牌，然后移动。\r\n　　移牌规则为：在编号为 1 堆上取的纸牌，只能移到编号为 2 的堆上；在编号为 N 的堆上取的纸牌，只能移到编号为 N-1 的堆上；其他堆上取的纸牌，可以移到相邻左边或右边的堆上。\r\n　　现在要求找出一种移动方法，用最少的移动次数使每堆上纸牌数都一样多。\r\n\r\n　　例如 N=4，4 堆纸牌数分别为：\r\n　　①　9　②　8　③　17　④　6\r\n　　移动3次可达到目的：\r\n　　从 ③ 取 4 张牌放到 ④ （9 8 13 10） -> 从 ③ 取 3 张牌放到 ②（9 11 10 10）-> 从 ② 取 1 张牌放到①（10 10 10 10）。', '键盘输入文件名。文件格式：\r\n　　N（N 堆纸牌，1 <= N <= 100）\r\n　　A1 A2 … An （N 堆纸牌，每堆纸牌初始数，l<= Ai <=10000）', '输出至屏幕。格式为：\r\n　　所有堆均达到相等时的最少移动次数。', 'd:\\oj\\data\\1344', 'd:\\oj\\data\\1344', '4\r\n9 8 17 6', '3', '', 'NOIP2002提高组', '', '2012-02-02 11:29:16', 1000, 65536, 'N', NULL, 23, 36, 64, 12, 38, 20, 20, 30000, 65, ''),
(1345, '字串变换', '已知有两个字串 A, B 及一组字串变换的规则（至多6个规则）:\r\n　　　　　A1 -> B1\r\n　　　　　A2 -> B2\r\n　　规则的含义为：在 A中的子串 A1 可以变换为 B1、A2 可以变换为 B2 …。\r\n　　　　例如：A＝&apos;abcd''　B＝&apos;xyz''\r\n　　变换规则为：\r\n　　　　‘abc’->‘xu’　‘ud’->‘y’　‘y’->‘yz’\r\n\r\n　　则此时，A 可以经过一系列的变换变为 B，其变换的过程为：\r\n　　　‘abcd’->‘xud’->‘xy’->‘xyz’\r\n\r\n　　共进行了三次变换，使得 A 变换为B。', '键盘输人文件名。文件格式如下：\r\n　　　A B\r\n　　　A1 B1 \r\n　　　A2 B2  |-> 变换规则\r\n　　　... ... / \r\n　　所有字符串长度的上限为 20。', '输出至屏幕。格式如下：\r\n　　若在 10 步（包含 10步）以内能将 A 变换为 B ，则输出最少的变换步数；否则输出&quot;NO ANSWER!"', 'd:\\oj\\data\\1345', 'd:\\oj\\data\\1345', 'abcd xyz\r\nabc xu\r\nud y\r\ny yz', '3', '', 'NOIP2002提高组', '', '2011-05-01 10:51:54', 1000, 65536, 'N', NULL, 7, 8, 88, 0, 0, 3, 3, 30000, 110, ''),
(1346, '自由落体', '在高为 H 的天花板上有 n 个小球，体积不计，位置分别为 0，1，2，…．n-1。在地面上有一个小车（长为 L，高为 K，距原点距离为 S1）。已知小球下落距离计算公式为 d＝1/2*g*(t^2)，其中 g=10，t 为下落时间。地面上的小车以速度 V 前进。\r\n\r\n　　如下图：\r\n<img src=images\\1346.jpg></img> \r\n\r\n小车与所有小球同时开始运动，当小球距小车的距离 <= 0.00001 时，即认为小球被小车接受（小球落到地面后不能被接受）。\r\n\r\n　　请你计算出小车能接受到多少个小球。', 'H，S1，V，L，K，n （l<=H，S1，V，L，K，n <=100000）', '小车能接受到的小球个数。', 'd:\\oj\\data\\1346', 'd:\\oj\\data\\1346', '5.0 9.0 5.0 2.5 1.8 5', '1', '', 'NOIP2002提高组', '', '2011-12-06 21:49:29', 1000, 65536, 'N', NULL, 5, 14, 36, 8, 67, 6, 4, 30000, 80, ''),
(1347, '数的计算', '我们要求找出具有下列性质数的个数(包含输入的自然数n):\r\n\r\n先输入一个自然数n(n<=1000),然后对此自然数按照如下方法进行处理:\r\n\r\n1.          不作任何处理;\r\n\r\n2.          在它的左边加上一个自然数,但该自然数不能超过原数的一半;\r\n\r\n3.          加上数后,继续按此规则进行处理,直到不能再加自然数为止.', '输入一个整数', '满足条件的个数', 'd:\\oj\\data\\1347', 'd:\\oj\\data\\1347', '6', '6', '满足条件的数为  6 (此部分不必输出)\r\n\r\n                          16\r\n\r\n                          26\r\n\r\n                         126\r\n\r\n                          36\r\n\r\n                         136', 'NOI 2001 普及组', '', '2011-06-07 22:10:50', 1000, 65536, 'N', NULL, 59, 113, 52, 53, 52, 51, 49, 30000, 277, ''),
(1348, '矩形覆盖', '在平面上有 n 个点（n <= 50），每个点用一对整数坐标表示。例如：当 n＝4 时，4个点的坐标分另为：p1（1，1），p2（2，2），p3（3，6），P4（0，7），见图一。\r\n<img src=images\\1348.jpg></img> \r\n这些点可以用 k 个矩形（1<=k<=4）全部覆盖，矩形的边平行于坐标轴。当 k=2 时，可用如图二的两个矩形 sl，s2 覆盖，s1，s2 面积和为 4。问题是当 n 个点坐标和 k 给出后，怎样才能使得覆盖所有点的 k 个矩形的面积之和为最小呢。约定：覆盖一个点的矩形面积为 0；覆盖平行于坐标轴直线上点的矩形面积也为0。各个矩形必须完全分开（边线与顶点也都不能重合）。', 'n k\r\nxl y1\r\nx2 y2\r\n... ...\r\nxn yn （0<=xi,yi<=500)', '格式为：\r\n一个整数，即满足条件的最小的矩形面积之和。', 'd:\\oj\\data\\1348', 'd:\\oj\\data\\1348', '4 2\r\n1 1\r\n2 2\r\n3 6\r\n0 7', '4', '', 'NOIP2002提高组', '', '2007-08-31 15:52:31', 1000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 59, ''),
(1349, '最大公约数和最小公倍数问题', '输入二个正整数x0,y0(2<=x0<100000,2<=y0<=1000000),求出满足下列条件的P,Q的个数\r\n\r\n条件:  1.P,A是正整数\r\n\r\n2.要求P,Q以x0为最大公约数,以y0为最小公倍数.\r\n\r\n试求:满足条件的所有可能的两个正整数的个数.', '输入二个正整数x0,y0', '满足条件的所有可能的两个正整数的个数.', 'd:\\oj\\data\\1349', 'd:\\oj\\data\\1349', '3 60', '4', '说明(不用输出)此时的  P  Q  分别为: \r\n\r\n    3   60\r\n\r\n15      12\r\n\r\n12      15\r\n\r\n60       3\r\n\r\n所以:满足条件的所有可能的两个正整数的个数共4种.', 'NOI 2001 普及组', '', '2011-06-07 22:50:55', 1000, 65536, 'N', NULL, 54, 167, 32, 109, 73, 50, 41, 30000, 348, ''),
(1350, '求先序排列', '给出一棵二叉树的中序与后序排列。求出它的先序排列。（约定树结点用不同的大写字母表示，长度<=8）。', '输入中序与后序排列', '输出先序排列', 'd:\\oj\\data\\1350', 'd:\\oj\\data\\1350', 'BADC  BDCA', 'ABCD', '', '', '', '2012-04-23 18:29:28', 1000, 65536, 'N', NULL, 24, 43, 56, 16, 43, 21, 21, 30000, 113, ''),
(1351, '装箱问题', '有一个箱子容量为V（正整数，0＜＝V＜＝20000），同时有n个物品（0＜n＜＝30＝，每个物品有一个体积（正整数）。\r\n\r\n要求n个物品中，任取若干个装入箱内，使箱子的剩余空间为最小。', '一个整数，表示箱子容量\r\n\r\n一个整数，表示有n个物品\r\n\r\n接下来n行，分别表示这n 个物品的各自体积', '一个整数，表示箱子剩余空间。', 'd:\\oj\\data\\1351', 'd:\\oj\\data\\1351', '24\r\n6\r\n8\r\n3\r\n12\r\n7\r\n9\r\n7', '0', '', 'NOI 2001 普及组', '', '2012-05-06 13:24:42', 1000, 65536, 'N', NULL, 58, 137, 42, 64, 58, 52, 46, 30000, 161, ''),
(1352, '货币兑换', '小Y最近在一家金券交易所工作。该金券交易所只发行交易两种金券：A纪念券（以下简称A券）和B纪念券（以下简称B券）。每个持有金券的顾客都有一个自己的帐户。金券的数目可以是一个实数。\r\n每天随着市场的起伏波动，两种金券都有自己当时的价值，即每一单位金券当天可以兑换的人民币数目。我们记录第K天中A券和B券的价值分别为AK和BK（元/单位金券）。\r\n为了方便顾客，金券交易所提供了一种非常方便的交易方式：比例交易法。比例交易法分为两个方面：\r\na)       卖出金券：顾客提供一个[0，100]内的实数OP作为卖出比例，其意义为：将OP%的A券和OP%的B券以当时的价值兑换为人民币；\r\nb)       买入金券：顾客支付IP元人民币，交易所将会兑换给用户总价值为 IP的金券，并且，满足提供给顾客的A券和B券的比例在第K天恰好为RateK；\r\n\r\n例如，假定接下来3天内的Ak、Bk、RateK的变化分别为： \r\n  <img src=images\\1352_1.jpg></img>\r\n假定在第一天时，用户手中有100元人民币但是没有任何金券。\r\n用户可以执行以下的操作：  \r\n<img src=images\\1352_2.jpg></img>\r\n注意到，同一天内可以进行多次操作。\r\n\r\n小Y是一个很有经济头脑的员工，通过较长时间的运作和行情测算，他已经知道了未来N天内的A券和B券的价值以及Rate。他还希望能够计算出来，如果开始时拥有S元钱，那么N天后最多能够获得多少元钱。', '第一行两个正整数N、S，分别表示小Y能预知的天数以及初始时拥有的钱数。\r\n接下来N行，第K行三个实数AK、BK、RateK，意义如题目中所述。\r\n测试数据设计使得精度误差不会超过10-7。\r\n对于40%的测试数据，满足N ≤ 10；\r\n对于60%的测试数据，满足N ≤ 1 000；\r\n对于100%的测试数据，满足N ≤ 100 000；\r\n对于100%的测试数据，满足：\r\n0 < AK ≤ 10；\r\n0 < BK ≤ 10；\r\n0 < RateK ≤ 100\r\nMaxProfit ≤ 109；', '只有一个实数MaxProfit，表示第N天的操作结束时能够获得的最大的金钱数目。答案保留2位小数。', 'd:\\oj\\data\\1352', 'd:\\oj\\data\\1352', '3 100\r\n1 1 1\r\n1 2 2\r\n2 2 3', '225.00', '<img src=images\\1352_4.jpg></img>\r\n第一天买入100元，此时有A券和B券各50单位。\r\n第三天卖出100%，此时可获得200元。\r\n\r\n输入文件可能很大，请采用快速的读入方式。\r\n必然存在一种最优的买卖方案满足：\r\nl       每次买进操作使用完所有的人民币；\r\nl       每次卖出操作卖出所有的金券。', 'NOI2007 Day1', '', '2012-04-06 16:25:15', 1000, 65536, 'N', NULL, 8, 23, 35, 5, 83, 2, 1, 30000, 113, ''),
(1353, '生成树计数', '最近，小栋在无向连通图的生成树个数计算方面有了惊人的进展，他发现：\r\n\r\n·n个结点的环的生成树个数为n。\r\n\r\n·n个结点的完全图的生成树个数为n^(n-2)。\r\n\r\n这两个发现让小栋欣喜若狂，由此更加坚定了他继续计算生成树个数的想法，他要计算出各种各样图的生成树数目。\r\n\r\n一天，小栋和同学聚会，大家围坐在一张大圆桌周围。小栋看了看，马上想到了生成树问题。如果把每个同学看成一个结点，邻座（结点间距离为1）的同学间连一条边，就变成了一个环。可是，小栋对环的计数已经十分娴熟且不再感兴趣。于是，小栋又把图变了一下：不仅把邻座的同学之间连一条边，还把相隔一个座位（结点间距离为2）的同学之间也连一条边，将结点间有边直接相连的这两种情况统称为有边相连，如图1所示。\r\n<img src=images\\1353_1.jpg></img>\r\n小栋以前没有计算过这类图的生成树个数，但是，他想起了老师讲过的计算任意图的生成树个数的一种通用方法：构造一个n×n的矩阵A={aij}\r\n<img src=images\\1353_2.jpg></img>\r\n其中di表示结点i的度数。\r\n\r\n与图1相应的A矩阵如下所示。为了计算图1所对应的生成数的个数，只要去掉矩阵A的最后一行和最后一列，得到一个(n-1)×(n-1)的矩阵B，计算出矩阵B的行列式的值便可得到图1的生成树的个数。\r\n <img src=images\\1353_3.jpg></img>                                             \r\n所以生成树的个数为 。小栋发现利用通用方法，因计算过于复杂而很难算出来，而且用其他方法也难以找到更简便的公式进行计算。于是，他将图做了简化，从一个地方将圆桌断开，这样所有的同学形成了一条链，连接距离为1和距离为2的点。例如八个点的情形如下：\r\n<img src=images\\1353_4.jpg></img>\r\n这样生成树的总数就减少了很多。小栋不停的思考，一直到聚会结束，终于找到了一种快捷的方法计算出这个图的生成树个数。可是，如果把距离为3的点也连起来，小栋就不知道如何快捷计算了。现在，请你帮助小栋计算这类图的生成树的数目。', '输入文件中包含两个整数k, n，由一个空格分隔。k表示要将所有距离不超过k（含k）的结点连接起来，n表示有n个结点。', '输出文件输出一个整数，表示生成树的个数。由于答案可能比较大，所以你只要输出答案除65521的余数即可。', 'd:\\oj\\data\\1353', 'd:\\oj\\data\\1353', '3 5', '75', '样例对应的图如下：\r\n<img src=images\\1353_5.jpg></img>', 'NOI2007 Day2', '', '2007-08-21 22:00:34', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 154, ''),
(1354, '社交网络', '在社交网络（social network）的研究中，我们常常使用图论概念去解释一些社会现象。\r\n不妨看这样的一个问题。在一个社交圈子里有n个人，人与人之间有不同程度的关系。我们将这个关系网络对应到一个n个结点的无向图上，两个不同的人若互相认识，则在他们对应的结点之间连接一条无向边，并附上一个正数权值c，c越小，表示两个人之间的关系越密切。\r\n我们可以用对应结点之间的最短路长度来衡量两个人s和t之间的关系密切程度，注意到最短径上的其他结点为s和t的联系提供了某种方面上的便利，即这些结点对于s和t之间的联系有一定的重要程度。那么我们通过统计通过一个结点v的最短路径的数目来衡量该结点在社交网络中的重要程度，是有一定道理的。\r\n考虑到两个结点A和B之间可能会有多条最短路径。我们修改重要程度的定义如下：\r\n令Cs,t表示从s到t的不同的最短路的数目，Cs,t(v)表示经过v的从s到t的最短路的数目；则定义\r\n<img src=images\\1354_1.jpg></img>\r\n为结点v在社交网络中的重要程度。\r\n为了使I(v)和Cs,t(v)有意义，我们规定需要处理的社交网络都是连通的无向图，即任意两个结点之间都有一条有限长度的最短路径。\r\n\r\n现在给出这样一幅描述社交网络的加权无向图，请你求出每一个结点的重要程度。', '输入文件中第一行有两个整数，n和m，表示社交网络中结点和无向边的数目。在无向图中，我们将所有结点从1到n进行编号。\r\n接下来m行，每行用三个整数a, b, c(1<=c<=1000)描述一条连接结点a和b，权值为c的无向边。注意任意两个结点之间最多有一条无向边相连，无向图中也不会出现自环（即不存在一条无向边的两个端点是相同的结点）。\r\n\r\n50%的数据中：n≤ 10，m≤ 45\r\n100%的数据中：n≤ 100，m≤ 4 500。\r\n所有数据中保证给出的无向图连通，且任意两个结点之间的最短路径数目不超过1010。', '输出文件包括n行，每行一个实数，精确到小数点后3位。第i行的实数表示结点i在社交网络中的重要程度。', 'd:\\oj\\data\\1354', 'd:\\oj\\data\\1354', '4 4\r\n1 2 1\r\n2 3 1\r\n3 4 1\r\n4 1 1', '1.000\r\n1.000\r\n1.000\r\n1.000', '社交网络如下图所示。\r\n<img src=images\\1354_2.jpg></img>\r\n对于1号结点而言，只有2号到4号结点和4号到2号结点的最短路经过1号结点，而2号结点和4号结点之间的最短路又有2条。因而根据定义，1号结点的重要程度计算为。由于图的对称性，其他三个结点的重要程度也都是1。', 'NOI2007 Day1', '', '2011-06-03 13:01:32', 1000, 65536, 'N', NULL, 10, 19, 53, 8, 53, 7, 7, 30000, 306, ''),
(1355, '调兵遣将', '我军截获的情报显示，敌军正在集结兵力试图向我军重要的军械研究所发起进攻。由于我军正处于多线作战的状态，无法抽调大批兵力前去支援，指挥部决定通过有效的战前部署来提高胜率，减少伤亡和损失。\r\n该军械研究所的平面图可以看作是一个N*M的矩阵，每个1*1的格子都表示一个区域，每个区域只与它上下左右的四个区域相邻。每个区域的用途可分为以下3种之一：\r\n1．    该区域被用于军事研究（用字母’O’表示）；\r\n2．    该区域内驻扎有一个机械化中队（用’#’表示）；\r\n3．    该区域是空地（用’.’表示）。\r\n由于空间有限，任一个1*1的格子内都无法驻扎两队以上的机械化中队（包括两队），否则会大大降低战斗时的机动性。\r\n遗憾的是，由于战前估计不足，我军的防御部署显得十分分散，这很容易让敌军所擅长的偷袭战术得逞。为了确保万无一失，我军决定利用为数不多的防御部队以最少的移动步骤将所有重要研究区域都包围起来。所谓的“包围”即从该矩阵边界侵入的敌军找不到任意一条路，使得他们不遭受任何机械化中队的反抗就能到达某研究区域。\r\n由于军队内部的传令权限的限制，每个单位时间指挥部只能向所有中队中的一个中队下达指令（朝上/下/左/右移动1格）。由于时间紧迫，指挥部希望能够尽快完成部署，这个任务就交给你来完成。\r\n注意：为了确保不在研究区域发生战斗，最终部署计划不允许某个研究区域驻扎有军队。', '该题为提交答案型试题，所有输入数据010003/surround1.in~010003/surround10.in在考试开始前已被存入各位选手的试题目录下。\r\n对于每个数据：\r\n第一行包括2个整数N，M，接下来N行，每行包括M个字符（’.’, ’ O’或’#’）。', '针对给定的10个输入文件surround1.in~010003/surround10.in，你需要分别提交你的输出文件010003/surround1.out~sourround10.out。\r\n每个输出文件的第一行，包括你的答案所花费的时间T\r\n接下来T行，按顺序输出每条命令，每行包括4个整数x1, y1, x2, y2，表示将位于(x1,y1)的部队移向(x2,y2)。', 'd:\\oj\\data\\1355', 'd:\\oj\\data\\1355', '5 5\r\n..##.\r\n#...#\r\n#OOO#\r\n#..O#\r\n.###.', '1\r\n2 1 2 2', '', 'NOI2007 Day1', '', '2007-08-21 22:05:04', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 53, ''),
(1356, '项链工厂', 'T公司是一家专门生产彩色珠子项链的公司，其生产的项链设计新颖、款式多样、价格适中，广受青年人的喜爱。最近T公司打算推出一款项链自助生产系统，使用该系统顾客可以自行设计心目中的美丽项链。\r\n\r\n该项链自助生产系统包括硬件系统与软件系统，软件系统与用户进行交互并控制硬件系统，硬件系统接受软件系统的命令生产指定的项链。该系统的硬件系统已经完成，而软件系统尚未开发，T公司的人找到了正在参加全国信息学竞赛的你，你能帮助T公司编写一个软件模拟系统吗？\r\n\r\n一条项链包含N个珠子，每个珠子的颜色是1, 2, …, c中的一种。项链被固定在一个平板上，平板的某个位置被标记位置1，按顺时针方向其他位置被记为2,3,…,N。\r\n\r\n… …\r\n<img src=images\\1356_1.jpg></img>\r\n \r\n你将要编写的软件系统应支持如下命令：\r\n<img src=images\\1356.jpg></img>', '输入文件第一行包含两个整数N, c，分别表示项链包含的珠子数目以及颜色数目。第二行包含N个整数，x1, x2…, xn，表示从位置1到位置N的珠子的颜色， 1 ≤ xi ≤ c。第三行包含一个整数Q，表示命令数目。接下来的Q行每行一条命令，如上文所述。\r\n\r\n对于60%的数据，N ≤ 1 000，Q ≤ 1 000；\r\n\r\n对于100%的数据，N ≤ 500 000，Q ≤ 500 000，c ≤ 1 000。', '对于每一个C和CS命令，应输出一个整数代表相应的答案。', 'd:\\oj\\data\\1356', 'd:\\oj\\data\\1356', '5 3\r\n1 2 3 2 1\r\n4\r\nC\r\nR 2\r\nP 5 5 2\r\nCS 4 1', '4\r\n1', '', 'NOI2007 Day2', '', '2012-03-30 10:03:38', 1000, 65536, 'N', NULL, 0, 2, 0, 2, 100, 1, 0, 30000, 51, '');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1357, '追捕盗贼', '魔法国度Magic Land里最近出现了一个大盗Frank，他在Magic Land四处作案，专门窃取政府机关的机密文件（因而有人怀疑Frank是敌国派来的间谍）。为了捉住Frank，Magic Land的安全局重拳出击！\r\n\r\nMagic Land由N个城市组成，并且这N个城市又由恰好N-1条公路彼此连接起来，使得任意两个城市间都可以通过若干条公路互达。从数据结构的角度我们也可以说，这N个城市和N-1条公路形成了一棵树。\r\n\r\n例如，下图就是Magic Land的一个可能格局（4个城市用数字编号，3条公路用字母编号）：\r\n<img src=images\\1357.jpg></img>\r\n\r\n大盗Frank能够在公路上以任意速度移动。\r\n\r\n比方说，对于上图给出的格局，在0.00001秒钟内（或者任意短的一段时间内），Frank就可以从城市1经过城市2到达城市4，中间经过了两条公路。\r\n\r\n想要生擒Frank困难重重，所以安全局派出了经验丰富的警探，这些警探具有非凡的追捕才能：\r\n\r\n1.           只要有警探和Frank同处一个城市，那么就能够立刻察觉到Frank，并且将其逮捕。\r\n\r\n2.           虽然Frank可以在公路上以任意快的速度移动，但是如果有警探和Frank在同一条公路上相遇，那么警探也可以立刻察觉到Frank并将其逮捕。\r\n\r\n安全局完全不知道Frank躲在哪个城市，或者正在哪条公路上移动，所以需要制定一个周密的抓捕计划，计划由若干步骤组成。在每一步中，可以做如下几件事中的一个：\r\n\r\n1.           在某个城市空降一位警探。警探可以直接从指挥部空降到Magic Land的任意一个城市里。此操作记为“L x”，表示在编号为x的城市里空降一位警探。耗时1秒。\r\n\r\n2.           把留在某个城市里的一位警探直接召回指挥部。以备在以后的步骤中再度空降到某个城市里。此操作记为“B x”。表示把编号为x的城市里的一位警探召回指挥部。耗时1秒。\r\n\r\n3.           让待在城市x的一位警探沿着公路移动到城市y，此操作记为“M x y”。耗时1秒。当然，前提是城市x和城市y之间有公路。如果在警探移动的过程中，大盗Frank也在同一条公路上，那么警探就抓捕到了Frank。\r\n\r\n现在，由你来制定一套追捕计划，也就是给出若干个步骤，需要保证：无论大盗Frank一开始躲在哪儿，也无论Frank在整个过程中如何狡猾地移动（Frank大盗可能会窃取到追捕行动的计划书，所以他一定会想尽办法逃避），他一定会被缉拿归案。\r\n\r\n希望参与的警探越少越好，因为经验丰富的警探毕竟不多。\r\n\r\n例如对于前面所给的那个图示格局，一个可行的计划如下：\r\n1.           L 2 在城市2空降一位警探。注意这一步完成之后，城市2里不会有Frank，否则他将被捉住。\r\n\r\n2.           L 2 再在城市2空降一位警探。\r\n\r\n3.           M 2 1 让城市2的一位警探移动到城市1。注意城市2里还留有另一位警探。这一步完成之后，城市1里不会有Frank，公路A上也不会有Frank。也就是说，假如Frank还没有被逮捕，那么他只能是在城市3或城市4里，或者公路B或公路C上。\r\n\r\n4.           B 1 召回城市1的一位警探。注意虽然召回了这位警探，但是由于我们始终留了一位警探在城市2把守，所以Frank仍然不可能跑到城市1或者是公路A上。\r\n\r\n5.           L 3 在城市3空降一位警探。注意这一步可以空降在此之前被召回的那位警探。这一步完成之后，城市3里不会有Frank，否则他会被捉住。\r\n\r\n6.           M 3 2 让城市3里的一位警探移动到城市2。这一步完成之后，如果Frank还没有被捉住，那他只能是在公路C上或者城市4里。注意这一步之后，城市2里有两位警探。\r\n\r\n7.           M 2 4 让城市2里的一位警探移动到城市4。这一步完成之后，Frank一定会被捉住，除非他根本就没来Magic Land。\r\n\r\n这个计划总共需要2位警探的参与。可以证明：如果自始至终只有1名或者更少的警探参与，则Frank就会逍遥法外。\r\n\r\n你的任务很简单：对于一个输入的Magic Land的格局，计算S，也就是为了追捕Frank至少需要投入多少位警探，并且给出相应的追捕计划步骤。', '输入文件给出了Magic Land的格局。\r\n\r\n第一行一个整数N，代表有N个城市，城市的编号是1~N。\r\n\r\n接下来N-1行，每行有两个用空格分开的整数xi，yi，代表城市xi，yi之间有公路相连。保证1≤xi,yi≤N\r\n\r\n输入保证描述了一棵连通的N结点树，1≤N≤1 000。', '向输出文件输出你所给出的追捕计划。\r\n\r\n第一行请输出一个整数S，代表追捕计划需要多少位警探。\r\n\r\n第二行请输出一个整数T，代表追捕计划总共有多少步。\r\n\r\n接下来请输出T行，依次描述了追捕计划的每一步。每行必须是以下三种形式之一：\r\n\r\nl           “L x”，其中L是大写字母，接着是一个空格，再接着是整数x，代表在城市x空降一位警探。你必须保证1≤x≤N。\r\n\r\nl           “B x”，其中B是大写字母，接着是一个空格，再接着是整数x，代表召回城市x的一位警探。你必须保证1≤x≤N，且你的计划执行到这一步之前，城市x里面确实至少有一位警探。\r\n\r\nl           “M x y”，其中M是大写字母，接着是一个空格，再接着是整数x，再跟一个空格，最后一个是整数y。代表让城市x的一位警探沿着公路移动到城市y。你必须保证1≤x, y≤N，且你的计划执行到这一步之前，城市x里面确实至少有一位警探，且城市x, y之前确实有公路。\r\n\r\n必须保证输出的S确实等于追捕计划中所需要的警探数目。', 'd:\\oj\\data\\1357', 'd:\\oj\\data\\1357', '4\r\n1 2\r\n3 2\r\n2 4', '2\r\n7\r\nL 2\r\nL 2\r\nM 2 1\r\nB 1\r\nL 3\r\nM 3 2\r\nM 2 4', '如果输出的追捕计划不合法，或者整个追捕计划的步骤数T超过了20000，或者追捕计划结束之后，不能保证捉住Frank则不能AC.', 'NOI2007 Day2', '', '2012-06-04 10:39:45', 1000, 65536, 'N', NULL, 0, 1, 0, 1, 100, 1, 0, 30000, 61, ''),
(1358, 'Sum of Different Primes', 'A positive integer may be expressed as a sum of different prime numbers (primes), in one way or another. Given two positive integers n and k, you should count the number of ways to express n as a sum of k different primes. Here, two ways are considered to be the same if they sum up the same set of the primes. For example, 8 can be expressed as 3 + 5 and 5 + 3 but the are not distinguished.\r\n\r\nWhen n and k are 24 and 3 respectively, the answer is two because there are two sets {2, 3, 19} and {2, 5, 17} whose sums are equal to 24. There are not other sets of three primes that sum up to 24. For n = 24 and k = 2, the answer is three, because there are three sets {5, 19}, {7, 17} and {11, 13}. For n = 2 and k = 1, the answer is one, because there is only one set {2} whose sum is 2. For n = 1 and k = 1, the answer is zero. As 1 is not a prime, you shouldn’t count {1}. For n = 4 and k = 2, the answer is zero, because there are no sets of two different primes whose sums are 4.\r\n\r\nYour job is to write a program that reports the number of such ways for the given n and k.', 'The input is a sequence of datasets followed by a line containing two zeros separated by a space. A dataset is a line containing two positive integers n and k separated by a space. You may assume that n ≤ 1120 and k ≤ 14.', 'The output should be composed of lines, each corresponding to an input dataset. An output line should contain one non-negative integer indicating the number of the ways for n and k specified in the corresponding dataset. You may assume that it is less than 2^31.', 'd:\\oj\\data\\1358', 'd:\\oj\\data\\1358', '24 3 \r\n24 2 \r\n2 1 \r\n1 1 \r\n4 2 \r\n18 3 \r\n17 1 \r\n17 3 \r\n17 4 \r\n100 5 \r\n1000 10 \r\n1120 14\r\n0 0', '2 \r\n3 \r\n1 \r\n0 \r\n0 \r\n2 \r\n1 \r\n0 \r\n1 \r\n55 \r\n200102899 \r\n2079324314', '', 'Japan 2006 (modified by Larrouse)', '', '2012-08-08 20:20:48', 5000, 65536, 'N', NULL, 11, 11, 100, 0, 0, 7, 7, 30000, 101, ''),
(1359, 'How I Wonder What You Are', 'One of the questions children often ask is “How many stars are there in the sky?” Under ideal conditions, even with the naked eye, nearly eight thousands are observable in the northern hemisphere. With a decent telescope, you may find many more, but as the sight field will be limited, you may find much less at a time.\r\n\r\nChildren may ask the same questions to their parents on a planet of some solar system billions of light-years away from the Earth. Their telescope are similar to ours with circular sight fields, but alien kids have many eyes and ca look into different directions at a time through may telescopes.\r\n\r\nGiven a set of positions of stars, a set of telescopes and the directions the are looking to, your task is to count up how many stars can be seen through these telescopes.', 'The input consists of one or more datasets. The number of datasets is less than 50. Each dataset describes stars and the parameters of the telescopes used.\r\n\r\nThe first line of a dataset contains a positive integer n not exceeding 500, meaning the number of stars. Each of the n lines following it contains three decimal fractions, sx, sy, and sz. They give the position (sx, sy, sz) of the star described in Euclidean coordinates. You may assume &#8722;1000 ≤ sx ≤ 1000, &#8722;1000 ≤ sy ≤ 1000, &#8722;1000 ≤ sz ≤ 1000, and (sx, sy, sz) ≠ (0, 0, 0).\r\n\r\nThen comes a line containing a positive integer m not exceeding 50, meaning the number of telescopes. Each of the following m lines contains four decimal fractions, tx, ty, tz and ψ, describing a telescope.\r\n\r\nThe first three numbers represent the direction of the telescope. All the telescopes are at the origin of the coordinate system (0, 0, 0) (we ignore the size of the planet). The three numbers give the point (tx, ty, tz) which can be see in the center of the sight through the telescope. You may assume &#8722;1000 ≤ tx ≤ 1000, &#8722;1000 ≤ ty ≤ 1000, &#8722;1000 ≤ tz ≤ 1000, and (tx, ty, tz) ≠ (0, 0, 0).\r\n\r\nThe fourth number ψ (0 ≤ ψ ≤ π &#8260; 2) gives the angular radius, radians, of the sight field of the telescope. Let us define that θi,j is the angle between the direction of the i-th star and the center direction of the j-th telescope and ψj is the angular radius of the sight field of the j-th telescope. the i-th star is observable through the j-th telescope if and only if θi,j is less than ψj. You may assume that |θi,j &#8722; ψj| > 0.00000001 for all pairs of i and j.\r\n\r\n<img src=images\\1359.jpg></img>\r\n\r\nFigure 1: Direction and angular radius of a telescope\r\n\r\nThe end of the input is indicated with a line containing a single zero.', 'For each dataset, one line containing an integer meaning the number of stars observable through the telescope should be output. No other characters should be contained in the output. Note that stars that can be seen through more than one telescope should not be counted twice or more.', 'd:\\oj\\data\\1359', 'd:\\oj\\data\\1359', '3 \r\n100 0 500 \r\n-500.243 -200.1 -300.5 \r\n0 300 200 \r\n2 \r\n1 1 1 0.65 \r\n-1 0 0 1.57 \r\n3 \r\n1 0 0 \r\n0 1 0 \r\n0 0 1 \r\n4 \r\n1 -1 -1 0.9553 \r\n-1 1 -1 0.9554\r\n-1 -1 1 0.9553\r\n-1 1 -1 0.9554\r\n3 \r\n1 0 0 \r\n0 1 0 \r\n0 0 1 \r\n4 \r\n1 -1 -1 0.9553\r\n-1 1 -1 0.9553\r\n-1 -1 1 0.9553\r\n-1 1 -1 0.9553\r\n0', '2\r\n1\r\n0', '', 'Japan 2006', '', '2009-11-02 10:35:22', 2000, 65536, 'N', NULL, 3, 3, 100, 0, 0, 3, 3, 30000, 25, ''),
(1360, 'Ultra-QuickSort', 'In this problem, you have to analyze a particular sorting algorithm. The algorithm processes a sequence of n distinct integers by swapping two adjacent sequence elements until the sequence is sorted in ascending order. For the input sequence \r\n\r\n\r\n9 1 0 5 4 , \r\n\r\nUltra-QuickSort produces the output \r\n\r\n0 1 4 5 9 . \r\n\r\nYour task is to determine how many swap operations Ultra-QuickSort needs to perform in order to sort a given input sequence.', 'The input contains several test cases. Every test case begins with a line that contains a single integer n < 500,000 -- the length of the input sequence. Each of the the following n lines contains a single integer 0 ≤ a[i] ≤ 999,999,999, the i-th input sequence element. Input is terminated by a sequence of length n = 0. This sequence must not be processed.', 'For every input sequence, your program prints a single line containing an integer number op, the minimum number of swap operations necessary to sort the given input sequence.', 'd:\\oj\\data\\1360', 'd:\\oj\\data\\1360', '5\r\n9\r\n1\r\n0\r\n5\r\n4\r\n3\r\n1\r\n2\r\n3\r\n0', '6\r\n0', '', 'Waterloo local 2005.02.05 (modified by Larrouse)', '', '2011-03-22 10:01:10', 5000, 65536, 'N', NULL, 10, 28, 36, 18, 75, 10, 6, 30000, 40, ''),
(1361, 'Dissatisfying Lift', 'There''s a building with M floors. The amounts of tenants of every floor are K1, K2, K3, ..., Km. One day all the tenants went home together and they took the same lift (suppose the lift was large enough). Because of some reason the lift could only stop on one floor and the tenants must go upstairs or downstairs to their houses. Every tenant went up N floors would make the dissatisfied degree rise N * a + 0.5 * N * (N - 1) degrees, and every tenant went down N floors would make the dissatisfied degree rise N * b + 0.5 * N * (N - 1) degrees. Your task is to tell which floor the lift should stop, in order to make the dissatisfied degree as low as possible.', 'The first line of the input contains a single integer T (1 <= T <= 20), the number of test cases. Then T cases follow. The first line of each test contains M (1 <= M <= 10000), a and b (0 <= a, b <= 100). The second line contains K1, K2, K3, ..., Km (0 <= Ki <= 20, i = 1..M).', 'For each test case, print a line containing a single integer, indicating which floor the lift should stop.', 'd:\\oj\\data\\1361', 'd:\\oj\\data\\1361', '1\r\n5 3 2\r\n1 1 1 1 1', '3', '', 'POJ Monthly (modified by Flying)', '', '2007-08-22 17:22:43', 1000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 44, ''),
(1362, '生日蛋糕(DFS)', '7月17日是Mr.W的生日，ACM-THU为此要制作一个体积为Nπ的M层生日蛋糕，每层都是一个圆柱体。 \r\n设从下往上数第i(1 <= i <= M)层蛋糕是半径为Ri, 高度为Hi的圆柱。当i < M时，要求Ri > Ri+1且Hi > Hi+1。 \r\n由于要在蛋糕上抹奶油，为尽可能节约经费，我们希望蛋糕外表面（最下一层的下底面除外）的面积Q最小。 \r\n令Q = Sπ \r\n请编程对给出的N和M，找出蛋糕的制作方案（适当的Ri和Hi的值），使S最小。 \r\n（除Q外，以上所有数据皆为正整数）', '有多种测试数据,每个数据有两行，第一行为N（N <= 10000），表示待制作的蛋糕的体积为Nπ；第二行为M(M <= 20)，表示蛋糕的层数为M。', '仅一行，是一个正整数S（若无解则S = 0）。', 'd:\\oj\\data\\1362', 'd:\\oj\\data\\1362', '100\r\n2', '68', '圆柱公式 \r\n体积V = πR2H \r\n侧面积A'' = 2πRH \r\n底面积A = πR2', 'Noi 99 modified by myler', '', '2011-04-27 21:10:37', 1000, 65536, 'N', NULL, 3, 5, 60, 0, 0, 2, 2, 30000, 68, ''),
(1363, 'Additive equations', 'We all understand that an integer set is a collection of distinct integers. Now the question is: given an integer set, can you find all its addtive equations? To explain what an additive equation is, let''s look at the following examples: \r\n    1+2=3 is an additive equation of the set {1,2,3}, since all the numbers that are summed up in the left-hand-side of the equation, namely 1 and 2, belong to the same set as their sum 3 does. We consider 1+2=3 and 2+1=3 the same equation, and will always output the numbers on the left-hand-side of the equation in ascending order. Therefore in this example, it is claimed that the set {1,2,3} has an unique additive equation 1+2=3.\r\n    It is not guaranteed that any integer set has its only additive equation. For example, the set {1,2,5} has no addtive equation and the set {1,2,3,5,6} has more than one additive equations such as 1+2=3, 1+2+3=6, etc. When the number of integers in a set gets large, it will eventually become impossible to find all the additive equations from the top of our minds -- unless you are John von Neumann maybe. So we need you to program the computer to solve this problem.', 'The input data consists of several test cases. \r\nEach test case will first contain an integer M (1<=M<=30), which is the number of integers in the set, and then is followed by M distinct positive integers in the same line.', 'For each test case, you are supposed to output all the additive equations of the set. These equations will be sorted according to their lengths first( i.e, the number of integer being summed), and then the equations with the same length will be sorted according to the numbers from left to right, just like the sample output shows. When there is no such equation, simply output "Can''t find any equations." in a line. Print a blank line after each test case.', 'd:\\oj\\data\\1363', 'd:\\oj\\data\\1363', '3 1 2 3\r\n3 1 2 5\r\n6 1 2 3 5 4 6', '1+2=3\r\n\r\nCan''t find any equations.\r\n\r\n1+2=3\r\n1+3=4\r\n1+4=5\r\n1+5=6\r\n2+3=5\r\n2+4=6\r\n1+2+3=6', '', 'Zhejiang University Local Contest 2002, Preliminary \r\nModified by myler', '', '2011-07-31 13:38:21', 1000, 65536, 'N', NULL, 15, 37, 41, 15, 60, 10, 10, 30000, 339, ''),
(1364, '三角形个数', '这是一个很简单的问题，如下图，在一个三角形中从同一个顶点添加若干条线后，编程计算出所得到的新图形中三角形的总个数。\r\n\r\n<img src=images\\1364.jpg></img>', '包括多组测试数据，每个测试数据输入一个正整数n( 0 <= n <= 10000 ).', '对应每输入的n值，输出对应的三角形的个数.', 'd:\\oj\\data\\1364', 'd:\\oj\\data\\1364', '0\r\n1\r\n2', '1\r\n3\r\n6', '', 'SWUST.Dreamone', '', '2012-05-24 21:53:08', 1000, 65536, 'N', NULL, 191, 496, 39, 301, 62, 199, 181, 30000, 238, ''),
(1365, '校园距离', '目前，西南科技大学有多个校区。每个校区有很多道路，有很多景色宜人的地方。有时，老师和学生要从一个地方到一个地方去， 在一个校区或在两个校区之间。他们想找到一条从出发地到目的地的最短距离。你能写个程序帮助他们吗？', '第一行输入一个整数C。C是测试的情况（0< C <=30）.第二行一个正整数N( 0< N <=100),表示道路的总数.紧接N行，每一行包含两个字符串， Si,，Ti，和一个整数Di,代表从Si到Ti的距离(0<= Di <=150)。最后一行有两个字符串，S 和 T，你得找出从S 到 T的最短的距离。地名是不超过120个小写字符的串（从‘a’到‘z’)。&lt;b>假设这里最多有100条直接连通两个地方的路。&lt;/b>', '输出包含C行，每一行对一种测试情况。对每一种测试情况，输出包含一个整数，假如S 到 T存在一条最短的路,输出从S到T的最短距离,否则输出“-1”.', 'd:\\oj\\data\\1365', 'd:\\oj\\data\\1365', '2\r\n2\r\njiuzhouriver liuchi 89\r\nliuchi liyuan 100\r\nliuchi jiuzhouriver \r\n3\r\nyouyongchi fengyuan 100\r\nqinshi meiyuan 100\r\nchaochang supermarkt 100\r\nmeiyuan youyongchi', '89\r\n-1', '', 'SWUST.Myler', '', '2012-07-21 21:26:02', 1000, 65536, 'N', NULL, 94, 512, 18, 187, 77, 71, 56, 30000, 1292, ''),
(1366, '座位调整', '百度办公区里到处摆放着各种各样的零食。百度人力资源部的调研发现，员工如果可以在自己喜欢的美食旁边工作，效率会大大提高。因此，百度决定进行一次员工座位的大调整。\r\n\r\n调整的方法如下：\r\n1．首先将办公区按照各种零食的摆放分成N个不同的区域（例如：可乐区，饼干区，牛奶区等等）；\r\n2．每个员工对不同的零食区域有不同的喜好程度（喜好程度是1~100的整数， 喜好程度越大表示该员工越希望被调整到相应的零食区域）；\r\n3．由于每个零食区域可以容纳的员工数量有限，人力资源部希望找到一个最优的调整方案使得总的喜好程度最大。', '第一行包含两个整数N，M(N>=1，M<=300)。分别表示N个区域和M个员工；\r\n第二行是N个整数构成的数列a，其中a[i]表示第i个区域可以容纳的员工数(1<=a[i]<=M，a[1]+a[2]+...+a[N]=M)；\r\n紧接着是一个M*N的矩阵P，P(i,j)表示第i个员工对第j个区域的喜好程度.', '对于每个测试数据，输出可以达到的最大的喜好程度。', 'd:\\oj\\data\\1366', 'd:\\oj\\data\\1366', '3 3\r\n1 1 1\r\n100 50 25\r\n100 50 25\r\n100 50 25', '175', '此数据只存在一种安排方法，三个员工分别安置在三个区域。最终的喜好程度为100+50+25=175', 'Astar2006 初赛', '', '2011-11-26 14:32:21', 1000, 65536, 'N', NULL, 2, 3, 67, 1, 33, 2, 2, 30000, 98, ''),
(1367, '蝈蝈计分', '蝈蝈小朋友刚刚学会了0~9这十个数字,也跟爸爸妈妈来参加百度每周进行的羽毛球活动。但是他还没有球拍高，于是大人们叫他记录分数。聪明的蝈蝈发现只要记录连续得分的情况就可以了，比如用“3 2 4”可以表示一方在这一局中连得三分后，输了两分，接着又连得到四分。可是，后来大人们发现蝈蝈只会用0~9这十个数字，所以当比赛选手得分超过9的时候，他会用一个X来表示10完成记分。但问题是，当记录为“X 3 5”的时候，蝈蝈自己也记不起来是一方连续得到十三分后，再输五分；还是先赢十分输三分再赢五分。 \r\n\r\n因为百度内部就要开始进行羽毛球联赛了，要先摸清大家的实力才好分组比赛呢～于是，大人们想知道以前每局的比分是怎样的，以及谁获得了胜利。要是遇到了根据比赛记录无法确认比赛过程的情况，也要输出相应的提示哦。 \r\n\r\n需要进一步说明的是，比赛是五局三胜的，每局先获得二十一分的为胜，但是胜方必须领先对手两分或以上，否则必须继续比赛直到一方超出对手两分为止，比分多的一方获胜。任何一方先获胜三局后就获得最终胜利，比赛也相应的结束。而且蝈蝈保证是完整的无多余信息的记录了比赛。', '1．文件中第一行只有一个整数M，表示蝈蝈记录了多少场比赛的分数；\r\n2．在接下来的2M行里，每场比赛用两行记录，第一行是一个整数N(N<=1000)表示当前这个记录中有多少个字符，第二行就是具体的N个字符表示记录的分数（相邻字符用空格隔开）。', '对应每一个分数记录，输出相应的每局分数，每局分数都使用两个整数表示，表示两个选手的得分，中间用&quot;:"分隔开；每组分数记录间使用一个空行分隔开。如果相应的比赛结果无法预测，以“UNKNOWN”一个单词独占一行表示（请全部使用大写字母）。', 'd:\\oj\\data\\1367', 'd:\\oj\\data\\1367', '3\r\n23\r\n9 7 3 6 2 4 7 8 3 2 7 9 X 2 2 1 2 1 X 1 X 1 1\r\n25\r\n9 3 8 5 4 8 3 9 8 4 X X X X 2 X X X X 2 8 4 9 2 4\r\n43\r\n7 7 7 7 7 3 4 5 6 7 6 5 4 2 1 3 5 7 9 7 5 3 1 3 0 9 9 3 9 3 2 1 1 1 5 1 5 1 5 1 5 5 1', '21:17\r\n24:22\r\n21:3', '21:14\r\n20:22\r\n21:23\r\n21:16\r\n21:9', 'Astar2006 初赛', '', '2011-02-27 20:22:38', 1000, 65536, 'N', NULL, 0, 2, 0, 2, 100, 1, 0, 30000, 37, ''),
(1368, '变态比赛规则', '为了促进各部门员工的交流，百度举办了一场全公司范围内的“拳皇”（百度内部最流行的格斗游戏）友谊赛，负责组织这场比赛的是百度的超级“拳皇”迷W.Z。W.Z不想用传统的淘汰赛或者循环赛的方式，而是自己制定了一个比赛规则。\r\n\r\n\r\n由于一些员工（比如同部门或者相邻部门员工）平时接触的机会比较多，为了促进不同部门之间的交流，W.Z希望员工自由分组。不同组之间的每两个人都会进行一场友谊赛而同一组内的人之间不会打任何比赛。\r\n\r\n\r\n比如4个人，编号为1~4,如果分为两个组并且1，2一个组，3，4一个组，那么一共需要打四场比赛：1 vs 3，1 vs 4，2 vs 3，2 vs 4。 而如果是1，2，3一组，4单独一组，那么一共需要打三场比赛: 1 vs 4，2 vs 4，3 vs 4。\r\n\r\n\r\n很快W.Z意识到，这样的比赛规则可能会让比赛的场数非常多。W.Z想知道如果有N个人，通过上面这种比赛规则，总比赛场数有可能为K场吗？比如3个人，如果只分到一组则不需要比赛，如果分到两组则需要2场比赛，如果分为三组则需要3场比赛。但是无论怎么分都不可能恰需要1场比赛。\r\n\r\n\r\n相信作为编程高手的你一定知道该怎么回答这个问题了吧？ 那么现在请你帮助W.Z吧。', '每行为一组数据，包含两个数字 N, K(0 < N <= 500, K >= 0)。', '对输入的N,K 如果N个员工通过一定的分组方式可以使比赛场数恰好为K，则输出"YES"，否则输出&quot;NO"（请全部使用大写字母），每组数据占一行。', 'd:\\oj\\data\\1368', 'd:\\oj\\data\\1368', '2 0\r\n2 1\r\n3 1\r\n3 2', 'YES\r\nYES\r\nNO\r\nYES', '', 'Astar2006 初赛', '', '2007-08-26 11:10:15', 3000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 45, ''),
(1369, '饭团的烦恼', '“午餐饭团”是百度内部参与人数最多的民间组织。\r\n同一个部门的、同一所大学的、同一年出生的、使用同一种型号电脑的员工们总是以各种理由组织各种长期的、临时的饭团。\r\n\r\n\r\n参加饭团，不仅可以以优惠的价格尝到更加丰富的菜式，还可以在吃饭的时候和同事们增进感情。\r\n但是，随着百度的员工越来越多，各个饭团的管理变得繁杂起来。特别是为了照顾员工们越来越挑剔的胃，饭团的点菜负责人的压力也越来越大。现在，这个任务就交给“百度之星”了，因为，你将要为所有的百度饭团设计一个自动点菜的算法。\r\n\r\n\r\n饭团点菜的需求如下：\r\n1．经济是我们要考虑的一个因素，既要充分利用百度员工的午餐补助，又不能铺张浪费。因此，我们希望最后的人均费用越接近12元越好。\r\n2．菜式丰富是我们要考虑的另一个因素。为简单起见，我们将各种菜肴的属性归结为荤菜，素菜，辛辣，清淡，并且每个菜只能点一次。\r\n3．请谨记，百度饭团在各大餐馆享受8折优惠。', '1．输入数据第一行包含三个整数N，M，K( 0 < N <= 16， 0 < M <= N， 0 < K <= 12 )，分别表示菜单上菜的数目，饭团需要点的菜的数目，就餐的人数；\r\n2．紧接着N行，每行的格式如下：\r\n菜名（长度不超过20个字符） 价格（原价，整数） 是否荤菜（1表示是，0表示否） 是否辛辣（1表示是，0表示否）；\r\n3．第N+2行是 a b c d 四个整数，分别表示需要点的荤菜，素菜，辛辣，清淡菜的数目。', '对于每组测试数据，输出数据包含M+1行，前M行每行包含一个菜名（按菜名在原菜单的顺序排序）。第M+1行是人均消费，结果保留两位小数。', 'd:\\oj\\data\\1369', 'd:\\oj\\data\\1369', '3 2 2\r\n水煮鱼 30 1 1\r\n口水鸡 18 1 1\r\n清炖豆腐 12 0 0\r\n1 1 1 1', '口水鸡\r\n清炖豆腐\r\n12.00', '', 'Astar2006 初赛', '', '2007-08-31 16:16:59', 1000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 39, ''),
(1370, '百度语言翻译机', '百度的工程师们是非常注重效率的，在长期的开发与测试过程中，他们逐渐创造了一套独特的缩略语。他们在平时的交谈、会议，甚至在各种技术文档中都会大量运用。\r\n\r\n为了让新员工可以更快地适应百度的文化，更好地阅读公司的技术文档，人力资源部决定开发一套专用的翻译系统，把相关文档中的缩略语和专有名词翻译成日常语言。', '输入数据包含三部分：\r\n1. 第一行包含一个整数N(N<=10000)，表示总共有多少个缩略语的词条；\r\n2. 紧接着有N行的输入，每行包含两个字符串，以空格隔开。第一个字符串为缩略语（仅包含大写英文字符，长度不超过10字节），第二个字符串为日常语言（不包含空格，长度不超过255字节）；\r\n3. 从第N+2开始到输入结束为包含缩略语的相关文档（总长度不超过1000000个字节）。', '输出将缩略语转换成日常语言后的文档。（将缩略语转换成日常语言，其他字符保留原样）。', 'd:\\oj\\data\\1370', 'd:\\oj\\data\\1370', '6\r\nPS 门户搜索部\r\nNLP 自然语言处理\r\nPM 产品市场部\r\nHR 人力资源部\r\nPMD 产品推广部\r\nMD 市场发展部\r\n百度的部门包括PS，PM，HR，PMD，MD等等，其中PS还包括NLP小组。', '百度的部门包括门户搜索部，产品市场部，人力资源部，产品推广部，市场发展部等等，其中门户搜索部还包括自然语言处理小组。', '注意事项：\r\n1．输入数据是中英文混合的，中文采用GBK编码。\r\nGBK：是又一个汉字编码标准，全称《汉字内码扩展规范》。采用双字节表示，总体编码范围为 8140-FEFE，首字节在 81-FE 之间，尾字节在 40-FE 之间，排除xx7F。总计 23940 个码位，共收入 21886 个汉字和图形符号，其中汉字（包括部首和构件）21003 个，图形符号 883 个。\r\n\r\n2．为保证答案的唯一性，缩略语的转换采用正向最大匹配（从左到右为正方向）原则。请注意样例中PMD的翻译。', 'Astar2006 初赛', '', '2012-04-13 23:45:35', 1000, 65536, 'N', NULL, 2, 14, 14, 12, 92, 5, 1, 30000, 59, ''),
(1371, '剪刀石头布', 'N个小孩正在和你玩一种剪刀石头布游戏（剪刀赢布，布赢石头，石头赢剪刀）。N个小孩中有一个是裁判，其余小孩分成三组（不排除某些组没有任何成员的可能性），但是你不知道谁是裁判，也不知道小孩们的分组情况。然后，小孩们开始玩剪刀石头布游戏，一共玩M次，每次任意选择两个小孩进行一轮，你会被告知结果，即两个小孩的胜负情况，然而你不会得知小孩具体出的是剪刀、石头还是布。已知各组的小孩分别只会出一种手势（因而同一组的两个小孩总会是和局），而裁判则每次都会随便选择出一种手势，因此没有人会知道裁判到底会出什么。请你在M次剪刀石头布游戏结束后，猜猜谁是裁判。如果你能猜出谁是裁判，请说明最早在第几次游戏结束后你就能够确定谁是裁判。', '输入文件包含多组测试数据，每组测试数据第一行为两个整数N和M(1 <= N <= 500，0 < M <= 2000 )，分别为小孩的个数和剪刀石头布游戏进行的次数。接下来M行，每行两个整数且中间以一个符号隔开。两个整数分别为进行游戏的两个小孩各自的编号（为小于N的非负整数）。符号的可能值为“=”、“&gt;”和“&lt;”，分别表示和局、第一个小孩胜和第二个小孩胜三种情况。', '1．每组测试数据输出一行，若能猜出谁是裁判，则输出裁判的编号，并输出在第几次游戏结束后就能够确定谁是裁判，小孩的编号和游戏次数以一个空格隔开； 2．如果无法确定谁是裁判，输出-2；如果发现剪刀石头布游戏的胜负情况不合理（即无论谁是裁判都会出现矛盾），则输出-1。', 'd:\\oj\\data\\1371', 'd:\\oj\\data\\1371', '3 3\r\n0<1\r\n1<2\r\n2<0\r\n3 5\r\n0<1\r\n0>1\r\n1<2\r\n1>2\r\n0<2\r\n4 4\r\n0<1\r\n0>1\r\n2<3\r\n2>3\r\n1 0', '-2\r\n1 4\r\n-1\r\n0 0', '', 'Astar2006 初赛', '', '2007-08-26 11:13:27', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 49, ''),
(1372, '另类杀人游戏', '周末的晚上，百度的员工们总喜欢聚集在公司的会议室玩杀人游戏。从1警1匪到n警n匪，他们尝试了几乎所有流行的杀人游戏规则。终于有一天，连最热衷杀人游戏的“杀人不眨眼”的Austin也开始对无休止的辩论感到厌烦。于是，他决定改变他的一贯作风，他开始变成了一个“杀人不睁眼”的杀手。\r\n\r\n如何做到“杀人不睁眼”呢？Austin早已构思好他的杀人计划：\r\n\r\n\r\nN个人（包括Austin）坐成一圈玩杀人游戏，按顺时针编号 1 2 3 4 ... ...\r\n\r\nAustin从1号开始顺时针开始数到第m号就杀掉第一个人，被杀掉的人要退出游戏。\r\n\r\n如果第m个人恰好是Austin自己，他就杀掉他顺时针方向的下一个人。\r\n\r\nAustin从被杀的人的下一个顺时针数m个人，把第m个杀掉。\r\n\r\n重复2-4，直至杀掉所有人。 \r\n\r\nAustin把这个杀人计谋告诉了法官小k，他便可以闭起眼睛杀人啦。作为一个正直善良的法官，小k当然不能让残忍的Austin得逞，于是，她偷偷把Austin的杀人计划告诉了作为警察的你，聪明的百度之星。现在，你的任务是活到最后，与“杀人不睁眼”的Austin对决。', '第一个行包含一个整数K，表示有K组测试数据。 对于每组测试数据三个整数：\r\nN，M，T，(3<=N<=10000,1<=M,T<=10000) \r\n分别表示参与游戏的人数，Austin每隔M个人会杀掉一人，Austin初始位置的标号。', '每个测试数据输出一个整数。\r\n你需要选择的初始位置的序号，以确保最后剩下的两个人是你与Austin。', 'd:\\oj\\data\\1372', 'd:\\oj\\data\\1372', '2\r\n7 4 1\r\n7 4 1', '5\r\n5', '杀人顺序为4 2 7 6 3 5 ， 所以5 是你要选择的位置。', 'Astar2006 复赛', '', '2007-08-26 11:14:53', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 30, ''),
(1373, '空中飞猴', '马戏团里新来了一只很特别的小猴子皮皮，皮皮不仅长得漂亮，还很聪明。自从它来到马戏团之后，“空中飞猴”成了马戏团里的保留节目，慕名观看的人络绎不绝。“空中飞猴”表演开始时，空中架着两根长长的钢丝。皮皮在其中一根上，它的目标是到达另一个根钢丝上。皮皮必须在爬行一定距离后纵身一跃，直接跳到另一根钢丝的某个位置。由于皮皮的速度非常快，它的运动轨迹可以近似的看成一条直线段。为了不让自己太危险，皮皮希望自己的跳跃距离尽量短，而为了不让观众等得太不耐烦，它在钢丝上的爬行距离不能超过d。在爬行距离不超过d的情况下，皮皮的跳跃距离最短是多少？\r\n\r\n\r\n输入要求：\r\n输入文件包含多组测试数据。每组测试数据包含16个实数x1，y1，z1，x2，y2，z2，x3，y3，z3，x4，y4，z4，xp，yp，zp，d，表示两根钢丝分别为线段(x1,y1,z1)-(x2,y2,z2)和(x3,y3,z3)-(x4,y4,z4)，皮皮的坐标为(xp, yp, zp)，最大爬行距离为d。皮皮保证在第一条钢丝上，保证每条钢丝长度大于零。但两条钢丝有可能相交甚至重叠。', '输入文件包含多组测试数据。每组测试数据包含16个实数x1，y1，z1，x2，y2，z2，x3，y3，z3，x4，y4，z4，xp，yp，zp，d，表示两根钢丝分别为线段(x1,y1,z1)-(x2,y2,z2)和(x3,y3,z3)-(x4,y4,z4)，皮皮的坐标为(xp, yp, zp)，最大爬行距离为d。皮皮保证在第一条钢丝上，保证每条钢丝长度大于零。但两条钢丝有可能相交甚至重叠。', '每组测试数据输出一行，仅包含一个非负实数，四舍五入保留三位小数，即最短跳跃距离。', 'd:\\oj\\data\\1373', 'd:\\oj\\data\\1373', '0.0 0.0 0.0 4.0 4.0 0.0 4.0 0.0 1.0 0.0 4.0 1.0 2.0 2.0 0.0 10.0', '1.000', '', 'Astar2006 复赛', '', '2007-08-26 11:15:43', 10000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 35, ''),
(1374, '星球大战', '公元4046年，人类科学高度发达，绝大部分人都已经移居至浩瀚的宇宙，在上千颗可居住的星球上留下了人类的印记。然而，此时人类却分裂成了两个联盟：正义联盟和邪恶联盟。两个联盟之间仇恨难解，时有战争。\r\n\r\n现在，邪恶联盟通过不正当贸易积聚了大量宇宙财富。因此，正义联盟计划要破坏邪恶联盟的非法贸易网络，从而影响邪恶联盟的经济状况，为下一次战争作好准备。邪恶联盟由数百颗星球组成，贸易通过星球间的运输航道来完成。一条运输航道是双向的且仅连接两个星球，但两个星球之间可以有多条航道，也可能没有。两个星球之间只要有运输航道直接或间接的相连就可以进行贸易。正义联盟计划破坏邪恶联盟中的一些运输航道，使得邪恶联盟的星球分成两部分，任一部分的星球都不能与另一部分的星球进行贸易。但是为了节省破坏行动所需的开支，正义联盟希望破坏尽量少的运输航道来达成目标。请问正义联盟最少需要破坏多少条运输航道呢？', '输入文件包含多组测试数据。每组测试数据第一行为两个整数N和M（2≤N≤500，0≤M≤N(N-1)/2），N为邪恶联盟中星球的数量。接下来M行，每行三个整数A、B和C（0≤A，B<N，A≠B，C>0），表示星球A和星球B之间有C条运输航道。运输航道的总数量不超过10^8。', '每组测试数据输出一行，包含一个整数，表示需要破坏的运输航道的数量。如果输入的贸易网络本来就是不连通的，则输出0。', 'd:\\oj\\data\\1374', 'd:\\oj\\data\\1374', '3 3\r\n0 1 1\r\n1 2 1\r\n2 0 1\r\n4 3\r\n0 1 1\r\n1 2 1\r\n2 3 1\r\n8 14\r\n0 1 1\r\n0 2 1\r\n0 3 1\r\n1 2 1\r\n1 3 1\r\n2 3 1\r\n4 5 1\r\n4 6 1\r\n4 7 1\r\n5 6 1\r\n5 7 1\r\n6 7 1\r\n4 0 1\r\n7 3 1', '2\r\n1\r\n2', '', 'Astar2006 复赛', '', '2007-08-26 11:16:34', 10000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 34, ''),
(1375, 'Directional cross country', 'The Directional cross country is a kind of outside sports. The players use  campass  and  map to find check points one by one .Only if player arrive at previous check point ,then he can go to the next check point .For example, there are 3 check points orderly named ''A'' ''B'' ''C'', player need to start from ''S'' (start point) first arrive ''A'' and then from ''A ''to ''B''....from ''C'' to ''T''(terminal). So he finished this game successfully . There are many players participating this game ,but only the fastest and players can win .Now Phillip participat in this game, he wants to win as usual. Now your task is to write a program to calculate the minimum time he can finish the game. He can move to 8 direction (left, right , up, down ,left-up, right-up ,left-down ,right-down) , and every move takes one time-unit. Be careful that players only can move in the game area which surrounded by ''#'' and in the game area ''.'' means the place player can walk on , ''#'' means stone  which  can''t cross, ''A'' ''B'' ''C''...means  check points.There are some other game areas are in the map but only Phillip''s game area is completely the whole area.', 'The input consists of T test cases. The number of test cases (T) is given in the first line of the input  file .Each test case starts with a line containing  C columns , R rows ,N check points. Then R lines follow, each line contains C characters .( 3 < C , R < 200 ),(1<=N<=10).The check points are  orderly named from ''A'' ...(only captial letters) .', 'If Phillip can successfully finish the game print the minimum time, If he can''t printf "Impossible!"\r\nevery output per line.', 'd:\\oj\\data\\1375', 'd:\\oj\\data\\1375', '3\r\n12 10 3\r\n###########.\r\n#........C.#\r\n#.S..#.....#\r\n#.#.##.A...#\r\n#.....#....#\r\n#..B.......#\r\n#..........#\r\n#..#.......#\r\n#......T...#\r\n###########.\r\n\r\n6 6 1\r\n....##\r\n.####.\r\n#S..T#\r\n#.A..#\r\n#....#\r\n.#####\r\n\r\n6 6 1\r\n....##\r\n.####.\r\n#S.#T#\r\n#.A###\r\n#....#\r\n.#####', '22\r\n3\r\nImpossible!', '', 'Phillip', '', '2009-08-28 09:41:19', 1000, 65536, 'N', NULL, 2, 9, 22, 7, 87, 2, 1, 30000, 39, ''),
(1376, 'Crisis on the Farm', 'Farmer John and his herd of exotic dancing bovines have been\r\npracticing for his new moosical, "The Street Cow Named Desire". At\r\none point in the middle of rehearsal, his cows are stacked on top\r\nof each other in N (1 <= N <= 1,000) sets of 30, one cow standing\r\non the back of the other (they are quite amazing cows). Thus, the\r\npasture is dotted with both these stacks of 30 cows and also, in\r\nseparate locations, M (1 <= M <= 1,000) haystacks. Below is a sample\r\nof one way they might be laid out:\r\n\r\n                8 .........\r\n                7 ....CH.H.         C = stack of 30 cows\r\n                6 .........\r\n                5 .........         H = haystack\r\n                4 ..C.HH...\r\n                3 .........\r\n                2 .....C.HH\r\n                1 .........\r\n                  123456789\r\n\r\nAs the musical''s conductor, Farmer John has four whistles with\r\nvarious tones. One whistle commands the cow at the bottom of each\r\nstack to move (along with all the stacked cows) one unit north,\r\nanother indicates a move to the south, one indicates a move to the\r\neast, and a fourth to order a move to the west.\r\n\r\nAny time the stack of cows enters a grid location with a haystack,\r\nthe cow on the top of the stack (even if the stack has height one)\r\nwill jump onto the haystack while the remaining cows move into the\r\nsame location as the haystack. Thus, if the bottom cow encounters\r\n30 haystacks (perhaps different haystacks, perhaps not), the stack\r\nof 30 cows is exhausted with all the cows standing on top of haystacks\r\n(or standing on cows on haystacks). The sturdy haystacks can each\r\nsupport an unlimited number of cows.\r\n\r\nFarmer John glances across his pasture to Farmer Don''s milking\r\nfacility to see, to his horror, a huge milk tank exploding and\r\nunleashing a giant tidal wave of milk making its way toward the\r\nperforming cows! Since any cows on a haystack are safe, FJ must now\r\ndo what he can to save the lives of as many cows as possible using\r\nwhat has turned from a simple dance routine into a lifesaving\r\ntechnique.\r\n\r\nGiven the number of times K (1 <= K <= 30) farmer John can blow a\r\nwhistle until the wave of milk crashes over the pasture and also\r\nthe X_i, Y_i positions (1 <= X_i <= 1,000; 1 <= Y_i <= 1,000) of\r\nthe N stacks of cows and M haystacks (none of which currently has\r\nany cows on it), report the greatest number of cows that can be\r\nsaved and find a sequence of whistle blows that does the job. The\r\nsequence should be reported in terms of the four directions, ''E''\r\nfor east, ''N'' for north, ''W'' for west, ''S'' for south.  Among all\r\nsuch sequences, farmer John wants the lexicographically least.\r\nInitial locations of cows and haystacks will not share the same\r\ncoordinates in the input file.\r\n\r\nCows can be moved to any location, including ones outside the\r\npasture.', '* Line 1: Three space-separated integers: N, M, and K\r\n\r\n* Lines 2..N+1: Line i+1 describes the X,Y location of a stack of 30\r\n        cows using two space-separated integers: X_i and Y_i\r\n\r\n* Lines N+2..N+M+1: Line i+N+1 describes the X,Y location of a\r\n        haystack using two space-separated integers: X_i and Y_i', '* Line 1: A single integer that is the most number of cows that can be\r\n        saved.\r\n\r\n* Line 2: K characters, the lexicographically least sequence of\r\n        commands FJ should issue to maximize the number of cows saved.', 'd:\\oj\\data\\1376', 'd:\\oj\\data\\1376', '3 6 3\r\n3 4\r\n6 2\r\n5 7\r\n8 2\r\n9 2\r\n6 4\r\n5 4\r\n6 7\r\n8 7', '6\r\nEEE', '', 'OPEN08', '', '2007-08-26 11:18:10', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 23, ''),
(1377, 'Cow Neighborhoods', 'Those Who Know About Cows are aware of the way cows group into "Cow\r\nNeighborhoods". They have observed Farmer John''s N (1 <= N <=\r\n100,000) cows (conveniently numbered 1..N) as they graze, each at\r\nher own unique integer rectilinear coordinate, on a pasture whose\r\nX and Y coordinates are in the range 1..1,000,000,000.\r\n\r\nTwo cows are neighbors if at least one of two criteria is met:\r\n\r\n  1) If the cows are no further than some integer Manhattan distance\r\n     C (1 <= C <= 1,000,000,000) apart, they are neighbors. [Manhattan\r\n     distance is calculated as d = |x1-x2| + |y1-y2|.]\r\n\r\n  2) If cow A is a neighbor of cow Z and cow B is a neighbor of cow\r\n     Z, then cow A is a neighbor of cow B (the "transitive closure\r\n     of neighbors").\r\n\r\nGiven the locations of the cows and the distance C, determine the\r\nthe number of neighborhoods and the number of cows in the largest\r\nneighborhood.\r\n\r\nBy way of example, consider the pasture below. When C = 4, this\r\npasture has four neighborhoods: a big one on the left, two neighborhoods\r\nof size 1 (the lonesome cows), and a huge neighborhood on the right\r\nwith 60 different cows.\r\n\r\n.....................................*.................\r\n....*...*..*.......................***.................\r\n......*...........................****.................\r\n..*....*..*.......................*...*.******.*.*.....\r\n........................*.............***...***...*....\r\n*..*..*...*..........................*..*...*..*...*...\r\n.....................................*..*...*..*.......\r\n.....................................*..*...*..*.......\r\n...*................*..................................\r\n.*..*............................*.*.*.*.*.*.*.*.*.*.*.\r\n.*.....*..........................*.*.*.*.*.*.*.*.*.*.*\r\n....*..................................................\r\n\r\nThe input file describes cow locations by integer X,Y coordinates,\r\nwhere the lower left corner is (1,1) and cows close to that corner\r\nappear at both (2,2) and (5,1) in the example above.\r\n\r\nFor a given pasture, determine both the number of cow neighborhoods\r\nand the number of cows resident in the largest cow neighborhood.\r\n\r\nThe above picture is sample test case 2, which will be evaluated\r\nfor you upon submission.\r\n\r\nPartial feedback for some test cases will be provided on the first\r\n10 submissions.', '* Line 1: Two space-separated integers: N and C\r\n\r\n* Lines 2..N+1: Line i+1 describes cow i''s location with two\r\n        space-separated integers: X_i and Y_i', '* Line 1: A single line with a two space-separated integers: the\r\n        number of cow neighborhoods and the size of the largest cow\r\n        neighborhood.', 'd:\\oj\\data\\1377', 'd:\\oj\\data\\1377', '4 2\r\n1 1\r\n3 3\r\n2 2\r\n10 10', '2 3', 'There are 2 neighborhoods, one formed by the first three cows and\r\nthe other being the last cow. The largest neighborhood therefore\r\nhas size 3.', 'OPEN08', '', '2009-08-29 15:36:52', 2000, 32768, 'N', NULL, 0, 14, 0, 14, 100, 1, 0, 30000, 37, ''),
(1378, 'Best Grass', 'Bessie is planning her day of munching tender spring grass and is gazing\r\nout upon the pasture which Farmer John has so lovingly partitioned into a\r\ngrid with R (1 <= R <= 100) rows and C (1 <= C <= 100) columns. She wishes\r\nto count the number of grass clumps in the pasture.\r\n\r\nEach grass clump is shown on a map as either a single ''#'' symbol or perhaps\r\ntwo ''#'' symbols side-by-side (but not on a diagonal). Given a map of the\r\npasture, tell Bessie how many grass clumps there are.\r\n\r\nBy way of example, consider this pasture map where R=5 and C=6:\r\n\r\n.#....\r\n..#...\r\n..#..#\r\n...##.\r\n.#....\r\n\r\nThis pasture has a total of 5 clumps: one on the first row, one that spans\r\nthe second and third row in column 2, one by itself on the third row, one\r\nthat spans columns 4 and 5 in row 4, and one more in row 5.', '* Line 1: Two space-separated integers: R and C\r\n\r\n* Lines 2..R+1: Line i+1 describes row i of the field with C\r\n        characters, each of which is a ''#'' or a ''.''', '* Line 1: A single integer that is the number of grass clumps Bessie\r\n        can munch', 'd:\\oj\\data\\1378', 'd:\\oj\\data\\1378', '5 6\r\n.#....\r\n..#...\r\n..#..#\r\n...##.\r\n.#....', '5', '', 'OPEN08', '', '2012-07-22 10:41:44', 1000, 65536, 'N', NULL, 64, 117, 55, 48, 52, 48, 45, 30000, 558, '');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1379, 'Going to the Movies', 'Farmer John is taking some of his cows to the movies! While his \r\ntruck has a limited capacity of C (100 <= C <= 5000) kilograms, he   \r\nwants to take the cows that, in aggregate, weigh as much as possible\r\nwithout exceeding the limit C.\r\n \r\nGiven N (1 <= N <= 16) cows and their respective weights W_i, determine   \r\nthe weight of the heaviest group of cows that FJ can take to the \r\nmovies.', '* Line 1: Two space-separated integers: C and N\r\n\r\n* Lines 2..N+1: Line i+1 contains a single integer: W_i', '* Line 1: A single integer that is the weight of the heaviest group of\r\n        cows that can go to the movies', 'd:\\oj\\data\\1379', 'd:\\oj\\data\\1379', '259 5\r\n81\r\n58\r\n42\r\n33\r\n61', '242', '81+58+42+61 = 242; this is the best possible sum', 'OPEN08', '', '2012-02-15 18:27:19', 1000, 65536, 'N', NULL, 34, 55, 62, 21, 44, 30, 27, 30000, 92, ''),
(1380, 'Clear Cold Water', 'The steamy, sweltering summers of Wisconsin''s dairy district stimulate\r\nthe cows to slake their thirst. Farmer John pipes clear cold water\r\ninto a set of N (3 <= N <= 99999; N odd) branching pipes conveniently\r\nnumbered 1..N from a pump located at the barn. As the water flows\r\nthrough the pipes, the summer heat warms it.  Bessie wants to find\r\nthe coldest water so she can enjoy the weather more than any other\r\ncow.\r\n\r\nShe has mapped the entire set of branching pipes and noted that\r\nthey form a tree with its root at the farm and furthermore that\r\nevery branch point has exactly two pipes exiting from it. Surprisingly,\r\nevery pipe is exactly one unit in length; of course, all N pipes\r\nconnect up in one way or another to the pipe-tree.\r\n\r\nGiven the map of all the pipe connections, make a list of the\r\ndistance from the barn for every branching point and endpoint.\r\nBessie will use the list to find the very coldest water.\r\n\r\nThe endpoint of a pipe, which might enter a branching point or might\r\nbe a spigot, is named by the pipe''s number. The map contains C (1\r\n<= C <= N) connections, each of which specifies three integers: the\r\nendpoint E_i (1 <= E_i <= N) of a pipe and two branching pipes B1_i\r\nand B2_i (2 <= B1_i <= N; 2 <= B2_i <= N). Pipe number 1 connects\r\nto the barn; the distance from its endpoint to the barn is 1.', '* Line 1: Two space-separated integers: N and C\r\n\r\n* Lines 2..C+1: Line i+1 describes branching point i with three\r\n        space-separated integers: E_i, B1_i, and B2_i', '* Lines 1..N: Line i of the output contains a single integer that is\r\n        the distance from the barn to the endpoint of pipe i', 'd:\\oj\\data\\1380', 'd:\\oj\\data\\1380', '5 2\r\n3 5 4\r\n1 2 3', '1\r\n2\r\n2\r\n3\r\n3', 'The input above describes this pipe map:\r\n\r\n                    +------+\r\n                    | Barn |\r\n                    +------+\r\n                       | 1\r\n                       *\r\n                    2 / \\ 3\r\n                         *\r\n                      4 / \\ 5\r\n\r\nOUTPUT DETAILS:\r\n\r\nPipe 1 is always distance 1 from the barn. Pipes 2 and 3 connect directly\r\nto pipe 1 and thus are distance 2 from the barn. Pipes 4 and 5, which\r\nconnect to pipe 3, are distance 3 from the barn.', 'OPEN08', '', '2009-08-29 13:29:14', 1000, 65536, 'N', NULL, 3, 10, 30, 7, 70, 3, 3, 30000, 43, ''),
(1381, 'Munching', 'Bessie loves her grass and loves to hurry to the barn for her evening\r\nmilking session. She has partitioned the pasture into a rectilinear\r\ngrid of R (1 <= R <= 100) rows and C (1 <= C <= 100) columns and\r\nmarked the squares as grass or rocky (she can''t eat rocks and won''t\r\neven go into those squares). Bessie starts on her map at location\r\nR_b,C_b and wishes to munch her way, square by square, to the barn\r\nat location 1,1 by the shortest route possible. She moves from one\r\nsquare to any one of the potentially four adjacent squares.\r\n\r\nBelow is the original map [with rocks (''*''), grass (''.''), the barn\r\n(''B''), and Bessie (''C'' for cow) at row 5, col 6] and a route map\r\nwith the optimal route marked with munches (''m''):\r\n\r\n           Map               Optimal Munched Route\r\n        1 2 3 4 5 6  <-col      1 2 3 4 5 6  <-col\r\n      1 B . . . * .           1 B m m m * .\r\n      2 . . * . . .           2 . . * m m m\r\n      3 . * * . * .           3 . * * . * m\r\n      4 . . * * * .           4 . . * * * m\r\n      5 * . . * . C           5 * . . * . m\r\n\r\nBessie munched 9 squares.\r\n \r\nGiven a map, determine how many squares Bessie will eat on her\r\nshortest route to the barn (there''s no grass to eat on the barn''s\r\nsquare).', '* Line 1: Two space-separated integers: R and C\r\n\r\n* Lines 2..R+1: Line i+1 describes row i with C characters (and no\r\n        spaces) as described above', '* Line 1: A single integer that is the number of squares of grass that\r\n        Bessie munches on the shortest route back to the barn', 'd:\\oj\\data\\1381', 'd:\\oj\\data\\1381', '5 6\r\nB...*.\r\n..*...\r\n.**.*.\r\n..***.\r\n*..*.C', '9', '', 'OPEN08', '', '2012-08-03 18:57:56', 1000, 65536, 'N', NULL, 88, 193, 46, 58, 55, 51, 48, 30000, 790, ''),
(1382, 'Roads Around The Farm', 'Farmer John''s cows have taken an interest in exploring the territory\r\naround the farm. Initially, all N (1 <= N <= 1,000,000,000) cows\r\ncommence traveling down a road in one big group. Upon encountering\r\na fork in the road, the group sometimes chooses to break into two\r\nsmaller (nonempty) groups with each group continuing down one of\r\nthe roads.  When one of those groups arrives at another fork, it\r\nmight split again, and so on.\r\n\r\nThe cows have crafted a peculiar way of splitting: if they can split\r\ninto two groups such that the sizes of the groups differ by exactly\r\nK (1 <= K <= 1000), then they will split in that way; otherwise,\r\nthey stop exploring and just start grazing peacefully.\r\n\r\nAssuming that there will always be new forks in the road, compute\r\nthe final number of groups of peacefully grazing cows.', '* Line 1: Two space-separated integers: N and K', '* Line 1: A single integer representing the number of groups of\r\n        grazing cows', 'd:\\oj\\data\\1382', 'd:\\oj\\data\\1382', '6 2', '3', 'INPUT DETAILS:\r\n\r\nThere are 6 cows and the difference in group sizes is 2.\r\n\r\n\r\nOUTPUT DETAILS:\r\n\r\nThere are 3 final groups (with 2, 1, and 3 cows in them).\r\n\r\n   6\r\n  / \\\r\n 2   4\r\n    / \\\r\n   1   3', 'OPEN08', '', '2009-04-19 09:41:51', 1000, 65536, 'N', NULL, 2, 3, 67, 1, 33, 2, 2, 30000, 50, ''),
(1383, 'Word Power', 'Farmer John wants to evaluate the quality of the names of his N (1\r\n<= N <= 1000) cows. Each name is a string with no more than 1000\r\ncharacters, all of which are non-blank.\r\n\r\nHe has created a set of M (1 <= M <= 100) ''good'' strings (no\r\nlonger than 30 characters and fully non-blank). If the sequence\r\nletters of a cow''s name contains the letters of a ''good'' string in\r\nthe correct order as a subsequence (i.e., not necessarily all next\r\nto each other), the cow''s name gets 1 quality point.\r\n\r\nAll strings is case-insensitive, i.e., capital letters and lower\r\ncase letters are considered equivalent.  For example, the name "Bessie"\r\ncontains the letters of "Be", "sI", "EE", and "Es" in the correct\r\norder, but not "is" or "eB". Help Farmer John determine the number\r\nof quality points in each of his cow''s names.', '* Line 1: Two space-separated integers: N and M\r\n\r\n* Lines 2..N+1: Line i+1 contains a string that is the name of the ith\r\n        cow\r\n\r\n* Lines N+2..N+M+1: Line N+i+1 contains the ith good string', '* Lines 1..N+1: Line i+1 contains the number of quality points of the\r\n        ith name', 'd:\\oj\\data\\1383', 'd:\\oj\\data\\1383', '5 3\r\nBessie\r\nJonathan\r\nMontgomery\r\nAlicia\r\nAngola\r\nse\r\nnGo\r\nOnt', '1\r\n1\r\n2\r\n0\r\n1', 'INPUT DETAILS:\r\n\r\nThere are 5 cows, and their names are "Bessie", "Jonathan",\r\n"Montgomery", "Alicia", and "Angola". The 3 good strings are "se",\r\n"nGo", and "Ont".\r\n\r\nOUTPUT DETAILS:\r\n\r\n"Bessie" contains "se", "Jonathan" contains "Ont", "Montgomery" contains\r\nboth "nGo" and "Ont", Alicia contains none of the good strings, and\r\n"Angola" contains "nGo".', 'OPEN08', '', '2009-08-29 12:43:01', 1000, 65536, 'N', NULL, 4, 13, 31, 6, 67, 3, 3, 30000, 33, ''),
(1384, 'Clear And Present Danger', 'Farmer John is on a boat seeking fabled treasure on one of the N\r\n(1 <= N <= 100) islands conveniently labeled 1..N in the Cowribbean\r\nSea.\r\n\r\nThe treasure map tells him that he must travel through a certain\r\nsequence A_1, A_2, ..., A_M of M (2 <= M <= 10,000) islands, starting\r\non island 1 and ending on island N before the treasure will appear\r\nto him. He can visit these and other islands out of order and even\r\nmore than once, but his trip must include the A_i sequence in the\r\norder specified by the map.\r\n\r\nFJ wants to avoid pirates and knows the pirate-danger rating (0 <=\r\ndanger <= 100,000) between each pair of islands. The total danger\r\nrating of his mission is the sum of the danger ratings of all the\r\npaths he traverses.\r\n\r\nHelp Farmer John find the least dangerous route to the treasure\r\nthat satisfies the treasure map''s requirement.', '* Line 1: Two space-separated integers: N and M\r\n\r\n* Lines 2..M+1: Line i+1 describes the i_th island FJ must visit with\r\n        a single integer: A_i\r\n\r\n* Lines M+2..N+M+1: Line i+M+1 contains N space-separated integers\r\n        that are the respective danger rating of the path between\r\n        island i and islands 1, 2, ..., and N, respectively. The ith\r\n        integer is always zero.', '* Line 1: The minimum danger that Farmer John can encounter while\r\n        obtaining the treasure.', 'd:\\oj\\data\\1384', 'd:\\oj\\data\\1384', '3 4\r\n1\r\n2\r\n1\r\n3\r\n0 5 1\r\n5 0 2\r\n1 2 0', '7', 'INPUT DETAILS:\r\n\r\nThere are 3 islands and the treasure map requires Farmer John to\r\nvisit a sequence of 4 islands in order: island 1, island 2, island\r\n1 again, and finally island 3. The danger ratings of the paths are\r\ngiven: the paths (1, 2); (2, 3); (3, 1) and the reverse paths have\r\ndanger ratings of 5, 2, and 1, respectively.\r\n\r\nOUTPUT DETAILS:\r\n\r\nHe can get the treasure with a total danger of 7 by traveling in\r\nthe sequence of islands 1, 3, 2, 3, 1, and 3. The cow map''s requirement\r\n(1, 2, 1, and 3) is satisfied by this route. We avoid the path\r\nbetween islands 1 and 2 because it has a large danger rating.', 'OPEN08', '', '2009-08-29 13:03:45', 1000, 65536, 'N', NULL, 4, 8, 50, 4, 50, 4, 4, 30000, 36, ''),
(1385, 'Cow Cars', 'N (1 <= N <= 50,000) cows conveniently numbered 1..N are driving\r\nin separate cars along a highway in Cowtopia. Cow i can drive in\r\nany of M different high lanes (1 <= M <= N) and can travel at a\r\nmaximum speed of S_i (1 <= S_i <= 1,000,000) km/hour.\r\n\r\nAfter their other bad driving experience, the cows hate collisions\r\nand take extraordinary measures to avoid them. On this highway, cow\r\ni reduces its speed by D (0 <= D <= 5,000) km/hour for each cow in\r\nfront of it on the highway (though never below 0 km/hour). Thus,\r\nif there are K cows in front of cow i, the cow will travel at a\r\nspeed of max[S_i - D * K, 0]. While a cow might actually travel\r\nfaster than a cow directly in front of it, the cows are spaced far\r\nenough apart so crashes will not occur once cows slow down as\r\ndescribed,\r\n\r\nCowtopia has a minimum speed law which requires everyone on the\r\nhighway to travel at a a minimum speed of L (1 <= L <= 1,000,000)\r\nkm/hour so sometimes some of the cows will be unable to take the\r\nhighway if they follow the rules above. Write a program that will\r\nfind the maximum number of cows that can drive on the highway while\r\nobeying the minimum speed limit law.', '* Line 1: Four space-separated integers: N, M, D, and L\r\n\r\n* Lines 2..N+1: Line i+1 describes cow i''s initial speed with a single\r\n        integer: S_i', '* Line 1: A single integer representing the maximum number of cows\r\n        that can use the highway', 'd:\\oj\\data\\1385', 'd:\\oj\\data\\1385', '3 1 1 5\r\n5\r\n7\r\n5', '2', 'INPUT DETAILS:\r\n\r\nThere are three cows with one lane to drive on, a speed decrease\r\nof 1, and a minimum speed limit of 5.\r\n\r\nOUTPUT DETAILS:\r\n\r\nTwo cows are possible, by putting either cow with speed 5 first and the cow\r\nwith speed 7 second.', 'OPEN08', '', '2009-04-19 11:12:39', 1000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 43, ''),
(1386, 'Stockbroker Grapevine', 'Stockbrokers are known to overreact to rumours. You have been contracted to develop a method of spreading disinformation amongst the stockbrokers to give your employer the tactical edge in the stock market. For maximum effect, you have to spread the rumours in the fastest possible way. \r\n\r\nUnfortunately for you, stockbrokers only trust information coming from their "Trusted sources" This means you have to take into account the structure of their contacts when starting a rumour. It takes a certain amount of time for a specific stockbroker to pass the rumour on to each of his colleagues. Your task will be to write a program that tells you which stockbroker to choose as your starting point for the rumour, as well as the time it will take for the rumour to spread throughout the stockbroker community. This duration is measured as the time needed for the last person to receive the information.', 'Your program will input data for different sets of stockbrokers. Each set starts with a line with the number of stockbrokers. Following this is a line for each stockbroker which contains the number of people who they have contact with, who these people are, and the time taken for them to pass the message to each person. The format of each stockbroker line is as follows: The line starts with the number of contacts (n), followed by n pairs of integers, one pair for each contact. Each pair lists first a number referring to the contact (e.g. a ''1'' means person number one in the set), followed by the time in minutes taken to pass a message to that person. There are no special punctuation symbols or spacing rules. \r\n\r\nEach person is numbered 1 through to the number of stockbrokers. The time taken to pass the message on will be between 1 and 10 minutes (inclusive), and the number of contacts will range between 0 and one less than the number of stockbrokers. The number of stockbrokers will range from 1 to 100. The input is terminated by a set of stockbrokers containing 0 (zero) people.', 'For each set of data, your program must output a single line containing the person who results in the fastest message transmission, and how long before the last person will receive any given message after you give it to this person, measured in integer minutes. \r\nIt is possible that your program will receive a network of connections that excludes some persons, i.e. some people may be unreachable. If your program detects such a broken network, simply output the message "disjoint". Note that the time taken to pass the message from person A to person B is not necessarily the same as the time taken to pass it from B to A, if such transmission is possible at all.', 'd:\\oj\\data\\1386', 'd:\\oj\\data\\1386', '3\r\n2 2 4 3 5\r\n2 1 2 3 6\r\n2 1 2 2 2\r\n5\r\n3 4 4 2 8 5 3\r\n1 5 8\r\n4 1 6 4 10 2 7 5 2\r\n0\r\n2 2 5 1 5\r\n0', '3 2\r\n3 10', 'Southern African 2001', 'Phillip', '', '2007-08-26 11:18:40', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1387, 'Frame Stacking', 'Consider the following 5 picture frames placed on an 9 x 8 array. \r\n\r\n........ ........ ........ ........ .CCC....\r\nEEEEEE.. ........ ........ ..BBBB.. .C.C....\r\nE....E.. DDDDDD.. ........ ..B..B.. .C.C....\r\nE....E.. D....D.. ........ ..B..B.. .CCC....\r\nE....E.. D....D.. ....AAAA ..B..B.. ........\r\nE....E.. D....D.. ....A..A ..BBBB.. ........\r\nE....E.. DDDDDD.. ....A..A ........ ........\r\nE....E.. ........ ....AAAA ........ ........\r\nEEEEEE.. ........ ........ ........ ........\r\n    1        2        3        4        5   \r\n\r\nNow place them on top of one another starting with 1 at the bottom and ending up with 5 on top. If any part of a frame covers another it hides that part of the frame below. \r\n\r\nViewing the stack of 5 frames we see the following. \r\n\r\n.CCC....\r\nECBCBB..\r\nDCBCDB..\r\nDCCC.B..\r\nD.B.ABAA\r\nD.BBBB.A\r\nDDDDAD.A\r\nE...AAAA\r\nEEEEEE..\r\n\r\n\r\n\r\n\r\n\r\nIn what order are the frames stacked from bottom to top? The answer is EDABC. \r\n\r\nYour problem is to determine the order in which the frames are stacked from bottom to top given a picture of the stacked frames. Here are the rules: \r\n\r\n1. The width of the frame is always exactly 1 character and the sides are never shorter than 3 characters. \r\n\r\n2. It is possible to see at least one part of each of the four sides of a frame. A corner shows two sides. \r\n\r\n3. The frames will be lettered with capital letters, and no two frames will be assigned the same letter.', 'Each input block contains the height, h (h<=30) on the first line and the width w (w<=30) on the second. A picture of the stacked frames is then given as h strings with w characters each. \r\nYour input may contain multiple blocks of the format described above, without any blank lines in between. All blocks in the input must be processed sequentially.', 'Write the solution to the standard output. Give the letters of the frames in the order they were stacked from bottom to top. If there are multiple possibilities for an ordering, list all such possibilities in alphabetical order, each one on a separate line. There will always be at least one legal ordering for each input block. List the output for all blocks in the input sequentially, without any blank lines (not even between blocks).', 'd:\\oj\\data\\1387', 'd:\\oj\\data\\1387', '9\r\n8\r\n.CCC....\r\nECBCBB..\r\nDCBCDB..\r\nDCCC.B..\r\nD.B.ABAA\r\nD.BBBB.A\r\nDDDDAD.A\r\nE...AAAA\r\nEEEEEE..', 'EDABC', 'Southern African 2001', 'Phillip', '', '2007-08-26 11:18:43', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1388, 'Channel Allocation', 'When a radio station is broadcasting over a very large area, repeaters are used to retransmit the signal so that every receiver has a strong signal. However, the channels used by each repeater must be carefully chosen so that nearby repeaters do not interfere with one another. This condition is satisfied if adjacent repeaters use different channels. \r\n\r\nSince the radio frequency spectrum is a precious resource, the number of channels required by a given network of repeaters should be minimised. You have to write a program that reads in a description of a repeater network and determines the minimum number of channels required.', 'The input consists of a number of maps of repeater networks. Each map begins with a line containing the number of repeaters. This is between 1 and 26, and the repeaters are referred to by consecutive upper-case letters of the alphabet starting with A. For example, ten repeaters would have the names A,B,C,...,I and J. A network with zero repeaters indicates the end of input. \r\n\r\nFollowing the number of repeaters is a list of adjacency relationships. Each line has the form: \r\n\r\nA:BCDH \r\n\r\nwhich indicates that the repeaters B, C, D and H are adjacent to the repeater A. The first line describes those adjacent to repeater A, the second those adjacent to B, and so on for all of the repeaters. If a repeater is not adjacent to any other, its line has the form \r\n\r\nA: \r\n\r\nThe repeaters are listed in alphabetical order. \r\n\r\nNote that the adjacency is a symmetric relationship; if A is adjacent to B, then B is necessarily adjacent to A. Also, since the repeaters lie in a plane, the graph formed by connecting adjacent repeaters does not have any line segments that cross.', 'For each map (except the final one with no repeaters), print a line containing the minumum number of channels needed so that no adjacent channels interfere. The sample output shows the format of this line. Take care that channels is in the singular form when only one channel is required.', 'd:\\oj\\data\\1388', 'd:\\oj\\data\\1388', '2\r\nA:\r\nB:\r\n4\r\nA:BC\r\nB:ACD\r\nC:ABD\r\nD:BC\r\n4\r\nA:BCD\r\nB:ACD\r\nC:ABD\r\nD:ABC\r\n0', '1 channel needed.\r\n3 channels needed.\r\n4 channels needed.', 'Southern African 2001', 'Phillip', '', '2007-08-26 11:18:45', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1389, 'Alien Security', 'You are in charge of security at a top-secret government research facility. Recently your government has captured a live extra-terrestrial (ET) life form, and is hosting an open day for fellow researchers. Of course, not all the guests can be trusted, so they are assigned different security clearance levels. Only guests with a level 5 rating will be allowed into the lab where the extra-terrestrial is being held; other than that, everyone is free to roam throughout the rest of the facility. Each room in the facility is connected via one-way airlocks, so that you can pass through the door in only one direction. \r\n\r\nTo protect your precious ET you will put in place enhanced security measures (in the form of armed guards) on the route leading to the room containing the ET, but not in the room itself ?the guards do not have sufficient clearance to enter the room containing the ET. \r\n\r\nThe guards will check the identity and the security rating of all guests trying to pass through the room in which they are stationed, so you would like to place the guards where they will cause the minimum amount of irritation to the guests who have no intention of visiting the ET. The room where the guards must be placed thus satisfies the following two conditions: \r\n\r\n1. In order to get to the room containing the ET, the guests must pass through the room containing the guards; \r\n\r\n2. There is no other room with this property that is closer to the room containing the ET ?remember, the guards cannot be placed in the room containing the ET itself. \r\n\r\nThe diagram below illustrates one possible map of your facility: \r\n<img src=images\\1389.gif></img>  \r\n\r\nNote that placing the guards in room 2 would satisfy the first condition, but room 3 is closer to the ET, so the guards must be placed in room 3.', 'All guests enter through room 0, the entrance to your facility. Your program accepts a sequence of lines containing integers. The first line consists of two integers: the number of rooms, and the room in which the ET is being held (out of his own free will, of course). \r\n\r\nThe rest of the input is a sequence of lines consisting of only two integers, specifying where the airlock-doors are located. The first number on these lines specifies the source room, and the second the destination room. Remember: you can pass only from the source room to the destination room.', 'The output of your program consists only of a single line: \r\n\r\nPut guards in room N. \r\n\r\nwhere N is the room you''ve decided to place the guards.', 'd:\\oj\\data\\1389', 'd:\\oj\\data\\1389', '9 4\r\n0 2\r\n2 3\r\n3 4\r\n5 3\r\n5 4\r\n3 6\r\n6 5\r\n6 7\r\n6 8\r\n4 7\r\n0 1\r\n1 7\r\n7 0', 'Put guards in room 3', 'Southern African 2001', 'Phillip', '', '2007-08-26 11:18:48', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1390, 'Octal Fractions', 'Fractions in octal (base 8) notation can be expressed exactly in decimal notation. For example, 0.75 in octal is 0.953125 (7/8 + 5/64) in decimal. All octal numbers of n digits to the right of the octal point can be expressed in no more than 3n decimal digits to the right of the decimal point. \r\n\r\nWrite a program to convert octal numerals between 0 and 1, inclusive, into equivalent decimal numerals.', 'The input to your program will consist of octal numbers, one per line, to be converted. Each input number has the form 0.d1d2d3 ... dk, where the di are octal digits (0..7). There is no limit on k.', 'Your output will consist of a sequence of lines of the form \r\n\r\n\r\n0.d1d2d3 ... dk [8] = 0.D1D2D3 ... Dm [10]\r\n\r\n\r\nwhere the left side is the input (in octal), and the right hand side the decimal (base 10) equivalent. There must be no trailing zeros, i.e. Dm is not equal to 0.', 'd:\\oj\\data\\1390', 'd:\\oj\\data\\1390', '0.75\r\n0.0001\r\n0.01234567', '0.75 [8] = 0.953125 [10]\r\n0.0001 [8] = 0.000244140625 [10]\r\n0.01234567 [8] = 0.020408093929290771484375 [10]', 'Southern African 2001', 'Phillip', '', '2007-08-26 11:18:51', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1391, '', '', '', '', 'd:\\oj\\data\\1391', 'd:\\oj\\data\\1391', '', '', '', '', '', '2007-08-26 11:18:55', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1392, '', '', '', '', 'd:\\oj\\data\\1392', 'd:\\oj\\data\\1392', '', '', '', '', '', '2007-08-26 11:18:58', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1393, '', '', '', '', 'd:\\oj\\data\\1393', 'd:\\oj\\data\\1393', '', '', '', '', '', '2007-08-26 11:19:01', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1394, '', '', '', '', 'd:\\oj\\data\\1394', 'd:\\oj\\data\\1394', '', '', '', '', '', '2007-08-26 11:19:05', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1395, '', '', '', '', 'd:\\oj\\data\\1395', 'd:\\oj\\data\\1395', '', '', '', '', '', '2007-08-26 11:19:08', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1396, '', '', '', '', 'd:\\oj\\data\\1396', 'd:\\oj\\data\\1396', '', '', '', '', '', '2007-08-26 11:19:10', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1397, '', '', '', '', 'd:\\oj\\data\\1397', 'd:\\oj\\data\\1397', '', '', '', '', '', '2007-08-26 11:19:14', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1398, '', '', '', '', 'd:\\oj\\data\\1398', 'd:\\oj\\data\\1398', '', '', '', '', '', '2007-08-26 11:19:17', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1399, '', '', '', '', 'd:\\oj\\data\\1399', 'd:\\oj\\data\\1399', '', '', '', '', '', '2007-08-26 11:19:20', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1400, '8数码问题', '八方块移动游戏要求从一个含8个数字（用1-8表示）的方块以及一个空格方块（用0表示）的3x3矩阵的起始状态开始，不断移动该空格方块以使其和相邻的方块互换，直至达到所定义的目标状态。空格方块在中间位置时有上、下、左、右4个方向可移动，在四个角落上有2个方向可移动，在其他位置上有3个方向可移动。例如，假设一个3x3矩阵的初始状态为： \r\n   8 0 3\r\n   2 1 4\r\n   7 6 5\r\n目标状态为：\r\n   1 2 3\r\n   8 0 4\r\n   7 6 5\r\n则一个合法的移动路径为：\r\n\r\n   8 0 3  >   8 1 3 >    8 1 3>     0 1 3>    1 0 3 >     1 2 3\r\n   2 1 4  >  2 0 4  >  0 2 4  >  8 2 4   >  8 2 4   >  8 0 4\r\n   7 6 5  >  7 6 5  >   7 6 5 >    7 6 5 >     7 6 5>      7 6 5\r\n\r\n另外，在所有可能的从初始状态到目标状态的移动路径中，步数最少的路径被称为最短路径；在上面的例子中，最短路径为5。如果不存在从初试状态到目标状态的任何路径，则称该组状态无解。 请设计有效的（细节请见评分规则）算法找到从八方块的某初试状态到某目标状态的所有可能路径中的最短路径。', '程序需读入初始状态和目标状态，这两个状态都由9个数字组成（0表示空格，1-8表示8个数字方块），每行3个数字，数字之间用空格隔开。', '如果输入数据有解，输出一个表示最短路径的非负的整数；如果输入数据无解，输出-1。', 'd:\\oj\\data\\1400', 'd:\\oj\\data\\1400', '8 0 3\r\n2 1 4\r\n7 6 5\r\n1 2 3\r\n8 0 4\r\n7 6 5', '5', '', '2005年百度之星程序设计大赛 决赛', '', '2012-05-14 17:16:55', 1000, 65536, 'N', NULL, 34, 63, 54, 8, 57, 6, 6, 30000, 304, ''),
(1401, 'Crossing River', 'A group of N people wishes to go across a river with only one boat, which can at most carry two persons. Therefore some sort of shuttle arrangement must be arranged in order to row the boat back and forth so that all people may cross. Each person has a different rowing speed; the speed of a couple is determined by the speed of the slower one. Your job is to determine a strategy that minimizes the time for these people to get across.', 'The first line of the input contains a single integer T (1 <= T <= 20), the number of test cases. Then T cases follow. The first line of each case contains N, and the second line contains N integers giving the time for each people to cross the river. Each case is preceded by a blank line. There won''t be more than 1000 people and nobody takes more than 100 seconds to cross.', 'For each test case, print a line containing the total number of seconds required for all the N people to cross the river.', 'd:\\oj\\data\\1401', 'd:\\oj\\data\\1401', '1\r\n4\r\n1 2 5 10', '17', '', 'POJ Monthly--2004.07.18 (modified by Larrouse)', '', '2007-08-26 14:24:45', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1402, 'SPJ', '', '', '', 'd:\\oj\\data\\1402', 'd:\\oj\\data\\1402', '', '', '', '', '', '2007-08-28 13:16:58', 1000, 65536, 'Y', NULL, 1, 2, 50, 1, 50, 2, 1, 30000, 1, ''),
(1403, '一元三次方程', '求方程 a * x * x * x + b * x * x + c * x + d = 0 的三个复根', '包含多行，每行 4 个浮点数 a, b, c, d, 用空格分开.\r\na, b, c, d 都在 [0, 65535] 且 a > 0.保证方程有3个复根', '对输入的每行输出三行，表示方程的 3 个根', 'd:\\oj\\data\\1403', 'd:\\oj\\data\\1403', '1 0 0 1\r\n1 0 0 2', '-1 + 0i\r\n0.5 + 0.866025403784439i\r\n0.5 - 0.866025403784439i\r\n-1.25992104989487 + 0i\r\n0.629960524947437 + 1.09112363597172i\r\n0.629960524947437 - 1.09112363597172i', '说明：如果 fabs(a * x * x * x + b * x * x + c * x + d) < 1e-6 则判为正确', 'NJU.Butterfly', '', '2011-03-17 11:05:46', 1000, 65536, 'N', NULL, 3, 40, 7, 37, 92, 9, 3, 30000, 93, ''),
(1404, 'The Trip, 2007', 'A number of students are members of a club that travels annually to exotic locations. Their destinations in the past have included Indianapolis, Phoenix, Nashville, Philadelphia, San Jose, Atlanta, Eindhoven, Orlando, Vancouver, Honolulu, Beverly Hills, Prague, Shanghai, and San Antonio. This spring they are hoping to make a similar trip but aren''t quite sure where or when. \r\n\r\nAn issue with the trip is that their very generous sponsors always give them various knapsacks and other carrying bags that they must pack for their trip home. As the airline allows only so many pieces of luggage, they decide to pool their gifts and to pack one bag within another so as to minimize the total number of pieces they must carry. \r\n\r\nThe bags are all exactly the same shape and differ only in their linear dimension which is a positive integer not exceeding 1000000. A bag with smaller dimension will fit in one with larger dimension. You are to compute which bags to pack within which others so as to minimize the overall number of pieces of luggage (i.e. the number of outermost bags). While maintaining the minimal number of pieces you are also to minimize the total number of bags in any one piece that must be carried.', 'Standard input contains several test cases. Each test case consists of an integer 1 ≤ n ≤ 10000 giving the number of bags followed by n integers on one or more lines, each giving the dimension of a piece. A line containing 0 follows the last test case.', 'For each test case your output should consist of k, the minimum number of pieces, followed by k lines, each giving the dimensions of the bags comprising one piece, separated by spaces. Each dimension in the input should appear exactly once in the output, and the bags in each piece must fit nested one within another. If there is more than one solution, any will do. Output an empty line between cases.', 'd:\\oj\\data\\1404', 'd:\\oj\\data\\1404', '6\r\n1 1 2 2 2 3\r\n0', '3\r\n1 2\r\n1 2\r\n3 2', '', 'Waterloo Local Contest, 2006.9.24', '', '2007-08-26 16:16:49', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1405, 'SPJ初体验', '输入一个合数A,找出另外2个不为1的数B,C,使得它们的乘积等于A.', '多组测试数据\r\n每个数据输入为一个正整数.', '输出B,C.', 'd:\\oj\\data\\1405', 'd:\\oj\\data\\1405', '12\r\n30\r\n60', '3 4\r\n5 6\r\n6 10', '此题目只为让大家熟悉Special Judged  和一般题目的区别.\r\n<a href=http://222.196.33.254/oj/faq.htm#sj>Special Judged</a>', 'SWUST.Larrouse', '', '2012-03-11 18:34:26', 1000, 65536, 'N', NULL, 38, 227, 17, 110, 76, 99, 34, 30000, 299, ''),
(1406, '三角形', '一天mingming问了Flying一个数学问题：给出一个整数，存在多少个直角三角，它的某一条边等于这个整数，而且其它边也是整数。Flying是做ACM的，他就写了个程序解决了这个问题。你也能写个程序解决吗？', '第一行一个整数n， 代表有多少个数据（ 1 <= n<= 20）。接下来有n行，没一行有一个数据。一个数据就是个整数ai （ 1 <= i <= n, 1 <= ai <= 100）。', '每个数据都必须有相应的输出。两个数据之间有一个空行。最后一个测试数据输出后不要加空行。\r\n对于每一个数据，如果找不到解，则输出一个空行。如果找到解，就把符合条件的所有直角三角形输出。每个三角行占一行，输出该三角行的另外两条边，必须先输出长边，然后一个逗号，再输出短边。两个三角行之间不能有空行，而且必须按长边降序排列。', 'd:\\oj\\data\\1406', 'd:\\oj\\data\\1406', '2\r\n20\r\n12', '101,99\r\n52,48\r\n29,21\r\n25,15\r\n16,12\r\n\r\n37,35\r\n20,16\r\n15,9\r\n13,5', '', 'swust.myler', '', '2012-04-07 19:59:56', 1000, 65536, 'N', NULL, 43, 208, 21, 159, 82, 44, 36, 30000, 309, ''),
(1407, 'Antimonotonicity', 'I have a sequence Fred of length n comprised of integers between 1 and n inclusive. The elements of Fred are pairwise distinct. I want to find a subsequence Mary of Fred that is as long as possible and has the property that: \r\n\r\nMary0 > Mary1 < Mary2 > Mary3 < ...', 'There are many test cases.Each test case is contained on a single line. A line describing a test case is formatted as follows: \r\n\r\nn Fred0 Fred1 Fred2 ... Fredn-1. \r\n\r\nwhere n and each element of Fred is an integer expressed in decimal with no leading zeroes. No line will have leading or trailing whitespace, and two adjacent integers on the same line will be separated by a single space. n will be at most 30000.', 'For each test case, output a single integer followed by a newline --- the length of the longest subsequence Mary of Fred with the desired properties.', 'd:\\oj\\data\\1407', 'd:\\oj\\data\\1407', '5 1 2 3 4 5\r\n5 5 4 3 2 1\r\n5 5 1 4 2 3', '1\r\n2\r\n5', '', 'Waterloo Local Contest Modified by myler', '', '2011-01-13 14:41:45', 2000, 65536, 'N', NULL, 8, 19, 42, 6, 50, 7, 6, 30000, 85, ''),
(1408, '魔术方阵', '有一个N*N的方阵，其中N为奇数，请编程实现在N*N的魔术方阵中，填入1到N*N的整数，使其各行，各列及对角线之和都相等。\r\n规则如下：\r\n首先，将1填入最上列的中间格，然后往左上方走；\r\n1．	以1的级数增加，并将此值填入空格\r\n2．	假设方格已填满，则在原地的下一格填上数字，并继续做\r\n3．	若超出方格，则往下到最底层或往右到最右方，看两者哪一个有空格，即将数字填入此方格中。\r\n4．	若两者都无空格，则在原地的下一方格填入数字.', '输入包括多组数据，为了简单起见，我们假设所输入的N（如3）不大于15，如果输入的N不符合要求，输出-1。', '对每一个输入的N输出相应的魔术方阵。要求在输出数字前要先输入4个空格。', 'd:\\oj\\data\\1408', 'd:\\oj\\data\\1408', '2\r\n3', '-1\r\n6    1    8\r\n7    5    3\r\n2    9    4', '', 'SWUST.Dreamone', '', '2007-08-27 17:36:40', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 4, ''),
(1409, 'Black and white painting', 'You are visiting the Centre Pompidou which contains a lot of modern paintings. In particular you notice one painting which consists solely of black and white squares, arranged in rows and columns like in a chess board (no two adjacent squares have the same colour). By the way, the artist did not use the tool of problem A to create the painting.\r\n\r\nSince you are bored, you wonder how many 8 × 8 chess boards are embedded within this painting. The bottom right corner of a chess board must always be white.', 'The input contains several test cases. Each test case consists of one line with three integers n, m and c. (8 ≤ n, m ≤ 40000), where n is the number of rows of the painting, and m is the number of columns of the painting. c is always 0 or 1, where 0 indicates that the bottom right corner of the painting is black, and 1 indicates that this corner is white.\r\n\r\nThe last test case is followed by a line containing three zeros.', 'For each test case, print the number of chess boards embedded within the given painting.', 'd:\\oj\\data\\1409', 'd:\\oj\\data\\1409', '8 8 0\r\n8 8 1\r\n9 9 1\r\n40000 39999 0\r\n0 0 0', '0\r\n1\r\n2\r\n799700028', '', 'Ulm Local 2007', '', '2012-02-03 19:58:48', 1000, 65536, 'N', NULL, 28, 33, 85, 5, 15, 28, 28, 30000, 88, ''),
(1410, 'Rain Cover', 'The farm has suffered an extraordinary amount of rain lately. Now\r\nwanting to eat free from rain, the ingenious cows have set up N (1 <=\r\nN <= 25,000) rectangular umbrellas to shield them from the rain while\r\nthey are grazing.\r\n\r\nThe cows'' field is a single strip of grass, and each umbrella\r\ncompletely covers some interval of grass. However, they have set up\r\nthe umbrellas in a most haphazard way, and some of the umbrellas cover\r\nall or part of an area covered by one or more other umbrellas. Your\r\ntask is to find the greatest number of umbrellas whose areas are\r\ncompletely covered by a single umbrella.', '* Line 1: The single integer N\r\n\r\n* Lines 2..N+1: Two space-separated integers, A and B (1 <= A < B <=\r\n        2,000,000,000) that are the endpoints of the interval of grass\r\n        covered by an umbrella. No endpoint is shared by any two\r\n        umbrellas.', '* Line 1: A single integer that is the maximum number of umbrellas\r\n        whose coverage is entirely within the area covered by another\r\n        single umbrella.', 'd:\\oj\\data\\1410', 'd:\\oj\\data\\1410', '4\r\n1 7\r\n2 3\r\n5 6\r\n4 10', '2', 'The first umbrella covers the second and third umbrellas, as seen below:\r\n\r\n      *-----------*\r\n      |           |\r\n*-----------*\r\n|           |\r\n| *-*   *-* |\r\n| | |   | | |\r\n1 2 3 4 5 6 7 8 9 10', 'USACO', '', '2007-09-08 16:36:06', 1000, 65536, 'N', NULL, 1, 19, 5, 18, 95, 3, 1, 30000, 31, ''),
(1411, 'Elite Eating', 'FJ has uniquely branded 1,000 cows, each with an integer in the range\r\n(1..1,000).\r\n\r\nFJ has also created an elite eating program where exactly N (1 <=\r\nN <= 250) cows with specific brands get to enter the barn first.  The\r\nrestriction on this elite group of cows is that the sum of the squares\r\nof the cows'' brands must be strictly less than a given integer S (1\r\n<= S < = 10,100).\r\n\r\nDetermine the number of different groups of cows that can be selected\r\nfor the elite eating program.', '* Line 1: Two space-separated integers, N and S', '* Line 1: A single integer that is the number of different possible\r\n        groups that can line up for elite eating.', 'd:\\oj\\data\\1411', 'd:\\oj\\data\\1411', '3 30', '4', 'The sequences of length 3 with sum of squares < 30 are:\r\n1 2 3\r\n1 2 4\r\n2 3 4\r\n1 3 4\r\n\r\nThe sequence of brands 1 2 5 is not valid since 1 + 4 + 25 = 30 and\r\nis not strictly less than 30.', 'USACO', '', '2008-05-01 19:57:31', 1000, 65536, 'N', NULL, 1, 9, 11, 4, 80, 3, 1, 30000, 32, ''),
(1412, 'Spring Vacation', 'Farmer John has won the WCOW radio station call-in sweepstakes grand\r\nprize: K (1 <= K <= 62) plane tickets for a vacation getaway to sunny\r\nBovine, TX, home of the world''s largest cow waterslide.\r\n\r\nFJ has decided to give the tickets to K of his N (K <= N <= 900) cows\r\n(who, for the purposes of this problem, are numbered 1..N).  He wants\r\nto send only cows who are all friends with each other; you are\r\nprovided a list of F (1 <= F <= 5600) friendships.\r\n\r\nDetermine the set of K cow-friends that will enjoy the fabulous\r\nvacation.', '* Line 1: Three space-separated integers: K, N, and F.\r\n\r\n* Lines 2..F+1: Each line contains two space-separated integers that\r\n        describe friendship between the two named cows. Friendship is\r\n        commutative, if cow 2 likes cow 4 then cow 4 likes cow 2.', 'Output -1 if no set of K friends exists.  Otherwise, output the set of\r\nK cow-friends in ascending order, one integer per output line.  If\r\nmore than one set of K friends exists, output the set whose first\r\nelement is smallest (or second element is smallest if the first\r\nelements are the same, etc.).', 'd:\\oj\\data\\1412', 'd:\\oj\\data\\1412', '4 6 8\r\n1 2\r\n1 3\r\n1 6\r\n2 3\r\n2 6\r\n3 6\r\n4 5\r\n5 6', '1\r\n2\r\n3\r\n6', '', 'USACO', '', '2011-12-10 20:40:45', 1000, 65536, 'N', NULL, 2, 12, 17, 10, 83, 5, 2, 30000, 37, ''),
(1413, 'Cow Exhibition', '"Fat and docile, big and dumb, they look so stupid, they aren''t much \r\nfun..."\r\n- Cows with Guns by Dana Lyons\r\n\r\nThe cows want to prove to the public that they are both smart and fun.  \r\nIn order to do this, Bessie has organized an exhibition that will be put \r\non by the cows. She has given each of the N (1 <= N <= 100) cows a \r\nthorough interview and determined two values for each cow: the smartness \r\nSi (-1000 <= Si <= 1000) of the cow and the funness Fi (-1000 <= Fi <= \r\n1000) of the cow.\r\n\r\nBessie must choose which cows she wants to bring to her exhibition. She \r\nbelieves that the total smartness TS of the group is the sum of the Si''s \r\nand, likewise, the total funness TF of the group is the sum of the Fi''s.  \r\nBessie wants to maximize the sum of TS and TF, but she also wants both of \r\nthese values to be non-negative (since she must also show that the cows \r\nare well-rounded; a negative TS or TF would ruin this).  Help Bessie \r\nmaximize the sum of TS and TF without letting either of these values \r\nbecome negative.', '* Line 1: A single integer N, the number of cows\r\n\r\n* Lines 2..N+1: Two space-separated integers Si and Fi, respectively\r\n        the smartness and  funness for each cow.', '* Line 1: One integer: the optimal sum of TS and TF such that both TS and TF are non-negative. If no subset of the cows has non-negative TS and non- negative TF, print 0.', 'd:\\oj\\data\\1413', 'd:\\oj\\data\\1413', '5\r\n-5 7\r\n8 -6\r\n6 -3\r\n2 1\r\n-8 -5', '8', 'OUTPUT DETAILS: \r\n\r\nBessie chooses cows 1, 3, and 4, giving values of TS = -5+6+2 = 3 and TF \r\n= 7-3+1 = 5, so 3+5 = 8. Note that adding cow 2 would improve the value \r\nof TS+TF to 10, but the new value of TF would be negative, so it is not \r\nallowed.', 'USACO 2003 Fall', '', '2011-05-03 08:58:22', 1000, 65536, 'N', NULL, 5, 53, 9, 9, 69, 10, 4, 30000, 57, ''),
(1414, 'Cow Queueing', 'The cows are lining up for dinner.  They use an order determined by\r\nthe numerical brands on their hide.  FJ knew the cows weren''t too\r\nbright, so he used brands with only ''0''s and ''1''s. Each cow received a \r\nbrand whose length was no longer than 31 bits.\r\n\r\nThe not-so-bright cows don''t line up in the order we might expect:\r\n0\r\n1\r\n10\r\n11\r\n100\r\netc.\r\n\r\nInstead, they line up in an order where the brands are sorted by these\r\nrules:\r\n\r\n   * A brand with fewer ''1''s precedes a brand with more ''1''s\r\n\r\n   * For brands with the same number of ''1''s, the brand with\r\n     the smallest magnitude (calculated traditionally) comes first\r\n\r\nThus, the cow with brand 1000 (a single ''1'') lines up before the cow\r\nwith brand 110 (two ''1''s).  The order of the 12 cows numbered 100\r\nthrough 1111 is:\r\n\r\n100\r\n1000\r\n101\r\n110\r\n1001\r\n1010\r\n1100\r\n111\r\n1011\r\n1101\r\n1110\r\n1111\r\n\r\nExcept for the ''0'' brand, brands don''t have leading zeroes. Happily, if \r\nbrand M is present in line and brand N is present in line, then all \r\nbrands whose magnitude falls between M and N is present in line.\r\n\r\nWrite a program to find which cow is in a given place in line.', '* Line 1: A single binary integer: the cow brand whose magnitude is\r\n        the smallest of  all those standing in line\r\n\r\n* Line 2: A single binary integer: the cow brand whose magnitude is\r\n        the largest of all those standing in line\r\n\r\n* Line 3: A single decimal integer: the position in the line whose cow\r\n        brand is to  be reported.  The first cow in line is in\r\n        position 1.', '* Line 1: The integer that is the brand of the cow standing in the\r\n        line position named in the input.', 'd:\\oj\\data\\1414', 'd:\\oj\\data\\1414', '100\r\n1111\r\n5', '1001', '', 'USACO', '', '2007-09-05 11:24:16', 1000, 65536, 'N', NULL, 0, 1, 0, 1, 100, 1, 0, 30000, 25, ''),
(1415, 'Navigation Nightmare', 'Farmer John''s pastoral neighborhood has N farms (2 <= N <= 40,000), \r\nusually numbered/labeled 1..N.  A series of M (1 <= M < 40,000) vertical \r\nand horizontal roads each of varying lengths (1 <= length <= 1000)\r\nconnect the farms.  A map of these farms might look something like\r\nthe illustration below in which farms are labeled F1..F7 for clarity\r\nand lengths between connected farms are shown as (n):\r\n           F1 --- (13) ---- F6 --- (9) ----- F3\r\n            |                                 |\r\n           (3)                                |\r\n            |                                (7)\r\n           F4 --- (20) -------- F2            |\r\n            |                                 |\r\n           (2)                               F5\r\n            | \r\n           F7 \r\n\r\nBeing an ASCII diagram, it is not precisely to scale, of course.\r\n\r\nEach farm can connect directly to at most four other farms via roads that \r\nlead exactly north, south, east, and/or west.  Moreover, farms are only \r\nlocated at the endpoints of roads, and some farm can be found at every \r\nendpoint of every road.  No two roads cross, and precisely one path \r\n(sequence of roads) links every pair of farms.\r\n\r\nFJ lost his paper copy of the farm map and he wants to reconstruct it\r\nfrom backup information on his computer.  This data contains lines\r\nlike the following, one for every road:\r\n\r\n   There is a road of length 10 running north from Farm #23 to Farm #17\r\n   There is a road of length 7 running east from Farm #1 to Farm #17\r\n   ...\r\n\r\nAs FJ is retrieving this data, he is occasionally interrupted by \r\nquestions such as the following that he receives from his navigationally-\r\nchallenged neighbor, farmer Bob:\r\n\r\n    What is the Manhattan distance between farms #1 and #23?\r\n\r\nFJ answers Bob, when he can (sometimes he doesn''t yet have enough\r\ndata yet).  In the example above, the answer would be 17, since Bob\r\nwants to know the "Manhattan" distance between the pair of farms.\r\nThe Manhattan distance between two points (x1,y1) and (x2,y2) is\r\njust |x1-x2| + |y1-y2| (which is the distance a taxicab in a large\r\ncity must travel over city streets in a perfect grid to connect two\r\nx,y points).\r\n\r\nWhen Bob asks about a particular pair of farms, FJ might not yet\r\nhave enough information to deduce the distance between them; in\r\nthis case, FJ apologizes profusely and replies with "-1".', '* Line 1: Two space-separated integers: N and M\r\n\r\n* Lines 2..M+1: Each line contains four space-separated entities, F1,\r\n        F2, L, and D that describe a road. F1 and F2 are numbers of\r\n        two farms connected by a road, L is its length, and D is a\r\n        character that is either ''N'', ''E'', ''S'', or ''W'' giving the\r\n        direction of the road from F1 to F2.\r\n\r\n* Line M+2: A single integer, K (1 <= K <= 10,000), the number of FB''s\r\n        queries\r\n\r\n* Lines M+3..M+K+2: Each line corresponds to a query from Farmer Bob\r\n        and contains three space-separated integers: F1, F2, and I. F1\r\n        and F2 are numbers of the two farms in the query and I is the\r\n        index (1 <= I <= M) in the data after which Bob asks the\r\n        query. Data index 1 is on line 2 of the input data, and so on.', '* Lines 1..K: One integer per line, the response to each of Bob''s\r\n        queries.  Each line should contain either a distance\r\n        measurement or -1, if it is impossible to determine the\r\n        appropriate distance.', 'd:\\oj\\data\\1415', 'd:\\oj\\data\\1415', '7 6\r\n1 6 13 E\r\n6 3 9 E\r\n3 5 7 S\r\n4 1 3 N\r\n2 4 20 W\r\n4 7 2 S\r\n3\r\n1 6 1\r\n1 4 3\r\n2 6 6', '13\r\n-1\r\n10', 'At time 1, FJ knows the distance between 1 and 6 is 13.\r\nAt time 3, the distance between 1 and 4 is still unknown.\r\nAt the end, location 6 is 3 units north and 7 units west of location 2, so the distance \r\nis 10.', 'USACO', '', '2012-07-23 22:48:36', 2000, 65536, 'N', NULL, 0, 3, 0, 3, 100, 1, 0, 1000, 57, '');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1416, 'Cow Marathon', 'After hearing about the epidemic of obesity in the USA, Farmer John\r\nwants his cows to get more exercise, so he has committed to create\r\na bovine marathon for his cows to run.  The marathon route will\r\ninclude a pair of farms and a path comprised of a sequence of roads\r\nbetween them. Since FJ wants the cows to get as much exercise as\r\npossible he wants to find the two farms on his map that are the\r\nfarthest apart from each other (distance being measured in terms\r\nof total length of road on the path between the two farms).  Help\r\nhim determine the distances between this farthest pair of farms.', '* Lines 1.....: Same input format as "Navigation Nightmare".', 'The same farm layout as in problem 1.', 'd:\\oj\\data\\1416', 'd:\\oj\\data\\1416', '7 6\r\n1 6 13 E\r\n6 3 9 E\r\n3 5 7 S\r\n4 1 3 N\r\n2 4 20 W\r\n4 7 2 S', '52', 'The longest marathon runs from farm 2 via roads 4, 1, 6 and 3 \r\nto farm 5 and is of length 20+3+13+9+7=52.', 'USACO', '', '2011-05-03 08:35:59', 1000, 65536, 'N', NULL, 3, 3, 100, 0, 0, 3, 3, 30000, 52, ''),
(1417, 'Distance Queries', 'Farmer John''s cows refused to run in his marathon since he chose a\r\npath much too long for their leisurely lifestyle.  He therefore\r\nwants to find a path of a more reasonable length.  The input to\r\nthis problem consists of the same input as in "Navigation Nightmare",\r\nfollowed by a line containing a single integer K, followed by K\r\n"distance queries".  Each distance query is a line of input containing\r\ntwo integers, giving the numbers of two farms between which FJ is\r\ninterested in computing distance (measured in the length of the\r\nroads along the path between the two farms).  Please answer FJ''s\r\ndistance queries as quickly as possible!', '* Lines 1..1+M: Same format as <a href=http://222.196.33.254/oj/showproblem?problem_id=1415>"Navigation Nightmare"</a>\r\n\r\n* Line 2+M: A single integer, K.  1 <= K <= 10,000\r\n\r\n* Lines 3+M..2+M+K: Each line corresponds to a distance query and\r\n        contains the indices of two farms.', '* Lines 1..K: For each distance query, output on a single line an\r\n        integer giving  the appropriate distance.', 'd:\\oj\\data\\1417', 'd:\\oj\\data\\1417', '7 6\r\n1 6 13 E\r\n6 3 9 E\r\n3 5 7 S\r\n4 1 3 N\r\n2 4 20 W\r\n4 7 2 S\r\n3\r\n1 6\r\n1 4\r\n2 6', '13\r\n3\r\n36', 'Farms 2 and 6 are 20+3+13=36 apart.\r\n\r\nLCA最近公共祖先', 'USACO', '', '2011-09-26 22:46:24', 2000, 65536, 'N', NULL, 16, 29, 55, 9, 60, 8, 6, 1000, 281, ''),
(1418, 'Distance Statistics', 'Frustrated at the number of distance queries required to find a reasonable route for his cow marathon, FJ decides to ask queries from which he can learn more information.  Specifically, he supplies an integer K (1 <= K <=1,000,000,000) and wants to know how many pairs of farms lie at a distance at most K from each other (distance is measured in terms of the length of road required to travel from one farm to another).  Please only count pairs of distinct farms (i.e.do not count pairs such as (farm #5, farm #5) in your answer).', '* Lines 1 ..M+1: Same input format as in "Navigation Nightmare"\r\n\r\n* Line M+2: A single integer, K.', '* Line 1: The number of pairs of farms that are at a distance of at\r\n        most K from each-other.', 'd:\\oj\\data\\1418', 'd:\\oj\\data\\1418', '7 6\r\n1 6 13 E\r\n6 3 9 E\r\n3 5 7 S\r\n4 1 3 N\r\n2 4 20 W\r\n4 7 2 S\r\n10', '5', 'There are 5 roads with length smaller or equal than 10, namely 1-4 (3), 4-\r\n7 (2), 1-7 (5), 3-5 (7) and 3-6 (9).', 'USACO', '', '2007-09-06 20:52:47', 1000, 65536, 'N', NULL, 0, 5, 0, 5, 100, 2, 0, 30000, 26, ''),
(1419, 'Cow Word Games', 'Tired of being teased by the other farm animals for their poor vocabulary, Farmer John''s cows have stolen a word game from FJ''s house to use for practice.  In this particular word game, each cow receives a set of N (1 <= N <= 100) not necessarily unique uppercase letters (for example: ''V'', ''B'', ''O'', ''E'', ''I'', ''N'', ''O'').  Each letter has a certain specified point value, and each cow''s goal is to form a valid word using a subset of her letters worth the maximum number of points.  For example, if every letter is worth 1 point,the maximum number of points one can receive from the letters above is 6, using the word ''BOVINE''.\r\n\r\nThe cows have also managed to steal a dictionary containing M (1<= M <= 10,000) words from FJ''s house, so they can check whether or not certain words are valid.  Please help his cows compute the best possible words they can form based on the letters they receive.\r\n\r\nAll letters are worth 1 point except ''C'', which is worth 10 points.  We receive the letters ''D'', ''C'', ''O'', ''R'', and ''W''.', '* Line 1: Two space-separated integers, N and M (1 <= M <= 10000).\r\n\r\n* Lines 2..27: Each of these 26 lines contains a positive integer giving the number of points for a letter of the alphabet. The first of these lines corresponds to ''A''; the last corresponds to ''Z''.\r\n\r\n* Lines 28..N+27: These N lines contain the letters received by a cow playing the game.   Each line contains a single uppercase letter.\r\n\r\n* Lines N+28..N+M+27: These M lines each contain a word from the dictionary.  Each word consists of at most N uppercase letters.', '* Line 1: A single integer, specifying the maximum number of points we can  receive.  If no valid words in the dictionary can be formed, output -1.', 'd:\\oj\\data\\1419', 'd:\\oj\\data\\1419', '5 4\r\n1\r\n1\r\n10\r\n1\r\n1\r\n(... all other letters worth 1...)\r\nD\r\nC\r\nO\r\nR\r\nW\r\nWORD\r\nCOW\r\nCOURT\r\nROW', '12', 'The word ''COW'' is worth 12 points, and we can form it using a subset of the letters in our input.', 'USACO', '', '2007-12-20 22:02:30', 1000, 65536, 'N', NULL, 8, 31, 26, 22, 73, 8, 8, 30000, 55, ''),
(1420, 'Automatic Fence Gate', 'Farmer John recently installed an electronic gate between his two fields.  He can control the gate from his home computer by sending it commands such as "raise 10 inches" and "lower 5 inches".\r\n\r\nThe gate is considered to be open when it is raised up as high as possible and it is closed when it is lowered to the ground level.FJ had carefully planned the sequence of gate raising and lowering instructions to be sent over the course of the day, but unfortunately a lightning storm scrambled the contents of FJ''s computer.  His list of N (1 <= N <= 1000) instructions now appear out of order, for example like the following:\r\n\r\n        11:30pm raise the gate 5 inches\r\n        10:05am lower the gate 3 inches\r\n        12:03pm raise the gate 6 inches\r\n        04:01am lower the gate 2 inches\r\n	... and so on.\r\n\r\nFJ had planned to execute these instructions in chronological order starting at midnight (12:00am) and ending at 11:59pm the same day.He remembers that his instructions would have caused the gate to completely close at least once.  Help him determine the total number of minutes the gate would have been closed if he were to execute his instructions in the order he originally planned.', '* Line 1: The single integer N\r\n\r\n* Lines 2..1+N: Each line corresponds to an instruction and contains two space-separated fields.  The first is a 7-digit timestamp of the form HH:MMxx where HH denotes hours, MM denotes minutes, and xx is either am or pm. The second entry in each line is an integer indicating the number of inches to raise the gate (negative numbers mean lowering the gate).', '* Line 1: A single integer, giving the number of minutes during the day that the  gate is completely closed.', 'd:\\oj\\data\\1420', 'd:\\oj\\data\\1420', '3\r\n1:30pm 1\r\n1:30am -10\r\n1:00am 5', '720', 'INPUT DETAILS:\r\n\r\nAt 1:00am the gate is raised 5 inches, then it is lowered 10 inches at 1:30am, and finally it is raised 1 inch at 1:30pm.\r\n\r\nSince we know the gate is closed at some point in time, this must have been the interval from 1:30am to 1:30pm, which lasted for 12 hours (720 minutes).', 'USACO', '', '2007-09-07 08:52:31', 1000, 65536, 'N', NULL, 0, 10, 0, 10, 100, 2, 0, 30000, 26, ''),
(1421, 'The Middle Squares', 'Bessie''s daghter, Cassie, returned from calf school with a new math \r\nproblem. "I''m not sure I can do all the arithmetic," she whined.\r\n\r\n"What is it you''re doing?" asked her concerned mother.\r\n\r\n"We are given a positive integer N less than 10,000," Cassie replied. "We \r\ntreat it as four digit number, even if it''s like 12 or something. We \r\nextract the second and third digits to create a new number which we\r\nthen square to create another four digit number. We repeat that until we \r\nget to some number that we have already seen."\r\n\r\nHelp poor Cassie with her homework. Here is an example that starts\r\nwith the number 4444:\r\n  N    2nd&3rd  Squared\r\n4444 ... 0044 ... 1936\r\n1936 ... 0093 ... 8649\r\n8649 ... 0064 ... 4096\r\n4096 ... 0009 ... 0081\r\n0081 ... 0008 ... 0064\r\n0064 ... 0006 ... 0036\r\n0036 ... 0003 ... 0009\r\n0009 ... 0000 ... 0000\r\n0000 ... 0000 ... 0000\r\nThis example required nine iterations to complete. The number 0000 \r\nresults in a loop, since its resulting middle square is also 0000.', '* Line 1: A single integer, N', '', 'd:\\oj\\data\\1421', 'd:\\oj\\data\\1421', '4444', '* Line 1: A single integer that is the number of iterations before\r\n        some number is  duplicated.', '9', 'USACO', '', '2007-08-31 20:35:32', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1422, 'Moo University - Team Tryouts', 'N (1 <= N <= 1,000) calves try out for the Moo U gymnastics team this year, each with a positive integer height and a weight less than 100,000.  Your goal is to select a team of as many calves as possible from this group. There is only one constraint the team must satisfy: the height H and weight W of each calf on the team must obey the\r\nfollowing inequality:\r\n\r\n                A*(H-h) + B*(W-w) <= C\r\n\r\nwhere h and w are the minimum height and weight values over all calves on the team, and A, B and C are supplied positive integral constants less than 10,000.   Compute the maximum number of calves on the team.', '* Line 1: A single integer, N\r\n\r\n* Line 2: Three space-separated integers, A, B and C\r\n\r\n* Lines 3..N+2: Two space-separated integers: respectively the height and weight of a calf', '* Line 1: One integer, the maximum number of calves on the team.', 'd:\\oj\\data\\1422', 'd:\\oj\\data\\1422', '8\r\n1 2 4\r\n5 1\r\n3 2\r\n2 3\r\n2 1\r\n7 2\r\n6 4\r\n5 1\r\n4 3', '5', 'OUTPUT DETAILS:\r\n\r\nCalves 1, 2, 3, 4 and 7, for example, form a legal team. A larger team is impossible.', 'USACO', '', '2010-05-20 15:41:26', 1000, 65536, 'N', NULL, 6, 36, 17, 26, 81, 12, 6, 30000, 40, ''),
(1423, 'Moo University - Emergency Pizza Order', 'Moo U''s cafeteria has run out of hay and so must order pizzas for the C (1 <= C <= 1,000) calves attending Moo U.  Conveniently, a large pizza from the local pizzeria, Pizza Farm, serves exactly one calf.\r\n\r\nPizza Farm is willing to make a pizza for each calf, but, due to the size of the order, has three constraints on the order:\r\n   * Although Pizza Farm has long list of T (1 <= T <= 30) vegetarian toppings, each of the pizzas must have exactly K (1 <= K <=T) toppings\r\n   * No topping on a pizza can be duplicated (a pizza cannot have onions and onions, for example).\r\n   * No two pizzas in the order can have the same set of toppings.\r\n     For example, if pizza 1 has onions, green peppers, pineapples, and wheat grass, then it can be the only pizza with that exact set of toppings, although pizza 2 might have onions, green peppers, pineapples, and also olives.\r\nFor ordering purposes, the toppings are numbered 1..T.\r\n\r\nThe calves at Moo U are very picky when it comes to their pizza toppings.  Some calves might not like all of the toppings available.A calf will eat a pizza only she likes every single one of the toppings on that pizza.  Determine the maximum number of calves that can be fed.', '* Line 1: Three integers: C, T, and K.\r\n\r\n* Lines 2..C+1: Each line of space-separated integers describes which toppings one of the calves likes.  The first integer on a line is the number of topping the calf likes.  The remaining integers on the line are the toppings that the calf likes.', '* Line 1: A single integer, the maximum number of calves that can be fed.', 'd:\\oj\\data\\1423', 'd:\\oj\\data\\1423', '3 2 1\r\n2 2 1\r\n1 1\r\n1 2', '2', 'OUTPUT DETAILS:\r\n\r\nThere are only two pizzas that can be made: a pizza with topping 1 and a pizza with topping 2.  If the first pizza is given to the first calf (since she likes topping 1) and the second pizza to the third calf(since she likes topping 2), two calves will be fed.  There is no way to feed all three calves.', 'USACO', '', '2007-09-06 20:35:35', 1000, 65536, 'N', NULL, 0, 4, 0, 4, 100, 1, 0, 30000, 23, ''),
(1424, 'Moo University -- Financial Aid', 'Bessie noted that although humans have many universities they can attend, cows have none. To remedy this problem, she and her fellow cows formed a new university called The University of Wisconsin-Farmside,"Moo U" for short.\r\n\r\nNot wishing to admit dumber-than-average cows, the founders created an incredibly precise admission exam called the Cow Scholastic Aptitude Test (CSAT) that yields scores in the range 1..2,000,000,000.\r\n\r\nMoo U is very expensive to attend; not all calves can afford it.In fact, most calves need some sort of financial aid (0 <= aid <=100,000).  The government does not provide scholarships to calves,so all the money must come from the university''s limited fund (whose total money is F, 0 <= F <= 2,000,000,000).\r\n\r\nWorse still, Moo U only has classrooms for an odd number N (1 <= N<= 19,999) of the C (N <= C <= 100,000) calves who have applied.Bessie wants to admit exactly N calves in order to maximize educational opportunity. She still wants the median CSAT score of the admitted calves to be as high as possible.\r\n\r\nRecall that the median of a set of integers whose size is odd is the middle value when they are sorted.  For example, the median ofthe set {3, 8, 9, 7, 5} is 7, as there are exactly two values above 7 and exactly two values below it.\r\n\r\nGiven the score and required financial aid for each calf that applies, the total number of calves to accept, and the total amount of money Bessie has for financial aid, determine the maximum median score Bessie can obtain by carefully admitting an optimal set of calves.', '* Line 1: Three space-separated integers N, C, and F\r\n\r\n* Lines 2..C+1: Two space-separated integers per line.  The first is the calf''s CSAT score; the second integer is the required amount of financial aid the calf needs', '* Line 1: A single integer, the maximum median score that Bessie can achieve.  If there is insufficient money to admit N calves,output -1.', 'd:\\oj\\data\\1424', 'd:\\oj\\data\\1424', '3 5 70\r\n30 25\r\n50 21\r\n20 20\r\n5 18\r\n35 30', '35', 'If Bessie accepts the calves with CSAT scores of 5, 35, and 50, the median is 35.  The total financial aid required is 18 + 30 + 21 = 69 <= 70.', 'USACO', '', '2007-09-08 22:38:36', 1000, 65536, 'N', NULL, 4, 11, 36, 7, 70, 3, 3, 30000, 43, ''),
(1425, 'Lying Livestock', 'There''s always one troublemaker in the herd. Farmer John has determined that one of his N cows (1 <= N <= 100; cows are numbered 1..N) always tells lies even though all the remaining cows always tell the truth.  He wants to find this troublesome cow as quickly as possible.  To do so, he visits the cows one-by-one as they graze in the pasture and asks them Q (1 <= Q <= 1,000) simple questions about the amount of food they eat (though mostly honest, cows are still relatively unintelligent and food is one of the few topics they understand).  He writes down the results of his questions in the following form:\r\n\r\n     Cow #4 says that cow #5 eats more grass than cow #10.\r\n     Cow #6 says that cow #10 eats more grass than cow #7.\r\n     Cow #3 says that cow #2 eats more grass than cow #6.\r\n     Cow #1 says that cow #7 eats more grass than cow #5.\r\n\r\nIn the example above, it is clear that the untruthful cow must be either cow #4, cow #6, or cow #1.  Your task is to determine the number of "potentially untruthful" cows based on their responses. A potentially untruthful cow is a cow that could conceivably be the one that tells lies, judging by the input data provided.', '* Line 1: Two space-separated integers: N and Q\r\n\r\n* Lines 2..Q+1: Each line describes a question response and contains 3 space-separated integers: A B C, meaning that cow A says that cow B eats more grass than cow C.  The same cow might appear several times in this list.', '* Line 1: A single line with a single integer that is the number of potentially untruthful cows.', 'd:\\oj\\data\\1425', 'd:\\oj\\data\\1425', '3 4\r\n3 1 2\r\n1 3 1\r\n1 3 2\r\n2 2 1', '2', '', 'USACO', '', '2007-09-06 19:51:28', 1000, 65536, 'N', NULL, 0, 6, 0, 6, 100, 2, 0, 30000, 26, ''),
(1426, 'Special Serial Numbers', 'Each newborn calf on Farmer John''s farm receives a brand new N-digit(1 <= N <= 100) serial number, a positive integer larger than any other cow''s serial number on the farm.  Obviously, the larger the serial number, the younger the cow.\r\n\r\nEach cow becomes very fond of her number and often boasts about it. The cows are especially proud of serial numbers in which more than half (not just half!) of the digits are the same.  For example, in the number 23522, the digit 2 appears in 3 out of the 5 digit places; the number 12342, though, has no digit that appears as a strict\r\nmajority. Cows with serial numbers that contain a single majority digit are called ''special''; the rest of the cows are ''ordinary''.\r\n\r\nNaturally, ordinary cows are quite envious of special cows.  Sometimes in the past, they have even resorted to bullying special cows.  Of course, given the growth rate of cows, a cow can only bully cows that are younger than it. In fact, an ordinary cow will bully the oldest special cow younger than she is.  Unfortunately, cows have a tough time figuring out which cow that would be. Given a cow''s serial number, determine which special cow she should bully. If the\r\ncow is already special, then output her own serial number.', '* Line 1: The serial number of the cow that might be a bully', '* Line 1: An integer that is the serial number of the cow that the cow might bully.', 'd:\\oj\\data\\1426', 'd:\\oj\\data\\1426', '1234', '1311', '3 of the 4 digits in 1311 are 1, making 1 more than half the digits.  Note that 1199 is not special, as digits 1 and 9 each constitute exactly half the digits, not more than half.', 'USACO', '', '2007-09-07 11:31:35', 1000, 65536, 'N', NULL, 0, 6, 0, 6, 100, 2, 0, 30000, 31, ''),
(1427, 'Paranoid Cows', 'Farmer John''s N cows (1 <= N <= 100,000) are self-conscious about\r\ntheir milk output.  A cow who does not produce much milk is likely\r\nto be teased by the other cows.\r\n\r\nFJ has designed a milking schedule for the cows in which every cow\r\ni (i is a cow index in the range 1..N) is assigned to an interval\r\nof time A[i]..B[i] (0 <= A[i] < B[i] <= 1,000,000,000).  The cow\r\nmust enter the barn at time A[i] for milking and depart from the\r\nbarn at time B[i].  The door to the barn is narrow and can accommodate\r\nat most one cow at a time, so FJ has designed his schedule so that\r\nno two cows enter or leave at the same time.\r\n\r\nSuppose the milking interval for some cow i contains the interval\r\nfor some other cow j.  That is, A[i] < A[j] < B[j] < B[i].  In this\r\ncase, we say these two intervals "nest".  Nesting intervals are\r\nbad, since in this case cow i is in the barn for the entire duration\r\nof cow j''s milking and as a result, cow i can spy on cow j and\r\ndetermine her milk output.  Since cows are paranoid about other\r\ncows knowing their milk output, FJ hopes his schedule does not\r\ncontain any nested intervals.\r\n\r\nPlease help FJ by determining the largest index K (1 <= K <= N)\r\nsuch the intervals of cows 1..K have no occurrences of nesting.', '* Line 1: The number of cows, N\r\n\r\n* Lines 2..N+1: Two space-separated integers that are respectively the\r\n        start and end times of a cow''s milking interval', '* Line 1: A single integer, k.', 'd:\\oj\\data\\1427', 'd:\\oj\\data\\1427', '5\r\n7 20\r\n1 4\r\n3 12\r\n6 10\r\n0 3', '3', 'The interval for cow #4 (6-10), is nested within the interval for\r\ncow #3 (3-12).  Furthermore, none of the intervals for cows #1..#3\r\nnest within each other.', 'USACO', '', '2007-10-03 10:00:23', 1000, 65536, 'N', NULL, 0, 3, 0, 3, 100, 1, 0, 30000, 28, ''),
(1428, 'Cow Parade', 'Farmer John''s cows are participating in the annual Bovington,\r\nWisconsin Cow Parade.  The streets in this city form a rectangular\r\ngrid: they all run north-south or east-west and are equally spaced.\r\nFarmer John''s cattle parade through the streets.\r\n\r\nThe cows, being meticulous record keepers, recorded the path of\r\ntheir parade.  They wrote exactly a series of D (1 <= D <= 1,000)\r\ndirections, such as "north for 3 blocks", then "east for 2 blocks",\r\netc. The distance traveled was always in the range 1..10,000. See\r\nthe sample data for some of the silly ways the cows recorded their\r\nmarch.\r\n\r\nAfter the parade, the cows wanted to know how many different streets\r\nthey paraded on. If they paraded on one street, left it, and later\r\nparaded on the same street, they only count that street once.', '* Line 1: A single integer, D\r\n\r\n* Lines 2..N+1: Each line describes a sequence part of the parade\r\n        route and contains:     * A character representing the\r\n        direction (''N'', ''S'', ''E'', or ''W'')     * the number of blocks\r\n        travelled in that direction.', '* Line 1: A single integer containing the number of unique streets\r\n        visited by the cows.', 'd:\\oj\\data\\1428', 'd:\\oj\\data\\1428', '6\r\nN 1\r\nN 4\r\nE 2\r\nS 5\r\nW 2\r\nS 4', '4', 'The "N 1", "N 4", and "S 4" are all on the same street.  The others are on\r\ndifferent unique streets.', 'USACO', '', '2007-10-04 09:40:07', 1000, 65536, 'N', NULL, 10, 19, 53, 8, 57, 6, 6, 30000, 33, ''),
(1429, 'Exploration Teams', 'The cows want to form an expeditionary team to explore the wooded\r\narea at the edge of Farmer John''s territory.  Exploring turns out\r\nto be an activity that requires more skill than just standing in\r\nthe pasture and grazing.\r\n\r\nThe team of C (1 <= C <= 20) cows numbered 1..C must include cows\r\nthat are able to navigate through the woods without getting lost,\r\nfend off big nasty creatures, tell jokes to keep the morale high,\r\netc.  At least one cow on the team must possess each of these A (1\r\n<= A <= 20) special abilities numbered 1..A.  Some cows have only\r\none ability, but many have multiple abilities; some cows are just\r\nfreeloaders who are completely useless.\r\n\r\nGiven a list of all the cows and the abilities of each cow, compute\r\nthe number of different exploration teams that the cows can form,\r\nsuch that the team as a whole has all the given abilities.', '* Line 1: Two integers, C and A\r\n\r\n* Lines 2..A+1: Each line contains a set of space-separated integers\r\n        describing an ability.  Line 2 describes ability 1; line 3\r\n        describes ability 2; etc.  The first integer on each line, K\r\n        (1 <= K <= C), is the number of cows with this ability. The\r\n        following K integers represent the cows who have the ability.', '* Line 1: An integer representing the number of different exploration\r\n        teams that the cows can form.', 'd:\\oj\\data\\1429', 'd:\\oj\\data\\1429', '4 2\r\n2 3 1\r\n1 2', '6', 'The possible exploration teams are: {1, 2}, {2, 3}, {1, 2, 3}, {1, 2, 4},\r\n{2, 3, 4}, and {1, 2, 3, 4}.', 'USACO', '', '2007-10-04 13:00:35', 1000, 65536, 'N', NULL, 4, 11, 36, 5, 62, 3, 3, 30000, 29, ''),
(1430, 'Fence Height', 'Cows have very strong feelings about how high fences should be.  A\r\ncow wants the fence high enough so that she feels safe and protected,\r\nbut not so high so that she can not see over it and moo at passing\r\ncars.  Though a cow could stand on her tip-hooves or squat down to\r\nget to the right height, she naturally wants the fence to be the\r\nright height in the first place.  Each of the N (1 <= N <= 10,000)\r\ncows expresses a height preference (1 <= preference <= 10,000),\r\nwhich may vary from cow to cow.\r\n\r\nThis presents a predicament for Farmer John.  As a man of great\r\nesthetics, he wants his fence to of a uniform height everywhere.\r\nBut as a man of great empathy, he sincerely wants to satisfy the\r\ndemands of his cows.  (Or maybe he''s just selfish and knows that\r\nthe cows would give more milk if they got what they wanted.)\r\n\r\nTo compromise, he agreed to build portions of the fence using posts\r\nof different heights in order to appease the majority (strictly\r\ngreater than half) of the cow population.  A cow is satisfied if\r\nthere is some part of the fence at her height preference.  However,\r\nFJ really wants to minimize the range of fence posts heights used,\r\ni.e., the difference between the highest fence post and the lowest\r\nfence post. Help him do that.\r\n\r\nNote that the height of a fence post determines the fence height,\r\nnot some fancy continuous function that connects two fence posts of\r\ndifferent height.', '* Line 1: An integer, N\r\n\r\n* Lines 2..N+1: An integer fence post height preference of a cow', '* Line 1: A single integer representing the minimum range of fence\r\n        post heights.', 'd:\\oj\\data\\1430', 'd:\\oj\\data\\1430', '3\r\n1\r\n10\r\n3', '2', 'Farmer John can use fence posts of height 1 and 3 to appease 2 out of the 3\r\ncows.  The range is 3-1 = 2.', 'USACO', '', '2007-10-03 12:50:43', 1000, 65536, 'N', NULL, 6, 20, 30, 13, 68, 6, 6, 30000, 24, ''),
(1431, 'Picture', 'A number of rectangular posters, photographs and other pictures of the same shape are pasted on a wall. Their sides are all vertical or horizontal. Each rectangle can be partially or totally covered by the others. The length of the boundary of the union of all rectangles is called the perimeter. \r\n\r\nWrite a program to calculate the perimeter. An example with 7 rectangles is shown in Figure 1. \r\n<img src=images\\1431_1.jpg></img>\r\nThe corresponding boundary is the whole set of line segments drawn in Figure 2. \r\n<img src=images\\1431_2.jpg></img>\r\nThe vertices of all rectangles have integer coordinates.', 'Your program is to read from standard input. The first line contains the number of rectangles pasted on the wall. In each of the subsequent lines, one can find the integer coordinates of the lower left vertex and the upper right vertex of each rectangle. The values of those coordinates are given as ordered pairs consisting of an x-coordinate followed by a y-coordinate. \r\n\r\n0 <= number of rectangles < 5000 \r\nAll coordinates are in the range [-10000,10000] and any existing rectangle has a positive area.', 'Your program is to write to standard output. The output must contain a single line with a non-negative integer which corresponds to the perimeter for the input rectangles.', 'd:\\oj\\data\\1431', 'd:\\oj\\data\\1431', '7\r\n-15 0 5 10\r\n-5 8 20 25\r\n15 -4 24 14\r\n0 -6 16 4\r\n2 15 10 22\r\n30 10 36 20\r\n34 0 40 16', '228', '', 'IOI 1998', '', '2011-08-01 21:47:12', 1000, 65536, 'N', NULL, 2, 3, 67, 1, 33, 3, 2, 30000, 200, ''),
(1432, 'Minimizing maximizer', 'The company Chris Ltd. is preparing a new sorting hardware called Maximizer. Maximizer has n inputs numbered from 1 to n. Each input represents one integer. Maximizer has one output which represents the maximum value present on Maximizer''s inputs. \r\n\r\nMaximizer is implemented as a pipeline of sorters Sorter(i1, j1), ... , Sorter(ik, jk). Each sorter has n inputs and n outputs. Sorter(i, j) sorts values on inputs i, i+1,... , j in non-decreasing order and lets the other inputs pass through unchanged. The n-th output of the last sorter is the output of the Maximizer. \r\n\r\nAn intern (a former ACM contestant) observed that some sorters could be excluded from the pipeline and Maximizer would still produce the correct result. What is the length of the shortest subsequence of the given sequence of sorters in the pipeline still producing correct results for all possible combinations of input values? \r\n\r\nTask \r\nWrite a program that: \r\n\r\nreads a description of a Maximizer, i.e. the initial sequence of sorters in the pipeline, \r\ncomputes the length of the shortest subsequence of the initial sequence of sorters still producing correct results for all possible input data, \r\nwrites the result.', 'The first line of the input contains two integers n and m (2 <= n <= 50000, 1 <= m <= 500000) separated by a single space. Integer n is the number of inputs and integer m is the number of sorters in the pipeline. The initial sequence of sorters is described in the next m lines. The k-th of these lines contains the parameters of the k-th sorter: two integers ik and jk (1 <= ik < jk <= n) separated by a single space.', 'The output consists of only one line containing an integer equal to the length of the shortest subsequence of the initial sequence of sorters still producing correct results for all possible data.', 'd:\\oj\\data\\1432', 'd:\\oj\\data\\1432', '40 6\r\n20 30\r\n1 10\r\n10 20\r\n20 30\r\n15 25\r\n30 40', '4', 'Huge input data, scanf is recommended.', 'Central Europe 2003', '', '2007-09-07 11:58:54', 5000, 30000, 'N', NULL, 3, 4, 75, 1, 33, 3, 2, 30000, 31, ''),
(1433, 'Stars', 'Astronomers often examine star maps where stars are represented by points on a plane and each star has Cartesian coordinates. Let the level of a star be an amount of the stars that are not higher and not to the right of the given star. Astronomers want to know the distribution of the levels of the stars. \r\n<img src=images\\1433.jpg></img>\r\nFor example, look at the map shown on the figure above. Level of the star number 5 is equal to 3 (it''s formed by three stars with a numbers 1, 2 and 4). And the levels of the stars numbered by 2 and 4 are 1. At this map there are only one star of the level 0, two stars of the level 1, one star of the level 2, and one star of the level 3. \r\n\r\nYou are to write a program that will count the amounts of the stars of each level on a given map.', 'The first line of the input file contains a number of stars N (1<=N<=15000). The following N lines describe coordinates of stars (two integers X and Y per line separated by a space, 0<=X,Y<=32000). There can be only one star at one point of the plane. Stars are listed in ascending order of Y coordinate. Stars with equal Y coordinates are listed in ascending order of X coordinate.', 'The output should contain N lines, one number per line. The first line contains amount of stars of the level 0, the second does amount of stars of the level 1 and so on, the last line contains amount of stars of the level N-1.', 'd:\\oj\\data\\1433', 'd:\\oj\\data\\1433', '5\r\n1 1\r\n5 1\r\n7 1\r\n3 3\r\n5 5', '1\r\n2\r\n1\r\n1\r\n0', 'This problem has huge input data,use scanf() instead of cin to read data to avoid time limit exceed.', 'Ural Collegiate Programming Contest 1999', '', '2007-09-01 17:12:36', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1434, 'Easy Task', 'Last year there were a lot of complains concerning the set of problems. Most contestants considered our problems to be too hard to solve. One reason for this is that the team members responsible for the problems are not able to evaluate properly whether a particular problem is easy or hard to solve. (We have created until now so many problems, that all seems quite easy.) Because we want our future contests to be better we would like to be able to evaluate the hardness of our problems after the contest, using the history of submissions. \r\n\r\nThere are a few statistics that we can use for evaluating the hardness of a particular problem: the number of accepted solutions of the problem, the average number of submissions of the problem and the average time consumed to solve it (as "General rules" of the contest state "the time consumed for a solved problem is the time elapsed from the beginning of the contest to the submittal of the accepted run."). For the latter two statistics we consider only the teams which solved this particular problem. \r\n\r\nNeedless to say we ask you to write a program that computes aforementioned statistics for all problems. \r\n\r\nTask \r\n\r\nWrite a program that: \r\n\r\n\r\nreads a history of submissions during an ACM contest, \r\n\r\ncomputes for each problem the number of accepted solutions of the problem, the average number of submissions and the average time consumed to solve it, \r\n\r\nwrites the result.', 'The first line of the input contains one integer n (1 <= n <= 2000) being the number of submissions during the contest. Each of the next n lines describes one submission and contains a submission time (measured in seconds from the beginning of the contest), a team identifier, a problem identifier and a result of evaluating the submission separated by single spaces. The submission time is a positive integer not greater then 18000. The team identifier is a non-empty string consisting of at most five small letters or digits. The problem identifier is a capital letter A, B, ..., or I. The result is a capital letter A (the submission is accepted) or R (the submission is rejected). \r\n\r\nSubmissions are given in nondecreasing order according to submission times and there are 62 teams competing. \r\n\r\nPlease note that if a problem is accepted all further submission of this problem by the same team are possible but they should not be taken to the statistics.', 'The output consists of nine lines. The first line corresponds to problem A, the second line to problem B, and so on. Each line should contain the problem identifier, the number of accepted solutions of the problem, the average number of submissions done by teams that solved that problem and the average time consumed to solve it separated by single spaces. The latter two statistics should be printed only if there was at least one accepted solution of the given problem and should be rounded to two fractional digits (in particular 1.235 should be rounded to 1.23).', 'd:\\oj\\data\\1434', 'd:\\oj\\data\\1434', '12\r\n10 wawu1 B R\r\n100 chau1 A A\r\n2000 uwr2 B A\r\n2010 wawu1 A R\r\n2020 wawu1 A A\r\n2020 wawu1 B A\r\n4000 wawu2 C R\r\n6000 chau1 A R\r\n7000 chau1 A A\r\n8000 pp1 A A\r\n8000 zil2 B R\r\n9000 zil2 B A', 'A 3 1.33 3373.33\r\nB 3 1.67 4340.00\r\nC 0\r\nD 0\r\nE 0\r\nF 0\r\nG 0\r\nH 0\r\nI 0', '', 'Central Europe 2003', '', '2007-09-01 17:37:04', 1000, 10000, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 31, ''),
(1435, 'Bundling', 'Outel, a famous semiconductor company, recently released a new model of microprocessor called Platinium. Like many modern processors, Platinium can execute many instructions in one clock step providing that there are no dependencies between them (instruction I2 is dependent on instruction I1 if for example I2 reads a register that I1 writes to). Some processors are so clever that they calculate on the fly which instructions can be safely executed in parallel. Platinium however expects this information to be explicitly specified. A special marker, called simply a stop, inserted between two instructions indicates that some instructions after the stop are possibly dependent on some instructions before the stop. In other words instructions between two successive stops can be executed in parallel and there should not be dependencies between them. \r\n\r\nAnother interesting feature of Platinium is that an instruction sequence must be split into groups of one, two or three successive instructions. Each group has to be packed into a container called a bundle. Each bundle has 3 slots and a single instruction can be put into each slot, however some slots may stay empty. Each instruction is categorized into one of 10 instruction types denoted by consecutive capital letters from A to J (instructions of the same type have similar functionality, for example type A groups integer arithmetic instructions and type F groups instructions). Only instructions of certain types are allowed to be packed into one bundle. A template specifies one permissible combination of instruction types within a bundle. A template can also specify a position of a stop in the middle of a bundle (there is at most one such stop allowed). In addition, stops are allowed between any two adjoining bundles. A set of templates is called a bundling profile. When packing instructions into bundles, one has to use templates from bundling profile only. \r\n\r\nAlthough Platinium is equipped with an instruction cache it was found that for maximal performance it is most crucial to pack instructions as densely as possible. Second important thing is to use a small number of stops. \r\n\r\nYour task is to write a program for bundling Platinium instructions. For the sake of simplicity we assume that the instructions cannot be reordered. \r\n\r\nTask \r\nWrite a program that: \r\n\r\nreads a bundling profile and a sequence of instructions, \r\ncomputes the minimal number of bundles into which the sequence can be packed without breaking the dependencies and the minimal number of all stops that are required for the minimal number of bundles, \r\nwrites the result.', 'The first line of the input contains two integers t and n separated by a single space. Integer t (1 <= t <= 1500) is the number of templates in the bundling profile. Integer n (1 <= n <= 100000) is the number of instructions to be bundled. \r\n\r\nEach of the next t lines specifies one template and contains 3 capital letters t1,t2,t3 with no spaces in between followed by a space and an integer p. Letter ti (A < = ti<= J) is an instruction type allowed in the i-th slot. Integer p (0 <= p <= 2) is the index of the slot after which the stop is positioned (0 means no stop within the bundle). \r\n\r\nEach of the next n lines specifies one instruction. The i-th line of these n lines contains one capital letter ci and an integer di, separated by a single space. Letter ci (A <= ci<=J) is the type of the i-th instruction. Integer di (0 < = di < i) is the index of the last instruction (among the previous ones) that the i-th instruction is dependent on (0 means that the instruction is not dependent on any former instruction). \r\n\r\nYou can assume that for each instruction type c describing an instruction in the instruction sequence there is at least one template containing c.', 'The first and only line of the output contains two integers b and s. Integer b is the minimal number of bundles in a valid packing. Integer s is the minimal number of all stops that are required for the minimal number of bundles.', 'd:\\oj\\data\\1435', 'd:\\oj\\data\\1435', '4 9\r\nABB 0\r\nBAD 1\r\nAAB 0\r\nABB 2\r\nB 0\r\nB 1\r\nA 1\r\nA 1\r\nB 4\r\nD 0\r\nA 0\r\nB 3\r\nB 0', '4 3', '', 'Central Europe 2003', '', '2007-09-01 17:38:04', 1000, 10000, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 23, ''),
(1436, 'Shortcut', 'Mirek has a favourite way from home to the university that he traverses every working day. The route consists of sections and each section is a straight segment 10 meters long. Each section is either a straight ahead extension of the previous section or it is perpendicular to the previous section. After traversing each section Mirek takes a small break to admire the beauty of the nature. During his walk he never visits the same place twice. \r\n<img src=images\\1436.jpg></img>\r\nYesterday Mirek stayed up long in the night at the party and today he got up late from bed. He knows that he will miss the first lecture unless he changes his usual route. He plans to make one shortcut but he wants the shortcut to be as short as possible (well, we can tell you in secret that he doesn''t want to be on time, he just wants to calm his conscience). The shortcut must be either a horizontal or vertical segment connecting two break points of Mirek''s route. \r\n\r\nPlease help Mirek find the shortest shortcut. \r\n\r\nTask \r\nWrite a program that: \r\n\r\nreads Mirek''s route, \r\ncomputes the shortest shortcut on the route, \r\nwrites the result.', 'The first line of the input contains one integer n (3 <= n <= 250 000) being the number of sections of the route. The second line of the input contains a sequence of n characters N, E, S or W with no spaces in between. Each character is a description of one section of the route. Character N, E, S or W means that Mirek walks 10 meters north, east, south or west respectively. You may assume that at least one shortcut exists for the given route.', 'The first and only line of the output contains integers l, b, e and character d separated by single spaces. Integer l is the length of the shortest shortcut (measured in 10 m segments). Integers b and e are the numbers of break points where the shortcut begins and ends respectively (we number break points with consecutive integers from 0 for Mirek''s home to n for the university). Character d is the direction of the shortcut. If more than one shortcut of the minimal length exists you should output the one that begins earliest on the route. If more than one shortcut of the minimal length begins at the same break point you should output the one that ends furthest on the route.', 'd:\\oj\\data\\1436', 'd:\\oj\\data\\1436', '12\r\nNNNENNWWWSSW', '2 3 11 W', '', 'Central Europe 2003', '', '2007-09-01 17:40:16', 5000, 10000, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 21, ''),
(1437, 'November Rain', 'Contemporary buildings can have very complicated roofs. If we take a vertical section of such a roof it results in a number of sloping segments. When it is raining the drops are falling down on the roof straight from the sky above. Some segments are completely exposed to the rain but there may be some segments partially or even completely shielded by other segments. All the water falling onto a segment as a stream straight down from the lower end of the segment on the ground or possibly onto some other segment. In particular, if a stream of water is falling on an end of a segment then we consider it to be collected by this segment. \r\n<img src=images\\1437.jpg></img>\r\nFor the purpose of designing a piping system it is desired to compute how much water is down from each segment of the roof. To be prepared for a heavy November rain you should count one liter of rain water falling on a meter of the horizontal plane during one second. \r\n\r\nTask \r\nWrite a program that: \r\n\r\nreads the description of a roof, \r\ncomputes the amount of water down in one second from each segment of the roof, \r\nwrites the results.', 'The first line of the input contains one integer n (1 <= n < = 40000) being the number of segments of the roof. Each of the next n lines describes one segment of the roof and contains four integers x1, y1, x2, y2 (0 <= x1, y1, x2, y2 < = 1000000, x1 < x2, y1<>y2) separated by single spaces. Integers x1, y1 are respectively the horizontal position and the height of the left end of the segment. Integers x2, y2 are respectively the horizontal position and the height of the right end of the segment. The segments don''t have common points and there are no horizontal segments. You can also assume that there are at most 25 segments placed above any point on the ground level.', 'The output consists of n lines. The i-th line should contain the amount of water (in liters) down from the i-th segment of the roof in one second.', 'd:\\oj\\data\\1437', 'd:\\oj\\data\\1437', '6\r\n13 7 15 6\r\n3 8 7 7\r\n1 7 5 6\r\n5 5 9 3\r\n6 3 8 2\r\n9 6 12 8', '2\r\n4\r\n2\r\n11\r\n0\r\n3', '', 'Central Europe 2003', '', '2007-09-01 17:42:14', 5000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 2000, 20, ''),
(1438, 'Football', 'Eric has a classic football that is made of 32 pieces of leather: 12 black pentagons and 20 white hexagons. Each pentagon adjoins 5 hexagons and each hexagon adjoins 3 pentagons and 3 hexagons. Eric drew a polygon (i.e. a closed line without intersections) along the edges of the pieces. The polygon divided the ball into two parts and Eric painted one of them green. \r\n<img src=images\\1438.jpg></img>\r\nHe is curious if given a description of the polygon you are able to compute the number of black, white and green pieces? \r\n\r\nTask \r\nWrite a program that: \r\n\r\nreads the description of a polygon, \r\ncomputes the number of black, white and green pieces, \r\nwrites the result.', 'The first line of the input contains one integer n being the number of vertices of the polygon. The second line of the input contains n integers a1, a2,..., an separated by single spaces. Integer ai (equal 1 or 2) is the number of green pieces adjoining the i-th vertex of the polygon. The side of the polygon connecting the n-th and the first vertex always lies between two hexagons.', 'The first and only line of the output contains three integers b, w and g - the numbers of black, white and green pieces respectively.', 'd:\\oj\\data\\1438', 'd:\\oj\\data\\1438', '21\r\n1 2 1 2 1 2 1 1 1 2 2 1 1 1 1 2 2 2 1 1 1', '11 15 6', '', 'Central Europe 2003', '', '2011-04-04 16:18:12', 1000, 10000, 'N', NULL, 0, 1, 0, 1, 100, 1, 0, 30000, 24, ''),
(1439, 'Hang or not to hang', 'Little Tom is learning how to program. He has just written some programs but is afraid to run them, because he does not know if they will ever stop. Please write a program to help him. This task is not as easy as it may seem, because Tom''s programs are possibly not deterministic. Given a program written by Tom, your program should tell him whether his program can stop and if so, what is the shortest possible time before it stops. \r\n\r\nTom''s computer consists of 32 1-bit registers and the program consists of n instructions. The registers are numbered from 0 to 31 and the instructions are numbered from 0 to n-1. \r\n\r\nBelow, MEM[a] stands for the contents of the a-th register, 0 <= a, b < 32, 0 <= x < n, 0 <= c <= 1. \r\n\r\nThe instruction set is as follows: \r\n<img src=images\\1439.jpg></img>\r\nThe last instruction of a program is always STOP (although there can be more than one STOP instruction). Every program starts with the instruction number 0. Before the start, the contents of the registers can be arbitrary values. Each instruction (including STOP) takes 1 processor cycle to execute. \r\nTask \r\nWrite a program that: \r\n\r\nreads the program, \r\ncomputes the shortest possible running time of the program, \r\nwrites the result.', 'The first line of the input contains an integer n (1 <= n <= 16) being the number of instructions of the program. Each of the next n lines contains one instruction of the program in the format given above. You may assume that the only white characters in the program are single spaces between successive tokens of each instruction', 'The first and only line of the output should contain the shortest possible running time of the program, measured in processor cycles. If the program cannot stop, output should contain the word HANGS.', 'd:\\oj\\data\\1439', 'd:\\oj\\data\\1439', '5\r\nSET 0 1\r\nJZ 4 0\r\nRANDOM 0\r\nJMP 1\r\nSTOP', '6', '', 'Central Europe 2003', '', '2007-09-01 17:46:40', 1000, 10000, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 27, ''),
(1440, 'Going Home', 'On a grid map there are n little men and n houses. In each unit time, every little man can move one unit step, either horizontally, or vertically, to an adjacent point. For each little man, you need to pay a $1 travel fee for every step he moves, until he enters a house. The task is complicated with the restriction that each house can accommodate only one little man. \r\n\r\nYour task is to compute the minimum amount of money you need to pay in order to send these n little men into those n different houses. The input is a map of the scenario, a ''.'' means an empty space, an ''H'' represents a house on that point, and am ''m'' indicates there is a little man on that point. \r\n<img src=images\\1440.jpg></img>\r\nYou can think of each point on the grid map as a quite large square, so it can hold n little men at the same time; also, it is okay if a little man steps on a grid with a house without entering that house.', 'There are one or more test cases in the input. Each case starts with a line giving two integers N and M, where N is the number of rows of the map, and M is the number of columns. The rest of the input will be N lines describing the map. You may assume both N and M are between 2 and 100, inclusive. There will be the same number of ''H''s and ''m''s on the map; and there will be at most 100 houses. Input will terminate with 0 0 for N and M.', 'For each test case, output one line with the single integer, which is the minimum amount, in dollars, you need to pay.', 'd:\\oj\\data\\1440', 'd:\\oj\\data\\1440', '2 2\r\n.m\r\nH.\r\n5 5\r\nHH..m\r\n.....\r\n.....\r\n.....\r\nmm..H\r\n7 8\r\n...H....\r\n...H....\r\n...H....\r\nmmmHmmmm\r\n...H....\r\n...H....\r\n...H....\r\n0 0', '2\r\n10\r\n28', '', 'Pacific Northwest 2004', '', '2007-09-06 14:48:21', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, '');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1441, '吴奶奶买鱼', '吴奶奶有个可爱的外孙女——琪琪，她很喜欢小动物，尤其喜欢养鱼。为了让小孙女养到漂亮的小鱼，吴奶奶一大早就到花鸟鱼虫市场买鱼。这个市场可真大，里面有各种各样的宠物，就连宠物鱼都有好几十种。这些鱼实在是太美了，买的人越来越多，可是因为货源有限，卖鱼的老板不得不规定：同一种鱼，每个人最多只能买一条，并且有些鱼是不能一起买的，因为它们之间会互相争斗吞食。 \r\n吴奶奶想尽可能地买多些鱼，但可惜，她的资金有限，这可怎么办好呢？请编写一个程序帮助她。如果有多个方案都能买到尽可能多的鱼，则选择所花资金最多的一个。', '输入文件的第一行为两个正整数M(M≤1000)，N(N≤30)，分别表示吴奶奶的资金和鱼的种类。以下N行，每行有两个正整数S（1≤S≤N），T，分别表示某种鱼的编号以及该鱼的价格。 \r\n接着，每行有两个整数P,Q。当P,Q大于0时，表示P,Q不能共处；当P,Q均等于0时，表示输入文件的结束。', '文件的第一行为两个正整数X,Y，分别表示所买鱼的条数和总花费。', 'd:\\oj\\data\\1441', 'd:\\oj\\data\\1441', '170 7\r\n1 70\r\n2 50\r\n3 30\r\n4 40\r\n5 40 \r\n6 30\r\n7 20\r\n1 4\r\n1 7\r\n3 4\r\n3 5\r\n5 7\r\n6 7\r\n0 0', '4 160', '', 'modified by Larrouse', '', '2012-07-23 17:32:35', 1000, 65536, 'N', NULL, 10, 59, 17, 49, 89, 13, 6, 30000, 158, ''),
(1442, 'count测试', '', '', '', 'd:\\oj\\data\\1442', 'd:\\oj\\data\\1442', '', '', '', '', '', '2011-03-10 20:26:32', 50000, 65536, 'N', NULL, 29, 52, 56, 13, 76, 9, 4, 50000, 84, ''),
(1443, 'Cube Stacking', 'Farmer John and Betsy are playing a game with N (1 <= N <= 30,000)identical cubes labeled 1 through N. They start with N stacks, each containing a single cube. Farmer John asks Betsy to perform P (1<= P <= 100,000) operation. There are two types of operations: \r\nmoves and counts. \r\n* In a move operation, Farmer John asks Bessie to move the stack containing cube X on top of the stack containing cube Y. \r\n* In a count operation, Farmer John asks Bessie to count the number of cubes on the stack with cube X that are under the cube X and report that value. \r\n\r\nWrite a program that can verify the results of the game.', '* Line 1: A single integer, P \r\n\r\n* Lines 2..P+1: Each of these lines describes a legal operation. Line 2 describes the first operation, etc. Each line begins with a ''M'' for a move operation or a ''C'' for a count operation. For move operations, the line also contains two integers: X and Y.For count operations, the line also contains a single integer: X. \r\n\r\nNote that the value for N does not appear in the input file. No move operation will request a move a stack onto itself.', 'Print the output from each of the count operations in the same order as the input file.', 'd:\\oj\\data\\1443', 'd:\\oj\\data\\1443', '6\r\nM 1 6\r\nC 1\r\nM 2 4\r\nM 2 6\r\nC 3\r\nC 4', '1\r\n0\r\n2', '', 'USACO 2004 U S Open', '', '2007-10-04 19:04:33', 2000, 30000, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 1, ''),
(1444, 'The Cow Lineup', 'Farmer John''s N cows (1 <= N <= 100,000) are lined up in a row.Each cow is labeled with a number in the range 1...K (1 <= K <=10,000) identifying her breed. For example, a line of 14 cows might have these breeds: \r\n\r\n\r\n    1 5 3 2 5 1 3 4 4 2 5 1 2 3\r\n\r\nFarmer John''s acute mathematical mind notices all sorts of properties of number sequences like that above. For instance, he notices that the sequence 3 4 1 3 is a subsequence (not necessarily contiguous) of the sequence of breed IDs above. FJ is curious what is the length of the shortest possible sequence he can construct out of numbers in the range 1..K that is NOT a subsequence of the breed IDs of his cows. Help him solve this problem.', '* Line 1: Two integers, N and K \r\n\r\n* Lines 2..N+1: Each line contains a single integer that is the breed ID of a cow. Line 2 describes cow 1; line 3 describes cow 2; and so on.', '* Line 1: The length of the shortest sequence that is not a subsequence of the input', 'd:\\oj\\data\\1444', 'd:\\oj\\data\\1444', '14 5\r\n1\r\n5\r\n3\r\n2\r\n5\r\n1\r\n3\r\n4\r\n4\r\n2\r\n5\r\n1\r\n2\r\n3', '3', 'All the single digit ''sequences'' appear. Each of the 25 two digit sequences also appears. Of the three digit sequences, the sequence 2, 2, 4 does not appear.', 'USACO 2004 U S Open', '', '2007-10-04 19:05:52', 1000, 30000, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1445, 'MooFest', 'Every year, Farmer John''s N (1 <= N <= 20,000) cows attend "MooFest",a social gathering of cows from around the world. MooFest involves a variety of events including haybale stacking, fence jumping, pin the tail on the farmer, and of course, mooing. When the cows all stand in line for a particular event, they moo so loudly that the roar is practically deafening. After participating in this event year after year, some of the cows have in fact lost a bit of their hearing. \r\n\r\nEach cow i has an associated "hearing" threshold v(i) (in the range 1..20,000). If a cow moos to cow i, she must use a volume of at least v(i) times the distance between the two cows in order to be heard by cow i. If two cows i and j wish to converse, they must speak at a volume level equal to the distance between them times max(v(i),v(j)). \r\n\r\nSuppose each of the N cows is standing in a straight line (each cow at some unique x coordinate in the range 1..20,000), and every pair of cows is carrying on a conversation using the smallest possible volume. \r\n\r\nCompute the sum of all the volumes produced by all N(N-1)/2 pairs of mooing cows.', '* Line 1: A single integer, N \r\n\r\n* Lines 2..N+1: Two integers: the volume threshold and x coordinate for a cow. Line 2 represents the first cow; line 3 represents the second cow; and so on. No two cows will stand at the same location.', '* Line 1: A single line with a single integer that is the sum of all the volumes of the conversing cows.', 'd:\\oj\\data\\1445', 'd:\\oj\\data\\1445', '4\r\n3 1\r\n2 5\r\n2 6\r\n4 3', '57', '', 'USACO 2004 U S Open', '', '2007-10-04 19:06:51', 1000, 30000, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1446, 'Turning in Homework', 'Bessie must turn in her homework for her C classes (1 <= C <= 1,000) at Moo U so that she still has time to chew the cud with her fellow classmates as they wait for the bus to go home. \r\n\r\nTeachers accept homework submissions only after they have finished their classes and also cleaned the chalkboard, put away lab supplies,and so on. The input data tells the earliest time a teacher will accept homework. \r\n\r\nBessie starts at one end (distance 0) of a hallway H (1 <= H <= 1,000) meters long and walks at the rate of one meter per second to various classrooms (in any order she chooses) to turn in her homework. Each classroom is located along this hallway, as well as the door to the waiting area for the buses. \r\n\r\nGiven the location of both the exit and the classrooms and also the teachers'' schedules, determine the earliest time that Bessie can exit the door to the waiting area for the buses. Bessie must turn in all her homework before exiting. The act of turning in the homework takes no time, by the way.', '* Line 1: Three integers: C, H, and B. B (0 <= B <= H) is the distance from the hall entrance to the bus waiting area. \r\n\r\n* Lines 2..C+1: Each line contains two integers that describe a classroom where homework is to be submitted. The first integer (0..H) is the number of meters to the classroom from the hallway entrance. The second integer (0..10,000) is the first time (in seconds) that the teacher for that course will accept homework.', '* Line 1: A single integer: the earliest second that Bessie can exit the door to the waiting area for the buses.', 'd:\\oj\\data\\1446', 'd:\\oj\\data\\1446', '4 10 3\r\n8 9\r\n4 21\r\n3 16\r\n8 12', '22', 'Time   Action\r\n  0   Bessie walks to the classrooms 8 meters down the hall (at 8m)\r\n  8   Bessie waits 1 second\r\n  9   Bessie turns in the first set of homework \r\n  9   Bessie waits 3 seconds, thinking about cool hay in the summertime\r\n 12   Bessie turns in the other homework for this location\r\n 12   Bessie walks back to the classroom 4 meters down the hall (at 4m)\r\n 16   Bessie waits 5 seconds, thinking of a handsome bull she once met\r\n 21   Bessie turns in her homework\r\n 21   Bessie walks back to the classroom 1 meters down the hall (at 3m)\r\n 22   Bessie turns in her homework\r\n 22   Bessie exits, since this also the location of the bus exit\r\n\r\nThus, Bessie can leave at time 22.  No better schedule exists.', 'USACO 2004 U S Open', '', '2007-10-04 19:07:56', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1447, 'Apple Catching', 'It is a little known fact that cows love apples. Farmer John has two apple trees (which are conveniently numbered 1 and 2) in his field, each full of apples. Bessie cannot reach the apples when they are on the tree, so she must wait for them to fall. However, she must catch them in the air since the apples bruise when they hit the ground (and no one wants to eat bruised apples). Bessie is a quick eater, so an apple she does catch is eaten in just a few seconds. \r\n\r\nEach minute, one of the two apple trees drops an apple. Bessie, having much practice, can catch an apple if she is standing under a tree from which one falls. While Bessie can walk between the two trees quickly (in much less than a minute), she can stand under only one tree at any time. Moreover, cows do not get a lot of exercise, so she is not willing to walk back and forth between the trees endlessly (and thus misses some apples). \r\n\r\nApples fall (one each minute) for T (1 <= T <= 1,000) minutes. Bessie is willing to walk back and forth at most W (1 <= W <= 30) times. Given which tree will drop an apple each minute, determine the maximum number of apples which Bessie can catch. Bessie starts at tree 1.', '* Line 1: Two space separated integers: T and W \r\n\r\n* Lines 2..T+1: 1 or 2: the tree that will drop an apple each minute.', '* Line 1: The maximum number of apples Bessie can catch without walking more than W times.', 'd:\\oj\\data\\1447', 'd:\\oj\\data\\1447', '7 2\r\n2\r\n1\r\n1\r\n2\r\n2\r\n1\r\n1', '6', 'INPUT DETAILS: \r\n\r\nSeven apples fall - one from tree 2, then two in a row from tree 1, then two in a row from tree 2, then two in a row from tree 1. Bessie is willing to walk from one tree to the other twice. \r\n\r\nOUTPUT DETAILS: \r\n\r\nBessie can catch six apples by staying under tree 1 until the first two have dropped, then moving to tree 2 for the next two, then returning back to tree 1 for the final two.\r\n\r\nSource', 'USACO', '', '2007-10-04 19:07:58', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1448, 'Lake Counting', 'Due to recent rains, water has pooled in various places in Farmer John''s field, which is represented by a rectangle of N x M (1 <= N <= 100; 1 <= M <= 100) squares. Each square contains either water (''W'') or dry land (''.''). Farmer John would like to figure out how many ponds have formed in his field. A pond is a connected set of squares with water in them, where a square is considered adjacent to all eight of its neighbors. \r\n\r\nGiven a diagram of Farmer John''s field, determine how many ponds he has.', '* Line 1: Two space-separated integers: N and M \r\n\r\n* Lines 2..N+1: M characters per line representing one row of Farmer John''s field. Each character is either ''W'' or ''.''. The characters do not have spaces between them.', '* Line 1: The number of ponds in Farmer John''s field.', 'd:\\oj\\data\\1448', 'd:\\oj\\data\\1448', '10 12\r\nW........WW.\r\n.WWW.....WWW\r\n....WW...WW.\r\n.........WW.\r\n.........W..\r\n..W......W..\r\n.W.W.....WW.\r\nW.W.W.....W.\r\n.W.W......W.\r\n..W.......W.', '3', 'OUTPUT DETAILS: \r\n\r\nThere are three ponds: one in the upper left, one in the lower left,and one along the right side.', 'USACO', '', '2007-10-04 19:09:29', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1449, 'Til the Cows Come Home', 'Bessie is out in the field and wants to get back to the barn to get as much sleep as possible before Farmer John wakes her for the morning milking. Bessie needs her beauty sleep, so she wants to get back as quickly as possible. \r\n\r\nFarmer John''s field has N (2 <= N <= 1000) landmarks in it, uniquely numbered 1..N. Landmark 1 is the barn; the apple tree grove in which Bessie stands all day is landmark N. Cows travel in the field using T (1 <= T <= 2000) bidirectional cow-trails of various lengths between the landmarks. Bessie is not confident of her navigation ability, so she always stays on a trail from its start to its end once she starts it. \r\n\r\nGiven the trails between the landmarks, determine the minimum distance Bessie must walk to get back to the barn. It is guaranteed that some such route exists.', '* Line 1: Two integers: T and N \r\n\r\n* Lines 2..T+1: Each line describes a trail as three space-separated integers. The first two integers are the landmarks between which the trail travels. The third integer is the length of the trail, range 1..100.', '* Line 1: A single integer, the minimum distance that Bessie must travel to get from landmark N to landmark 1.', 'd:\\oj\\data\\1449', 'd:\\oj\\data\\1449', '5 5\r\n1 2 20\r\n2 3 30\r\n3 4 20\r\n4 5 20\r\n1 5 100', '90', 'INPUT DETAILS: \r\n\r\nThere are five landmarks. \r\n\r\nOUTPUT DETAILS: \r\n\r\nBessie can get home by following trails 4, 3, 2, and 1.', 'USACO', '', '2007-10-04 19:10:40', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1450, 'Who''s in the Middle', 'FJ is surveying his herd to find the most average cow. He wants to know how much milk this ''median'' cow gives: half of the cows give as much or more than the median; half give as much or less. \r\n\r\nGiven an odd number of cows N (1 <= N < 10,000) and their milk output (1..1,000,000), find the median amount of milk given such that at least half the cows give the same amount of milk or more and at least half give the same or less.', '* Line 1: A single integer N \r\n\r\n* Lines 2..N+1: Each line contains a single integer that is the milk output of one cow.', '* Line 1: A single integer that is the median milk output.', 'd:\\oj\\data\\1450', 'd:\\oj\\data\\1450', '5\r\n2\r\n4\r\n1\r\n3\r\n5', '3', 'INPUT DETAILS: \r\n\r\nFive cows with milk outputs of 1..5 \r\n\r\nOUTPUT DETAILS: \r\n\r\n1 and 2 are below 3; 4 and 5 are above 3.', 'USACO', '', '2007-10-04 19:12:13', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1451, 'Cave Cows 1', 'Few people know that cows are actually quite fond of exploring caves.  \r\n\r\nBessie is planning to visit her favorite cave, which has N rooms\r\n(1 <= N <= 100) numbered 1..N and M bidirectional corridors (1 <=\r\nM <= 1000) connecting pairs of different rooms.  Room 1 is the\r\nentrance to the cave. Two rooms are never directly connected by\r\nmore than one corridor.\r\n\r\nAlways planning ahead, Bessie previously deposited a bale of hay\r\nin each of K (1 <= K <= 14) different rooms so she will have food\r\navailable during her expedition.  Of course just like people, every\r\ntime Bessie consumes a bale of hay, her "fatness" index increases\r\nby one unit.\r\n\r\nWhen she enters the cave, her fatness index is 0 units. Every corridor in the cave has a certain width; Bessie can only fit through a corridor if her fatness index is no larger than that corridor''s width. \r\n\r\nBessie wants to eat as much as possible during her trip into the cave but wants to make sure that she does not grow too fat and trap herself in the process (at the end of her trip she must exit the cave at room 1).  Help her determine the maximum amount of hay she can eat.  Note that Bessie can decide to pass through a room containing a bale of \r\nhay without eating the hay, if she wishes.', '* Line 1: Three space-separated integers: N , M, and K\r\n\r\n* Lines 2..K+1: Each of these lines contains the index (1..N) of a room containing a  bale of hay.\r\n\r\n* Lines K+2..K+M+1: Each of these lines corresponds to a bidirectional corridor and contains three space-separated integers: indices of the two rooms connected by the corridor, and the corridor''s integer width (1..100).', '* Line 1: A single integer giving the maximum number of bales of hay Bessie can eat  and still successfully exit the cave.', 'd:\\oj\\data\\1451', 'd:\\oj\\data\\1451', '6 7 5\r\n1\r\n2\r\n3\r\n4\r\n5\r\n1 2 3\r\n3 6 2\r\n6 2 10\r\n2 4 1\r\n5 1 1\r\n4 5 1\r\n1 6 1', '4', 'All corridors leaving the entrance room have width at most 3.  Thus, returning to that room Bessie must have eaten no more than 3 bales.Combined with the bale in that room, 4 is the maximum number of bales that can be consumed.', 'USACO', '', '2007-10-04 19:13:23', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1452, 'Bull Math', 'Bulls are so much better at math than the cows. They can multiply huge integers together and get perfectly precise answers ... or so they say. Farmer John wonders if their answers are correct. Help him check the bulls'' answers. Read in two positive integers (no more than 40 digits each) and compute their product. Output it as a normal number (with no extra leading zeros). \r\n\r\nFJ asks that you do this yourself; don''t use a special library function for the multiplication.', '* Lines 1..2: Each line contains a single decimal number', '* Line 1: The exact product of the two input lines', 'd:\\oj\\data\\1452', 'd:\\oj\\data\\1452', '11111111111111\r\n1111111111', '12345679011110987654321', '', 'USACO', '', '2007-10-04 19:13:25', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1453, 'Bank Interest', 'Farmer John made a profit last year! He would like to invest it well but wonders how much money he will make. He knows the interest rate R (an integer between 0 and 20) that is compounded annually at his bank. He has an integer amount of money M in the range 100..1,000,000. He knows how many years Y (range: 0..400) he intends to invest the money in the bank. Help him learn how much money he will have in the future by compounding the interest for each year he saves. Print an integer answer without rounding. Answers for the test data are guaranteed to fit into a signed 32 bit integer.', '* Line 1: Three space-separated integers: R, M, and Y', '* Line 1: A single integer that is the number of dollars FJ will have after Y years.', 'd:\\oj\\data\\1453', 'd:\\oj\\data\\1453', '5 5000 4', '6077', 'INPUT DETAILS: \r\n\r\n5% annual interest, 5000 money, 4 years \r\n\r\nOUTPUT DETAILS: \r\n\r\nYear 1: 1.05 * 5000 = 5250 \r\nYear 2: 1.05 * 5250 = 5512.5 \r\nYear 3: 1.05 * 5512.50 = 5788.125 \r\nYear 4: 1.05 * 5788.125 = 6077.53125 \r\nThe integer part of 6077.53125 is 6077.', 'USACO', '', '2007-10-04 19:14:43', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1454, 'Cave Cows 2', 'In one cave Bessie is planning to explore, a long corridor is made up of N segments (1 <= N <= 25,000 and numbered 1..N) joined end-to-end.  Each of these segments has a particular width which can only be traversed by a cow whose "fatness" index is no larger than that width.  A cow can travel along a sequence i..j of these segments only if its fatness index is no larger than the minimum width of all of those corridors.  Corridor widths are integers in the\r\nrange 1..1,000,000,000.\r\n\r\nIn order to plan her caving expedition, Bessie needs to answer a collection of Q (1 <= Q <= 25,000) queries of the form "what is the maximum fatness of a cow that can pass through the sequence i..j of corridors?".  Please help Bessie with her dilemma.', '* Line 1: Two space-separated integers, N and Q\r\n\r\n* Lines 2..N+1: Each line gives the integer width of a corridor. Line 2 describes corridor 1; line 2 describes corridor 2; and so on.\r\n\r\n* Lines N+2..N+Q+1: Each line corresponds to a query and contains two space-separated  integers i and j (where i < j), giving the indices of the corridors at  both ends of the query interval', '* Lines 1..Q: Each line contains the integer answer to a query', 'd:\\oj\\data\\1454', 'd:\\oj\\data\\1454', '10 4\r\n75\r\n30\r\n100\r\n38\r\n50\r\n51\r\n52\r\n20\r\n81\r\n5\r\n1 10\r\n3 5\r\n6 9\r\n8 10', '5\r\n38\r\n20\r\n5', '', 'USACO', '', '2007-10-04 19:15:52', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1455, 'Cave Cows 3', 'Farmer John''s N (1 <= N <= 50,000) cows are exploring a large room in a cave.  It is dark, and the cows communicate by mooing loudly at each other.  Due to the strange accoustics of the room, the time it takes for a ''moo'' from one cow to reach another cow is proportional to the "manhattan" distance between the two cows: that is, if cow A is at location (Xa, Ya) and cow B is at location (Xb, Yb), it takes |Xa-Xb| + |Ya-Yb| units of time for a ''moo'' from cow A to reach cow B. X and Y coordinates are all in the range (-1,000,000.. 1,000,000).\r\n\r\nGiven the locations of the N cows, determine the maximum time over all pairs of cows for a ''moo'' to propagate.', '* Line 1: A single integer: N\r\n\r\n* Lines 2..N+1: Each line contains two space-separated integers, giving the (x,y) coordinates of a cow', '* Line 1: The maximum ''moo'' distance among all pairs of cows', 'd:\\oj\\data\\1455', 'd:\\oj\\data\\1455', '5\r\n1 1\r\n3 5\r\n2 7\r\n8 1\r\n4 4', '12', 'The cows at (2,7) and (8,1) are separated by |2-8| + |7-1| =6 + 6 = 12 units.', 'USACO', '', '2007-10-04 19:20:18', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1456, 'Cave Cows 4', 'A rockslide has trapped Bessie in her cave, and she must scale a vertical rock wall if she is to escape!  Happily, Bessie is an accomplished rock climber.\r\n\r\nThink of the rock wall as a two-dimensional plane, with an x (horizontal) and z (vertical) axis.  Bessie starts with her left front hoof at (0,0), and she needs to climb to the top of the wall, at z = T (1 <= T <= 200,000).\r\n\r\nThe wall has N (1 <= N <= 50,000) rocks that stick out and provide hoofholds for Bessie.  If Bessie is currently holding on to one of these hoofholds with her left front hoof, she can reach a new hoofhold only if it is at most 2 units away in its x coordinate and also at most 2 units away in its z coordinate from her current hold.Note that Bessie can move to a hoofhold above, beside, or below her, as long as its x and z coordinates are both within 2 units of her current hoofhold. When she moves, her front left hoof ends up on the new hoofhold.\r\n\r\nHelp Bessie determine if she can scale the wall (that is, if she can  reach any hoofhold at height T), and if so, the minimum number of hoofholds she must use.', '* Line 1: Two space-separated integers: N and T\r\n\r\n* Lines 2..N+1: Each line contains two space-separated integers that represent the (x,z)  coordinates of a hoofhold.  Each x coordinate will be in the range  0 .. 1,000,000, and each z coordinate will be in the range 0 .. T.  The  initial foothold (0,0) does not appear in this list.', '* Line 1: The minimum number of steps required to reach the top or -1 if it is  impossible to reach the top.  The initial hoofhold at (0,0) does not  count as a step.', 'd:\\oj\\data\\1456', 'd:\\oj\\data\\1456', '5 3\r\n1 2\r\n6 3\r\n4 1\r\n3 2\r\n0 2', '4', '', 'USACO', '', '2007-10-04 19:22:45', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1457, 'Barrels of Feed', 'It is that time of year again when Farmer John must replenish the supply of cow feed on his farm.  He keeps all the feed in some number of barrels in his silo.  Since the barrels were purchased at different times from different vendors, they vary in their capacity (1 <= capacity <= 10,000 for each barrel).  Currently, some barrels are full of feed, some are partially full, and some are empty.  FJ''s cow feed supplier charges a fixed price to refill a\r\nbarrel, regardless of barrel size or how much feed is already in the barrel.\r\n\r\nFJ takes all non-full barrels to the feed supplier to be refilled completely.  To save costs, FJ first goes to the barn and optimally redistributes feed among the barrels before visiting the supplier.Help FJ find the minimum number of barrels that must be taken.', '* Line 1: N (1 <= N <= 1000), the number of barrels\r\n\r\n* Lines 2..N+1: Each line describes a barrel using two space-separated integers: A and B.  A (0 <= A <= B) is the amount of feed in the barrel; and B is the barrel''s capacity.', '* Line 1: The minimum number of non-full barrels.', 'd:\\oj\\data\\1457', 'd:\\oj\\data\\1457', '4\r\n0 1\r\n4 5\r\n0 2\r\n1 2', '1', 'Pour all the feed from the capacity 5 barrel into the other barrels, leaving only that barrel empty and all others full.', 'USACO', '', '2007-10-05 09:42:17', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1458, 'Elimination Game', 'Farmer John''s N (1 <= N <= 50) cows have invented a new kind of game to play with Farmer John. Farmer John picks two integers, K and I (both in the range 1..N). The cows arrange themselves into a circle.  Then, starting with the Kth cow (going around the circle counterclockwise), cows are eliminated from the game.\r\n\r\nWhen a cow is eliminated, she leaves the circle and stands to the right (from our point of view) of the previous cow who was eliminated (the first cow stands alone, of course). Then the I-th cow after her going around the circle counterclockwise is eliminated, and so on.\r\n\r\nEach cow has a unique serial number in the range 1..10,000,000. Farmer John wins if the serial numbers of the cows are sorted (in ascending order) based on the order of elimination.\r\n\r\nHelp FJ find K and I such that he comes as close to winning as possible.  In other words, minimize the number of adjacent serial numbers that are out of order (the serial number of some cow is smaller than the serial number of the cow immediately to the left).', '* Line 1: A single integer: N\r\n\r\n* Lines 2..N+1: Each line gives the ID number of  a cow around the circle, starting with the first cow and proceeding in counterclockwise order.', '* Line 1: The number of adjacent serial numbers that are out of order.', 'd:\\oj\\data\\1458', 'd:\\oj\\data\\1458', '4\r\n4\r\n1\r\n3\r\n2', '0', 'Choose K = 2, and I = 2.  Then the cows are eliminated in order: 1, 2, 3,4.', 'USACO', '', '2007-10-05 09:44:26', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1459, 'Fence Enclosures', 'Each of Farmer John''s N (1 <= N <= 100) cows has requested that her favorite grazing area (on the plane where both coordinates are in the range 0..10,000) be fenced off for her own enjoyment, so that she need not worry about wild animals intruding into her space.The cows know very well that FJ is only capable of building rectangular fences, so to make life easy for FJ, each cow specifies her favorite grazing area as a rectangle whose sides are perpendicular and\r\nparallel to the rectangular barn.\r\n\r\nFJ gathered all these requests and noticed that some of these rectangles overlap with non-zero area. (Note that two rectangles sharing a side does not constitute an overlap.) To accommodate all the cows, FJ decides that he will build a rectangular fence that encloses both of the requested rectangles (and, often, some extra land around those rectangles).  Here''s a simple depiction of two overlapping fence requests and FJ''s actual fence:\r\n\r\n<img src=images\\1459.jpg></img>\r\n\r\nThe situation for three overlaps or overlaps that generate more overlaps becomes a bit more complicated.\r\n\r\nIn general, FJ agrees to build a set of non-overlapping rectangular fences such all the grazing areas requested by the cows are enclosed within some rectangular fence.  Find the minimum area FJ must enclose with fences.', '* Line 1: A single integer: N\r\n\r\n* Lines 2..N+1: Each line contains four space-separated integer coordinates: X1, Y1, X2, and Y2 (X1 < X2; Y1 < Y2) that\r\nspecify a request', '* Line 1: A single line with two space-separated integers.  The first integer is the number of fences FJ must build.  The second integer is the total area of pasture that is enclosed by those fences.', 'd:\\oj\\data\\1459', 'd:\\oj\\data\\1459', '3\r\n0 0 5 2\r\n8 8 9 9\r\n2 1 6 4', '2 25', 'Two fences are built: (0, 0)-(6, 4) and (8, 8)-(9, 9). The areas are 6*4 = 24 and 1*1 = 1 for a total of 24+1 = 25.', 'USACO', '', '2007-10-05 09:49:44', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1460, 'Line Up the Cows', 'Throughout the course of the day on the farm, Farmer John''s  N (1 <= N <= 1000) cows are expected to line up whenever they travel between the pasture and the barn.  FJ likes this militaristic arrangement, because he thinks that it disciplines the cows so they will produce milk more efficiently.\r\n\r\nTo document these lines of cows, FJ takes pictures.  Of course, he can only take a picture of a contiguous portion of the line, which might be one cow or might be the entire line or might be some number of cows in the line.\r\n\r\nEach cow has an ID number (range 1..1,000,000) tagged onto her ear (a terrible accounting accident means that these ID numbers are not necessarily distinct).\r\n\r\nFJ won''t settle for just any picture.  In order to give an impression of order rather than chaos, FJ decides the best thing he can hope for is to take a picture of a part of the line where the numbers are non-decreasing from left to right.\r\n\r\nFJ''s first priority is to maximize the number of cows in the picture. If there are many possible pictures with the same number of cows, FJ''s second priority is to maximize the number of ID numbers in the picture.', '* Line 1: A single integer: N\r\n\r\n* Lines 2..N+1: Each line describes a cow by giving its ID number. The leftmost cow is described on line 2; the cow to its right on line 3; and so on.', '* Line 1: A single line with two space-separated integers.  The first integer is the number of cows in the best picture.  The second integer is the number of distinct ID numbers in the picture.', 'd:\\oj\\data\\1460', 'd:\\oj\\data\\1460', '5\r\n3\r\n2\r\n4\r\n4\r\n9', '4 3', 'The best picture is 2, 4, 4, 9.  There are 4 cows and 3 distinct ID numbers.', 'USACO', '', '2007-10-05 09:51:46', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1461, 'X-factor Chains', 'Given a positive integer X, an X-factor chain of length m is a sequence of integers,\r\n\r\n1 = X0, X1, X2, …, Xm = X\r\n\r\nsatisfying\r\n\r\nXi < Xi+1 and Xi | Xi+1 where a | b means a perfectly divides into b.\r\n\r\nNow we are interested in the maximum length of X-factor chains and the number of chains of such length.', 'The input consists of several test cases. Each contains a positive integer X (X ≤ 220).', 'For each test case, output the maximum length and the number of such X-factors chains.', 'd:\\oj\\data\\1461', 'd:\\oj\\data\\1461', '2\r\n3\r\n4\r\n10\r\n100', '1 1\r\n1 1\r\n2 1\r\n2 2\r\n4 6', '', 'POJ Monthly--2007.10.06, ailyanlu@zsu', '', '2007-10-06 17:00:10', 1000, 65536, 'Y', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 1, ''),
(1462, 'Phone List', 'Given a list of phone numbers, determine if it is consistent in the sense that no number is the prefix of another. Let’s say the phone catalogue listed these numbers: \r\n\r\n&Emergency 911  \r\n&Alice 97 625 999  \r\n&Bob 91 12 54 26 \r\n\r\nIn this case, it’s notpossible to call Bob,because the centralwould direct your call to the emergency line as soon as you had dialled the first three digits of Bob’s phone number. So this list would not be consistent.', 'The first line of input gives a single integer, 1 ≤ t ≤ 40, the number of test cases. Each test case starts with n, the number of phone numbers, on a separate line, 1 ≤ n ≤ 10000. Then follows n lines with one unique phone number on each line. A phone number is a sequence of at most ten digits.', 'For each test case, output “YES” if the list is consistent, or “NO” otherwise.', 'd:\\oj\\data\\1462', 'd:\\oj\\data\\1462', '2 \r\n3 \r\n911 \r\n97625999 \r\n91125426 \r\n5 \r\n113 \r\n12340 \r\n123440 \r\n12345 \r\n98346', 'NO\r\nYES', '', 'NCPC 2007', '', '2012-07-14 17:18:50', 2000, 65536, 'N', NULL, 42, 119, 35, 60, 70, 27, 26, 30000, 420, ''),
(1463, 'Optimal Parking', 'When shopping on Long Street, Michael usually parks his car at some random location, and then walks to the stores he needs. Can you help Michael choose a place to park which minimises the distance he needs to walk on his shopping round? \r\n\r\nLong Streetisa straight line, where all positions are integer. You pay for parking in a specific slot, which is an integer position on Long Street. Michael does not want to pay for more than one parking though. He is very strong, and does not mind carrying all the bags around.', 'The first line of input gives the number of test cases, 1 ≤ t ≤ 100. There are two lines for each test case. The first gives the number of stores Michael wants to visit, 1 ≤ n ≤ 20, and the second gives their n integerpositions on Long Street,0 ≤ xi ≤ 99.', 'Output for each test case a line with the minimal distance Michael must walk given optimal parking.', 'd:\\oj\\data\\1463', 'd:\\oj\\data\\1463', '2 \r\n4 \r\n24 13 89 37 \r\n6 \r\n7 30 41 14 39 42', '152\r\n70', '', 'NCPC 2007', '', '2012-02-16 00:32:45', 1000, 65536, 'N', NULL, 36, 43, 84, 6, 15, 34, 33, 30000, 77, ''),
(1464, 'Cuckoo Hashing', 'One of the most fundamental data structure problems is the dictionary problem: given a set D of words you want to be able to quickly determine if any given query string q is present in the dictionary D or not. Hashing is a well-known\r\nsolution for the problem. The idea is to create a function <img src=images\\1464.jpg></img> from all strings to the integer range 0, 1, .., n &#8722; 1, i.e. you describe a fast deterministic program which takes a string as input and outputs an integer between 0 and n&#8722;1. Next you allocate an empty hash table T of size n and for each word w in D, you set T[h(w)] = w. Thus, given a query string q, you only need to calculate h(q) and see if T[h(q)] equals q, to determine if q is in the dictionary.Seems simple enough, but aren’t we forgetting something? Of course, what if two words in D map to the same location in the table? This phenomenon, called collision, happens fairly often (remember the Birthday paradox: in a class of 24 pupils there is more than 50% chance that two of them share birthday). On average you will only be able to put roughly pn-sized dictionaries into the table without getting collisions, quite poor space usage!\r\n    A stronger variant is Cuckoo Hashing1. The idea is to use two hash functions h1 and h2. Thus each string maps to two positions in the table. A query string q is now handled as follows: you compute both h1(q) and h2(q), and if T[h1(q)] = q, or T[h2(q)] = q, you conclude that q is in D. The name “Cuckoo Hashing” stems from the process of creating\r\nthe table. Initially you have an empty table. You iterate over the words d in D, and insert them one by one. If T[h1(d)] is free, you set T[h1(d)] = d. Otherwise if T[h2(d)] is free, you set T[h2(d)] = d. If both are occupied however, just like the cuckoo with other birds’ eggs, you evict the word r in T[h1(d)] and set T[h1(d)] = d. Next you put r back into the table in its alternative place (and if that entry was already occupied you evict that word and move it to its alternative place, and so on). Of course, we may end up in an infinite loop here, in which case we need to rebuild the table with other choices of hash functions. The good news is that this will not happen with great probability even if D contains up to n/2 words!', 'On the first line of input is a single positive integer 1 <= t <= 50 specifying the number of test cases to follow. Each test case begins with two positive integers 1 <= m<= n <= 10000 on a line of itself, m telling the number of words in the dictionary and n the size of the hash table in the test case. Next follow m lines of which the i:th describes the i:th word di in the dictionary D by two non-negative integers h1(di) and h2(di) less than n giving the two hash function values of the word di. The two values may be identical.', 'For each test case there should be exactly one line of output either containing the string “successful hashing” if it is possible to insert all words in the given order into the table, or the string “rehash necessary” if it is impossible.', 'd:\\oj\\data\\1464', 'd:\\oj\\data\\1464', '2\r\n3 3\r\n0 1\r\n1 2\r\n2 0\r\n5 6\r\n2 3\r\n3 1\r\n1 2\r\n5 1\r\n2 5', 'successful hashing\r\nrehash necessary', '', 'NCPC 2007', '', '2007-11-10 20:53:33', 1000, 65536, 'N', NULL, 2, 7, 29, 5, 71, 3, 2, 30000, 27, ''),
(1465, 'Circle of Debt', 'The three friends Alice, Bob, and Cynthia always seem to get in situations where there are debts to be cleared among \r\nthemselves. Of course, this is the “price” of hanging out a lot: it only takes a few resturant visits, movies, and drink rounds to get an unsettled balance. So when they meet as usual every Friday afternoon they begin their evening by clearing last week’s debts. To satisfy their mathematically inclined minds they prefer clearing their debts using as little money transaction aspossible, i.e. by exchanging as few bank notes and coins as necessary. To their surprise, this can sometimes by harder than it sounds. Suppose that Alice owes Bob 10 crowns and this is the three friends’ only uncleared debt, and Alice has a 50 crown note but nothing smaller, Bob has three 10 crown coins and ten 1 crown coins, and Cynthia has three 20 crown notes. The best way to clear the debt is for Alice to give her 50 crown note to Cynthia, Cynthia to give two 20 crown notes to Alice and one to Bob, and Bob to give one 10 crown coin to Cynthia, involving a total of only five notes/coins changing owners. Compare this to the straightforward solution of Alice giving her 50 crown note to Bob and getting Bob’s three 10 crown notes and all his 1 crown coins for a total of fourteen notes/coins being exchanged!', 'On the first lineof inputisa singlepositiveinteger,1 ≤ t ≤ 50, specifying the number of test cases to follow. Each test case begins with three integers ab, bc, ca ≤ 1000 on a line of itself. ab is the amount Alice owes Bob (negative if it is Bob who owes Alice money), bc the amount Bob owes Cynthia (negative if it is Cynthia who is in debt to Bob), and ca the amount Cynthia owes Alice (negative if it is Alice who owes Cynthia). \r\n\r\nNext follow three lines each with six non-negative integers a100,a50,a20,a10,a5,a1, b100,...,b1, and c100,...c1, respectively, where a100 is the number of 100 crown notes Alice got, a50 is the number of her 50 crown notes, and so on. Likewise, b100,...,b1 is the amount of notes/coins of different value Bob got, and c100,...,c1 describes Cynthia’s money. Each of them has at most 30 coins (i.e. a10 +a5+a1,b10 +b5+b1, and c10 +c5+c1 are all less than or equal to 30) and the total amount of all their money together (Alice’s plus Bob’s plus Cynthia’s) is always less than 1000 crowns.', 'For each test case there should be one line of output containing the minimum number of bank notes and coins needed to settle the balance. If it is notpossible at all, output the string “impossible”.', 'd:\\oj\\data\\1465', 'd:\\oj\\data\\1465', '3 \r\n10 0 0 \r\n3 \r\n10 0 0 \r\n0 1 0 0 0 0 \r\n0 0 0 3 0 10 \r\n0 0 3 0 0 0 \r\n-10 -10 -10 \r\n0 0 0 0 0 0 \r\n0 0 0 0 0 0 \r\n0 0 0 0 0 0 \r\n-10 10 10 \r\n3 0 0 0 2 0 \r\n0 2 0 0 0 1 \r\n0 0 1 1 0 3', '5 \r\n0 \r\nimpossible', '', 'NCPC 2007', '', '2007-11-10 20:49:20', 10000, 65536, 'N', NULL, 4, 4, 100, 0, 0, 1, 1, 30000, 24, ''),
(1466, 'Copying DNA', 'Evolution is a seemingly random process which works in a way which resembles certain approaches we use to get proximate solutions to hard combinatorial problems. You are now to do something completely different.Given a DNA string S from the alphabet {A,C,G,T}, find the minimal number of copy operations needed to create another string T. You may reverse the strings you copy, and copy both from S and the pieces of your partial T. You may put these pieces together at any time. You may only copy contiguous parts of your partial T, and all copied strings must be used in your final T. Example:\r\n\r\n<img src=images\\1466.jpg></img>', 'The first line of input gives a single integer, 1 <= t <= 100, the number of test cases. Then follow, for each test case, a line with the string S of length 1 <= m <= 18, and a line with the string T of length 1 <= n <= 18.', 'Output for each test case the number of copy operations needed to create T from S, or “impossible” if it cannot be done.', 'd:\\oj\\data\\1466', 'd:\\oj\\data\\1466', '5\r\nACGT\r\nGTAC\r\nA\r\nC\r\nACGT\r\nTGCA\r\nACGT\r\nTCGATCGA\r\nA\r\nAAAAAAAAAAAAAAAAAA', '2\r\nimpossible\r\n1\r\n4\r\n6', '', 'NCPC 2007', '', '2007-11-10 20:51:08', 3000, 65536, 'N', NULL, 2, 2, 100, 0, 0, 1, 1, 30000, 32, ''),
(1467, 'Nested Dolls', 'Dilworth is the world’s most prominent collector of Russian nested dolls: he literally has thousands of them! You know, the wooden hollow dolls of different sizes of which the smallest doll is contained in the second smallest, and this doll is in turn contained in the next one and so forth. One day he wonders if there is another wayof nesting them so he will end up with fewer nested dolls? After all, that would make his collection even more magnificent! He unpacks each nested doll and measures the width and height of each contained doll. A doll with width w1 and height h1 will fit in another doll of width w2 and height h2 if and only if  w1 < w2 and h1 < h2. Canyou help him calculate the smallest number of nested dollspossible to assemble from his massive list of measurements?', 'On the first line of input is a single positive integer 1 ≤ t ≤ 20 specifying the number of test cases to follow. Each test casebegins with apositive integer1 ≤ m ≤ 20000 on a line of itself telling the number of dolls in the test case. Next follow 2m positive integers w1,h1,w2,h2,...,wm,hm, where wi is the width and hi is the height of dollnumber i. 1 ≤ wi,hi ≤ 10000 for all i.', 'For each test case there should be one line of output containing the minimum number of nested dollspossible.', 'd:\\oj\\data\\1467', 'd:\\oj\\data\\1467', '4\r\n3\r\n20 30 40 50 30 40\r\n4\r\n20 30 10 10 30 20 40 50 \r\n3 \r\n10 30 20 20 30 10 \r\n4 \r\n10 10 20 30 40 50 39 51', '1\r\n2\r\n3\r\n2', '', 'NCPC 2007', '', '2007-11-10 20:50:29', 2000, 65536, 'N', NULL, 2, 6, 33, 4, 80, 3, 1, 30000, 25, ''),
(1468, 'Full Tank?', 'After going through the receipts from your car trip through Europe this summer, you realised that the gas prices varied between the cities you visited. Maybe you could have saved some money if you were a bit more clever about where you filled your fuel? To help other tourists (and save money yourself next time), you want to write a program for finding the cheapest way to travel between cities, filling your tank on the way. We assume that all cars use one\r\nunit of fuel per unit of distance, and start with an empty gas tank.', 'The first line of input gives 1 <= n <= 1000 and 0 <= m<=10000, the number of cities and roads. Then follows a line with n integers 1 <= pi<=100, where pi is the fuel price in the ith city. Then follow m lines with three integers 0 <= u, v < n and 1<= d <= 100, telling that there is a road between u and v with length d. Then comes a line with the number 1 <=q<= 100, giving the number of queries, and q lines with three integers 1 <= c<= 100, s and e, where c is the fuel capacity of the vehicle, s is the starting city, and e is the goal.', 'For each query, output the price of the cheapest trip from s to e using a car with the given capacity, or impossible” if there is no way of getting from s to e with the given car.', 'd:\\oj\\data\\1468', 'd:\\oj\\data\\1468', '5 5\r\n10 10 20 12 13\r\n0 1 9\r\n0 2 8\r\n1 2 1\r\n1 3 11\r\n2 3 7\r\n2\r\n10 0 3\r\n20 1 4', '170\r\nimpossible', '', '', '', '2011-04-01 22:14:52', 2000, 65536, 'N', NULL, 3, 3, 100, 0, 0, 2, 2, 30000, 32, ''),
(1469, 'Moogle', 'You got the original idea of making map software, called Moogle Maps, for the new cool Maple mPhone. It will even be capable of indicating the location of a house address like ”Main Street 13”. However, since the mPhone has limited storage capacity, you need to reduce the data amount.You don’twantto store the exactlocationof every single house number. Instead only a subset of the house numbers will be stored exactly, and the others will be linearly interpolated. So you want to select house numbers that will minimise the average interpolation error, given how many house locationsyou have capacity to store. We view the street as a straight line, and you will always store the first and the last house location. \r\n\r\nGiven thatyou’ve stored the locations xi and xj for the houses with numbers i and j respectively, but no other house in between, the interpolated value for a house with number k with i<k<j is xi+(xj-xi)*(k-i)/(j-i).', 'The first line of input gives a single integer, 1 ≤ t ≤ 50, the number of test cases. \r\nFor each test case, there are two lines. The first contains 2 ≤ h ≤ 200 and 2 ≤ c ≤ h, where h is the number of houses in the street and c is the number of house locations that can be stored. The second contains h integers in increasing order giving the location of the h houses. Each location is in the interval [0,1000000].', 'For each test case, output the average interpolation error over all the h houses for the optimal selection of c house locations to store. The output shouldbe given with four decimal places, but we will accept inaccuracies of up to ±0.001.', 'd:\\oj\\data\\1469', 'd:\\oj\\data\\1469', '2 \r\n4 3 \r\n0 9 20 40 \r\n10 4 \r\n0 10 19 30 40 90 140 190 202 210', '0.2500 \r\n0.3000', '', 'NCPC 2007', '', '2007-11-10 20:52:33', 2000, 65536, 'N', NULL, 2, 2, 100, 0, 0, 1, 1, 30000, 32, ''),
(1470, 'Shopaholic', 'Lindsay is a shopaholic. Whenever there is a discount of the kind where you can buy  three items and only pay for two, she goes completely mad and feels a need to buy all items in the store. You have given up on curing her for this disease, but try to limit its effect on her wallet.\r\nYou have realized that the stores coming with these offers are quite selective when it comes to which items you get for free; it is always the cheapest ones. As an example,when your friend comes to the counter with seven items, costing 400, 350, 300, 250, 200,150, and 100 dollars, she will have to pay 1500 dollars. In this case she got a discount of 250 dollars. You realize that if she goes to the counter three times, she might get a bigger discount. E.g. if she goes with the items that costs 400, 300 and 250, she will get a  discount of 250 the first round. The next round she brings the item that costs 150 giving no extra discount, but the third round she takes the last items that costs 350, 200 and 100 giving a discount of an additional 100 dollars, adding up to a total discount of 350.\r\nYour job is to find the maximum discount Lindsay can get.', 'The first line of input gives the number of test scenarios, 1 <= t<= 20. Each scenario consists of two lines of input. The first gives the number of items Lindsay is buying,1 <= n<= 20000. The next line gives the prices of these items, 1 <=pi<= 20000.', 'For each scenario, output one line giving the maximum discount Lindsay can get by selectively choosing which items she brings to the counter at the same time.', 'd:\\oj\\data\\1470', 'd:\\oj\\data\\1470', '1\r\n6\r\n400 100 200 350 300 250', '400', '', '', '', '2012-02-06 15:15:02', 1000, 65536, 'N', NULL, 23, 46, 50, 23, 51, 24, 22, 30000, 57, ''),
(1471, '', '', '', '', 'd:\\oj\\data\\1471', 'd:\\oj\\data\\1471', '', '', '', '', '', '2007-11-10 15:40:37', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1472, '', '', '', '', 'd:\\oj\\data\\1472', 'd:\\oj\\data\\1472', '', '', '', '', '', '2007-11-10 15:40:37', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1473, '', '', '', '', 'd:\\oj\\data\\1473', 'd:\\oj\\data\\1473', '', '', '', '', '', '2007-11-10 15:40:38', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1474, '', '', '', '', 'd:\\oj\\data\\1474', 'd:\\oj\\data\\1474', '', '', '', '', '', '2007-11-10 15:40:43', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1475, '', '', '', '', 'd:\\oj\\data\\1475', 'd:\\oj\\data\\1475', '', '', '', '', '', '2007-11-10 15:40:47', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1476, '', '', '', '', 'd:\\oj\\data\\1476', 'd:\\oj\\data\\1476', '', '', '', '', '', '2007-11-10 15:40:50', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1477, '', '', '', '', 'd:\\oj\\data\\1477', 'd:\\oj\\data\\1477', '', '', '', '', '', '2007-11-10 15:40:53', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1478, '', '', '', '', 'd:\\oj\\data\\1478', 'd:\\oj\\data\\1478', '', '', '', '', '', '2007-11-10 15:40:56', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1479, '', '', '', '', 'd:\\oj\\data\\1479', 'd:\\oj\\data\\1479', '', '', '', '', '', '2007-11-10 15:41:00', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, '');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1480, '', '', '', '', 'd:\\oj\\data\\1480', 'd:\\oj\\data\\1480', '', '', '', '', '', '2007-11-10 15:41:02', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1481, '', '', '', '', 'd:\\oj\\data\\1481', 'd:\\oj\\data\\1481', '', '', '', '', '', '2007-11-10 15:41:05', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1482, '', '', '', '', 'd:\\oj\\data\\1482', 'd:\\oj\\data\\1482', '', '', '', '', '', '2007-11-10 15:41:08', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1483, '', '', '', '', 'd:\\oj\\data\\1483', 'd:\\oj\\data\\1483', '', '', '', '', '', '2007-11-10 15:41:11', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1484, '', '', '', '', 'd:\\oj\\data\\1484', 'd:\\oj\\data\\1484', '', '', '', '', '', '2007-11-10 15:41:13', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1485, '', '', '', '', 'd:\\oj\\data\\1485', 'd:\\oj\\data\\1485', '', '', '', '', '', '2007-11-10 15:41:16', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1486, '', '', '', '', 'd:\\oj\\data\\1486', 'd:\\oj\\data\\1486', '', '', '', '', '', '2007-11-10 15:41:19', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1487, '', '', '', '', 'd:\\oj\\data\\1487', 'd:\\oj\\data\\1487', '', '', '', '', '', '2007-11-10 15:41:22', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1488, '', '', '', '', 'd:\\oj\\data\\1488', 'd:\\oj\\data\\1488', '', '', '', '', '', '2007-11-10 15:41:26', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1489, '', '', '', '', 'd:\\oj\\data\\1489', 'd:\\oj\\data\\1489', '', '', '', '', '', '2007-11-10 15:41:29', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1490, '', '', '', '', 'd:\\oj\\data\\1490', 'd:\\oj\\data\\1490', '', '', '', '', '', '2007-11-10 15:41:32', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1491, '', '', '', '', 'd:\\oj\\data\\1491', 'd:\\oj\\data\\1491', '', '', '', '', '', '2007-11-10 15:41:36', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1492, '', '', '', '', 'd:\\oj\\data\\1492', 'd:\\oj\\data\\1492', '', '', '', '', '', '2007-11-10 15:41:39', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1493, '', '', '', '', 'd:\\oj\\data\\1493', 'd:\\oj\\data\\1493', '', '', '', '', '', '2007-11-10 15:41:42', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1494, '', '', '', '', 'd:\\oj\\data\\1494', 'd:\\oj\\data\\1494', '', '', '', '', '', '2007-11-10 15:41:45', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1495, '', '', '', '', 'd:\\oj\\data\\1495', 'd:\\oj\\data\\1495', '', '', '', '', '', '2007-11-10 15:41:48', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1496, '', '', '', '', 'd:\\oj\\data\\1496', 'd:\\oj\\data\\1496', '', '', '', '', '', '2007-11-10 15:41:51', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1497, '', '', '', '', 'd:\\oj\\data\\1497', 'd:\\oj\\data\\1497', '', '', '', '', '', '2007-11-10 15:41:54', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1498, '', '', '', '', 'd:\\oj\\data\\1498', 'd:\\oj\\data\\1498', '', '', '', '', '', '2007-11-10 15:41:57', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1499, '', '', '', '', 'd:\\oj\\data\\1499', 'd:\\oj\\data\\1499', '', '', '', '', '', '2007-11-10 15:42:00', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1500, '', '', '', '', 'd:\\oj\\data\\1500', 'd:\\oj\\data\\1500', '', '', '', '', '', '2007-11-10 15:42:04', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 2, ''),
(1501, 'Bonus Word', 'Lingo is a once popular game show where the contestants have to guess words. In the original version the contestants would have to guess a five-letter word each round.In between the rounds of regular word guessing, the contestants can win a bonus prize if they can guess a ten-letter word. The ten-letter word is displayed with the letters permuted.\r\nSome letters are colored indicating that they are displayed in the right position. Since there are not that many ten-letter words, it happens frequently that the word is actually a compound: a word constructed by concatenating two shorter words. In this problem we assume that the ten-letter word is always of this form.Given a dictionary and a sequence of ten letters, you must calculate the possible solutions to the ten-letter word game. Two solutions are considered different if they are constructed from different parts, even if their concatenation is the same. This is illustrated by the the second sample case.', 'On the first line an integer t (1 <= t <= 100): the number of test cases. Then for each test case:\r\n\r\n &#8226; One line with an integer n (1 <=n <= 200): the number of words in the dictionary.\r\n &#8226; n lines with a single word in the dictionary. Each word is between 1 and 9 (inclusive)characters long and consists  of only lowercase letters.\r\n&#8226; One line with an integer q (1 <=q <= 100): the number of queries.\r\n&#8226; q lines with a single query string. Each query is exactly 10 characters long and will consist of uppercase and lowercase letters. Lowercase letters are in the right position and uppercase letters may be in the wrong position.\r\nAll words in the dictionary for a single test case are distinct.', 'For each test case, output for each query:\r\n&#8226; One line with an integer s: the number of solutions.\r\n&#8226; min(1000, s) lines, each a solution formatted as two dictionary words separated by a hyphen (-).\r\nThe solutions to a single query must be ordered lexicographically. If the number of solutions exceeds 1000, then only output the first 1000 solutions. \r\n\r\nNotes\r\nIf s and t are strings of equal length and si denotes the ith character of s, then s precedes t\r\nlexicographically if for some i: si < ti and sj = tj for all j < i. In this problem statement,\r\nthe hyphen precedes all letters lexicographically.', 'd:\\oj\\data\\1501', 'd:\\oj\\data\\1501', '2\r\n5\r\ngunner\r\nintegral\r\nrelating\r\ntail\r\nun\r\n4\r\nTAILGUNNER\r\nunINTEGRAL\r\nUNrelating\r\nIMPOSSIBLE\r\n3\r\naaaa\r\naaaaa\r\naaaaaa\r\n1\r\nAAAAAAAAAA', '6\r\ngunner-tail\r\nintegral-un\r\nrelating-un\r\ntail-gunner\r\nun-integral\r\nun-relating\r\n2\r\nun-integral\r\nun-relating\r\n1\r\nun-relating\r\n0\r\n3\r\naaaa-aaaaaa\r\naaaaa-aaaaa\r\naaaaaa-aaaa', '', 'BAPC preliminary contest', '', '2008-05-02 20:29:39', 2000, 65536, 'N', NULL, 1, 4, 25, 3, 75, 2, 1, 30000, 42, ''),
(1502, 'Word Ladder', 'A word ladder is a sequence of words, in which two consecutive words differ by exactly one letter. An example of such a ladder (usually arranged vertically, hence the “ladder”) would be: beer, brew, brow, word, down. Note that to get from one word to the next, the letters may be rearranged, and exactly one letter is changed.For this problem, you will be given a dictionary of distinct words, all of the same length. Your task is to write a program that finds a word ladder of minimal length, such that the first and last word of the ladder have no letters in common.', 'On the first line an integer t (1 <= t<= 100): the number of test cases. Then for each test case:\r\n&#8226; A line with two space-separated integers n (2 <= n<= 100) and l (1 <=l <= 20): the number of words and their length.\r\n&#8226; n lines with a word, each consisting of l lowercase letters (a - z).', 'For each testcase:\r\n&#8226; a single line with the words in a ladder of minimal length, separated by a single space.It is guaranteed that at least one such ladder can be constructed. If there is more than one, output the one that comes first lexicographically.\r\n\r\nNotes \r\nIf s and t are strings of equal length and si denotes the ith character of s, then s precedes t lexicographically if for some i: si < ti and sj = tj for all j < i.', 'd:\\oj\\data\\1502', 'd:\\oj\\data\\1502', '1\r\n9 3\r\nalt\r\nspy\r\nsea\r\nopt\r\npea\r\nape\r\nspa\r\napt\r\nale', 'ale alt apt opt', '', 'BAPC preliminary contest', '', '2007-11-13 08:19:19', 2000, 65536, 'N', NULL, 2, 2, 100, 0, 0, 2, 2, 30000, 67, ''),
(1503, 'Cycling', 'You want to cycle to a programming contest. The shortest route to the contest might be over the tops of some mountains and through some valleys. From past experience you know that you perform badly in programming contests after experiencing large differences in altitude. Therefore you decide to take the route that minimizes the altitude difference, where the altitude difference of a route is the difference between the maximum and the minimum height on the route. Your job is to write a program that finds this route. You are given: &#8226; the number of crossings and their altitudes, and &#8226; the roads by which these crossings are connected. Your program must find the route that minimizes the altitude difference between the highest and the lowest point on the route. If there are multiple possibilities, choose the shortest one. For example:\r\n<img src=images\\1503.jpg></img>\r\nIn this case the shortest path from 1 to 7 would be through 2, 3 and 4, but the altitude difference of that path is 8. So, you prefer to go through 5, 6 and 4 for an altitude difference of 2. (Note that going from 6 directly to 7 directly would have the same difference in altitude, but the path would be longer!)', 'On the first line an integer t (1 =< t<=100): the number of test cases. Then for each test case: &#8226; One line with two integers n (1=<n <=100) and m (0  m  5 000): the number of crossings and the number of roads. The crossings are numbered 1..n. &#8226; n lines with one integer hi (0=<hi<=1 000 000 000): the altitude of the i-th crossing. &#8226; m lines with three integers aj , bj (1=<aj , bj<=n) and cj (1=<cj<=1 000 000): this indicates that there is a two-way road between crossings aj and bj of length cj . You may assume that the altitude on a road between two crossings changes linearly.\r\nYou start at crossing 1 and the contest is at crossing n. It is guaranteed that it is possible to reach them programming contest from your home.', 'For each testcase, output one line with two integers separated by a single space: &#8226; the minimum altitude difference, and &#8226; the length of shortest path with this altitude difference.', 'd:\\oj\\data\\1503', 'd:\\oj\\data\\1503', '1\r\n7 9\r\n4\r\n9\r\n1\r\n3\r\n3\r\n5\r\n4\r\n1 2 1\r\n2 3 1\r\n3 4 1\r\n4 7 1\r\n1 5 4\r\n5 6 4\r\n6 7 4\r\n5 3 2\r\n6 4 2', '2 11', '', 'BAPC preliminary contest', '', '2007-11-11 13:07:29', 3000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 37, ''),
(1504, 'Contest', 'You and your team are participating in a programming contest. After reading all problems,you have estimated for each problem how long it will take you to solve it. Your teammates have done exactly the same. Now you want to divide the problems, so that the total number of solved problems will be maximized.Your team is very organized and each team member always writes down all the details on paper. Therefore the computer never forms a bottleneck. The only constraint is that for each team member, the total time required to solve the problems assigned to him should\r\nnot exceed the time left in the contest.', 'On the first line an integer t (1 <= t<= 100): the number of test cases. Then for each test case:\r\n&#8226; One line with two integers n (1 <= n<= 10) and m (1 <= m <= 300). The number ofproblems and the number of minutes left in the contest.\r\n&#8226; Three lines with n integers each. Each line describes the solving times for a different team member. The jth integer on the ith line is denoted by sij : either the time in minutes it takes the ith person to solve the jth problem (1  sij  300), or &#8722;1 if the person cannot solve this problem.', 'For each test case:\r\n&#8226; One line with the maximum number of problems your team can solve.', 'd:\\oj\\data\\1504', 'd:\\oj\\data\\1504', '1\r\n10 300\r\n10 60 -1 -1 10 10 10 240 1 30\r\n15 -1 30 -1 60 60 60 300 5 250\r\n20 -1 -1 60 60 90 90 300 2 245', '10', '', 'BAPC preliminary contest', '', '2007-11-13 12:48:08', 1000, 65536, 'N', NULL, 3, 3, 100, 0, 0, 3, 3, 30000, 37, ''),
(1505, 'Escape', 'You find yourself trapped in a large rectangular room, made up of large square tiles; some are accessible, others are blocked by obstacles or walls. With a single step, you can move from one tile to another tile if it is horizontally or vertically adjacent (i.e. you cannot move diagonally).To shake off any people following you, you do not want to move in a straight line. In fact,you want to take a turn at every opportunity, never moving in any single direction longer\r\nthan strictly necessary. This means that if, for example, you enter a tile from the south,you will turn either left or right, leaving to the west or the east. Only if both directions are blocked, will you move on straight ahead. You never turn around and go back!Given a map of the room and your starting location, figure out how long it will take you\r\nto escape (that is: reach the edge of the room).\r\n<img src=images\\1505.jpg></img>', 'On the first line an integer t (1 <= t <= 100): the number of test cases. Then for each test\r\ncase:\r\n&#8226; a line with two integers separated by a space, h and w (1 <= h,w <= 80), the height and width of the room;\r\n&#8226; then h lines, each containing w characters, describing the room. Each character is one of . (period; an accessible space), # (a blocked space) or @ (your starting location).There will be exactly one @ character in each room description.', '&#8226; A line with an integer: the minimal number of steps necessary to reach the edge of\r\nthe room, or -1 if no escape is possible.', 'd:\\oj\\data\\1505', 'd:\\oj\\data\\1505', '2\r\n9 13\r\n#############\r\n#@..........#\r\n#####.#.#.#.#\r\n#...........#\r\n#.#.#.#.#.#.#\r\n#.#.......#.#\r\n#.#.#.#.#.#.#\r\n#...........#\r\n#####.#######\r\n4 6\r\n#.####\r\n#.#.##\r\n#...@#\r\n######', '31\r\n-1', '', 'BAPC preliminary contest', '', '2011-02-20 14:52:47', 2000, 65536, 'N', NULL, 10, 36, 28, 24, 77, 8, 7, 30000, 46, ''),
(1506, 'Settling Salesman Problem', 'After travelling around for years, Salesman John has decided to settle. He wants to build a new house close to his customers, so he doesn’t have to travel as much any more. Luckily John knows the location of all of his customers.All of the customers’ locations are at (distinct) integer coordinates. John’s new houseshould also be built on integer coordinates, which cannot be the same as any of the cus- tomers’ locations. Since John lives in a large and crowded city, the travelling distance to any customer is the Manhattan distance: |x &#8722; xi| + |y &#8722; yi|, where (x, y) and (xi, yi) are the coordinates of the new house and a customer respectively.What is the number of locations where John could settle, so the sum of the distance to all of his customers is as low as posible?', 'On the first line an integer t (1 <=t<=100): the number of test cases. Then for each test case:\r\n&#8226; One line with an integer n (1<=n<=2 000): the number of customers John has.\r\n&#8226; n lines with two integers xi and yi (&#8722;1 000 000 000=<xi, yi<=1 000 000 000): the\r\ncoordinates of the i-th customer.', 'For each test case:\r\n&#8226; Two space-separated integers: the minimum summed distance to all customers, and\r\nthe number of spots on which John can build his new house to achieve this minimum.', 'd:\\oj\\data\\1506', 'd:\\oj\\data\\1506', '2\r\n4\r\n1 -3\r\n0 1\r\n-2 1\r\n1 -1\r\n2\r\n-999888777 1000000000\r\n1000000000 -987654321', '10 4\r\n3987543098 3975087573110998514', '', 'BAPC preliminary contest', '', '2007-11-11 16:29:25', 3000, 65536, 'N', NULL, 1, 3, 33, 2, 67, 2, 1, 30000, 52, ''),
(1507, 'Herbert', 'Herbert is a game in which you control a robot on an infinite two-dimensional grid. Thereare three commands available to you: \r\n&#8226; s: Go one square forward in the current direction. \r\n&#8226; l: Turn ninety degrees counterclockwise. \r\n&#8226; r: Turn ninety degrees clockwise. \r\nAfter playing this game for a while, you wonder how many squares you can reach within a certain number of moves. Write a program to calculate the answer to this question.', 'On the first line an integer t ( 1 =< t <=100 ): the number of test cases. Then for each test\r\ncase:\r\n&#8226; One line with an integer n ( 0 =< n <= 1 000,000,000): the maximum number of moves.', 'For each test case:\r\n&#8226; One line with the number of reachable squares.', 'd:\\oj\\data\\1507', 'd:\\oj\\data\\1507', '4\r\n0\r\n1\r\n2\r\n3', '1\r\n2\r\n5\r\n11', '这个题目是我皮蛋加的^_^', 'BAPC preliminary contest', '', '2010-03-08 16:59:17', 1000, 65536, 'N', NULL, 8, 16, 50, 8, 50, 8, 8, 30000, 37, ''),
(1508, 'Space', 'During a programming contest, teams can’t sit close to each other, because then a team might copy the solution of another team. You are given the locations of the teams and the minimum required Euclidian distance between two teams. You have to find the number of pairs of teams that sit too close to each other.', 'On the first line an integer t (1 <= t <= 100): the number of test cases. Then for each test case:\r\n&#8226; One line with two integers n (1 <= n <= 100 000) and d (1 <= d <= 50): the number of teams and the minimum distance between two teams. \r\n&#8226; n lines with two integers xi (0 <= xi <= 1 000 000 000) and yi (0 <= yi <= 1 000 000 000):the coordinates of the i-th team. No two teams will have the same coordinates.', 'For each test case:\r\n&#8226; One line with the number of pairs of teams that sit too close to each other.\r\nNotes\r\nThe Euclidean distance between points (x1, y1) and (x2, y2) is .<img src=images\\1508.jpg></img>', 'd:\\oj\\data\\1508', 'd:\\oj\\data\\1508', '1\r\n6 3\r\n0 0\r\n0 3\r\n2 1\r\n2 3\r\n3 0\r\n3 1', '8', '', 'BAPC preliminary contest', '', '2007-11-13 10:08:12', 60000, 65536, 'N', NULL, 2, 10, 20, 8, 80, 4, 2, 60000, 33, ''),
(1509, 'Length Test System(无数据,请不要提交)', 'A length test system (LTS) was invented by Little Y recently. The system contains N rods with positive integral length. Let’s record the length of these rods as L_1, L_2, …, L_N (L_1 < L_2 < … < L_N).\r\nThe system can figure out the length of LX if and only if at least one of the following conditions below is satisfied:\r\n1)	LX equals to L_q – L_p (0 < p < q < N + 1)\r\n2)	LX equals to L_p + L_N – L_q (0 < p < q < N)\r\n3)	LX equals to L_p (0 < p < N + 1)\r\nIn order to measure the quality of a LTS, we have to introduce the capacity of this system. The capacity C of a LTS is a maximum integer while all length from 1 to C can be figure out in this system.\r\nAlways, a consumer will provide an expected capacity C to Little Y and ask Little Y to produce a system with the capacity no less than C. For saving rods, Little Y wants to use minimum number of rods to satisfy his consumer.\r\nHowever, Little Y doesn’t do a good job in algorithm. So he asks you for help.', 'The input contains multiple test cases. Each test case contains one line with a single integer C (0 < C <= 90) which is the expected capacity.', 'For each test case, output two lines. The first line contains a single integer N which is the number of rods to be used in the system. The second line contains N integers in increasing order which stand for the length of the rods.', 'd:\\oj\\data\\1509', 'd:\\oj\\data\\1509', '7', '3\r\n1 3 7', '1 = 1\r\n2 = 3 - 1\r\n3 = 3\r\n4 = 7 - 3\r\n5 = 1 + 7 - 3\r\n6 = 7 - 1\r\n7 = 7', '2007ACM/ICPC 亚洲区域赛长春', '', '2007-11-13 12:29:27', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1510, '高斯整数(无数据,请不要提交)', '在18世纪末，著名数学家Gauss在研究数论问题的时候，发明了另外一种数，即形如 的数。这类数加法和乘法可以按照自然的方式定义，即\r\n \r\n \r\n可以验证，这类数的加法和乘法构成代数中的field，被称之为imaginary quadratic field。如果k＝1，这种数就是我们常见的复数(complex)。和整数一样，我们也更加关注二次代数中a和b都是整数的数，这种被称为“Gauss integers”\r\n我们知道，每个整数可以被惟一分解为若干素数的乘积（这被称为Fundamental theorem of arithmetic, or unique factorization theorem）。所谓素数是指只能整数1和自身的数。在Gauss integer中，也可以建立类似的概念。我们把不能分解为其他高斯整数（不包括1和-1）乘积的高斯整数称为高斯素数（Gauss Prime），更加精确的说法应该是“不可约的”。注意，和整数中一样， 1、-1不被认为是高斯素数，而 是素数。\r\n\r\n不过unique factorization theorem并不是对于任意k都适用的，比如k=5时，6这个数有两种分解方式 。经过数学家近200年的努力，已经证明，只有9个k值构成的Gauss integers满足unique factorization theorem，他们是 。\r\n这次，我们只考虑k=2的情况，你需要作的就是，判断一个数是否是高斯素数。', '输入的第一行是一个整数n，1<n<100，代表test case的数目。\r\n随后每一行有2个数，a和b。 0<=a,b<＝10000', '对于输入的每一行，如果 是高斯素数，输出Y，否则输出N。将其输出到单独一行。', 'd:\\oj\\data\\1510', 'd:\\oj\\data\\1510', '5 1\r\n3 4', 'N\r\nY', '在 范围内共有10个高斯素数，他们是\r\n (0,1) (5,0), (1,1), (3,1),, (3,2), (1,3), (5,3), (3,4), (3,5)\r\n注意，比如(5, 1)＝(1, -1) * (1, 2)，所以不是素数。', '2007ACM/ICPC 亚洲区域赛长春', '', '2007-11-13 12:33:55', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1511, 'How to get there?', 'This is a very simple questiom.Try it.\r\nhenry is on the ground on which there are so many gold,but he must start at the point ''@'',and also he can''t walk on the point ''x'' which is dangerous.He can''t walk back and also can''t break out the range of the ground.henry can walk left,right,front but not back.And the most important is that the point he had walked is not allowed to walk again. Of course henry want to get gold as much as possible.So henry has to ask you to help him choose a path and tell him the most numbers he can get across this path.You can assume that only one path across which you can get the most golds \r\nfrom wo offer the date. \r\n\r\n\r\n@: the point you start.\r\nx: the point dangeous.\r\n.: you can walk on it and you can get one gold.', 'Line 1: :The height and the width :N and M (1 <= N <= 100; 1 <= M <= 100) \r\n\r\nLines 2..N+1:  M characters per line representing one row of the battleground. Each character is ''x'',''@'' or ''.''.', 'if henry can get gold,at first you must give the path in ''g''which he had been on(include the start point),and next you should give a number which tell henry the number he can get across this path!\r\nelse output 0.', 'd:\\oj\\data\\1511', 'd:\\oj\\data\\1511', '3 3\r\nx@.\r\nx.x\r\nx..', 'xg.\r\nxgx\r\nxgg\r\n3', 'A easy problem.', 'SWUST.pidan', '', '2010-05-12 20:20:09', 1000, 65536, 'N', NULL, 3, 21, 14, 18, 90, 7, 2, 30000, 43, ''),
(1512, '机器人', '众所周知，西南科技大学的机器人小组是学校最牛的科技活动团队，在每年的CCTV全国大学生机器人电视大赛都能取得很好的成绩，当然最好的一年还是2004年的时候拿的全国总冠军和亚太区亚军哈！\r\n现在机器人小组遇到了一个问题需要大家来解决：\r\n<img src=images\\1512.jpg></img>\r\n我们的机器人总是从起点（左下角）出发，目标为最右上角，因为对方机器人设置了很多障碍，所以我们的机器人必须饶过这些路径走其他的路（只能向右或向上走）。如上图红色路径AB，CD，EF，HG为不能通过的路径，求最后机器人从起点到终点能走的不同路径的总数。', '包含多组测试数据，对于每组数据:\r\n第一行3个正整数N，M，K分别代表行数和列数以及不能通过的路径的条数（0 < N,M <= 10000, 0<=K<=10）;\r\n第2到第K+1行，每行4个正整数a , b, c, d分别代表每条路的顶点坐标;\r\n处理到文件结束', '每组数据输出一行,输出最后的不同路径的总数，如果大于9699690，则对其取余。', 'd:\\oj\\data\\1512', 'd:\\oj\\data\\1512', '5 10 4\r\n2 2 2 3\r\n2 4 2 5\r\n2 6 3 6\r\n2 7 3 7', '1374', '请注意:\r\n2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 = 9699690.', 'SWUST.Larrouse', '', '2010-11-05 11:39:56', 1000, 65536, 'N', NULL, 6, 25, 24, 14, 78, 8, 4, 30000, 71, ''),
(1513, '江鸟的困惑', '江鸟最近在做一项数学研究，平面上有一系列的整数点，他在平面上找了其中任意三个点，并且保证这三个点不在同一条直线上且没有重点，他的研究是什么呢？请看下文：他将这三个点用线段连成一个三角形，他现在想知道那些严格在三角形内部的整数点共有多少个。但他太SB了，他向你们这些编程高手求助，你能帮助他吗？为了简化问题，假设数据范围int就可以了。', '第一行输入一个正整数T,表示有多少测试数据。\r\n以下T行,每一行输入六个整数x1,y1,x2,y2,x3,y3分别表示选取的三个点的坐标.', '对应于每组测试数据输出最后结果,格式参照Sample Output.', 'd:\\oj\\data\\1513', 'd:\\oj\\data\\1513', '3\r\n0 0 5 0 0 5\r\n1 1 2 2 3 4\r\n23 24 45 56 78 89', 'CASE 1: 6  \r\nCASE 2: 0\r\nCASE 3: 146', '', 'SWUST.dreamone', '', '2012-02-16 10:32:44', 1000, 65536, 'N', NULL, 33, 60, 55, 26, 46, 35, 31, 30000, 173, ''),
(1514, 'x + 2y + 3z = n', 'This problem is so easy: given an positive integer n, you are to find the number of solutions of the equation \r\n\r\n                                              x + 2y + 3z = n\r\n\r\nwhere x, y, z are nonnegative integers.', 'The input contains several lines of a positive integer n ( n < 10^6 ) followed by a zero.', 'For each positive integer in the input output the number of solutions of the equation.', 'd:\\oj\\data\\1514', 'd:\\oj\\data\\1514', '1\r\n6\r\n0', '1\r\n7', 'You maybe need __int64 or long long.', 'NJU.Butterfly', '', '2012-03-15 15:37:27', 1000, 65536, 'N', NULL, 63, 272, 23, 204, 78, 73, 56, 30000, 407, ''),
(1515, 'The longest good subsequence', 'We call a sequence good if it contains no duplicate numbers. \r\nNow you are to find the length of the longest good contiguous subequence of a given sequence.', 'n --- the length of the sequence, n < 500000. \r\na1 a2 ... an ---- the sequence of integers, each in the range [0, 500000].', 'output the length of the longest good contiguous subequence on a single line.', 'd:\\oj\\data\\1515', 'd:\\oj\\data\\1515', '16\r\n1 2 3 4 5 1 3 5 6 4 8 9 5 3 8 1', '7', 'huge input,please use scanf.', 'NJU.Butterfly', '', '2012-06-27 13:38:12', 3000, 65536, 'N', NULL, 46, 160, 29, 109, 76, 48, 34, 2000, 163, ''),
(1516, 'CET-4', '我们都知道现在的CET-4考试的总分是750.一天老师叫Flying统计班上CET-4的成绩分数段。如有如下几个成绩456 256 566 525，那么456 到 567这个分数段就有 3 个人。因为对于一个班来说，数据比较小，很容易就统计出来了，所以他就想如果统计的人数比较多，该怎么样快速的统计出结果呢？由于Flying是做ACM的，所以就写了个程序，解决了这个问题。你该如何来解决这个问题呢？', '输入第一行有两个数n，q。n代表学生总数（n <= 1,000,000），q代表询问次数，询问在st, ed之间分数的学生个数，包括st和ed    ( q <= 100,000)。第二行是n个学生的CET4成绩， 接下来q行分别是st和ed。', '输出st到ed这个分数段的学生总数，包括st和ed这连个分数。', 'd:\\oj\\data\\1516', 'd:\\oj\\data\\1516', '5 5\r\n4 3 2 2 1\r\n0 2\r\n0 5\r\n4 6\r\n5 7\r\n2 4', '3\r\n5\r\n1\r\n0\r\n4', '注意使用sacnf.\r\ncin可能会导致超时。', 'SWUST.Flying', '', '2012-07-22 17:20:18', 3000, 65536, 'N', NULL, 111, 389, 29, 82, 55, 98, 68, 1000, 655, ''),
(1517, '赤壁', '滚滚长江东逝水，浪花淘尽英雄。是非成败转头空。青山依旧在，几度夕阳红。 \r\n白发渔樵江渚上，惯看秋月春风。一壶浊酒喜相逢。古今多少事，都付笑谈中。\r\n	\r\n	 东汉献帝建安十三年(208年) 曹操亲统大军10万与孙权、刘备联军在长江之赤壁长江南岸（今湖北蒲圻西北)大战，可怜的曹军先遭连环计，再遭火计，十万大军灰飞烟灭。\r\n	曹操率领余部仓皇逃向许昌，可惜孔明等人沿途设下伏兵使每支经过的部队都会减少一定战斗力，这让曹操的逃亡之路更加坎坷，但是，聪明的曹操还是得到了从赤壁到许昌的地图，以及孙刘联军的伏兵图。\r\n	作为全军统帅曹操誓言将更多的部队带回许昌，设赤壁到许昌之间有N座城市编号（1-N），曹操剩余部队K支，曹操应该怎样设计逃亡路线才能使更多的队伍到达许昌，且到达的部队损失的战斗力总和最少呢？（假设起点城市为 1 终点城市为 N）', '第一行：三个正整数N,M,K(1 < N <= 1000,1 < M <= 10000,1 < K < 100 ).\r\n第二行到M+1行：四个整数分别表示，起点城市(S)，重点城市(T)，经过部队减少的战斗力(C,C<600)和允许通过的最大队伍（F < 40 ).', '每行一个整数,表示最后到达目的地的队伍损失的战斗力总和.', 'd:\\oj\\data\\1517', 'd:\\oj\\data\\1517', '4 5 51\r\n1 2 470 5\r\n1 3 3 30\r\n2 3 227 19\r\n2 4 361 23\r\n3 4 467 6', '6975', '队伍可以分开走，不一定要全部都一起走。。', 'SWUST.Flying', '', '2011-04-05 20:16:58', 2000, 65536, 'N', NULL, 18, 62, 29, 38, 79, 13, 10, 30000, 72, ''),
(1518, '分木棍', '给你很多长度不定的木棒，将他们分成几组，每组中的总长度作为这组的标示值，请给出一种分组方法，能使得所有标示值中的最小值最大。', '多组，每组两行，第一行是一个N和K，代表有N根木棒，分成K组，第二行是N个数字，代表木棒的长度。（N不超过100，K不超过20，每根木棒长度不超过1000）', '输出所有标示值中的最小值的最大值。', 'd:\\oj\\data\\1518', 'd:\\oj\\data\\1518', '5 3\r\n1 3 5 7 9\r\n5 3\r\n89 59 68 35 29', '8\r\n89', '', 'SWUST.Dxy', '', '2010-03-08 12:03:57', 1000, 65536, 'N', NULL, 1, 65, 2, 64, 98, 6, 1, 30000, 61, ''),
(1519, '24 点游戏', '对于24点游戏,不用多说了,大家应该都玩过的.\r\n游戏的规则很简单，首先将纸牌中的大、小王取出；然后，在剩余的牌中，每次取出4张牌，并规定A代表1，J代表11，，Q代表12，K代表13。而后，所有的玩家使用’+’、 ’-’、 ’*’、 ’/’、 ’(’、 ’)’将这四张牌所代表的数字连接起来，谁能够最快说出一种能够得到24的四则运算的表达式，或者最快确认这4张牌不可能组成结果为24的四则运算表达式谁就算赢。当然，每张牌都必须要使用，且只能使用一次。 \r\n　　为方便起见，大家约定’-’只代表减号，不代表负号。 \r\n　　现在，你能设计一个程序，来赢取这个纸牌游戏的胜利吗？', '输入包括多组测试数据，处理到文件输入结束为止。 \r\n　　每组输入数据只包括一行，这一行中有4个介于1和13的正整数（含1和13），代表这一轮游戏中所抽出的四张牌。这些数之间以一个空格相隔开。', '对于每组输入数据，输出一行。若按照游戏规则，这四张牌不能通过一个四则运算的表达式得到24，请输出：&quot;No Solution!" \r\n否则，请随意输出一个满足这样条件的表达式，允许带多余的括号。例如，对于四张牌：1　2　3　4，以下三种输出都是正确的： \r\n(1+2+3)*4 \r\n(((1+2)+3)*4) \r\n1*2*3*4', 'd:\\oj\\data\\1519', 'd:\\oj\\data\\1519', '1 2 3 4\r\n1 1 1 1', '(1+2+3)*4\r\nNo Solution!', '此题为SPJ,所以只需要随意输出一组(只能一组)满足条件的合法表达式就可以了,输出的表达式允许包含空格,每个表达式最多输出一行.\r\n\r\n除法为浮点数除法，不是整数除法，比如3/5*10为6，不为10。', 'SWUST.Larrouse', '', '2011-03-17 22:29:24', 3000, 65536, 'N', NULL, 7, 19, 37, 12, 67, 8, 6, 30000, 70, ''),
(1520, 'Easy ＳＴＬ', '输入一个数，(为了简单起见，保证输入的数不大于25)按照如下格式输出：\r\n如输入４，输出\r\n1 2 3 4 \r\n2 3 4 1 \r\n3 4 1 2 \r\n4 1 2 3 懂了吧，很简单吧，用ＳＴＬ就更简单了！', '', '', 'd:\\oj\\data\\1520', 'd:\\oj\\data\\1520', '５', '1 2 3 4 5\r\n2 3 4 5 1\r\n3 4 5 1 2\r\n4 5 1 2 3\r\n5 1 2 3 4', '每行的相邻数据只需一个空格就可以了．', 'SWUST.江鸟', '', '2012-03-18 15:15:45', 1000, 65536, 'N', NULL, 88, 127, 69, 39, 33, 84, 81, 30000, 257, ''),
(1521, '高精度除法', 'Calculate a / b', 'The input will consist of a series of pairs of integers a and b, separated by a space, one pair of integers per line.', 'For each pair of input integers a and b you should output a/b in one line, and with one line of output for each line in input.', 'd:\\oj\\data\\1521', 'd:\\oj\\data\\1521', '324546567 57667\r\n6 3', '5627\r\n2', '', 'SWUST.江鸟', '', '2012-05-30 18:45:56', 1000, 65536, 'N', NULL, 19, 48, 40, 29, 62, 24, 18, 30000, 150, ''),
(1522, '超级最小公倍数', '给两个正整数a,b(1<=a,b<=10^100),求a和b的最小公倍数', '输入　有多组测试数据，每组包含两个正整数a和b，中间以一个空格隔开输入以 0 0 结束', '对应输出a,b的最小公倍数', 'd:\\oj\\data\\1522', 'd:\\oj\\data\\1522', '123　321 \r\n23455465477686787 42354364576576\r\n0 0', '13161\r\n993441336155238517851204901312', '', 'SWUST.江鸟', '', '2012-04-09 22:01:17', 1000, 65536, 'N', NULL, 11, 23, 48, 12, 55, 13, 10, 30000, 109, ''),
(1523, '浮点数高精度', 'Problems involving the computation of exact values of very large magnitude and precision are common. For example, the computation of the national debt is a taxing experience for many computer systems. \r\n\r\nThis problem requires that you write a program to compute the exact value of Rn where R is a real number ( 0.0 < R < 99.999 ) and n is an integer such that 0 < n <= 25.', 'The input will consist of a set of pairs of values for R and n. The R value will occupy columns 1 through 6, and the n value will be in columns 8 and 9.', 'The output will consist of one line for each line of input giving the exact value of R^n. Leading zeros should be suppressed in the output. Insignificant trailing zeros must not be printed. Don''t print the decimal point if the result is an integer.', 'd:\\oj\\data\\1523', 'd:\\oj\\data\\1523', '95.123 12\r\n0.4321 20\r\n5.1234 15\r\n6.7592  9\r\n98.999 10\r\n1.0100 12', '548815620517731830194541.899025343415715973535967221869852721\r\n.00000005148554641076956121994511276767154838481760200726351203835429763013462401\r\n43992025569.928573701266488041146654993318703707511666295476720493953024\r\n29448126.764121021618164430206909037173276672\r\n90429072743629540498.107596019456651774561044010001\r\n1.126825030131969720661201', '', 'POJ', '', '2012-04-09 21:06:37', 1000, 65536, 'N', NULL, 20, 38, 53, 18, 50, 22, 18, 30000, 96, ''),
(1524, '阶乘2(高精度)', '先输入一个数,表示有几组数据,然后输入一个数n(n<=1000),计算1!+2!+3!+....+n!', '', '', 'd:\\oj\\data\\1524', 'd:\\oj\\data\\1524', '3\r\n10\r\n20\r\n100', '4037913\r\n2561327494111820313\r\n94269001683709979260859834124473539872070722613982672442938359305624678223479506023400294093599136466986609124347432647622826870038220556442336528920420940313', '', 'swust.dreamone', '', '2012-04-19 19:30:00', 1000, 65536, 'N', NULL, 45, 128, 35, 64, 69, 34, 29, 30000, 329, ''),
(1525, '快乐圣诞!!!', '大家圣诞节快乐!!!\r\n把output中的字符串转化为一个圣诞树的格式输出.\r\n前3段格式见 simple output:', '', 'A\r\n          =\r\n         1,B\r\n          =\r\n         1,I\r\n        ;char\r\n          *\r\n         S,*\r\n        P;q(I\r\n       ){for(;\r\n          #\r\n         --I\r\n        ;p(32\r\n       ));}p(C\r\n      ){putchar\r\n          (\r\n         C);\r\n        }main\r\n       (){for(\r\n      P=S;q(12-\r\n     B),1;p(10),\r\n          A\r\n         ==B\r\n        ?A++,\r\n       B=1:B++\r\n      )if(!*P )\r\n     if(B<2)p(35\r\n    );else{p(34);\r\n          #\r\n         for\r\n        (I=3;\r\n       *S&&I++\r\n      <B*2;)p(*\r\n     S++);p(34);\r\n    if(I<B*2    )\r\n   return q(B*2-I)\r\n          ,\r\n         p (\r\n        59),0\r\n       ;} else\r\n      for(I=1;I\r\n     ++<B*2;)p(*\r\n    P++);}char*S=\r\n   "A=1,B=1,I;cha"\r\n  "r*S,*P;q(I){for"\r\n          #\r\n         "("\r\n        ";#-"\r\n       "-I;p("\r\n      "32));}p"\r\n     "(C){putch"\r\n    "ar(C);}main"\r\n   "(){for(P=S;q("\r\n  "12-B),1;p(10),A"\r\n "==B?A++,B=1:B++)i"\r\n          #\r\n         "f"\r\n        "(!*"\r\n       "P )if"\r\n      "(B<2)p("\r\n     "35);else{"\r\n    "p(34);#for("\r\n   "I=3;*S&&I++<B"\r\n  "*2;)p(*S++);p(3"\r\n "4);if(I<B*2    )r"\r\n"eturn q(B*2-I),p (5"\r\n          #\r\n         "9"\r\n        "),0"\r\n       ";} el"\r\n      "sefor(I"\r\n     "=1;I++<B*"\r\n    "2;)p(*P++);"\r\n   "}char*S="    ;', 'd:\\oj\\data\\1525', 'd:\\oj\\data\\1525', '', 'A\r\n          =\r\n         1,B\r\n          =\r\n         1,I\r\n        ;char\r\n          *\r\n         S,*\r\n        P;q(I\r\n       ){for(;\r\n          #\r\n         --I\r\n        ;p(32\r\n       ));}p(C\r\n      ){putchar\r\n          (\r\n         C);\r\n        }main\r\n       (){for(\r\n      P=S;q(12-\r\n     B),1;p(10),', '需要在以上的字符中间添加空格!!!', 'SWUST.Larrouse', '', '2011-03-08 10:25:47', 1000, 65536, 'N', NULL, 7, 12, 58, 5, 42, 7, 7, 30000, 52, ''),
(1526, '简单的划分数问题', '将整数n分成k份，且每份不能为空，任意两份不能相同(不考虑顺序)。\r\n例如：n=7，k=3，下面三种分法被认为是相同的。\r\n1,1,5; 1,5,1; 5,1,1;\r\n问有多少种不同的分法。', '连续输入n,k(为了简化问题，假设n<=500,k<20&&n>k) 如果输入n和k都为0就结束。', '一个整数，即不同的分法。', 'd:\\oj\\data\\1526', 'd:\\oj\\data\\1526', '7 3\r\n6 2\r\n0 0', '4\r\n3', '', 'SWUST.dreamone', '', '2012-04-26 17:12:46', 1000, 65536, 'N', NULL, 38, 119, 32, 70, 80, 30, 18, 30000, 515, ''),
(1527, '简单的划分数问题(高精度)', '将整数n分成k份，且每份不能为空，任意两份不能相同(不考虑顺序)。\r\n例如：n=7，k=3，下面三种分法被认为是相同的。\r\n1,1,5; 1,5,1; 5,1,1;\r\n问有多少种不同的分法。', '连续输入n,k(为了简化问题，假设n<=1000,k<=200&&n>k) 如果输入n和k都为0就结束。', '一个整数，即不同的分法。', 'd:\\oj\\data\\1527', 'd:\\oj\\data\\1527', '7 3\r\n1000 20\r\n0 0', '4\r\n15374874902418364055409', '', '', '', '2012-03-05 11:38:39', 1000, 65536, 'N', NULL, 16, 23, 70, 6, 38, 11, 10, 30000, 117, ''),
(1528, '乘积最大', '设有一个长度N的数字串，要求选手使用K个乘号将它分成K+1个部分，找出一种分法，使得这K+1个部分的乘积能够为最大。\r\n同时，为了帮助选手能够正确理解题意，主持人还举了如下的一个例子：\r\n有一个数字串: 312，当N=3，K=1时会有以下两种分法：\r\n　　　　　　1）3*12=36\r\n　　　　　　2）31*2=62\r\n这时，符合题目要求的结果是：  31*2=62\r\n现在，请你设计一个程序，求得正确的答案。', '程序的输入共有两行：\r\n第一行共有2个自然数N，K (6<=N<=20，1<=K<=6)\r\n第二行是一个K度为N的数字串。', '输出正确结果', 'd:\\oj\\data\\1528', 'd:\\oj\\data\\1528', '4 2\r\n1231', '62', '', 'SWUST.dreamone', '', '2012-04-19 22:13:26', 1000, 65536, 'N', NULL, 4, 8, 50, 4, 50, 7, 4, 30000, 123, ''),
(1529, '高精度减法', '输入多组数据m,n,计算m-n的值', '', '', 'd:\\oj\\data\\1529', 'd:\\oj\\data\\1529', '2345436 556\r\n100024234535343435436 654654634534653465', '2344880\r\n99369579900808781971', '主要看人品过不过关......', 'SWUST.dreamone', '', '2012-05-30 18:47:34', 1000, 65536, 'N', NULL, 50, 193, 26, 135, 79, 50, 36, 30000, 458, ''),
(1530, 'TwoStringMasks', 'You are given two strings s1 and s2. Each string contains some letters and exactly one asterisk (''*'').\r\nYou must replace each asterisk with a sequence of letters (possibly of zero length). The resulting two strings must be equal.', 'Each test case contain two strings s1,s2.\r\ns1 will contain between 1 and 50 characters, inclusive.\r\ns2 will contain between 1 and 50 characters, inclusive.\r\ns1 and s2 will contain only uppercase letters (''A''-''Z'') and asterisks (''*'').\r\ns1 and s2 will contain exactly one asterisk each.', 'Return the shortest possible resulting string for one line. If it is impossible to make the strings equal, return "impossible" (quotes for clarity) instead.', 'd:\\oj\\data\\1530', 'd:\\oj\\data\\1530', 'TOPC*DER\r\nT*PCODER\r\nHELLO*\r\nHI*\r\n*\r\nA*', 'TOPCODER\r\nimpossible\r\nA', '', 'topcoder SRM 392(modified by Larrouse)', '', '2008-03-11 17:53:54', 1000, 65536, 'N', NULL, 2, 9, 22, 7, 78, 2, 2, 30000, 55, ''),
(1531, '统计难题(Trie树应用)', 'Ignatius最近遇到一个难题,老师交给他很多单词(只有小写字母组成,不会有重复的单词出现),现在老师要他统计出以某个字符串为前缀的单词数量(单词本身也是自己的前缀).', '输入数据的第一部分是一张单词表,每行一个单词,单词的长度不超过10,它们代表的是老师交给Ignatius统计的单词,一个空行代表单词表的结束.第二部分是一连串的提问,每行一个提问,每个提问都是一个字符串.\r\n\r\n注意:本题只有一组测试数据,处理到文件结束.', '对于每个提问,给出以该字符串为前缀的单词的数量.', 'd:\\oj\\data\\1531', 'd:\\oj\\data\\1531', 'banana\r\nband\r\nbee\r\nabsolute\r\nacm\r\n\r\nba\r\nb\r\nband\r\nabc', '2\r\n3\r\n1\r\n0', '暂时无数据,请不要提交.\r\nHUD 1251', 'HUD——Ignatius.L', '', '2009-04-26 20:27:56', 1000, 65536, 'Y', NULL, 5, 6, 83, 0, 0, 2, 2, 30000, 2, ''),
(1532, 'Genesis', 'ACM lovers are fond of searching the origin of things. So,I''ll tell you the origin of the world,which is also the \r\norigin of our story-The first seven days of the creation of the world. \r\n***************************************************************************************************************** \r\n1:1    At the first God made the heaven and the earth.  \r\n1:2    And the earth was waste and without form ; and it was dark on the face of the deep: and the Spirit of God \r\n       was moving on the face of the waters.  \r\n1:3    And God said, Let there be light: and there was light.  \r\n1:4    And God, looking on the light, saw that it was good : and God made a division between the light and the dark,  \r\n1:5    Naming the light, Day, and the dark, Night. And there was evening and there was morning, the first day.  \r\n1:6    And God said, Let there be a solid arch stretching over the waters, parting the waters from the waters.  \r\n1:7    And God made the arch for a division between the waters which were under the arch and those which were over it: and it was so.  \r\n1:8    And God gave the arch the name of Heaven. And there was evening and there was morning, the second day.  \r\n1:9    And God said, Let the waters under the heaven come together in one place, and let the dry land be seen: and it was so.  \r\n1:10   And God gave the dry land the name of Earth; and the waters together in their place were named Seas: and God saw that it was good.  \r\n1:11   And God said, Let grass come up on the earth, and plants producing seed , and fruit-trees giving fruit, in \r\n       which is their seed, after their sort: \r\n       and it was so.  \r\n1:12   And grass came up on the earth, and every plant producing seed of its sort, and every tree producing fruit, in which is its seed,  \r\n       of its sort: and God saw that it was good.  \r\n1:13   And there was evening and there was morning, the third day.  \r\n1:14   And God said, Let there be lights in the arch of heaven, for a division between the day and the night, and let them be for signs, \r\n       and for marking the changes of the year, and for days and for years:  \r\n1:15   And let them be for lights in the arch of heaven to give light on the earth: and it was so.  \r\n1:16   And God made the two great lights: the greater light to be the ruler of the day, and the smaller light to be the ruler of the night: \r\n       and he made the stars.  \r\n1:17   And God put them in the arch of heaven, to give light on the earth;  \r\n1:18   To have rule over the day and the night, and for a division between the light and the dark: and God saw that it was good.  \r\n1:19   And there was evening and there was morning, the fourth day.  \r\n1:20   And God said, Let the waters be full of living things, and let birds be in flight over the earth under the arch of heaven.  \r\n1:21   And God made great sea beasts, and every sort of living and moving thing with which the waters were full, and every sort of winged bird: \r\n       and God saw that it was good.  \r\n1:22   And God gave them his blessing, saying, Be fertile and have increase, making all the waters of the seas full, and let the birds be \r\n       increased in the earth.  \r\n1:23   And there was evening and there was morning, the fifth day.  \r\n1:24   And God said, Let the earth give birth to all sorts of living things, cattle and all things moving on the earth, and beasts of \r\n       the earth after their sort: and it was so.  \r\n1:25   And God made the beast of the earth after its sort, and the cattle after their sort, and everything moving on the face of the earth \r\n       after its sort: and God saw that it was good.  \r\n1:26   And God said, Let us make man in our image, like us: and let him have rule over the fish of the sea and over the birds of the air \r\n       and over the cattle and over all the earth and over every living thing which goes flat on the earth.  \r\n1:27   And God made man in his image, in the image of God he made him: male and female he made them.  \r\n1:28   And God gave them his blessing and said to them, Be fertile and have increase, and make the earth full and be masters of it; \r\n       be rulers over the fish of the sea and over the birds of the air and over every living thing moving on the earth.  \r\n1:29   And God said, See, I have given you every plant producing seed, on the face of all the earth, and every tree which has fruit producing seed: \r\n       they will be for your food:  \r\n1:30   And to every beast of the earth and to every bird of the air and every living thing moving on the face of the earth I have given every green \r\n       plant for food: and it was so.  \r\n1:31   And God saw everything which he had made and it was very good. And there was evening and there was morning, the sixth day.  \r\n2:1    And the heaven and the earth and all things in them were complete.  \r\n2:2    And on the seventh day God came to the end of all his work; and on the seventh day he took his rest from all the work which he had done.  \r\n2:3    And God gave his blessing to the seventh day and made it holy: because on that day he took his rest from all the work which he had made  \r\n       and done .  \r\n************************************************************************************************************** \r\nYou task is to calculate the number of words in each paragraph.', 'Input is the same as the words between asterisks.', 'For each paragraph,you program should output one line consist of paragraph number and the number of words in the paragraph, \r\nseperated by a space.You should see the sample output for actual format.', 'd:\\oj\\data\\1532', 'd:\\oj\\data\\1532', '1:1    At the first God made the heaven and the earth.\r\n1:2    And the earth was waste and without form ; and it was dark on the face of the deep: and the Spirit of God \r\n       was moving on the face of the waters.  \r\n......', '1:1 10\r\n1:2 31\r\n......', '', 'noah@WOJ', '', '2012-02-28 16:46:26', 1000, 65536, 'N', NULL, 5, 39, 13, 33, 87, 10, 5, 30000, 95, '');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1533, 'Adjacent Difference', 'An adjacent difference of a sequence is a new sequence formed by replacing every element with the difference between the element and  the immediately preceding element. The first value in the new sequence remains unchanged. For example, a sequence such as (1, 3, 2, 4, 5)  is transformed into (1, 3-1,2-3, 4-2, 5-4), and in this manner becomes the sequence (1, 2, -1, 2, 1). Then, we want to sort the adjacent difference of the sequence in non-decreasing order. It‘s an easy job for you, isn’t it? So, please solve it quickly.', 'Standard input will contain multiple test cases. The first line of the input is a single integer T(1 <= T <= 50) which is the number of  test cases. \r\n    For each test case, the first line contains an integer N(1 <= N <= 1000), representing the size of the sequence. The second line contains  N integers (you are ensured that the absolute value of each integer is less than 2^16 ), representing the elements of this sequence.', 'Results should be directed to standard output. Start each case with "Case #:" on a single line, where # is the case number starting from  1. Two consecutive cases should be separated by a single blank line. No blank line should be produced after the last test case. \r\n    For each test case, output one line containing n elements representing the sorted adjacent difference of the sequence. Elements are  separated by one blank space.', 'd:\\oj\\data\\1533', 'd:\\oj\\data\\1533', '1 \r\n5 \r\n1 3 2 4 5', 'Case 1: \r\n-1 1 1 2 2', '', 'The 4th Wuhan University Programming Contest(Final Round)', '', '2011-07-27 10:47:13', 1000, 65536, 'N', NULL, 53, 205, 26, 147, 75, 56, 48, 30000, 146, ''),
(1534, 'Who have sloved the most number of problems!', 'After each contest, Larrouse asked Henry to collect the number of the problems which each team have solved in the contest. It''s a small piece of case,but Larrouse only told Henry the relationship of the numbers between each two teams.\r\nTo be easy ,there are two kinds of relationships ,"+"(more than) or "-"(less than).\r\nHenry solved this job so quickly, and now he give this job to you ,can you do better than him?', 'The first line if a number N( 0 < N < 10 ) which if the total number of the teams in the contest.\r\nThe next N-1 lines:\r\nFor the ith( 2 <= i <= N ) line,there is a char ''+'' or ''-'',and then two integer a,b( 0 <= b <= 10 ) which means that team i sloved b problems more than or less than team a.', 'Output the id of the teams that have sloved the most number of problems in  increasing orders.', 'd:\\oj\\data\\1534', 'd:\\oj\\data\\1534', '6\r\n+ 3 1\r\n+ 1 2\r\n- 2 1\r\n+ 3 1\r\n+ 1 1', '2 5', '', 'SWUST.Henry', '', '2011-07-27 14:51:32', 1000, 65536, 'N', NULL, 11, 37, 30, 24, 77, 9, 7, 30000, 100, ''),
(1535, 'the product of prime numbers', 'Prime number is the number that it can only be divided exactly by 1 and itself ! \r\nNow I will give you two numbers a and b,a and b are both in [1,100].\r\nplease output the product of all prime numbers in [a,b] or [b,a].\r\nIf there is no prime number in [a,b] or [b,a], output -1.\r\nSo easy and try it!!!', 'The first line is the number of the test case.\r\nThe next N lines is the a and b.', 'To each a and b,please output the product of prime numbers .\r\n"1" is prime numbers or not ?  Identify it by the description.', 'd:\\oj\\data\\1535', 'd:\\oj\\data\\1535', '2\r\n3 5\r\n4 6', '15\r\n5', 'For the second test case, there is only one prime number,so the answer is "5"!\r\nWe can make sure that the result will not exceed 2,000,000,000.', 'SWUST.Henry', '', '2012-04-13 00:22:16', 1000, 65536, 'N', NULL, 52, 209, 25, 156, 76, 62, 49, 30000, 247, ''),
(1536, 'RP Problem', 'Magicpig and Acm like to compete with each other recently. The loser has to "BG" the winner, that means, if\r\nMagicpig wins, Acm will treat him  to a meal. But Acm is so powerful that Magicpig has to "BG" him almost every time. Everybody is very interested in this. So more and more ACMers are attracted to participate in this game. One day, Peipei said: "It is unfair that one person should ''BG'' all the others. I suggest that 50% of the participants should pay the bill. That means, if there are n participants, then Ceil(n/2) person should ''BG'' the other n-Ceil(n/2 person."  \r\n   This is a good idea! So all of us agree to do so. This is the story of "BG". Now you task is: given a number n--the total number of participants, you have to calculate how many people should pay the bill.', 'The input consists of one or more lines. Each line contains a positive integer n(2<=n<=100).A line which contains a single 0 will end the input.', 'A positive integer on each line denoting the required answer.', 'd:\\oj\\data\\1536', 'd:\\oj\\data\\1536', '2\r\n6\r\n0', '1\r\n3', '', 'dreamone', '', '2012-05-26 19:43:58', 1000, 65536, 'N', NULL, 62, 123, 50, 61, 52, 64, 57, 30000, 212, ''),
(1537, 'Flowers', 'As you know, Gardon trid hard for his love-letter, and now he''s spending too much time on choosing flowers for Angel. When Gardon entered the flower shop, he was frightened and dazed by thousands kinds of flowers.  "How can I choose!" Gardon shouted out. Finally, Gardon-- a no-EQ man decided to buy flowers as many as possible. \r\nCan you compute how many flowers Gardon can buy at most?', 'Input have serveral test cases. Each case has two lines. \r\nThe first line contains two integers: N and M. M means how much money Gardon have. \r\nN integers following, means the prices of differnt flowers.', 'For each case, print how many flowers Gardon can buy at most. \r\nYou may firmly assume the number of each kind of flower is enough.', 'd:\\oj\\data\\1537', 'd:\\oj\\data\\1537', '2 5 \r\n2 3', '2', 'RP', '', '', '2012-07-04 13:26:38', 1000, 65536, 'N', NULL, 47, 95, 49, 48, 52, 48, 44, 30000, 187, ''),
(1538, 'sting of ''1''', 'You will be given a string which only contains ‘1’; You can merge two adjacent ‘1’ to be ‘2’, or leave the ‘1’ there. Surly, you may get many different results. For example, given 1111 , you can get 1111, 121, 112,211,22. Now, your work is to find the total number of result you can get.', 'The first line is a number n refers to the number of test cases. Then n lines follows, each line has a string made up of ‘1’ . The maximum length of the sequence is 40.', 'The output contain n lines, each line output the number of result you can get .', 'd:\\oj\\data\\1538', 'd:\\oj\\data\\1538', '2\r\n1\r\n1111', '1\r\n5', '', '', '', '2012-04-06 22:47:41', 1000, 65536, 'N', NULL, 51, 80, 64, 27, 36, 50, 48, 30000, 210, ''),
(1539, 'FingerCounting', 'Your little son is counting numbers with his left hand. Starting with his thumb and going toward his pinky, he counts each finger in order. After counting his pinky, he reverses direction and goes back toward his thumb. He repeats this process until he reaches his target number. He never skips a finger. For example, to count to ten, he would count: thumb, index, middle, ring, pinky, ring, middle, index, thumb, index. Sadly, one of his fingers hurts and he can only count on it a limited number of times. His fingers are numbered 1 through 5 from thumb to pinky. You are given an int weakFinger, the finger that hurts, and an int maxCount, the maximum number of times he can use that finger. Return the largest number he can count to. If he cannot even begin counting, return 0.', 'Input contains multiple test cases, and one case one line. Each case starts with two integers N(hurts finger),T(maximum,0<=T<=1000000,)in one line.', 'For each test case you should output the largest number he can count to in one line, and with one line of output for each line in input.', 'd:\\oj\\data\\1539', 'd:\\oj\\data\\1539', '2 3\r\n2 48', '15\r\n193', '', 'SRM 390-div2(Larrouse last modfiy)', '', '2011-04-20 12:55:42', 1000, 65536, 'N', NULL, 24, 58, 41, 33, 60, 24, 22, 30000, 85, ''),
(1540, 'Best Messenger Tool——NKQQ', 'Mr. Wysuperfly uses a messenger tool called NKQQ to communicate with his friends on the net. The NKQQ accumulates 1 point score every hour automatically. When the score reach certain level, there will be a level-up. The relationship between the score and the level is listed as below:\r\n\r\n\r\nLevel 1                   0 － 100\r\n \r\nLevel 2                   101 － 500\r\n \r\nLevel 3                   501 － 2000\r\n \r\nLevel 4                   2001 － 10000\r\n \r\nLevel 5                   10001 － 50000\r\n \r\nLevel 6                   50001 － 200000\r\n \r\nLevel 7                   200001 - infinity\r\nMr. Wysuperfly finds that other Nankai ACM teammates also use NKQQ everyday like him. He wants to know that after several hours, how many teammates reach a certain level. Can you help him?', 'The first line is an integer N (N<=100000) which represents the amount of the teammates to be considered. The second line includes N numbers which represent the scores of the teammates. The third line is a positive integer Q (Q<=100000) which represents how many questions in the input data. In the following Q lines, each line which includes two integers D (0<=D<=109) and L (1<=L<=7) stands for a question: ‘After D hours, how many teammates will reach level L?''', 'For every question, output one line to show the answer to the question (one nonnegative integer).', 'd:\\oj\\data\\1540', 'd:\\oj\\data\\1540', '3\r\n1 2 3\r\n2\r\n98 1\r\n98 2', '2\r\n1', '', 'NKPC4', '', '2011-03-15 22:34:59', 1500, 10000, 'N', NULL, 6, 55, 11, 44, 92, 8, 4, 3000000, 53, ''),
(1541, 'The largest number of pieces！', 'On the way home, DragonFly has got an extraordinarily large apple. He would like to share it with his friends. Now he wants to get as many pieces as possible with n cuts. But he cannot decide how to cut it, because the apple is rather delicious. Now he needs your help.', 'Each line contains an integer n ( 0 <= n <= 10^100). \r\nInput will be terminated by EOF.', 'You should print the largest number of pieces by n cuts of each case .', 'd:\\oj\\data\\1541', 'd:\\oj\\data\\1541', '1\r\n2\r\n3\r\n5\r\n1000', '2\r\n4\r\n8\r\n26\r\n166667501', '', 'WHUCPC04 Final Round', '', '2008-05-09 16:34:19', 1000, 65536, 'N', NULL, 4, 35, 11, 30, 91, 11, 3, 30000, 79, ''),
(1542, 'Four in a Row', 'Given a positive integer, tell whether it is equal to the sum of four consecutive integers.', 'A positive integer n ( n <2^31 ), each case will be on a separate line. A zero (0) denotes the end of input.', 'The phrase “ is not the sum of four consecutive integers.” or the phrase “ is the sum of four consecutive integers.”, where is the number in question.', 'd:\\oj\\data\\1542', 'd:\\oj\\data\\1542', '2\r\n5\r\n41\r\n82\r\n0', '2 is the sum of four consecutive integers.\r\n5 is not the sum of four consecutive integers.\r\n41 is not the sum of four consecutive integers.\r\n82 is the sum of four consecutive integers.', 'In this example, 2 = -1 + 0 + 1 + 2, and 82 = 19 + 20 + 21 + 22. 5 and 41 are not of the correct form.', 'JLU', '', '2012-05-26 11:38:50', 1000, 65536, 'N', NULL, 121, 215, 56, 91, 47, 104, 101, 30000, 224, ''),
(1543, 'Zorro', 'Zorro is ready to modernize -- he is tired of hand drawing his giant "Z", he want you to write a program to generate different sizes of ''Z''s.', 'This problem has sevral test cases.In each case,you''ve given a positive number t(t<=6),and for each t,you are to draw a ''Z'' in size of t like the simple input and simple output.\r\nAn input of 0 will indicate that Zorro is done.', 'The Z, drawn in ''Z''s. \r\nPrint a blank line after each test case. The output must NOT contain any trailing blanks.', 'd:\\oj\\data\\1543', 'd:\\oj\\data\\1543', '1\r\n2\r\n3\r\n0', 'Z\r\n\r\nZZZZ\r\n  Z\r\n Z\r\nZZZZ\r\n\r\nZZZZZZZZZZZZZZZZ\r\n  Z   Z   Z   Z\r\n Z   Z   Z   Z\r\nZZZZZZZZZZZZZZZZ\r\n        ZZZZ\r\n          Z\r\n         Z\r\n        ZZZZ\r\n    ZZZZ\r\n      Z\r\n     Z\r\n    ZZZZ\r\nZZZZZZZZZZZZZZZZ\r\n  Z   Z   Z   Z\r\n Z   Z   Z   Z\r\nZZZZZZZZZZZZZZZZ', '', 'JLU', '', '2011-06-07 22:11:08', 1000, 65536, 'N', NULL, 11, 27, 41, 16, 70, 9, 7, 30000, 91, ''),
(1544, 'Who Win The Game?', 'Tom and Jack are on the train. The journey is too dull so much so that both of them are eager to find a way to fritter away the time. Tom is a student of mathematics department. He proposes a funny game to play with Jack. First pile up N chips where (1 < N < 100000), then Jack takes away at most P=N-1 chips from the pile. After that, Tom takes away at most(or equals) Q=2*P chips from the pile. Then it turns to Jack again, he takes away at most(or equals) P=2*Q. Each time both of them have to take away at least 1 chip. In the same way, the process continues and who takes away the last chip wins the game. Jack knows there must be something tricky in the game, so he''s decided to write a program to check whether there exists a win-strategy(no matter how many chips Tom takes away each time, Jack will win) for himself for a specific N. You know Jack is very good at programming, so solving this problem doesn''t take him too much time. Do you know how he does?', 'The input consists of several lines, each of which consists of an integer N( N < 100000 ) . The last line of the input is 0, which you shouldn''t process.', 'For each N, you should output either YES or NO. If there exists a win-strategy for Jack, output YES. Otherwise output NO.', 'd:\\oj\\data\\1544', 'd:\\oj\\data\\1544', '2\r\n3\r\n4\r\n5\r\n1000\r\n0', 'NO\r\nNO\r\nYES\r\nNO\r\nYES', '', 'JLU', '', '2008-05-01 22:18:22', 1000, 65536, 'N', NULL, 2, 23, 9, 21, 91, 6, 2, 30000, 59, ''),
(1545, '观光旅游', '在桑给巴尔岛的Adelton城镇上有一个旅游机构。它们决定在提供许多的其它吸引之外，再向客人们提供旅游本镇的服务。 为了从提供的吸引服务中尽可能地获利，这个旅游机构接收了一个精明决定：在相同的起点与终点之间找出一最短路线。?? \r\n你的任务是编写一条程序来找类似的的一条路线。在这个镇上，有N个十字路口(编号1至N)，两个十字路口之间可以有多条道路连接，有M条道路（编号为1至M)。但没有一条道路从一个十字路口出发又回到同一个路口。每一条观光路线都是由一 些路组成的，这些道路序号是：y_1, ..., y_k,且k>2。第y_i(1<=i<=k-1)号路是连接第x_i号十字路口和第x_{i+1}号十字路 口的；其中第y_k号路是连接第x_k号十字路口和第x_1号十字路口。而且所有的这些x_1,...,x_k分别代表不同路口的序号。在 某一条观光路线上所有道路的长度的和就是这条观光路线的总长度。换言之L(y_1)+L(y_2)+...+L(y_k) 的和 L(y_i)就是第y_i 号观光路线的长度。你的程序必须找出类似的一条路线：长度必须最小，或者说明在这个城镇上不存在这条观光路线。', '多组测试数据。每一组数据的第一行包含两个正整数：十字路口的个数N(N<=100)，另一个是道路的 数目M(M<10000)。接下来的每一行描述一条路：每一行有三个正整数：这条路连接的两个路口的编号，以及这条路的长度（小于500的正整数）。最后以`-1`结束。', '每一行输出都是一个答案。如果这条观光路线是不存在的话就显示“No solution”；或者输出这条最短路线的经过所有十字 路口的序号，每一个序号之间用一个空格符隔开，这样更能说明这条路线是如何得出来的。也就是用从x_1到x_k描述一条观光路 线。假如满足最短长度的观光路线不止一条，输出其中的任一条即可。', 'd:\\oj\\data\\1545', 'd:\\oj\\data\\1545', '5 7\r\n1 4 1\r\n1 3 300\r\n3 1 10\r\n1 2 16\r\n2 3 100\r\n2 5 15\r\n5 3 20\r\n4 3\r\n1 2 10\r\n1 3 20\r\n1 4 30\r\n-1', '1 3 5 2\r\nNo solution', 'SPJ', 'ural', '', '2008-04-20 20:53:00', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 2, ''),
(1546, '迷宫', '迷宫的管理员们决定在新开始的季节里使用新的墙纸。出于这个目的他们需要一个程序来计算迷宫内墙壁的面积。这就是你即将要做的工作。我们把这个迷宫用一个N*N (3 <= N <= 33) 的矩阵表示。一些矩阵单元包含一个 “ .” （这代表一个空的方块），另一些矩阵单元包含一个“ #” （这代表一个用巨石砌成的石墙占据的方块）。全部方块的大小都为 3*3 平方米。 \r\n<img src=images\\1546.jpg></img>\r\n墙壁由迷宫的四周（除了作为迷宫出入口的左上角和右下角以外）以及那些标记为“ #” 的矩阵单元构成，除此之外没有其他的墙。在输入的矩阵里左上角和右下角永远是一个“ .”。 \r\n你的任务是计算迷宫里可见部分的墙壁的面积。换句话说，就是对迷宫的游客来说墙壁表面可见的部分。注意在两块相邻的石块之间没有空隙，即使两块石块在转角处相接触，我们都认为它们是相邻的。看看图示的例子：迷宫中可见的墙壁都用加粗的线条来描画。所有墙壁的高度都是三米。', '输入的第一行包含一个数字N。接下来的N行每行都包含有N个字符。每行描述了迷宫矩阵的一行。每行都只有“ .” 、“ #” 这两个字符并都以一个换行符结束。输入里没有任何的空格', '你的程序必须输出一个整数，即所需要的壁纸的准确面积。', 'd:\\oj\\data\\1546', 'd:\\oj\\data\\1546', '5\r\n.....\r\n...##\r\n..#..\r\n..###\r\n.....', '198', '', 'ural', '', '2011-02-19 20:35:16', 2000, 65536, 'N', NULL, 19, 64, 30, 10, 53, 15, 9, 30000, 115, ''),
(1547, '化学方程式', '你要写一个程序，读入化学方程式的左边和右边，确定是否成立？\r\n方程式的每一边是一个字符串不含空格，包括一个或多个化合式用“+”分开。每个化合式可以是一个单独元素或元素的组合，用圆括号括起，每个不同的元素由一个大写字母或一个大写字母和一个小写字母组成。\r\n\r\n<格式> ::= [数字]<序列>{''+''[数字]<序列>} \r\n<序列> ::= <化合式&gt;[数字]{<化合式&gt;[数字]} \r\n<化合式&gt; ::= <元素> | ''('' <序列> '')'' \r\n<元素> ::= <大写字母> [<小写字母>] \r\n<大写字母> ::= ''A''..''Z'' \r\n<小写字母> ::= ''a''..''z'' \r\n<数字> ::= ''1''..''9'' {''0''..''9''} \r\n\r\n每个元素在方程式里都有一个出现的次数Total。\r\n所有的乘数都是至少为2的整数和默认为1。每个方程式至多100个字母，每个元素保证不出现超过10000次。', '第一行是要比较的化学方程式，第二行为N（1<=N<=10)，是右边的方程式，以下N行每行一个方程式。', '你要输出N行--对输入的每个方程式，与原来的方程式比较，如果对每个元素，在方程式中出现的次数相同，则输出：\r\n\r\n<原来的方程&gt;==<输入的方程&gt; 否则输出：\r\n\r\n<原来的方程&gt;!=<输入的方程&gt;\r\n\r\n其中<原来的方程&gt;必须按它在输入中的格式输出，<输入的方程&gt;也一样，不要输出任何空格在输出文件中。', 'd:\\oj\\data\\1547', 'd:\\oj\\data\\1547', 'C2H5OH+3O2+3(SiO2)\r\n7\r\n2CO2+3H2O+3SiO2\r\n2C+6H+13O+3Si\r\n99C2H5OH+3SiO2\r\n3SiO4+C2H5OH\r\nC2H5OH+3O2+3(SiO2)+Ge\r\n3(Si(O)2)+2CO+3H2O+O2\r\n2CO+3H2O+3O2+3Si', 'C2H5OH+3O2+3(SiO2)==2CO2+3H2O+3SiO2\r\nC2H5OH+3O2+3(SiO2)==2C+6H+13O+3Si\r\nC2H5OH+3O2+3(SiO2)!=99C2H5OH+3SiO2\r\nC2H5OH+3O2+3(SiO2)==3SiO4+C2H5OH\r\nC2H5OH+3O2+3(SiO2)!=C2H5OH+3O2+3(SiO2)+Ge\r\nC2H5OH+3O2+3(SiO2)==3(Si(O)2)+2CO+3H2O+O2\r\nC2H5OH+3O2+3(SiO2)!=2CO+3H2O+3O2+3Si', '', 'URAL', '', '2008-04-27 15:23:49', 1000, 65536, 'N', NULL, 0, 1, 0, 1, 100, 1, 0, 30000, 124, ''),
(1548, '整数对', '请找出所有的整数对：他们的和等于给定的数字N，而且第二个数是由第一个数中的（某些）数字组成。第一个数字必须至少为2位数，而且以非0数字开头。第2个数总是比第一个数少1位，还可以以0开头。', '输入文件包含一个整数N', '首行，必须输出满足条件的整数对 个数。以后各行按第一个数的升序输出，格式：X + Y = N\r\n''+'' 和 ''='' 前后必须严格地有一个空格', 'd:\\oj\\data\\1548', 'd:\\oj\\data\\1548', '302', '5\r\n251 + 51 = 302\r\n275 + 27 = 302\r\n276 + 26 = 302\r\n281 + 21 = 302\r\n301 + 01 = 302', '', 'ural', '', '2009-05-18 10:10:11', 1000, 65536, 'N', NULL, 2, 28, 7, 21, 91, 11, 2, 30000, 91, ''),
(1549, 'String reverse order', 'It is a very simple priblem.Your goal is just to output the reverse order of a string.', 'There is only one line of the input with a string and there is no space in the string.', 'output the reverse order of the input string.', 'd:\\oj\\data\\1549', 'd:\\oj\\data\\1549', 'abcdefg', 'gfedcba', '', 'SWUST', '', '2012-05-26 11:47:02', 1000, 65536, 'N', NULL, 121, 187, 65, 64, 36, 116, 112, 30000, 265, ''),
(1550, '堆塔问题', '假设有N个边长为1的正立方体,在一个宽为1的轨道上堆塔,但塔本身不能分离,例如:  N=1时,只有一种方案.  N=2时,有两种方案.堆塔的规则为底层必须要有支撑.\r\n\r\n\r\n程序要求:输入一个N(N<=1000),要求总共有多少种不同的方案.', '多CASE的输入,处理到EOF结束为止.', '输出就OK了.', 'd:\\oj\\data\\1550', 'd:\\oj\\data\\1550', '2\r\n4', '2\r\n8', 'SSB  is super SB', 'dreamone', '', '2011-04-20 16:49:46', 1000, 65536, 'N', NULL, 12, 29, 41, 14, 61, 12, 9, 30000, 68, ''),
(1551, 'Ping', '给定一个无向图，求从起点（规定为0）到终点t，经过边数不超过10的最短路长度', '输入n,m,t,分别代表顶点的数目，边的条数，终点。(n<=1000,0<=t< n)（0,0,0结束）', '如果存在满足条件的路径长度，输出其具体长度，否则输出"no"。', 'd:\\oj\\data\\1551', 'd:\\oj\\data\\1551', '3 2 2\r\n0 1 2\r\n1 2 3\r\n3 1 2\r\n0 1 2\r\n0 0 0', '5\r\nno', '江鸟出的', '', '', '2009-01-31 16:47:54', 1000, 65536, 'N', NULL, 1, 3, 33, 1, 50, 1, 1, 30000, 49, ''),
(1552, 'Basic Graph Problem', '给出一个整数序列A1,A2...An，它们是1到n的一个排列。Ai(1<=i<=n)代表图中的一个顶点。然后给出m个连边的命令，每个命令是一个整数对（s，e），它表示从整数序列的第s个数到第e个数中选出最大和最小的，分别记为x和y，并把x和y连接起来。然后接下来是k个询问，问x和y是否连通 (n<=100005)', '如上描述，每个CASE间要输出一个回车', 'YES 或 NO', 'd:\\oj\\data\\1552', 'd:\\oj\\data\\1552', '5\r\n2 3 5 4 1\r\n3\r\n2 3\r\n3 5\r\n1 2\r\n3\r\n3 1\r\n5 1\r\n4 5', 'CASE 1\r\nYES\r\nYES\r\nNO', '', '', '', '2011-05-02 20:35:56', 3000, 65536, 'N', NULL, 8, 18, 44, 2, 33, 4, 4, 30000, 65, ''),
(1553, 'ss', 'You will be given N integers v0,v1,v2...vN-1 and an integer M.\r\nCan you tell me the number of distinct integer values of x such that:\r\n|v0 - x| + |v1 - x| + ... + |vN-1 - x| ≤ M.', 'The first line of the input will be a integer to represent the number of test cases.\r\nFor each case there is two lines.\r\nThe first line contains two integers N and M.\r\nThe second line contains N integers v0,v1,v2...vN-1.\r\n( 1 <= N <= 50000 , 0 <= M <= 10^9 , -10^9 <= vi <= 10^9 )\r\nThere is a blank line before each test case.', 'For each test case output the answer on a line: \r\nThe number of distinct integer values of x.', 'd:\\oj\\data\\1553', 'd:\\oj\\data\\1553', '3\r\n\r\n3 100\r\n1 10 50\r\n\r\n3 10\r\n1 10 50\r\n\r\n5 12345\r\n123 456 7890 -555 -321', '67\r\n0\r\n2337', '', '', '', '2010-12-04 21:15:05', 2000, 65536, 'N', NULL, 6, 7, 86, 1, 14, 6, 6, 30000, 88, ''),
(1554, 'A. A Perfect Tour', 'Mr. Perfect is working as an intern in a travel agency, and he should always deal with strange and difficult questions. Now he would like to share one of them with you. In order to make it easy to understand, he would describe this in mathematical language. There are some points in a two-dimentional plane. You can start from any of them and should go through all the points exactly once. At the end of this trip you have to go back to your start point (assume the line between two points is always a straight line). Obviously, there will be many different paths you can choose to finish this job. Your task is to find the shortest one. However, Mr. Perfect thinks this may be too difficult for you to solve, so he stretches the rules. If L is the length of the shortest path and you can find a path whose length is no more than K * L (1.1 <= K <= 1.2), Mr. Perfect will admit your success. You are so lucky that Mr. Perfect will tell you the L.', '(Please use standard input, and don&#8223;t read or write files.)\r\nThe first line contains one integer N and two real numbers L and K. N is the number of the points and L, K is as described above. The N points are numbered from 1 to N. Then follows N lines. Each line contains two integers Xi and Yi which is the coordinate of ith point. 0< N <=600, |Xi| < 108, |Yi| < 108', '(Please use standard output, and don&#8223;t read or write files.)\r\nN numbers in a line represent the number of the point in your path with your trip order. You can start from any of them. If there are many solutions, you can output any of them.', 'd:\\oj\\data\\1554', 'd:\\oj\\data\\1554', '4 6 1.2\r\n0 0\r\n0 1\r\n2 0\r\n2 1', '1 4 3 2', '', '‘Crazy for Programming’ Nankai University Programming Contest V', '', '2009-04-13 19:52:09', 3000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1555, 'B. Binary Path', 'After read Dr. D.E.Knuth''s book, Mr. Bpt finds an interesting thing. As we all known, a decimal number may be represented in binary form. For example, we are able to use (101)2 represent (5)10. And decimal number set {0, 1, 2, 3} can be changed to {00, 01, 10, 11} in binary. If we put them into a certain order, we can get a sequence like 00,01,11,10. And in this sequence, each two adjacent numbers have one and only one different digit (we can assume there are some zeros in the front of each number so that all of them have the same length) including the first number 00 and the last number 10. Now Mr. Bpt has confirmed that to any non-negative integer N, there are such sequences formed by integer 0, 1, ... , 2N-1 as described above. Mr. Bpt wants you to help him to find the "smallest" sequence. "Smallest" means the first number in this sequence should not be bigger than the first number in other sequences. If there are some sequences having same first number, you should compare the second number and so on until you find the unique sequence.', 'Input only contain one integer N as mentioned above (0<= N <= 18).', 'Output contains 2N line, every line contains one number, and put them in decimal, which represents the sequence Mr. Bpt wants.', 'd:\\oj\\data\\1555', 'd:\\oj\\data\\1555', '2', '0\r\n1\r\n3\r\n2', '', '‘Crazy for Programming’ Nankai University Programming Contest V', '', '2009-04-13 19:55:47', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1556, 'Y/N', '有如下四个式子:\r\nX+Y=A\r\nX^2+Y^2=B\r\nX^3+Y^3=C\r\nX^4+Y^4=D\r\n给出A、B、C、D四个值，你能判断A、B、C、D这四个值能同时让上面四个式子成立吗？', '有多组测试数据。每组中都输入四个整数，分别是A、B、C、D。0<=A,B,C,D<=10000', '如果这四个值能同时让上面四个式子成立，输出“Y”，否则输出“N”。 每组输出数据占一行。', 'd:\\oj\\data\\1556', 'd:\\oj\\data\\1556', '1 3 4 5', 'N', 'A^B表示A的B次方', '', '', '2012-06-29 12:09:16', 1000, 65536, 'N', NULL, 60, 337, 18, 270, 84, 74, 52, 30000, 229, ''),
(1557, '种树', 'Aconly有一块矩形的地，因为这块地里有很多石头，耕作很不方便，所以他打算在这块地上种一些果树。这块地用一个只含‘#’和‘*’的N*M的矩阵来表示，‘#’表示泥土，‘*’表示石头。当然有石头的地方是不能种树的，而且任意两棵树之间不能离得太近，表现在矩阵中就是不能上、下、左、右、左上、右上、左下、右下八个方向相邻。你的任务就是帮助Aconly算出这块地最多可以种多少棵树。', '有多组测试数据。每组测试数据以两个整数N和M开头，随后有N行只含‘#’和‘*’的字符，每行M个。 （1<=N<=100, 1<=M<=10）当M=N=0时表示输入结束。', '每组数据输出一个整数，表示Aconly最多可以在这块地里种多少棵树。每组输出数据占一行。', 'd:\\oj\\data\\1557', 'd:\\oj\\data\\1557', '5 4\r\n####\r\n**#*\r\n##*#\r\n####\r\n##*#\r\n0 0', '6', '', '', '', '2012-06-29 13:12:06', 1000, 65536, 'N', NULL, 11, 27, 41, 16, 70, 11, 7, 30000, 97, ''),
(1558, '二进制', '二进制转换的问题，想必大家都没有问题了吧，比如给你一个十进制数13，其对应的二进制表示为：1101。因为13=1*2^3+1*2^2+0*2^1+1*2^0.江鸟整天胡思乱想，现在他想到一个问题：如果将平时二进制转换过程中的基数2变成-2，那么转换过来的数将又是什么呢？江鸟将这种转换方式称为“负二进制转换”，为了让大家接受他的理论，他举了个例子如下：\r\n 1*(-2)^3+1*(-2)^2+0*(-2)^2+1*(-2)^0=-3，所以-3的该种转换为1101.', '有多组测试数据。\r\n输入为一个整数M.-100000<=M<=100000', '输出该种转换得到的结果(输出结果为只有0和1表示的一个串)', 'd:\\oj\\data\\1558', 'd:\\oj\\data\\1558', '-3', '1101', '', '', '', '2012-06-29 11:38:09', 1000, 65536, 'N', NULL, 35, 100, 35, 63, 66, 40, 32, 30000, 308, ''),
(1559, '前缀字符串', '如果一个字符串s1是由另一个字符串s2的前面部分连续字符组成的，那么我们就说s1就是s2的前缀。比如“ac”是“acm”的前缀，“abcd”是“abcddfasf”的前缀，特别的“kdfa”是“kdfa”的前缀。\r\n现在给你一些字符串，你的任务就是从这些字符串中找出一些字符串放到一个集合中，使得这个集合中任意一个字符串不是其他字符串的前缀，并且要使集合里的字符串尽可能的多。输出这个集合中字符串的个数。', '有多组测试数据。每组测试数据以一个整数n开头，随后有n个字符串。\r\n当n=0时表示输入结束。 0 < n < 100，字符串长度不大于20', '每组测试数据输出一个整数，即所求的最大值。每组数据占一行。', 'd:\\oj\\data\\1559', 'd:\\oj\\data\\1559', '6\r\nacm\r\nyuou\r\nyuoufsdaf\r\nacmmmdf\r\nacmm\r\nfdsf\r\n0', '3', '', '', '', '2012-02-10 01:51:04', 1000, 65536, 'N', NULL, 18, 88, 20, 69, 80, 22, 17, 30000, 233, ''),
(1560, '整数', '江鸟想到一个有趣的问题：给你N个整数，你可以将这N个整数按两个一组的方式成对划分，当然其中的元素也可以不和其他元素配对划分。现在的问题是，让划分为一对的元素的乘积与未配对的元素相加求和，并且让和最大。比如：\r\n考虑这个集合{0,1,2,4,5,3}，如果我们让{0,3}、{2,5}分别成一对，那么得到的和为：1+4+(0*3)+(2*5)=15,当然这不是最大值，如果这样划分{4,5}、{2，3}分别一组，我们得到的和为：(4*5)+(2*3)+1+0=27,此时得到的和为最大了。\r\nInput \r\n第一行输入一个数case代表下面测试数据的总数。以下每个case由两行组成：\r\n第一行输入N，代表有N个整数(1<=N<=100)第二行输入这N个整数。(每个整数的绝对值都小于100)', '输出每个case对应的最大和。', '输出每个case对应的最大和。', 'd:\\oj\\data\\1560', 'd:\\oj\\data\\1560', '2\r\n6\r\n0 1 2 3 4 5 \r\n1\r\n3', '27\r\n3', '', '', '', '2012-06-29 11:14:13', 1000, 65536, 'N', NULL, 19, 83, 23, 64, 79, 28, 17, 30000, 242, ''),
(1561, '青蛙的约会', '池塘里住着两只青蛙，gg和mm。池塘里还有N块石头，编号为1—N。gg住在石头1上，mm住在石头N上。有一天它们在网上相识了，聊得很开心，于是觉得很有必要见一面，相约在一块石头上会面。然而gg和mm都不会游泳，只能从一块石头跳到另一块石头。\r\n已知gg和mm的体力分别为Cg和Cm（每跳一次，体力都会减少，减少量为跳跃的距离）。gg和m跳跃一次的最长距离分别为Dg和Dm。\r\n现在要你帮gg找出最佳的约会地点。(gg和mm都能到达，且mm消耗最少的体力)\r\n<img src=images\\1561.gif></img>', '有多组测试数据。第一行四个整数，分别是Cg，Cm，Dg，Dm。\r\n第二行一个整数N。然后有N行，每行两个整数xi，yi，代表第i块石头在平面坐标上的位置。Cg=Cm=Dg=Dm=0表示输入结束。1<= Cg,Cg,Dg,Dm <=100,0<=xi,yi<=100', '输出最佳的约会地点。如果有多个最佳地点，输出编号最小的，如果没有符合要求的地点则输出“Impossible”（不要加引号）。每组数据占一行。', 'd:\\oj\\data\\1561', 'd:\\oj\\data\\1561', '6 10 6 3\r\n5\r\n1 1\r\n0 4\r\n3 5\r\n2 6\r\n9 5\r\n0 0 0 0', 'Impossible', '', '', '', '2010-04-17 22:34:54', 1000, 65536, 'N', NULL, 3, 16, 19, 13, 81, 7, 3, 30000, 171, ''),
(1562, '异面空间', '江鸟来到了一个很奇怪的星球，这个星球上，有两个二维坐标系XX和YY，这两个坐标系之间的坐标存在如下函数关系式：\r\nf(x)=x^2+2*x+3\r\nf(y)=3*y+2\r\n比如对于XX坐标系上的点(3,4)经过这一关系映射后得到YY坐标系上的点为(18,14)。这个映射关系一;同时，还有种映射关系是对于X坐标系上的点(a,b)和YY坐标系上的点(c,d)他们之间的距离为D=|a-d|+|b-c|。这是映射关系二.\r\n因为对于XX坐标系上的每个点，在YY坐标系上都有唯一的点和它对应,现在对于XX和YY上的点按照映射关系二进行匹配，并且XX上的一个点都仅和YY上的一个点进行匹配，YY上的一个点也仅和XX上的一个点进行匹配，现在你的任务是找出所有可能匹配关系中D最大值的最小。\r\n<img src=images\\1562.jpg></img>', '第一行输入一个数case，代表下面测试数据的总数,以下每个case由两部分组成：\r\n第一部分输入N，代表XX坐标系上有多少个点(1<=N<=100)\r\n第二部分输入XX坐标系上这N个点的坐标&amp;nbsp;(xi,yi)(0<=xi<=500,0<=yi<=500)', '所有可能匹配关系中D最大值的最小', 'd:\\oj\\data\\1562', 'd:\\oj\\data\\1562', '1\r\n2\r\n3 4\r\n1 2', '25', '', '', '', '2010-04-14 16:30:27', 1000, 65536, 'N', NULL, 4, 19, 21, 15, 79, 10, 4, 30000, 97, ''),
(1563, '素数判定', '给你一个闭区间[a,b],现在的问题是要判断该区间内共有多少个素数', '多组测试数据。\r\n每个测试数据输入两个数a、b。(2<=a,b<=1000)', '输出该区间内素数的个数。', 'd:\\oj\\data\\1563', 'd:\\oj\\data\\1563', '2 4\r\n4 6', '2\r\n1', '', '', '', '2012-06-29 12:14:00', 1000, 65536, 'N', NULL, 125, 287, 44, 151, 57, 125, 115, 30000, 347, ''),
(1564, '游程编码', '　　游程编码又称“运行长度编码”或“行程长度编码”，是一种统计编码，该编码属于无损压缩编码。对于二值图有效。  \r\n　　RLE行程长度编码概述\r\n　　目前, 压缩技术已经广泛应用于各种软件、声音、影像格式等领域。总的来说, 有两种截然不同的图像格式压缩类型: 有损压缩和无损压缩[1]。有损压缩利用视觉识别的原理可以大大地压缩文件的数据, 但是会影响图像质量。无损压缩的基本原理是相同的颜色信息只需保存一次, 可以删除一些重复数据, 大大减少要在磁盘上保存的图像的容量。无损压缩方法的优点是能够比较好地保存图像的质量, 但是相对有损压缩来说这种方法的压缩率是比较低的。常用的无损压缩算法有 RLE、LZW 等。\r\nRLE 压缩算法的基本原理\r\n　　RLE(Run- Length Encoding 行程长度编码)压缩算法是Windows 系统中使用的一种图像文件压缩方法, 其基本思想是: 将一扫描行中颜色值相同的相邻像素用两个字节来表示, 第一个字节是一个计数值, 用于指定像素重复的次数; 第二个字节是具体像素的值[2]。主要通过压缩除掉数据中的冗余字节或字节中的冗余位,从而达到减少文件所占空间的目的。例如, 有一表示颜色像素值的字符串RRRRRGGBBBBBB,用 RLE 压缩方法压缩后可用 5R2G6B 来代替,显然后者的串长度比前者的串长度小得多。译码时按照与编码时采用的相同规则进行, 还原后得到的数据与压缩前的数据完全相同。因此, RLE 是无损压缩技术。', '只有一个字符串。（长度小于100）', '编码后的字符串。', 'd:\\oj\\data\\1564', 'd:\\oj\\data\\1564', 'iiiiillllovvveeeeeeeaaaccccccccmmmmmmmmmm', '5i4l1o3v7e3a8c10m', '', '', '', '2012-06-29 12:21:26', 1000, 65536, 'N', NULL, 75, 108, 69, 30, 29, 74, 73, 30000, 318, ''),
(1565, '迷宫逃离', '江鸟突然想到了一个迷宫逃离的游戏，话说有三个人被困于一个n*m的迷宫里，他们三人都可以向上、向下、向左、向右四个方向进行走动，当然他们所在的初始位置没有障碍物，同时只能走到没有障碍物的格子上，现在江鸟要问你最少需要去掉多少个格子的障碍物，可以使他们三人之间两两互相可达。', '输入包括多组测试数据，每组测试数据第一行为两个整数n和m(2<=n,m<=100)，接下来n行，每行m个字符，其中:‘w’、‘W’、‘f’分别代表那三个人；‘.’代表没有障碍物的格子，‘#’代表有障碍物的格子。', '每组数据输出一行。', 'd:\\oj\\data\\1565', 'd:\\oj\\data\\1565', '4 4\r\nw...\r\n####\r\n.##f\r\nW##.\r\n4 4\r\nw...\r\n....\r\n.##f\r\n.W..', '2\r\n0', '', '', '', '2011-11-12 11:43:40', 1000, 65536, 'N', NULL, 2, 4, 50, 2, 50, 2, 2, 30000, 97, ''),
(1566, 'Pebbles', 'You’re given an unlimited number of pebbles to distribute across an N x N game board (N drawn\r\nfrom [3, 15]), where each square on the board contains some positive point value between 10 and\r\n99, inclusive. A 6 x 6 board might look like this:\r\n\r\n33 74 26 55 79 54\r\n67 56 91 72 44 32\r\n44 64 22 91 29 61\r\n61 32 76 50 50 32\r\n81 65 56 38 96 36\r\n38 78 50 92 90 75\r\n\r\nThe player distributes pebbles across the board so that:\r\n* At most one pebble resides in any given square.\r\n* No two pebbles are placed on adjacent squares. Two squares are considered adjacent if\r\nthey are horizontal, vertical, or even diagonal neighbors. There’s no board wrap, so 44\r\nand 61 of row three aren’t neighbors. Neither are 33 and 75 nor 55 and 92.\r\nThe goal is to maximize the number of points claimed by your placement of pebbles.\r\nWrite a program that reads in a sequence of boards from an input file and prints to stdout the\r\nmaximum number of points attainable by an optimal pebble placement for each.', 'Each board is expressed as a series of lines, where each line is a space-delimited series of\r\nnumbers. A blank line marks the end of each board (including the last one)', 'then your program would print the maximum number of points one can get by optimally\r\ndistributing pebbles while respecting the two rules, which would be this (each output should be\r\nprinted on a single line and followed with a newline):', 'd:\\oj\\data\\1566', 'd:\\oj\\data\\1566', '71 24 95 56 54\r\n85 50 74 94 28\r\n92 96 23 71 10\r\n23 61 31 30 46\r\n64 33 32 95 89\r\n\r\n78 78 11 55 20 11\r\n98 54 81 43 39 97\r\n12 15 79 99 58 10\r\n13 79 83 65 34 17\r\n85 59 61 12 58 97\r\n40 63 97 85 66 90\r\n\r\n33 49 78 79 30 16 34 88 54 39 26\r\n80 21 32 71 89 63 39 52 90 14 89\r\n49 66 33 19 45 61 31 29 84 98 58\r\n36 53 35 33 88 90 19 23 76 23 76\r\n77 27 25 42 70 36 35 91 17 79 43\r\n33 85 33 59 47 46 63 75 98 96 55\r\n75 88 10 57 85 71 34 10 59 84 45\r\n29 34 43 46 75 28 47 63 48 16 19\r\n62 57 91 85 89 70 80 30 19 38 14\r\n61 35 36 20 38 18 89 64 63 88 83\r\n45 46 89 53 83 59 48 45 87 98 21\r\n\r\n15 95 24 35 79 35 55 66 91 95 86 87\r\n94 15 84 42 88 83 64 50 22 99 13 32\r\n85 12 43 39 41 23 35 97 54 98 18 85\r\n84 61 77 96 49 38 75 95 16 71 22 14\r\n18 72 97 94 43 18 59 78 33 80 68 59\r\n26 94 78 87 78 92 59 83 26 88 91 91\r\n34 84 53 98 83 49 60 11 55 17 51 75\r\n29 80 14 79 15 18 94 39 69 24 93 41\r\n66 64 88 82 21 56 16 41 57 74 51 79\r\n49 15 59 21 37 27 78 41 38 82 19 62\r\n54 91 47 29 38 67 52 92 81 99 11 27\r\n31 62 32 97 42 93 43 79 88 44 54 48', '572\r\n683\r\n2096\r\n2755', '', 'PacNW_2007', '', '2009-04-26 12:00:00', 4000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 33, ''),
(1567, 'A interesting game', '打麻将输光了钱，哆啦A梦决定换另外一种游戏来咸鱼翻身，聪明的他选择了这样一种游戏：将麻将分成若干堆，哆啦A梦和大雄轮流取麻将，当然每次可以选择从任意一堆取，并且取出的数量是自己决定的，最后没有麻将可取的玩家即为输家。游戏每次从哆啦A梦开始。\r\n  奇怪的是只要是由哆啦A梦来排列麻将，哆啦A梦肯定能得到胜利，假设哆啦A梦和大雄每次选择都是最优化的，熟悉编程的你能帮助大雄解释这个奇怪的问题吗？', '输入含有多个case,每个case的第一行为划分麻将的堆数n（1<=n<=1000），\r\n第二行为n个数字，依次为每堆中麻将的数量。', '如果在这种麻将排列情况下哆啦A梦一定能得到胜利，那么输出他先手第一次取麻将可以选择方案的个数（保证能得到胜利情况下），选择从不同的麻将堆中拿麻将和从一种麻将堆中拿不等数量的麻将都属于不同的方案。\r\n如果没有这种必胜方案则输出0。每组输出独占一行。', 'd:\\oj\\data\\1567', 'd:\\oj\\data\\1567', '1\r\n1\r\n3\r\n13 12 8', '1\r\n3', '', 'The 5th Programming Contest Southwest University of Science and Technology', '', '2011-05-26 23:21:45', 1000, 65536, 'N', NULL, 4, 4, 100, 0, 0, 4, 4, 30000, 59, ''),
(1568, 'Buyer', '哆啦A梦班级举办个party，当然吃的东西必不可少，哆啦A梦负责采购任务，他得到了一份清单，上面注明不同食品的受欢迎程度，哆啦A梦需要用一定的价钱尽可能达到的更大的受欢迎程度！例如，瓜子的受欢迎程度为20，瓜子的价钱是50元，那么如果哆啦A梦选择买瓜子，将花费50元，但受欢迎程度增加了20。为了避免食品单调性，每种食品只能买一份，不能重复购买。\r\n    现在哆啦A梦需要知道如何采购才能达到最大的受欢迎程度，你能帮助他吗？', '输入数据为多组，每组输入的第一行有两个正整数M和N(M<100&&N<1000)，分别为哆啦A梦可以支配的钱数和清单上的可选择的物品种类。\r\n   接下来的N行每行有两个正整数,分别为每种物品的价钱和它的受欢迎程度（编号为1到N）。', '如果存在物品购买，那么输出的第一行为能够达到的最大的受欢迎程度。第二行为需要购买的物品的编号（如果有多种可能，输出字典序靠前的那种），空格分隔每个数字；如没有物品可以购买，输出只有一行，为数字0。', 'd:\\oj\\data\\1568', 'd:\\oj\\data\\1568', '10 4\r\n100 5\r\n5 5\r\n5 5\r\n10 10', '10\r\n2 3', '比如有（1，3）和（2，3）两种购买方案，则输出（1，3）那组！', 'The 5th Programming Contest Southwest University of Science and Technology', '', '2010-07-07 15:29:00', 1000, 65536, 'N', NULL, 5, 19, 26, 14, 74, 6, 5, 30000, 50, ''),
(1569, 'Champion', 'A problem is solved when it is accepted by the judges. The judges are solely responsible for accepting or rejecting submitted runs. In consultation with the judges, the Regional Contest Director determines the winners of the regional contest. The regional contest director and judges are empowered to adjust for or adjudicate unforeseen events and conditions. Their decisions are final.\r\nTeams are ranked according to the most problems solved. For the purposes of awards, or in determining qualifier(s) for the World Finals, teams who solve the same number of problems are ranked by least total time. The total time is the sum of the time consumed for each problem solved. The time consumed for a solved problem is the time elapsed from the beginning of the contest to the submittal of the accepted run plus 20 penalty minutes for every rejected run for that problem regardless of submittal time. There is no time consumed for a problem that is not solved.\r\nNow,write a program to tell us which team will be the champion!  You can assume that there will be no possibility that two or more teams get the first place!', 'The input consists of multiple test cases.The first line have one integer N（0<N<150）: the numbers of the team(the team id is from 1 to N). The next N lines give the numbers of the problem solved and the time elapsed.\r\nThe input is terminated with one 0. This test case shoud not be processed.', 'For each test case,printf in one line that the champion team’s id!', 'd:\\oj\\data\\1569', 'd:\\oj\\data\\1569', '5\r\n5 300\r\n4 250\r\n6 412\r\n7 459\r\n2 100\r\n0', '4', '', 'The 5th Programming Contest Southwest University of Science and Technology', '', '2011-04-22 21:13:20', 1000, 65536, 'N', NULL, 7, 14, 50, 7, 58, 6, 5, 30000, 53, ''),
(1570, 'Deposit', '哆啦A梦喜欢收集古钱，在他家里有N个存钱罐，编号1..N。一天哆啦A梦闲的发慌，于是拿出他的古钱来玩。他玩钱要么把钱从某个罐中拿出，要么把钱放入某个罐中（假设除了存钱罐中的古钱，现在哆啦A梦拥有无限的古钱，不会出现想放入古钱却没有古钱的尴尬局面）。', '数据有多组，\r\n第一行是一个正整数N，1≤N≤100000，表示有N个存钱罐。\r\n第二行有N个正整数Ai（0≤Ai≤100），表示第i个存钱罐中已经有的古钱的个数。\r\n接下来是一个正整数T，1≤T≤100000。\r\n接下来的T行，每行有3个参数：op  l  r。\r\n1.op为&quot;MOV"，表示从l号存钱罐中取出r个古钱（1≤r≤10，1≤l≤N）。\r\n2.op为&quot;ADD"，表示哆啦A梦的往l号存钱罐中放入r个古钱（1≤r≤10,1≤l≤N）。\r\n3.op为&quot;QUE"，表示哆啦A梦希望知道在l，r之间（包括端点）的总的古钱个数（1≤l,r≤N）。\r\n4.op为&quot;MAX"，表示哆啦A梦希望知道在l，r之间（包括端点）的存钱罐中，含有最多古钱的存钱罐中的古钱个数（1≤l,r≤N）。\r\n\r\n当N为非正数的时候程序停止。', '如上要求输出。', 'd:\\oj\\data\\1570', 'd:\\oj\\data\\1570', '1\r\n30\r\n5\r\nMOV 1 1\r\nQUE 1 1\r\nADD 1 12\r\nMAX 1 1\r\nQUE 1 1\r\n-1', '29\r\n41\r\n41', '数据规模十分庞大，请适当选择您的输入输出函数.', 'The 5th Programming Contest Southwest University of Science and Technology', '', '2012-07-16 09:37:13', 1000, 65536, 'N', NULL, 29, 107, 27, 71, 80, 20, 18, 30000, 548, ''),
(1571, 'Equal or not!', 'It is a simple judgment.\r\nYou have to program to determine whether the two figures given to you are the same strictly,or which one is larger?', 'Two strings are separated by a space. Each strings represent a figure.two figures are A and B ,and it is sure that there is no Arithmetic Expression in the string, you can assume that each string’length will not be more than 20.', 'If A>B output “large”,else if A < B, output “small”,else if A = B, output “equal”.', 'd:\\oj\\data\\1571', 'd:\\oj\\data\\1571', '1	1.00\r\n2     3', 'equal\r\nsmall', '', '', '', '2011-11-29 16:42:45', 1000, 65536, 'N', NULL, 5, 37, 14, 32, 86, 12, 5, 30000, 68, '');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1572, 'File operation!', '相信很多人都用过linux，里面的终端可以方便快捷地通过命令进行相关操作，安全又省时，如今哆啦A梦开发了一个新的系统，也想要实现终端的命令行操作，他给出了如下命令和功能，希望你能帮他实现这个功能。\r\n\r\ndir\r\n显示当前路径下的所有文件夹和文件名称，按字典序输出顺序，空格分开；如果没有文件和文件夹则显示NULL！\r\nmkdir + 文件夹名字    \r\n当前目录下创建一个文件夹；失败则输出failure，注意一个文件夹下不会出现两个相同名字的文件夹。\r\nmkfile + 文件名字   \r\n当前目录下创建一个文件；失败则输出failure，注意一个文件夹下不会出现两个相同名字的文件。\r\ncd + 文件夹名        \r\n 进入文件夹；如路径无效输出failure!。\r\ncd ..  (注意空格)               \r\n返回上级路径；如无上级目录可返回，输出failure。\r\ncd .  (注意空格)                \r\n 返回上一步所在路径；如无上步路径可返回，输出failure。\r\ndelete +文件（夹）名称 \r\n 删除当前路径下的文件或文件夹；如删除失败则输出failure，如果存在文件和文件夹同名情况，同时删除。\r\nexit                  \r\n退出程序\r\n\r\n程序开始时默认路径为root:\\，root文件夹不存在任何文件并且无上级可返回。现在输入不同命令，请你进行相应的操作和输出，如果输入命令不是上述有效命令或者命令语法或格式错误（注意空格），输出Invalidate Command.', '单case且输入有很多行，每行为一个字符串（长度不超过100），如果输入为exit则退出程序！文件夹和文件的名字是长度不超过10的只由字母和数字组成的字符串。', '输出系统需要输出的字符串，每组输出占一行！', 'd:\\oj\\data\\1572', 'd:\\oj\\data\\1572', 'make 1\r\nmkdir 1\r\ndir\r\nmkdir 2\r\ndir\r\ncd 1\r\ndir\r\ncd ..\r\ndelete 1\r\ndelete 1\r\ndir\r\nexit', 'Invalidate Command\r\n1\r\n1 2\r\nNULL\r\nfailure \r\n2', '', 'The 5th Programming Contest Southwest University of Science and Technology', '', '2009-05-17 22:36:53', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 35, ''),
(1573, '数论专题训练J', '哆啦A梦 recently learned about GCD, which is short for the “greatest common divisor”.For Instance, GCD (2, 4) = 2(2=2*1, 4=2*2 and we could easily know that 2 is the greatest common divisor of them.)\r\n	哆啦A梦 think it’s a fantastic function, then he wants to know the sum of all numbers ,  which are in the set{1,2,3….n} and GCD(k , n)!=1.\r\nSo he writes a program to solve this funny problem.\r\nThe program is as follow:\r\n#include<iostream>\r\nusing namespace std;\r\nint GCD(int a,int b){return b?GCD(b,a%b):a;}\r\nint main()\r\n{ long long sum=0;\r\n  int i,n;\r\n  cin>>n;\r\n  for(i=1;i<=n;i++)\r\n    {\r\n       if(GCD(i,n)!=1)\r\n             sum=sum+i;\r\n    }\r\n  cout<<sum<<endl;\r\n  return 0;}\r\nBut 哆啦A梦 finds that this program is not efficient to calculate big number, such as 100000000.\r\nSo 哆啦A梦 tends to your help, you algorithm should be enough efficient to solve this problem.', 'The input consists of one or more test cases, followed by a line containing n (1<=n<=1000000000)', 'For each test case, output the answer describe above. You may assume that all the answers are always smaller than 2^64.', 'd:\\oj\\data\\1573', 'd:\\oj\\data\\1573', '21', '105', 'In the set{1,2,3…21} we can know that 3,6,7,9,12,14,15,18,21\r\nSo the answer is 105.', 'AekdyCoin', '', '2011-06-09 20:34:46', 1000, 65536, 'N', NULL, 12, 25, 48, 12, 60, 8, 8, 30000, 283, ''),
(1574, 'Hu le or not!', '一日，哆啦A梦和大雄等四人茶楼PK麻将，由于习惯不同，玩法极其不统一，于是哆啦A梦总结出一种胡牌规则，大家便依靠这种规则判断是否胡牌。\r\n胡牌的标准为：有且只有一个对子存在（两张相同的牌算一个对子），其余的牌各自形成长度为三的顺子或三张相同的牌，这种玩法中特殊牌型只有七对胡牌，即七个对子组成，其他不符合上述描述的均不算胡牌，例如十三幺，全不靠。\r\n当然相公是不能胡牌的，即牌的数量不是2，5，8，11，14中的一种。\r\n哆啦A梦觉得眼睛判断胡牌太累了，而且难免出现误差，于是决定让电脑自动判断是否胡牌，他向懂得编程的你请教，你能帮他解决这个问题吗？\r\n 麻将中只有万条饼三种花色，我们用a-i九个字母代表一万到九万这九种牌，A-I代表一条到九条这九种牌，用数字1-9代表一饼到九饼这九种牌。写程序判断哆啦A梦现在手中的牌是否胡牌。', '输入含有多组case且每组case只有一行，即一行字符串（字符串长度大于0并且小于20），代表你手中拥有的牌情况，可以保证每种牌的数量不会超过4，例如一万(字母a)不会出现多于4次。', '如果已经胡牌，输出“Yes”，否则输出“No”!', 'd:\\oj\\data\\1574', 'd:\\oj\\data\\1574', 'aaa123BCDEE789\r\nAa', 'Yes\r\nNo', '', 'The 5th Programming Contest Southwest University of Science and Technology', '', '2009-05-17 22:40:04', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 42, ''),
(1575, 'In exchange balloon with us!', '所有的ACMER都知道，比赛中气球是他们的最爱，因为气球的数量象征着他们过掉的题目的数量。一天，比赛结束，大家开始了一场换气球游戏。\r\n现在只有红，黄，蓝三种颜色的气球。规则为两个不同颜色的气球可以换成同等数量的第三种颜色的气球。例如：1红+1黄=2蓝，交换的次数没有限制，现在知道你所拥有的每种颜色气球的数量，问是否能通过交换达到拥有一种颜色气球的状态？', '输入数据有多个case，每个case输入为一行，依次为你拥有的红色，黄色，蓝色气球的数量(气球很贵，每种数量不会超过10^5)。', '如果通过上述规则可以将气球换成一种颜色的气球，输出”Yes”，并且空格后给出转化后你拥有的气球的颜色编号（红：1 黄：2 蓝：3）如果有多种转化结果，输出编号小的那个,否则输出”No”。', 'd:\\oj\\data\\1575', 'd:\\oj\\data\\1575', '1 3 1\r\n2 2 2', 'Yes 2\r\nYes 1', '', 'The 5th Programming Contest Southwest University of Science and Technology', '', '2012-02-15 13:01:20', 1000, 65536, 'N', NULL, 42, 109, 39, 67, 81, 24, 16, 30000, 157, ''),
(1576, 'Jack''s problem', 'One day, Jack’s mother make a piece of pizza for him and his father. And Jack think everyone should get 1/3 of the pizza so that everyone get the same. Now he choose three points on the pizza and he want to know the area of this triangle.', 'There are several test cases. Each case contains six integers x1,y1,x2,y2,x3,y3.\r\nYou can assume three points will not be on one line.', 'Output the area of the triangle formed by point (x1,y1),(x2,y2),(x3,y3) with exactly one digit after the decimal point.', 'd:\\oj\\data\\1576', 'd:\\oj\\data\\1576', '0 0 1 1 1 0\r\n0 0 2 2 2 0', '0.5\r\n2.0', '', 'The 5th Programming Contest Southwest University of Science and Technology', '', '2012-05-05 14:47:40', 1000, 65536, 'N', NULL, 31, 37, 84, 6, 16, 31, 31, 30000, 155, ''),
(1577, '新版取石子游戏', 'Aconly和dreamone又玩起了取石子游戏。有n堆石子，两人轮流操作，每次可以从一堆石子中取走至少1颗最多ki颗。如果轮到的那个人没有石子可取，即输。\r\n\r\nPS:Aconly和dreamone都是很聪明的哦！每次他们会选择一种最佳的策略来取。\r\n\r\n开始Aconly先取。', '有多组测试数据。第一个数n（1<= n <=100000）表明有n堆石子，下面有n个数表示每堆石子的数量ai（1<=ai<=100000000）。随后的n个数是第i堆每次最多可取的石子数量ki (1<=ki<=100000000)。', '如果Aconly赢了，输出“Orz,Aconly win!”，否则输出“Orz,dreamone win!”。', 'd:\\oj\\data\\1577', 'd:\\oj\\data\\1577', '1\r\n5\r\n6\r\n\r\n2\r\n3 4\r\n2 1', 'Orz,Aconly win!\r\nOrz,dreamone win!', '', 'Aconly', '', '2011-07-26 13:17:18', 1000, 65536, 'N', NULL, 3, 5, 60, 2, 40, 4, 3, 30000, 56, ''),
(1578, '递推专项训练(1)', '在所有的N位数中，有多少个数中有偶数个数字3？\r\nN范围均为 [1。。。99]，并且所有结果应模上1989.', '', '', 'd:\\oj\\data\\1578', 'd:\\oj\\data\\1578', '2', '73', '', '', '', '2012-05-05 20:29:41', 1000, 65536, 'N', NULL, 4, 9, 44, 4, 57, 4, 3, 30000, 126, ''),
(1579, '递推专项训练(2)', '用1 x 1和2 x 2的磁砖不重叠地铺满N x 3的地板，共有多少种方案？\r\nN范围均为 [1。。。99]，并且所有结果应模上1989.', '', '', 'd:\\oj\\data\\1579', 'd:\\oj\\data\\1579', '2', '3', '', '', '', '2012-03-14 14:39:43', 1000, 65536, 'N', NULL, 14, 54, 26, 40, 74, 16, 14, 30000, 148, ''),
(1580, '递推专项训练(3)', '从原点出发，一步只能向右走、向上走或向左走。恰好走N步且不经过已走的点共有多少种走法？\r\nN范围均为 [1。。。99]，并且所有结果应模上1989.', '', '', 'd:\\oj\\data\\1580', 'd:\\oj\\data\\1580', '2', '7', '', '', '', '2012-03-25 00:42:53', 1000, 65536, 'N', NULL, 16, 37, 43, 19, 61, 13, 12, 30000, 107, ''),
(1581, '递推专项训练(4)', '一棵树由N个点组成的树有多少种形态？左右翻转而获得的算不同类型的树。\r\nN范围均为 [1。。。99]，并且所有结果应模上1989.', '', '', 'd:\\oj\\data\\1581', 'd:\\oj\\data\\1581', '4', '9', '', '', '', '2009-05-24 20:35:35', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 55, ''),
(1582, '递推专项训练(5)', 'On a circle border there are 2k different points A1, A2, ..., A2k, located contiguously. These points connect k chords so that each of points A1, A2, ..., A2k is the end point of one chord. Chords divide the circle into parts. You have to find N - the number of different ways to connect the points so that the circle is broken into minimal possible amount of parts .', 'There will be several cases。\r\nThe first line contains the integer k (1 <= k <= 100).', 'For each case you should print N mod 1989 in one line.', 'd:\\oj\\data\\1582', 'd:\\oj\\data\\1582', '2', '2', '', '', '', '2009-11-11 13:56:54', 1000, 65536, 'N', NULL, 1, 2, 50, 1, 50, 2, 1, 30000, 55, ''),
(1583, 'fib加强版', '给定数列\r\n\r\nf[n]=f[n-1]+2*f[n-2]+3*n+4 (n>1); \r\nf[0]=1,f[1]=2。\r\n\r\n求它的前n项和s[n]。', '多组测试数据。每组数据一个整数n（0 <= n <=1000000000）。', '输出s[n]，结果对20090525取模。', 'd:\\oj\\data\\1583', 'd:\\oj\\data\\1583', '1\r\n2\r\n3', '3\r\n17\r\n48', '', 'Aconly', '', '2010-05-23 13:19:24', 1000, 65536, 'N', NULL, 5, 8, 62, 3, 50, 4, 3, 30000, 71, ''),
(1584, '新约瑟夫问题', '约瑟夫问题是个有名的问题：N个人围成一圈，从第一个开始报数，第M个将被杀掉，最后剩下一个，其余人都将被杀掉。例如N=6，M=5，被杀掉的人的序号为5，4，6，2，3。最后剩下1号。\r\n\r\n现在将问题改一下，M不是一个定值。第一次报到M1时杀掉一个人，第二次报到M2时再杀一个人。。。。。。第i次报到Mi时杀掉一个人。。。。\r\n求最后剩下的人的序号。', '有多组测试数据，每组数据一个正整数N，然后跟着N-1个数，分别是M1，M2，M3....Mi....Mn-1。\r\n（1<=N<=1000000  1<=Mi<=1000000）。', '最后剩下的那个人的序号。', 'd:\\oj\\data\\1584', 'd:\\oj\\data\\1584', '5\r\n2 1 3 4\r\n10\r\n2 4 6 1 1 5 4 5 6', '4\r\n9', '挂科真可怕！！！！！！', 'Aconly', '', '2011-06-21 20:11:41', 1000, 65536, 'N', NULL, 2, 15, 13, 13, 87, 6, 2, 30000, 67, ''),
(1585, 'ACC 和 CCA', 'Aconly 来到了S王国，他奇怪地发现S王国的文字只由a、c两个字母组成。S王国的人非常崇拜两个神灵，分别叫 cca 和 acc，所以他们的文字里没有以cca和acc为子串的单词。（注cca ，acc不算单词）。\r\n问长度为N的单词最多有几个。', '多组测试数据，每组数据一个整数N；1<=N<=1000000000。', '输出个长度为N的单词最多有几个。结果模上 20090727。', 'd:\\oj\\data\\1585', 'd:\\oj\\data\\1585', '1\r\n2\r\n3\r\n4', '2\r\n4\r\n6\r\n9', '挂科并不可怕！！！！！', 'Aconly', '', '2009-07-27 22:03:25', 1000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 55, ''),
(1586, 'Calculate Sum-Of-Absolute-Differences', '给你N个正整数，求两两之差的绝对值之和。\r\n比如有4个数分别为 3，2，6，5，则答案为\r\n|3-2| + |3-6| + |3-5| + |2-6| + |2-5| + |6-5|  =14', '测试有很多组,对于每一组测试: \r\n第一行为一个正整数 N（ 2<= N <=20000）。\r\n第二行有N正个整数，每个数不大于 1000000。', '每组测试输出一行。测试数据保证结果在int范围内。', 'd:\\oj\\data\\1586', 'd:\\oj\\data\\1586', '4\r\n3 2 6 5\r\n3\r\n1 2 3', '14\r\n4', '', 'Aconly', '', '2012-05-28 14:20:46', 1000, 65536, 'N', NULL, 55, 246, 22, 188, 82, 65, 40, 30000, 330, ''),
(1587, 'BinBin''s Triangle', '用英文大写字母排列出一个三角形', '有多组数据。\r\n每组数据一个整数N (0 < N < 27)', '对于每组数据输出一个有N行的，由英文大写字母A..Z排列的三角形', 'd:\\oj\\data\\1587', 'd:\\oj\\data\\1587', '3\r\n5', 'A\r\n BBB\r\nCCCCC\r\n    A\r\n   BBB\r\n  CCCCC\r\n DDDDDDD\r\nEEEEEEEEE', '', 'dearway', '', '2012-05-26 19:20:06', 1000, 65536, 'N', NULL, 57, 114, 50, 57, 50, 66, 57, 30000, 218, ''),
(1588, 'A Simple Math Problem', 'In sixth grade, students are presented with different ways to calculate the Least Common Multiple\r\n(LCM) and the Greatest Common Factor (GCF) of two integers. The LCM of two integers a and b is\r\nthe smallest positive integer that is a multiple of both a and b. The GCF of two non-zero integers a\r\nand b is the largest positive integer that divides both a and b without remainder.\r\nFor this problem you will write a program that determines both the LCM and GCF for positive\r\nintegers.', 'The first line of input contains a single integer N, (1 <= N <=10000) which is the number of data sets that\r\nfollow. Each data set consists of a single line of input containing two positive integers, a and b,\r\n(1 <= a,b <= 4000) separated by a space.', 'For each data set, you should generate one line of output with the following values: The data set number as a decimal integer (start counting at one), a space, the LCM, a space, and the GCF.', 'd:\\oj\\data\\1588', 'd:\\oj\\data\\1588', '3\r\n5 10\r\n7 23\r\n42 56', '1 10 5\r\n2 161 1\r\n3 168 14', '', 'phillip', '', '2012-05-26 18:12:24', 1000, 65536, 'N', NULL, 96, 210, 46, 100, 56, 82, 77, 30000, 256, ''),
(1589, 'Dictionary Search', 'Aconly has a special dictionary , it translates cow language to Aconly''s words ^-^ . Aconly always dreams to become a famous cow (he is already a cow in southwest university of science and technology….).In order to make his little dream come true , he need to read a lot of cow world books. However, he is so stupid. He need to use his dictionary to translate the words. Now he knows you are in ACM programming skills trainning , he  needs you help him find all the words''meaning from cow language to Aconly’s words.\r\nYour task is to find the meaning of the cow words from given dictionary and output the meaning. If you can''t find the cow words in it ,you need print “none!”.', 'It contains multi test cases, the first line is N (0 < N<=100) the number of the distinct words in dictionary. Then  N lines follow . Each line contains tow consecutive strings A and B. A is the cow word , B is the meaning of A in Aconly''s words. The n+2th line is a number M (0 < M <=100) which is the number of the cow words need you to translate. Then M lines follow. Each line contains a consecutive string C which is the cow word. We guarantee that every string is no more than 100 characters.', 'Print the meaning of the cow words, each word one line. If you can''t find the word in his poor dictionary you should print “none!”.', 'd:\\oj\\data\\1589', 'd:\\oj\\data\\1589', '3\r\ncow da_niu\r\nOrz mobai\r\nACM Accept_MM\r\n4\r\ncow\r\nphillip\r\nOrzOrz\r\nACM', 'da_niu\r\nnone!\r\nnone!\r\nAccept_MM', '', 'phillip && Aconly', '', '2012-04-19 23:25:55', 1000, 65536, 'N', NULL, 35, 110, 32, 74, 70, 34, 32, 30000, 303, ''),
(1590, 'Empty Cubs', 'The spacemen in the space shuttle are waiting for the next escape window to return to the mother land Earth, where they are expected to fall somewhere in the deep blue waters of the Persian Gulf. Bored of waiting with nothing to do, they decide to play a game with their unit size food cubes. In the zero gravity environment of their spaceship, anything can stay motionless where it is placed. One spaceman places several food cubes in space such that there may be holes between cubes. Others, given the coordinates of the food cubes, should find the number of holes. A hole is a continuous empty space surrounded by food cubes in all six directions. You are to write a program to read the coordinates of each food cube and compute the number of holes.', 'The first line of the input contains a single integer t (1 ≤ t ≤ 20) which is the number of test cases in the input. Each test case starts with an integer M, the number of food cubes. Each line i (1 ≤ i ≤ M) of the M following lines contains integers xi, yi and zi, all between 1 and 100 inclusive, indicating the three coordinates of a food cube in the 3D space.', 'For each test case, there is one line containing the number of holes.', 'd:\\oj\\data\\1590', 'd:\\oj\\data\\1590', '2\r\n26\r\n1 1 1\r\n1 2 1\r\n1 3 1\r\n2 1 1\r\n2 2 1\r\n2 3 1\r\n3 1 1\r\n3 2 1\r\n3 3 1\r\n1 1 2\r\n1 2 2\r\n1 3 2\r\n2 1 2\r\n2 3 2\r\n3 1 2\r\n3 2 2\r\n3 3 2\r\n1 1 3\r\n1 2 3\r\n1 3 3\r\n2 1 3\r\n2 2 3\r\n2 3 3\r\n3 1 3\r\n3 2 3\r\n3 3 3\r\n7\r\n1 1 1\r\n1 1 2\r\n1 2 1\r\n1 2 2\r\n2 1 1\r\n2 1 2\r\n2 2 1', '1\r\n0', '', 'phillip', '', '2011-05-09 18:23:48', 2000, 65536, 'N', NULL, 7, 14, 50, 6, 55, 7, 5, 30000, 48, ''),
(1591, 'dearway''s problem', '请编写一个程序，输出N的阶乘的十进制表示中从最末一个非0位开始自低位向高位数的第K位。\r\n其中：0<=N<=10000，1<=K<=5\r\n例如：N=4,K=2,结果是2（4!=24）  N=6,K=1,结果为2（6!=720）', '有多组输入数据。\r\n每组数据输入两个整数N，K', '输出每行一个整数，即测试数据的结果。', 'd:\\oj\\data\\1591', 'd:\\oj\\data\\1591', '4 2\r\n6 1', '2\r\n2', '', 'dearway', '', '2012-03-07 10:37:04', 1000, 65536, 'N', NULL, 16, 119, 13, 58, 85, 22, 10, 30000, 151, ''),
(1592, '都是找MM惹的祸啊', 'Dearway 到火星找 MM ,结果被火星女王关在一个密室中………\r\nPhillip 和 Aconly 闻讯后急忙赶到火星去救Dearway，一路过关斩将来到密室门前。只见门上刻着\r\n() + ^%^ = &$^\r\n   (*) - ^*^ = ?\r\nPhillip 和 Aconly 很快破解出了密码，找出了等式的答案。可是，火星女王突然降临，给出了一堆类似的式子要求Phillip和Aconly 给出每个式子的答案。听说你参加了ACM暑期集训，他们找到你希望能编写一个程序帮他们找出答案：）', '多组数据输入，每行一个等式，各种可能出现的运算符号：+、-、= 以空格隔开。', '对应每个等式输出一行包含原来等式及求出的答案。', 'd:\\oj\\data\\1592', 'd:\\oj\\data\\1592', '() + ^%^ = ?\r\n(*) - ^*^ = ?', '() + ^%^ = &$^\r\n(*) - ^*^ = @($', '本故事纯属虚构，如有雷同纯属巧合。\r\n所有输入及答案都保证合法。', 'phillip & AConly & Dearway', '', '2012-03-07 10:21:53', 1000, 65536, 'N', NULL, 7, 20, 35, 13, 72, 7, 5, 30000, 89, ''),
(1593, '又是一年CET46', 'CET46 成绩出来啦，一群学生在谈论他们的成绩。A说他的成绩比B高，B说他的成绩比C低，D说他的成绩和E一样……\r\n他们当中可能有人在说谎。你的任务就是判断是否有人在说谎。\r\n\r\nPS：\r\nA < B 表示A的成绩比B低。\r\nA > B 表示A的成绩比B高。\r\nA = B 表示A的成绩和B一样。', '有多组数据。对于每组数据\r\n第一行两个整数 N和M,分别代表有N个学生(编号1—N)，和已知的M个关系。（1 < N <= 200   ，0 < M < 40000）\r\n第二到第M+1行，每行对应一个关系。', '如果有人说谎输出 “Someone have told lies!”，否则输出 “Maybe they are all honest!”。', 'd:\\oj\\data\\1593', 'd:\\oj\\data\\1593', '4 3\r\n1 < 2\r\n1 < 3\r\n2 > 3\r\n3 3\r\n1 > 2\r\n2 > 3\r\n3 = 1', 'Maybe they are all honest!\r\nSomeone have told lies!', '', 'Aconly', '', '2009-09-03 20:29:10', 1000, 65536, 'N', NULL, 1, 7, 14, 6, 86, 3, 1, 30000, 84, ''),
(1594, '楼层选择', '有一幢楼共N层，标号分别为1，2、、、N。每层楼上都住有相应的人，人数分别为S1，S2、、、Sn。每层楼上的人都有以个上楼不满意度和下楼不满意度。分别计为Ui，Di。现在他们要选择其中的一层楼来开会。设第I层楼有Si人，如果选择的楼层在第I层上面，设为第J层，则第I层上人的不满意度之和为(J-I)*Ui*Si；如果选择的楼层在第I层下面，设为第J层，那么第I层上人的不满意度之和为(I-J)*Di*Si；当然了如果选择的楼层就在第I层，那么不满意度为0。\r\n现在要求你计算出所有人不满意度之和的最小值。', '多组测试数据。\r\n第一行是N（1<=n<=10000）,代表楼的层数。\r\n下面有N个数字S1，S2、、Sn分别代表楼层上人的数目。(1<=Si<=11)\r\n再下面N行，每行两个数，分别表示Ui和Di。（1<=Ui,Di<=11）', '输出所有人不满意度之和的最小值。', 'd:\\oj\\data\\1594', 'd:\\oj\\data\\1594', '3\r\n1 1 1\r\n1 1\r\n2 2\r\n3 3', '4', '', 'dreamone', '', '2011-03-28 11:54:15', 1000, 65536, 'N', NULL, 2, 19, 11, 17, 89, 7, 2, 30000, 99, ''),
(1595, '划分问题II', '给你N个数，记为A1、A2、A3、、An。现要按顺序将其分为K部分，现在的问题是要计算每部分的最大值之和的最小值。你该怎眼划分呢？下面是个例子：\r\n如有4个数(1,4,2,3 )，要分为2部分：\r\n(1,4,2,3)可以分成(1)、(4,2,3)此时每部分最大值之和为1+4=5。\r\n也可以分成(1,4)、(2,3)此时每部分最大值之和为4+3=7。\r\n当你考虑完所有情况后，自然知道在所有最大值之和中的最小值为5。', '多组测试数据。\r\n第一行两个数N，K，代表有N个数，要分为K段。(1<=K<=N<=100)\r\n第二行N个数，分别为A1、A2、A3、、An(1<=Ai<=100)', '输出每段最大值之和的最小值。', 'd:\\oj\\data\\1595', 'd:\\oj\\data\\1595', '4 2\r\n4 1 2 3\r\n4 4 \r\n1 2 3 4', '7\r\n10', '', 'dreamone', '', '2011-03-23 11:44:17', 1000, 65536, 'N', NULL, 3, 7, 43, 4, 57, 6, 3, 30000, 78, ''),
(1596, 'Role Playing', 'Bessie loves board games and role-playing games so she persuaded Farmer John to drive her to the hobby shop where she purchased three dice for rolling. These fair dice have S1, S2, and S3 sides respectively (2 <= S1 <= 20; 2 <= S2 <= 20; 2 <= S3 <= 40). \r\nBessie rolls and rolls and rolls trying to figure out which three-dice sum appears most often. \r\nGiven the number of sides on each of the three dice, determine which three-dice sum appears most frequently. If more than one sum can appear most frequently, report the smallest such sum.', 'Three space-separated integers: S1, S2, and S3  (multi test cases)', 'The smallest integer sum that appears most frequently when the dice are rolled in every possible combination.', 'd:\\oj\\data\\1596', 'd:\\oj\\data\\1596', '3 2 3', '5', 'Here are all the possible outcomes. \r\n1 1 1 -> 3 ,   1 2 1 -> 4 ,   2 1 1 -> 4 ,   2 2 1 -> 5 ,   3 1 1 -> 5 \r\n3 2 1 -> 6  , 1 1 2 -> 4  ,  1 2 2 -> 5 ,   2 1 2 -> 5  ,  2 2 2 -> 6 \r\n3 1 2 -> 6 ,   3 2 2 -> 7  ,  1 1 3 -> 5 ,   1 2 3 -> 6 ,   2 1 3 -> 6 \r\n2 2 3 -> 7 ,   3 1 3 -> 7  ,  3 2 3 -> 8\r\nBoth 5 and 6 appear most frequently (five times each), so 5 is the answer.', 'dreamone', '', '2011-07-31 17:54:01', 1000, 65536, 'N', NULL, 19, 72, 26, 52, 79, 17, 14, 30000, 97, ''),
(1597, '皇帝的新衣', '在很久很久以前，有个臭美国王。一天，他得到了一件新衣，于是决定巡城看看老百姓的反应(?。于是他命令可怜的宰相数一下他有多少种巡城方案。\r\n城市是一个N*M的矩形，(N+1)*(M+1)条街把城市分成了N*M块。国王从左下角出发，每次只能向右或向上走，右上角是终点。\r\n请你帮帮可怜的宰相。', '每组测试数据有3个值 n m p(0< n <=1000000000,0 < m <=1000000000，p为质数且p<400). \r\n\r\n多组测试数据 0 0 0结束。', '输出方案数 因为数据太大 请 mod p', 'd:\\oj\\data\\1597', 'd:\\oj\\data\\1597', '2 3 97\r\n20 40 37\r\n0 0 0', '10\r\n32', '', '剑问苍生', '', '2012-08-09 20:07:23', 1000, 65536, 'N', NULL, 21, 51, 41, 15, 68, 11, 7, 30000, 174, ''),
(1598, 'Phillip''s number round', 'For a given number, if greater than ten, round it to the nearest ten, then (if that result is greater than 100)\r\ntake the result and round it to the nearest hundred, then (if that result is greater than 1000) take that number\r\nand round it to the nearest thousand, and so on ...', 'Input to this problem will begin with a line containing a single integer n indicating the number of integers to\r\nround. The next n lines each contain a single integer x (0 <= x <= 99999999).', 'For each integer in the input, display the rounded integer on its own line.\r\nNote: Round up on fives.', 'd:\\oj\\data\\1598', 'd:\\oj\\data\\1598', '9\r\n15\r\n14\r\n4\r\n5\r\n99\r\n12345678\r\n44444445\r\n1445\r\n446', '20\r\n10\r\n4\r\n5\r\n100\r\n10000000\r\n50000000\r\n2000\r\n500', '', 'phillip', '', '2011-11-23 18:44:42', 1000, 65536, 'N', NULL, 29, 78, 37, 48, 63, 32, 28, 30000, 142, ''),
(1599, 'A luck number', '在中国传统意义上6,8都是幸运数字。在这题里重新定义幸运数字的含义。如果一个数可以由一些非负数的阶乘组成，并且这些数各不相同，我们就称这个数为幸运数。现在给定一个数n（n <= 1000000000 ）,请你编写一个程序问n是否是幸运数字。\r\n例如126=5!+3!，则126就是一个幸运数字。同样2(2 = 0!+1!)也是一个幸运数字。但是22就不能由一些非负数的阶乘组成，则它不是一个幸运数字。', '有多组数据输入，输入-1时，代表输入结束。', '判断每个数是否是幸运数字，如果是输出“YES”，否则输出“NO”。', 'd:\\oj\\data\\1599', 'd:\\oj\\data\\1599', '126\r\n2\r\n22\r\n-1', 'YES\r\nYES\r\nNO', '0! = 1', 'dearway', '', '2012-03-09 13:27:57', 1000, 65536, 'N', NULL, 43, 161, 27, 75, 70, 41, 32, 30000, 387, ''),
(1600, 'Cow Traffic', 'The bovine population boom down on the farm has caused serious congestion on the cow trails leading to the barn. Farmer John has decided to conduct a study to find the bottlenecks in order to relieve the ''traffic jams'' at milking time.\r\n\r\nThe pasture contains a network of M (1 ≤ M ≤ 50,000) one-way trails, each of which connects exactly two different intersections from the set of N (1 ≤ N ≤ 5,000) intersections conveniently numbered 1..N; the barn is at intersection number N. Each trail connects one intersection point to another intersection point with a higher number. As a result, there are no cycles and, as they say on the farm, all trails lead to the barn. A pair of intersection points might be connected by more than one trail.\r\n\r\nDuring milking time rush hour, the cows start from their respective grazing locations and head to the barn. The grazing locations are exactly those intersection points with no trails connecting into them. Each cow traverses a ''path'', which is defined as a sequence of trails from a grazing location to the barn.\r\n\r\nHelp FJ finding the busiest trail(s) by computing the largest number of possible paths that contain any one trail. The answer is guaranteed to fit in a signed 32-bit integer.', 'Line 1: Two space-separated integers: N and M. \r\nLines 2..M+1: Two space-separated intersection points.', 'Line 1: The maximum number of paths passing through any one trail.', 'd:\\oj\\data\\1600', 'd:\\oj\\data\\1600', '7 7\r\n1 3\r\n3 4\r\n3 5\r\n4 6\r\n2 3\r\n5 6\r\n6 7', '4', 'Here are the four possible paths that lead to the barn: \r\n1 3 4 6 7 \r\n1 3 5 6 7 \r\n2 3 4 6 7 \r\n2 3 5 6 7', '2007 USACO March', '', '2009-08-24 09:33:22', 2000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1601, '', '', '', '', 'd:\\oj\\data\\1601', 'd:\\oj\\data\\1601', '', '', '', '', '', '2009-08-24 09:33:34', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 2, ''),
(1602, 'Rank and File', '<a href="timu\\south_central_USA2008.zip">题目</a> 在这里', '', '', 'd:\\oj\\data\\1602', 'd:\\oj\\data\\1602', '', '', '', '2008 ACM ICPC South Central USA Regional', '', '2009-08-24 20:32:59', 5000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 3, ''),
(1603, 'The Extent of the Problem', '', '', '', 'd:\\oj\\data\\1603', 'd:\\oj\\data\\1603', '', '', '', '2008 ACM ICPC South Central USA Regional', '', '2009-08-24 20:33:20', 5000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1604, 'Filtration', '', '', '', 'd:\\oj\\data\\1604', 'd:\\oj\\data\\1604', '', '', '', '2008 ACM ICPC South Central USA Regional', '', '2009-08-24 20:33:34', 5000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1605, 'Like Water for Clay', '', '', '', 'd:\\oj\\data\\1605', 'd:\\oj\\data\\1605', '', '', '', '2008 ACM ICPC South Central USA Regional', '', '2009-08-24 20:33:54', 5000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1606, 'Wandering Aimlessly', '', '', '', 'd:\\oj\\data\\1606', 'd:\\oj\\data\\1606', '', '', '', '2008 ACM ICPC South Central USA Regional', '', '2009-08-24 20:34:17', 5000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1607, 'Cables ... in Spaaace!', '', '', '', 'd:\\oj\\data\\1607', 'd:\\oj\\data\\1607', '', '', '', '2008 ACM ICPC South Central USA Regional', '', '2009-08-24 20:34:23', 5000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1608, 'Patterns and Pictures', '', '', '', 'd:\\oj\\data\\1608', 'd:\\oj\\data\\1608', '', '', '', '2008 ACM ICPC South Central USA Regional', '', '2009-08-24 20:34:35', 5000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1609, 'No Wormholes Were Harmed...', '', '', '', 'd:\\oj\\data\\1609', 'd:\\oj\\data\\1609', '', '', '', '2008 ACM ICPC South Central USA Regional', '', '2009-08-24 20:35:23', 5000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1610, 'Tribute (Editor)', '', '', '', 'd:\\oj\\data\\1610', 'd:\\oj\\data\\1610', '', '', '', '2008 ACM ICPC South Central USA Regional', '', '2009-08-24 20:35:32', 5000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, ''),
(1611, '函数求值(一)', '定义函数g(n)为n最大的奇数因子。求f(n)=g(1)+g(2)+g(3)+…+g(n)。', '有多组测试数据（不超过50）。每组数据一个整数n（0 &lt; n &lt;= 10^8）。', '输出对应的f(n)，每组数据占一行。', 'd:\\oj\\data\\1611', 'd:\\oj\\data\\1611', '1 \r\n2 \r\n4 \r\n7', '1 \r\n2 \r\n6 \r\n21', '', 'Aconly', '', '2012-04-25 15:42:26', 1000, 65536, 'N', NULL, 36, 150, 24, 109, 77, 44, 32, 30000, 603, ''),
(1612, '函数求值（二）', '定义函数g(n)为n最大的奇数因子。\r\nf(n)=g(1)+g(2)+g(3)+…+g(n)。', '有多组测试数据。\r\n每组数据一个整数K ( 0 < K <= 13333333333471362 )。', '输出满足f(n) <= K 的最大的整数n，每组数据占一行。', 'd:\\oj\\data\\1612', 'd:\\oj\\data\\1612', '1\r\n8\r\n11111111\r\n13333333333471362', '1\r\n4\r\n5772\r\n200000000', '', 'Aconly', '', '2012-04-02 20:24:59', 1000, 65536, 'N', NULL, 8, 23, 35, 15, 68, 13, 7, 30000, 190, ''),
(1613, '147', '春节刚刚过，大家都是怎么过的呢？对江鸟而言，当然每天都是在打麻将中度过，他特别喜欢所谓的“通挂”，什么147，258，369。只要是遇到上述牌，他就会很高兴。现在他提出一个问题：如果只利用数字1，4，7 组成一些数，那么你能很快求出第K(1<=K<=10000)大数吗？如前几个数将会是：1、4、7、11、14、、、', '输入一个如上所描述的整数K,(1<=K<=10000)，多组输入。', '输出需要的第K大数。', 'd:\\oj\\data\\1613', 'd:\\oj\\data\\1613', '1\r\n3\r\n4', '1\r\n7\r\n11', '', 'dreamone--SWUST 10.3.21', '', '2012-08-06 19:35:15', 1000, 65536, 'N', NULL, 17, 30, 57, 13, 43, 21, 17, 30000, 161, ''),
(1614, '取模', '给你三个数X(1<=X<=10^100)、Y(1<=Y<=10^8)、Z(1<=Z<=10^4),你能计算出X^Y%Z的值吗？', '输入三个如上所描述的数X、Y、Z。多组输入。', '输出X^Y%Z的值。', 'd:\\oj\\data\\1614', 'd:\\oj\\data\\1614', '2 3 5	\r\n12345 2345 345 \r\n123456789123456789 19234321 2341', '3\r\n240\r\n1825', 'X^Y表示X的Y次方', 'deamone--SWUST 10.3.21', '', '2012-03-17 21:44:46', 1000, 65536, 'N', NULL, 10, 32, 31, 22, 71, 13, 9, 30000, 156, ''),
(1615, '寻宝', '有这么一块神奇的矩形土地，为什么神奇呢？因为上面藏有很多的宝藏。该土地由N*M个小正方形土地格子组成，每个小正方形土地格子上，如果标有“E”，则表示该格可以通过；如果标有“X”，则表示该格不能通过。现在你处于其中的一格上，用“P”表示，你只能向与你所在格子相邻的上、下、左、右四个方向移动，当然如果你即将移向的格子上标有“X”，则不能通过。现在的任务是：如果你能从起点通过每个用“E”标示的格子一次且仅一次，则你将寻宝成功，否则则失败。', '输入包括如下几部分。\r\n第一部分：输入两个数N(1<=N<=6)和M(1<=M<=6)，分别表示该土地的行和列。\r\n第二部分：输入一个只能由“P”、“X”、“E”构成的N*M大小的矩阵，且“P”只能出现一次，代表你当前所在位置。', '如果能寻宝成功，输出“YES”；否则输出“NO”。', 'd:\\oj\\data\\1615', 'd:\\oj\\data\\1615', '2  2\r\nPE\r\nEX\r\n\r\n4  4\r\nPXEE\r\nEXEE\r\nEEEE\r\nEEEE', 'NO\r\nYES', '', 'dreamone--SWUST 10.3.21', '', '2012-07-22 19:46:09', 1000, 65536, 'N', NULL, 36, 92, 39, 47, 65, 29, 25, 30000, 544, ''),
(1616, '连通图', '连通图是指任意两个顶点之间都能相互可达的图，给你一个N个顶点，M条边的无向连通图，问最多可以删除多少条边，使这个图仍然连同。', '输入包括如下几部分。（多组输入）\r\n第一部分：输入两个数N(1<=N<=100)和M，分别表示该图的顶点数和边数。\r\n第二部分：M行，每行由两个数A、B组成，表示顶点A和B之间连有一条边，同一条边不会重复出现。', '输出最多能删除多少条边。', 'd:\\oj\\data\\1616', 'd:\\oj\\data\\1616', '1 0', '0', '', 'dreamone--SWUST 10.3.21', '', '2012-03-18 15:33:05', 1000, 65536, 'N', NULL, 13, 26, 50, 13, 52, 13, 12, 30000, 105, ''),
(1617, '15数码问题', '将1，2、、14，15这15个数字填入一个4*4的方格中，当然你会发现有个空格方格，我们用数字0来代替那个空格，如下就是一个合理的填入法：\r\n1  2  3  4\r\n5  6  7  8\r\n9  10 0  12\r\n13 14 11 15\r\n现在的问题是：你是否能通过交换相邻的两个数字(相邻指的是上、下、左、右四个方向，而且待交换的两个数字中有一个为数字0)，最后变成如下这种排列格式：\r\n1  2  3  4\r\n5  6  7  8\r\n9  10 11 12\r\n13 14 15 0', '输入包括两部分：\r\n第一部分：输入一个数C，代表下面共有C组输入\r\n第二部分：输入包括一个4*4的矩阵，矩阵中的数由0，1，2、、15组成。', '如果能通过如题方式达到目标排列，输出“YES”，否则输出“NO”。', 'd:\\oj\\data\\1617', 'd:\\oj\\data\\1617', '1\r\n1  2  3  4\r\n5  6  7  8\r\n9  10 0  12\r\n13 14 11 15', 'YES', '', 'dreamone--SWUST 10.3.21', '', '2010-06-13 18:36:53', 1000, 65536, 'N', NULL, 2, 3, 67, 1, 33, 2, 2, 30000, 74, ''),
(1618, '幸运数', '有这么一串字符串，字符串中会出现一些数字，当然也可能出现一些其他符号，我们约定连续出现的一串数字串，算做是一个幸运数。现在你的任务是：计算幸运数的个数。举个例子：\r\n如：串“123456789”算一个幸运数；而“1*99” 则算两个幸运数。', '输入包括两部分：\r\n第一部分：输入一个自然数N，代表如下将输入N行字符串。\r\n第二部分：输入N行字符串，字符串长度不超过30。', '输出幸运数的个数。', 'd:\\oj\\data\\1618', 'd:\\oj\\data\\1618', '2\r\n12332432523*2*23\r\n2324435435', '3\r\n1', '', 'dreamone--SWUST10.3.21', '', '2012-03-14 18:57:02', 1000, 65536, 'N', NULL, 39, 176, 22, 130, 82, 39, 29, 30000, 444, ''),
(1619, '中位数', '给你N个正整数，如果每两两做差再取绝对值，将会得到M = N*(N-1)/2 个数，再将这M个数进行排序，你能很快求出中间的那个数吗？\r\n注意：中间那个数意味着：1、如果M为偶数，则意味着排序后的第M/2个数；2、如果M为奇数，则意味着排序后的第M/2 + 1个数。例如：如果M=6，则为第3个数，如果M=15，则为第8个数。', '多组输入，输入包括两部分：\r\n第一部分：输入一个自然数N(3 ≤ N ≤ 100000)，代表有多少个整数。\r\n第二部分：输入这N个正整数，每个整数不大于1000。', '输出满足题意的中间的那个数。', 'd:\\oj\\data\\1619', 'd:\\oj\\data\\1619', '3\r\n1 4 3', '2', '', 'dreamone--SWUST 10.3.21', '', '2012-04-19 17:48:53', 2000, 65536, 'N', NULL, 7, 54, 13, 45, 90, 14, 5, 30000, 219, ''),
(1620, 'Average Value', 'Firstly, Please read the following codes carefully: \r\n#include<iostream>\r\nusing namespace std;\r\nint N,K;\r\nint map[1000][1000];\r\nint ans[1000][1000];\r\nint main(){\r\n	int i,j;\r\n	scanf("%d%d",&N,&K);\r\n	for(i=0;i<N;i++)\r\n		for(j=0;j<N;j++)\r\n			scanf("%d",&map[i][j]);\r\n	for(i=0;i<N;i++)\r\n		for(j=0;j<N;j++){\r\n			int len=K/2;\r\n			if(i-len>=0&&j-len>=0&&i+len<N&&j+len<N)\r\n				ans[i][j]=Solve(i-len,j-len,i+len,j+len);\r\n			else\r\n				ans[i][j]=map[i][j];\r\n		}\r\n	for(i=0;i<N;i++){\r\n		for(j=0;j<N;j++)\r\n			if(!j)\r\n				printf("%d",ans[i][j]);\r\n			else\r\n				printf(" %d",ans[i][j]);\r\n		printf("\\n");\r\n	}\r\n	return 0;\r\n}\r\nThen, please read the following warnings carefully: \r\nNo1:N is a number which is not larger than 1000；K is a number which is not larger than N, what’s  more ,it is an odd number. The value of map[i][j] ( 0 <= i < N,0 < =j < N ) is not larger than 5. \r\nNo2:The function Solve( int x1,int y1,int x2,int y2) means the average value of a rectangle ,the coordinate of the top left corner of which is (x1,y1), the coordinate of the bottom right corner of which is (x2,y2). \r\nNo3:The average value of a rectangle defines as follows: Firstly, calculate the total sum of all the elements of the rectangle . Then the sum will be divided by the numbers of elements of the rectangle. That is the answer, What’s more, You should keep the integer for the answer, for example, you should keep 3,4,2 instead of 3.5,4.8,2.3. \r\nNo4:If you want to get more information, please refer to the above codes.', 'The input consists of one or more test cases, followed by a line containing the numbers 0 0 that signals the end of the input. Each test case obtains two parts: \r\nNo1: input the numbers N and K, which are described above. \r\nNo2: A matrix obtain N*N numbers.', 'Please output the matrix which is processed by you as the designated rules above. Pay attention. After you process one case, then output an empty line before you process the next case.', 'd:\\oj\\data\\1620', 'd:\\oj\\data\\1620', '3 3\r\n2 4 1\r\n4 5 3\r\n4 1 2', '2 4 1\r\n4 2 3\r\n4 1 2', '', '', '', '2011-01-04 15:44:14', 1000, 65536, 'N', NULL, 9, 91, 10, 74, 94, 21, 5, 1000, 96, ''),
(1621, 'Big Heart', 'Something you will understand only if you have done it. Someone you won’t forget only if you have really lost. Do what you want, do love who you love is the most important things in one’s life. Otherwise you will feel as awful as Phillip now. Phillip loves Sue more than he loves himself. He spent a realty hard time without Sue. Now he comes up an idea to make her happy: The symbol of Hearts is usually used for showing love. Knowing Sue love it very much, Phillip wants to create some incredible hearts for her.', 'It contains several cases, each case only one number N the size of the Big-Heart Phillip wants to create. (0 < N < 6 )', 'The Big-Heart', 'd:\\oj\\data\\1621', 'd:\\oj\\data\\1621', '1\r\n2', '** ** \r\n*  *  *\r\n *   *\r\n  * *\r\n   *\r\n        ** **  ** **         ** **  ** **\r\n       *  *  **  *  *       *  *  **  *  * \r\n        *   *  *   *         *   *  *   * \r\n         * *    * *           * *    * * \r\n          *      *             *      * \r\n ** **                ** **                ** **\r\n*  *  *              *  *  *              *  *  *\r\n *   *                *   *                *   *\r\n  * *                  * *                  * * \r\n   *                    *                    *\r\n        ** **                       ** **\r\n       *  *  *                     *  *  *\r\n        *   *                       *   *\r\n         * *                         * *\r\n          *                           *\r\n               ** **         ** **\r\n              *  *  *       *  *  *\r\n               *   *         *   *\r\n                * *           * *\r\n                 *             *\r\n                      ** **\r\n                     *  *  *\r\n                      *   *\r\n                       * *\r\n                        *', '', 'phillip', '', '2011-06-23 10:34:10', 1000, 65536, 'N', NULL, 6, 31, 19, 23, 85, 6, 4, 1000, 98, ''),
(1622, 'Cross The River', 'Long long ago, there was a river, the length of its two sides is infinite. We can call the two sides as side A and side B. There is a businessman in the side A of the river, we can use a point N represent the businessman. and he wants to go to the side B of the river by boating, we can use a point M represent the destination. Also, we can assume the point N always in the right bottom direction of the point M, The horizontal distance between point M and point N is f1. and the width of the river is f2.If you can not understand the idea clearly, Please refer to the picture below: \r\n<img src=images\\crossriver.jpg></img>\r\nThere is also a limitation. The businessman must be at least away from k1 meters to find a boat in the side A of the river, what’s more, when the businessman arrives the side B of the river by boating, he must be at least away k2 meters from the destination point M, then go directly to the point M. Can you calculate the shortest distance between point M and point N using the above rule ?', 'The first line of input will be a positive integer indicating how many data sets will be included (N). Each of the next N lines will contain four integer numbers f1,f2,k1,k2.(the four integer numbers are not larger than 1000).', 'The shortest distance between point N and point M. Output 2 digits after the decimal point.', 'd:\\oj\\data\\1622', 'd:\\oj\\data\\1622', '1\r\n3 4 0 0', '5.00', '', '', '', '2011-07-31 19:58:21', 1000, 65536, 'N', NULL, 22, 213, 10, 181, 91, 45, 19, 1000, 122, ''),
(1623, 'Depart Information', 'Give you a string as the following format: \r\n#******#*******#*******#*******#*****#......# \r\nIn which, “*” means a number or a letter or a Chinese character. Can you depart the string as the following format: \r\n************ \r\n********** \r\n******** \r\n……… \r\nFor more information , please refer to the Sample Input and Sample Output. There is no any blank in a single string.', 'Firstly ,input a number C ,which represent the number of test cases ,then followed by C cases. \r\nEach test case obtains two parts: \r\nNo1: input a number T, which represents the following input will consist of T lines. \r\nNo2: T lines , for each line ,you should depart it as the above rules, the output it. \r\nNotice: the length of the character string will be not larger than 500.', 'Please output the information after you depart it.', 'd:\\oj\\data\\1623', 'd:\\oj\\data\\1623', '1\r\n2\r\n#asdfdg#sdfge#dsgh#345436234#\r\n#我是中国人#我爱中国#dreamone#phillip#dearway#', 'asdfdg\r\nsdfge\r\ndsgh\r\n345436234\r\n我是中国人\r\n我爱中国\r\ndreamone\r\nphillip\r\ndearway', '', '', '', '2012-03-30 08:31:25', 1000, 65536, 'N', NULL, 66, 159, 42, 92, 60, 70, 62, 30000, 224, ''),
(1624, 'Expression', 'There is an expression like this: \r\nx1/x2/x3/x4/…/xk \r\nin which xi(1<=i<=k,k<=20) is a positive integer no more than 1,000,000,000.The expression should be calculated from left to right, for example, the result of 1/3/1/3 is 1/9.but we can change the order of the calculation by insert brackets, so the value of (1/3)/(1/3) is 1.Now if we give you an expression M, Can you tell us whether we could change M to M'' whose value is an integer by insert brackets? If you can make M'' be a integer value, you should keep the biggest one ,which is called B, Can you tell us the number of the factors of B again? \r\nFor example, the expression 4/2/1/2,we can get 1 or 4 by inserting brackets, but we keep 4 for the number B, because it is the biggest one .', 'Firstly ,input a number T represented the numbers of test cases ,then followed by T lines. \r\nThen T lines as follows, each expression on a single line. There is no brackets in the input expressions.', 'If you can change M to M'' whose value is an integer by insert brackets, you should output the numbers of the factors of B, which is the biggest one. or output “NO” instead.', 'd:\\oj\\data\\1624', 'd:\\oj\\data\\1624', '2\r\n4/2/1/2\r\n1/3/1/4', '3\r\nNO', '', '', '', '2010-04-28 15:22:16', 1000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 76, ''),
(1625, 'Find Biggest Number', 'There is a simple problem which is to find the biggest number between 1st number and the last one from the giving sequence. In order to make it more difficult we add some operations to it. We may change ordinary number to an new one in any position of the sequence, and we want to know the biggest number between the 1st and the a-th number (a can be any position in the giving sequence).', 'First line will be two integers n and m, n is the length of the sequence and m is the operation times.(0 < n <= 10^5 , 0 < m <= 10^5) \r\nSecond line will have n integers per line, which are the initial numbers in the sequence. \r\nthird to m+2 lines is the operation commands which will be in either ‘x a b’ or ‘q a’ format. \r\nx a b : Change the a-th number to b. \r\nq a : Find the biggest number between 1st and a-th number (include 1st and a-th numbers). \r\n(0 < a <= n, 0 <= b < 10^6 )', 'For every ‘q a’ operation output the answer. One answer will be in one line.', 'd:\\oj\\data\\1625', 'd:\\oj\\data\\1625', '5 3\r\n1 2 3 4 5\r\nq 4\r\nx 2 10\r\nq 5', '4\r\n10', '', 'phillip', '', '2012-02-12 09:57:03', 1000, 65536, 'N', NULL, 25, 150, 17, 111, 90, 32, 13, 30000, 194, ''),
(1626, 'Get Tickets', 'Sue likes traveling very much, and she always travels by air. Since she usually finds discount tickets throw the Internet, it will not take much money on her trip. In order to save money she sometimes flights to several places first instead of flight directly to her destination. However every airport has its own contribution toll C_i, during one trip it will get the highest toll fee only. So she needs to pay the flight tickets and the highest airport toll from departure place to the destination. She wants you to calculate the minimum money she must pay. For make things easier, we identified each city as the number 1,2,3,4 ……N. Give you M airlines price L_i and the airline connect city A_i and B_i directly, and K questions about the cost from city s_i to t_i.', 'Line 1: Three space separated integers: N, M, and K \r\nLines 2: It contains N integers, the i-th number is : C_i \r\nLines 3..M+2: Line j+2 contains three space separated integers: A_j, B_j, and L_j \r\nLines M+3.. M+K+2: Line i+M+2 specifies query i using two \r\nspace-separated integers: s_i and t_i', 'Lines 1..K: Line i contains a single integer which is the lowest \r\ncost from s_i to t_i', 'd:\\oj\\data\\1626', 'd:\\oj\\data\\1626', '5 7 2\r\n2 5 3 3 4\r\n1 2 3\r\n1 3 2\r\n2 5 3\r\n5 3 1\r\n5 4 1\r\n2 4 3\r\n3 4 4\r\n1 4\r\n2 3', '8\r\n9', '', 'phillip', '', '2011-12-17 22:43:44', 1000, 65536, 'N', NULL, 1, 23, 4, 10, 91, 6, 1, 30000, 94, '');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1627, 'Hilary', 'Dearway is fond of sleeping, but he always feels it is not enough even though 8 hours. Therefore he usually naps in class!!! After he wakes up he sometimes would write a string on a paper. This is a special string which always includes “hilary”. Now dearway wants you to write a program to calculate how many “hilary”s in the string? Hilary comes from different position in the string is considered different “hilary”s. \r\nFor example , “hhillary” includes 4 “hilary”s.', 'The first line is a inter T. Then T lines strings follow. Each string is composed of lower letters and the length of each string is less than 1000.', 'Output how many hilary each string includes.', 'd:\\oj\\data\\1627', 'd:\\oj\\data\\1627', '3\r\nhilary\r\nhhillary\r\nihlary', '1\r\n4\r\n0', '', '', '', '2011-07-31 20:49:23', 1000, 65536, 'N', NULL, 14, 53, 26, 39, 76, 26, 12, 30000, 92, ''),
(1628, 'Interesting Problem', 'Dearway knows some people like math problems but other not. Now the fact is in front of you all. \r\nGive n integers x1 x2 ... xn, you should count how many integers from 1 to m that can be divided by at least one of them.', 'The first line is an integer T which shows the number of cases.\r\nThen T cases follow. Each case contains 2 lines: \r\nThe first line has 2 integers n and m. \r\nThe second line contains n integers. \r\n(0 < n < 11, 0 < m < 2^31, 0 < xi < 100)', 'For each case print the answer in a single line.', 'd:\\oj\\data\\1628', 'd:\\oj\\data\\1628', '2\r\n1 10\r\n3\r\n2 20\r\n3 5', '3\r\n9', '', '', '', '2010-05-30 12:36:35', 1000, 65536, 'N', NULL, 6, 72, 8, 66, 93, 21, 5, 30000, 73, ''),
(1629, 'Journey Adventure', 'The members of the swust_info ACM library get on very well! On the weekend they intend to adventure on the “doutuan” hill. They pass though many obstacles and feel high sense of achievement . After several hours they came to a bumpy track. They plan to pass though the track two people simultaneously for more safe from S to T. . After each pass one people in the set T should turn back to set S. Then two people pass though again from S to T until all the people go to T. The pass time from S to T is determined by the lower people’s speed. The pass time from T to S is determined by the single people’s own speed. Now give you all the pass time of the N people of the swust_info ACM library. You should think out a strategy that minimizes the time for all the people to pass though the bumpy track.', 'The first line contains an integer T which stands for T cases. Each case includes two lines, the first line is n (2 < = n < = 1000) then the second line includes n people''s pass though time.', 'For each test case, print a line containing the least time for all the n people to pass through the bumpy track.', 'd:\\oj\\data\\1629', 'd:\\oj\\data\\1629', '3\r\n2\r\n1 8\r\n3 \r\n1 2 3\r\n4\r\n1 7 8 9', '8\r\n6\r\n26', '', '', '', '2010-11-24 14:32:51', 1000, 65536, 'N', NULL, 6, 57, 11, 50, 91, 21, 5, 30000, 79, ''),
(1630, 'Count Big Heart', 'There is a kind of heart which made of a lot of ‘*’s .(get more details below):\r\n <img src=images\\hh.jpg></img>  <img src=images\\hh1.jpg></img>\r\n\r\n\r\nHere comes the problem, give you the size N of the big heart, can you get the total number of the ''*''s in the big heart.', 'It contains several cases. Each case only have one number N the size of the big heart. (0 < N < 10)', 'The total number of ‘*’s in the size N big heart.', 'd:\\oj\\data\\1630', 'd:\\oj\\data\\1630', '1\r\n3', '12\r\n1728', '', 'phillip', '', '2012-02-13 22:16:12', 1000, 65536, 'N', NULL, 35, 94, 37, 54, 63, 39, 32, 30000, 153, ''),
(1631, 'Encode, Then Decode', 'Mr. Encript is working on information transmission. One part of his job is to encode and decode an article. The encoding part is really simple:\r\n\r\n1.  Give a string of characters at first. This string should contain all the characters in the article. In this string, each character will appear only once. Each character has a code index. The character’s index is this character''s position in the string, starts from position 0.\r\n2.  Assume character C is at the position 0 of the string, and then find out how many C in the article to be encoded, and record the positions C appear in the article. Output the number of character C, and then output the positions, separated by a blank space.\r\n3.  Process the next character (at the position 1) of the string as step 2. Repeat until process the whole string.\r\n4.  The new number sequence is the code wanted.\r\n\r\nFor example, given a index string:\r\nString	A	B	C	D	 	+\r\nPosition	0	1	2	3	4	5\r\n\r\nand a article to be encoded:\r\nArticle	C	A	B	 	C	A	D\r\nPosition	0	1	2	3	4	5	6\r\n\r\nThe code we can get is:\r\n2	1	5	1	2	2	0	4	1	6	1	3	0\r\nA			B		C			D		 		+\r\n\r\nMr. Encript needs someone to finish the decoding part. So he gives the decoding job to you. You should write a program which can output the article with index string and the code sequence.', 'First line is the index string. You should pay attention there may be a blank space in it.\r\nThe second line is the code sequence.\r\nAll the characters are printable characters in ASCII.', 'You should output the original article. Add a blank line at the end of your output.', 'd:\\oj\\data\\1631', 'd:\\oj\\data\\1631', 'Ik!avNine lo\r\n1 0 1 10 1 13 2 8 11 1 4 1 7 1 12 1 9 1 5 2 1 6 1 2 1 3', 'I love Nankai!', 'For 100% cases, the length of the original article is no more than 255.', 'NKPC6', '', '2010-05-17 16:45:09', 1000, 65536, 'N', NULL, 11, 23, 48, 12, 55, 10, 10, 30000, 54, ''),
(1632, 'Measure The Apple Tree', 'There is an apple tree in the yard of West Apartment. Every autumn it grows lots of fruits. This time, Mr. Plante wonders the height of each apple. But he does not have such a long ruler that he cannot measure each apple from ground directly. For this reason he would get the height between some pairs of apples or apple from ground.\r\nYou get this job to write a program which can tell Mr. Plante the height of each apple from ground.', 'The first line consists of two integers, N and M. N is the number of apples. The apples are numbered from 1 to N.\r\nThere then follows M lines with three integers per line, A, B, and H. Each line means the apple numbered A is H meter higher than the apple numbered B. A and B will not be equal but one of them may be 0 which means the ground. We assume the height of the ground is 0. \r\nMr. Plante guarantees the data will be logical.', 'You should print N lines with one integer on each line. The ith line is the height of apple numbered i. If you can''t determine one''s height just output -1.', 'd:\\oj\\data\\1632', 'd:\\oj\\data\\1632', '5 5\r\n2 4 6\r\n4 0 7\r\n5 0 5\r\n2 0 13\r\n3 0 11', '-1\r\n13\r\n11\r\n7\r\n5', 'For 70% cases,    0 < N <= 1000.\r\nFor 100% cases,   0 < N <= 10000, 0 < M <= 100000, 0 <= A, B <= N, 0 <= H <= 1000000', 'nkpc6', '', '2010-12-15 16:03:42', 1000, 65536, 'N', NULL, 3, 17, 18, 2, 40, 5, 3, 30000, 40, ''),
(1633, 'Study Room', 'All of us like our second main teaching building and always prefer a comfortable seat. To make the following problem easy to handle, we assume there are N rows and M lines of seats in a study room. And we set each seat a singular comfortable value. That means there will not be two seats have same comfortable value. When a student comes into this room, he will choose the empty seat with the maximum comfortable value. However, if there is already a student adjoining to this seat (left or right), he will choose the empty seat with the next maximum comfortable value, until there is nobody at his left and right side.\r\nAs you see, if we know all the comfortable values, we can confirm how many students will be in this room. And this is your job.', 'There are two integers N and M in the first line.\r\nThen follows N lines, each contains M integers. The number on the ith line jth row means the comfortable value of the seat at ith line jth row.', 'You should output n lines, each contains m characters. ''E'' means there is no person on the seat, while ''P'' means there is one.\r\nDon''t output any blank space and add a black line at end of your output.', 'd:\\oj\\data\\1633', 'd:\\oj\\data\\1633', '3 4\r\n1 2 3 4\r\n5 6 7 8\r\n9 10 11 12', 'EPEP\r\nEPEP\r\nEPEP', 'For 30% cases,   0 < N, M <= 40\r\nFor 70% cases,   0 < N, M <= 200\r\nFor 100% cases,  0 < N, M <= 400', 'nkpc6', '', '2010-05-13 12:30:38', 1000, 65536, 'N', NULL, 7, 16, 44, 9, 56, 7, 7, 30000, 33, ''),
(1634, 'Do It As Hoped', 'Mr. Carter now has a problem with some modules. There are two types of modules, n pieces Type A and m pieces Type B. Each module has an owned quality value. Mr. Carter has to pick up one Type A and group it with one Type B. A Type A can only be grouped with a Type B while the difference of their quality values is not more than a constant number D. Mr. Carter wants as more groups as possible. Now he entrusts you to finish this job.', 'Three integers on first line, n, m and D as described above.\r\nThe second line consists of n integers. Each integer represents quality value of every Type A module.\r\nThe third line consists of m integers. Each integer represents quality value of every Type B module.', 'You should output an integer, which is the number of groups that can be picked out at most.', 'd:\\oj\\data\\1634', 'd:\\oj\\data\\1634', '5 6 1\r\n20 10 23 10 24\r\n10 20 20 10 10 25', '4', 'For 50% cases,   0 < n, m <= 200\r\nFor 70% cases,   0 < n, m <= 2000\r\nFor 100% cases,  0 < n, m <= 20000, 0 <= D <= 20', 'nkpc6', '', '2010-06-09 18:13:00', 2000, 65536, 'N', NULL, 11, 38, 29, 27, 79, 9, 7, 30000, 36, ''),
(1635, 'Ensure The Future', 'There was a boy called Cothur. He felt himself so poor that he asked the goddess why he felt unhappy. The goddess said nothing, just led him to a strawberry garden. The goddess told Cothur there was a one-way path in the garden. And along this path there were many strawberries. Cothur could pick only one strawberry which he thought was the biggest, and he could not go back. Then Cothur followed the goddess''s saying. However, when Cothur came out from the path, he picked nothing. He said each time he wanted to pick one he thought there may be a bigger one waiting him, until he found there were no more strawberry.\r\nCothur''s friend Wisdo heard about this, and then he went to the goddess with Cothur and wanted a second chance. The goddess just smiled and told them they could have another chance with some rules. As Cothur had known where the biggest strawberry was, the goddess told them they had to pick five strawberries, and the second should not be bigger than the first, the third should not be bigger than the second, etc... They could still not go back to pick a previous one. And the fifth one they would pick should be as large as possible. Wisdo was so clever that he helped his friend finish this mission.\r\nAre you clever as Wisdo was?', 'First line contains one integer n, the number of strawberry.\r\nIn second line there are n integers, means the size of each strawberry.', 'Output the size of the fifth strawberry. You should follow the rules the goddess said.\r\nIf you think it is impossible to get a fifth strawberry while following rules above, just output -1.', 'd:\\oj\\data\\1635', 'd:\\oj\\data\\1635', '10\r\n1 5 4 5 4 5 2 5 3 2', '3', 'For 30% cases,   0 < n <= 50\r\nFor 50% cases,   0 < n <= 200\r\nFor 100% cases,  0 < n <= 10000, the size of strawberry will not be bigger than 106', 'nkpc6', '', '2010-05-15 19:17:53', 1000, 65536, 'N', NULL, 2, 2, 100, 0, 0, 2, 2, 30000, 33, ''),
(1636, 'Follow His Steps', 'Mr. Rebuil is a member of the programming interest group, as a new coming. Now he is worrying about his programming assignment. He has finished it but it turns out to be so inefficient that he has to rewrite it. As (one of) Mr. Rebuil''s best friend, you have to help him to finish it.\r\nMr. Rebuil''s program is following. You should rewrite it. Your program should get same output with Mr. Rebuil''s while inputting same input data. Your program should run fast enough.\r\n\r\n\r\n#include <iostream>\r\nusing namespace std;\r\n\r\nint n, m;\r\nint a[4], b[4], c[4];\r\n\r\nint main(){\r\n    cin >> n >> m;\r\n    cin >> a[0] >> a[1] >> a[2] >> a[3];\r\n    int i;\r\n    for (i = 0; i < 4; ++ i) a[i] %= m;\r\n    b[0] = b[3] = 1;\r\n    b[1] = b[2] = 0;\r\n    for (i = 0; i < n; ++ i){\r\n        c[0] = b[0] * a[0] + b[1] * a[2];\r\n        c[1] = b[0] * a[1] + b[1] * a[3];\r\n        c[2] = b[2] * a[0] + b[3] * a[2];\r\n        c[3] = b[2] * a[1] + b[3] * a[3];\r\n        b[0] = c[0] % m;\r\n        b[1] = c[1] % m;\r\n        b[2] = c[2] % m;\r\n        b[3] = c[3] % m;\r\n    }\r\n    cout << b[0] << '' '' << b[1] << endl;\r\n    cout << b[2] << '' '' << b[3] << endl;\r\n    return 0;\r\n}', 'You should analyze the program above and find out the input data form.', 'Output what Mr. Rebuil''s program will output.', 'd:\\oj\\data\\1636', 'd:\\oj\\data\\1636', '2 3\r\n8 6 7 5', '1 0\r\n1 1', 'For 30% cases,   0 <= n <= 100\r\nFor 100% cases,  0 <= n <= 2*109, 0 < m < 105', 'nkpc6', '', '2010-04-29 18:17:22', 1000, 65536, 'N', NULL, 2, 4, 50, 2, 50, 3, 2, 30000, 34, ''),
(1637, 'Geographic Superstition', 'Mr. Divid likes everything to be divided. All the number around him should be divided by an integer assigned by himself (always chosen by a special dice), or he will be very unhappy. He calls this "luck of dividing". However, to make all things related with divided number is really not easy.\r\nThis time Mr. Divid has a chance to buy a piece of land. He divides this piece land to n lines and m rows small pieces. All small pieces are quadrates with same area size. Then Mr. Divid assigns an integer number to each square piece. He wants to pick out a rectangle containing some small square pieces in which the sum of all the numbers can be divided by a given number D. It means he wants to pick out some small pieces of land, and they are conjoint and form a big rectangle. To make his luck bigger, he likes the rectangle to be as large as possible. Now this is your job.\r\n\r\n8	6	7	5	12\r\n7	9	9	11	7\r\n10	10	8	6	8\r\n8	10	11	6	13\r\nDivided by 23. Gray area is chosen part.', 'First line contains three integers, n, m and D which are described above.\r\nThen there are n lines and each line has m integers. These are the numbers in the small pieces.', 'You should output the area of the maximum rectangle Mr. Divid can pick out.', 'd:\\oj\\data\\1637', 'd:\\oj\\data\\1637', '4 5 23\r\n8 6 7 5 12\r\n7 9 9 11 7\r\n10 10 8 6 8\r\n8 10 11 6 13', '16', 'For 50% cases,    0 < n, m <= 40\r\nFor 100% cases,   0 < n, m <= 200, 0 < D <= 50000', 'nkpc6', '', '2010-05-13 14:51:25', 2000, 65536, 'N', NULL, 3, 26, 12, 22, 92, 2, 2, 30000, 27, ''),
(1638, 'Handy Service', 'Mr. Geomet is a citizen of the Kingdom of Polygon. There is a very large polygon lake in the public square in their capital city. This polygon lake is really beautiful. But it is so large that it makes travelling around it difficult. Mr. Geomet determines to offer people a service which can tell them how to travel around the lake easier. He entrusts you to finish one part of this job. He will tell you the coordinates of each vertex in the polygon lake and two points, A and B. You should calculate the minimum distance travelling from A to B without cross the polygon lake.\r\nAs the lake is very large, you can assume people can walk on the edge of the polygon.', 'First line contains only one integer n, means the number of vertexes in the polygon. There follows n lines each contains two integers means the coordinate of the vertex. The vertexes are given counter-clockwise.\r\nThe last line contains four integers which are the coordinates of point A and point B (Ax, Ay, Bx, By). Those two points will not be inside the polygon.\r\nYou should pay attention to that the lake may be a concave polygon.', 'You should output one line contains only one real number, which is the minimum distance travelling from A to B without cross the polygon lake. The answer should be rounded to three decimals.', 'd:\\oj\\data\\1638', 'd:\\oj\\data\\1638', '4\r\n0 0 \r\n1 0\r\n1 1\r\n0 1\r\n0 0 2 0', '2.000', 'For 100% cases, 2 < n < 30.', 'nkpc6', '', '2010-04-28 10:01:29', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 23, ''),
(1639, 'Imitate Game', 'You may have played a game like Bejewelled. There are some items of different types in an 8 * 8 matrix. These items are affected by the gravity. That means if there is a blank below an item it will fall down to fill the blank. The player can switch two adjacent items (horizontal or vertical). We call this an operation. If after one operation there are three or more same type items adjacent (horizontal or vertical), these items will be erased and the player will get a score equals the square of the number of erased items. Then the items may fall down to fill blank. If there still are some items can be erased, erased them, too. And add score to the player. Repeat until no more items can be erased. \r\nIf in one operation, the player wants to switch two blanks or switch two items not adjacent, this operation is invalid. But player can switches an item with a blank. If after an operation player can''t get any score, this operation is failed. After invalid and failed operation the items should be recovered where they were before the operation. Now you have to simulate this game.', 'First part of input is an 8 * 8 matrix. 8 lines and each lines contains 8 numbers, means the type of the item. A 0 means a blank.\r\nThen an integer m in the next line means the number of operations. And then there are m lines. Each line contains four integers. They are the coordinates of the items. Lines are numbered 1 to 8 from down to up; rows are numbered 1 to 8 from left to right.\r\nWe guarantee that no items should be erased at the beginning of game.', 'You should output m+1 lines. For each operation, if it''s an invalid operation, output a line contains "Invalid"; if it''s a failed operation, output a line contains "Failed"; if it''s a getting-score operation, output the score the player can get from this operation.\r\nAfter dealing with all the operations, you have to output the sum of the player score.\r\nThere may be no solutions in some situations. You have to ignore this and judge the player’s move.', 'd:\\oj\\data\\1639', 'd:\\oj\\data\\1639', '0 0 0 0 0 0 0 0\r\n0 0 0 0 0 0 0 0\r\n0 1 2 3 4 2 1 0\r\n0 1 2 3 4 2 1 0\r\n0 2 1 4 3 1 2 0\r\n4 5 6 7 7 6 5 4\r\n4 5 6 7 7 6 5 4\r\n5 4 7 6 6 7 4 5\r\n6\r\n1 1 1 2\r\n1 3 2 3\r\n1 2 3 2\r\n1 2 1 3\r\n2 1 3 1\r\n1 8 1 7', '36\r\n45\r\nInvalid\r\nFailed\r\nInvalid\r\n36\r\n117', 'For 100% cases,  0 < k <= 20', 'nkpc6', '', '2010-04-28 10:02:50', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 26, ''),
(1640, 'Pour Water', 'Mr. Moled has n column reservoirs underground, numbered from 1 to n. All of these reservoirs have a same sectional area. To connect these reservoirs, Mr. Moled digs m pipes. Each pipe connects exactly two reservoirs. And all the pipes are parallel with the ground. These pipes are so thin that they will not save any water. Now Mr. Moled will pour water into the reservoirs. You can assume the water passes through the pipes very quickly. Mr. Moled wants to know the height of the water in each reservoir at last. \r\nThings you should pay attention to:\r\n1.	If water overflows sometime, the overflowed water will flow away and be lost.\r\n2.	No two pipes have same depth. But a pipe may have same depth with one or two reservoirs which it connects.\r\n3.	The reservoir’s sectional area is 1.', 'There are three integers in the first line, n, m and k.\r\nThe second line contains n integers, means the depth of each reservoir.\r\nThe next m lines each contains three integers, a, b and d. This means there is a pipe at the depth d connecting reservoir a with reservoir b. \r\nThe next k lines. In each line there are two integers, i and v, means Mr. Moled pours v water into the ith reservoir.', 'You should output n lines and each line contains only one real number. The ith number means the volume of water in the ith reservoir. The answer should be rounded to two decimals.', 'd:\\oj\\data\\1640', 'd:\\oj\\data\\1640', '5 4 3\r\n3 4 5 6 7\r\n1 2 3\r\n2 3 4\r\n3 4 5\r\n4 5 6\r\n3 2\r\n3 2\r\n5 7', '0.20\r\n1.20\r\n2.20\r\n3.20\r\n4.20', 'For 100% cases, 0 < n <= 50, 0 < m <= 2000, 0 < k <= 100', 'nkpc6\r\nnkpc6', '', '2010-04-28 10:03:53', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 35, ''),
(1641, 'Problem A', '', '', '', 'd:\\oj\\data\\1641', 'd:\\oj\\data\\1641', '', '', '', '', '', '2010-10-29 16:16:20', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 2, ''),
(1642, '栈操作', '初始状态，存在一个空栈，我们都知道栈支持push和pop操作，push操作表示在栈顶增添一个元素，pop操作表示将栈顶元素删除。我们通过push和pop操作动态地改变这个栈的状态，现在的问题是，你能很快找出目前栈中的最小的元素吗？\r\n当然，如果栈中元素个数小于1，你将不能找到最小的元素。如果栈为空栈，你不能进行pop操作。', '多组输入,，不多于10，以0输入结束。\r\n	针对每组输入：首先输入一个正整数N（1<=N<=200000），下面有N行，每行输入格式可能有如下三种：\r\n	pop\r\n	push x（x代表一个正整数元素，其值不大于1000）\r\n	find', '针对每次输入的find，输出相应的最小元素，如果不存在，输出-1。当然如果有不合理的pop操作，输出“You Can''t Do Pop Operation !”，输出每行后都输出回车。处理完一组数据后，输出空行后再处理下一组数据。', 'd:\\oj\\data\\1642', 'd:\\oj\\data\\1642', '9\r\npop\r\npush 6\r\npush 5\r\npush 4\r\nfind\r\npop \r\nfind\r\npush 2\r\nfind\r\n\r\n6\r\npop\r\nfind	\r\npush 3\r\npush 5\r\npush 2\r\nfind\r\n0', 'You Can''t Do Pop Operation !\r\n4\r\n5\r\n2\r\n\r\nYou Can''t Do Pop Operation !\r\n-1\r\n2', '', '', '', '2011-07-31 11:15:32', 1000, 65535, 'N', NULL, 23, 116, 20, 92, 82, 23, 20, 30000, 190, ''),
(1643, 'Min and Max', '有一个由N个节点，M条边组成的无向图，假设源点S总位于节点1处，现在的问题是：只能删掉其中的一条边，按如下规则计算E的值：\r\n	首先针对某一次删边时，求出E’=Max（dist（s,i）），i的取值范围为2<=i<=N,dist（s，i）表示节点s到节点i的距离。\r\n	再求出所有删边对应E’中的最大值，对应表达式：E=Max｛E’｝\r\n	Max为取最大值操作。', '输入包含多组数据,针对每组数据：\r\n	第一行是两个整数N和M (2≤N≤200, 1≤M≤N*(N-1)/2)，含义如上所示。接下来M行，每行输入两个数a，b，代表节点a和节点b相连。任意两个节点之间最多只有一条直接相连的边。为了简单起见，假设所有直接相连边的权值都为1。\r\n	输入以0 0结束。', '输出对应的E值，如果对应删除某条边后导致某些节点永远不能到达，则输出-1.', 'd:\\oj\\data\\1643', 'd:\\oj\\data\\1643', '2 1\r\n	1 2\r\n	3 3\r\n	1 2\r\n	2 3\r\n	1 3\r\n	0 0', '-1\r\n	2', '', '', '', '2010-12-06 19:53:50', 3000, 65536, 'N', NULL, 8, 25, 32, 17, 77, 7, 5, 30000, 69, ''),
(1644, '棋盘状态', 'Description\r\n	给定两个棋盘A和B，棋盘的大小均为N*N，当然每个棋盘里都有相应的棋子，棋子的颜色有黑、白两种。现在你可以对棋盘A进行操作，每次操作时，你可以选择其中一个格子上的棋将其变成相反的颜色，但与该格相邻格子上棋子的颜色也会随之改变成相反颜色（如果存在），比如由白色变成黑色。现在的问题是：求最少的操作次数使棋盘A变成棋盘B。相邻的意思是，如果当前点为（i，j），则相邻四个点为（i，j+1），（i，j-1），（i+1，j），（i-1，j）。', '第一行输入一个数T（不大于100），代表下面共有T组数据。针对每组输入：首先输入一个正整数N（1<=N<=5），接下来输入两个N*N的01矩阵。1代表黑色，0代表白色。', '输出最小的操作次数，如果不管怎么操作都不能使得棋盘A的状态变成棋盘B的状态，则输出-1。', 'd:\\oj\\data\\1644', 'd:\\oj\\data\\1644', '2\r\n	3\r\n	1 1 0\r\n	1 0 0\r\n	0 0 0\r\n	0 0 0\r\n	0 0 0\r\n	0 0 0\r\n	\r\n	2\r\n	1 0\r\n	0 1\r\n	0 1\r\n	1 0', '1\r\n	4', '', '', '', '2010-11-08 17:42:32', 1000, 65536, 'N', NULL, 4, 22, 18, 18, 86, 7, 3, 30000, 51, ''),
(1645, '扑克游戏', '有一种叫做“锄大地”的扑克游戏，首先明确一下扑克牌的表示方法。\r\n花色表示\r\n黑桃(Spade)、红桃(Heart)、梅花(Club) 、方片(Diamond)\r\n单张牌的从大到小排序(10用T表示)：\r\n先看牌的值，A 然后K、Q、J、T、9、… 2。\r\n牌值一样看花色，S然后H、C、D\r\n总排序如下：AS AH AC AD KS KH KC KD QS QH QC QD JS JH JC JD … 2S 2H 2C 2D\r\n锄大地的规则很简单，但july懒得去思考哪五张牌比较大，请你帮他写个程序判断大小。五张牌有如下五种类型：\r\n同花顺：每张牌的花色都相同的顺称为同花顺。标志牌:最大那张。\r\n	例如：6S 5S 4S 3S 2S。标志牌:6S\r\n四个带单张：四个同样值的牌加一张牌。标志牌:四张牌中的黑桃牌\r\n	例如： 9S 9H 9C 9D 5S。标志牌:9S\r\n三个带一对：三个同样值的牌加一对。标志牌:三张一样中最大的那张\r\n	例如：9S 9C 5S 5H 5C。标志牌:5S\r\n同花五：由相同花色的五张牌组成，但不是顺。标志牌：最大那张\r\n	例如：9S 7S 6S 3S 2S。标志牌:9S\r\n杂顺：花色不全部相同的顺称为杂顺。标志牌：最大那张\r\n	例如：6S 5C 4D 3H 2D。标志牌:6S\r\n	 (顺：连续五张牌点相邻的牌，如"76543"等，顺的张数必须是5张。为了方便操作，本题如果A作为顺子只能出现在最前。)\r\n	五张牌的牌型中，同花顺最大，四个带单张第二，三个带一对第三，同花五第四，杂顺最小。而同种类型的牌看标志牌。', '输入整数N(N<100)表示有N组判断。 \r\n每组判断有两份牌，每份5张牌。牌与牌之间用空格隔开。（输入的每5张牌定属于题目描述5种类型的一种，且从大到小给出）', '对每组数据，如果第一份牌大，输出first；如果第二份牌大，输出second；否则输出equal。', 'd:\\oj\\data\\1645', 'd:\\oj\\data\\1645', '2\r\n6S 5S 4S 3S 2S 9S 9H 9C 9D 5S\r\n9S 9H 9C 9D 5S 9S 9H 9C 9D 5S', 'first\r\nequal', '', '', '', '2012-03-03 08:57:42', 1000, 65536, 'N', NULL, 6, 29, 21, 23, 79, 8, 6, 30000, 58, ''),
(1646, '迷宫与宝藏', '机器人要在一个矩形迷宫里行动（不能原地停留，只能走向上/下/左/右），每移动一格花费1个单位时间。\r\n\r\n	迷宫有以下几种元素：\r\n	【*】 机器人的起点\r\n	【#】 墙。机器人不能走过这些格子\r\n	【.】 平地。机器人可以在上面自由行走\r\n	【0-9】 宝藏。当机器人走到此处会立刻获得该数字相应的宝藏，宝藏不会消失，可以反复获取（但不能停留）\r\n\r\n若机器人要恰好获得总和为x的宝藏，它最少需要多少时间？', '第一行输入任务数量T, 接下来有T个任务\r\n每块第一行有两个整数, n( < 100), m( < 100), 表示迷宫有n+1行和m+1列,输出迷宫地图。\r\n最后一行输入你要收集的宝藏的总价值x(x ≤ 100)', '对于每个任务，输出最少花费的时间，如果完成不了该任务则输出-1', 'd:\\oj\\data\\1646', 'd:\\oj\\data\\1646', '3\r\n\r\n2 3\r\n1.#2\r\n#..#\r\n*.#.\r\n3\r\n\r\n2 3\r\n2.#2\r\n#..#\r\n*.#.\r\n5\r\n\r\n2 3\r\n2.#2\r\n#.3#\r\n*.#.\r\n5', '8\r\n-1\r\n6', '', '', '', '2012-08-20 10:44:29', 2000, 65536, 'N', NULL, 19, 70, 27, 44, 85, 10, 8, 30000, 229, ''),
(1647, '命运年轮', '概率论的起源与赌博问题有关。16世纪，意大利的学者吉罗拉莫·卡尔达诺（Girolamo Cardano，1501——1576）开始研究掷骰子等赌博中的一些简单问题。17世纪中叶，当时的法国宫廷贵族里盛行着掷骰子游戏，游戏规则是玩家连续掷 4 次骰子，如果其中没有 6 点出现，玩家赢，如果出现一次 6 点，则庄家（相当于现在的赌场）赢。按照这一游戏规则，从长期来看，庄家扮演赢家的角色，而玩家大部分时间是输家，因为庄家总是要靠此为生的，因此当时人们也就接受了这种现象。\r\n\r\n那么现在让我们来计算一个概率问题。\r\n一个骰子有n（4≤n≤8）个面，随机投掷m（1≤m≤32）次，请计算出现连续最长x个相同面的概率。', '输入只含2个整数，依次表示n、m，以空格隔开。', '输出m行，第i行输出x=i的概率。（结果请四舍五入到小数点后第3位。）', 'd:\\oj\\data\\1647', 'd:\\oj\\data\\1647', '4 5', '0.316\r\n0.527\r\n0.129\r\n0.023\r\n0.004', '', '', '', '2010-10-30 12:38:07', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 33, ''),
(1648, '矩阵操作', '在一个很大的矩阵上（矩阵的行和列小于或等于1000000000），你可以对它进行三种操作：\r\nadd：对矩阵某行某列进行标记，当然该位置之前没有被标记过。\r\nremove：撤销某行某列的标记，当然在撤销之前，该位置被标记过。\r\nfind：给两个值r和c，分别代表行和列，查找满足条件的r’和c’。r’，c’满足条件是：r’&gt;r且c’&gt;c且位置(r’,c’)被标记过，如果有多组解，输出行最小的，如果仍还有多组解，输出列最小的，如果没有解，输出-1。\r\n初始状态，矩阵都没有被标记。', '多组输入,，以0代表输入结束。\r\n	针对每组输入：首先输入一个正整数N（1<=N<=200000），代表下面有N个操作。每个操作可能有如下三种形式：\r\n	add r c\r\n	remove r c\r\n	find r c\r\n	r c 分别代表行和列。', '针对每组数据，首先输出“Case i:”(i=1,2,3…)，然后针对每组数据的find操作，输出相应答案，处理完一组数据后，再输出一空行。', 'd:\\oj\\data\\1648', 'd:\\oj\\data\\1648', '4\r\n	add 2 3\r\n	find 1 2\r\n	remove 2 3\r\n	find 1 2\r\n\r\n	4\r\n	add 2 3\r\n	find 1 2\r\n	remove 2 3\r\n	find 1 2\r\n\r\n	0', 'Case 1:\r\n	2 3\r\n	-1\r\n\r\n	Case 2:\r\n	2 3\r\n	-1', '', '', '', '2010-10-30 12:40:34', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 39, ''),
(1649, 'String stack', '一个字符串从头到尾按照一定顺序进栈出栈可以变成另一个字符串。', '多组测试数据。\r\n每组数据一个只包含小写字母的字符串，长度不超过10^6。', '输出字典序最小的出栈字符串。\r\n每组数据占一行。', 'd:\\oj\\data\\1649', 'd:\\oj\\data\\1649', 'haba\r\nachab', 'aabh\r\naabhc', '', '', '', '2010-12-01 21:57:29', 1000, 65536, 'N', NULL, 3, 22, 14, 19, 86, 6, 3, 30000, 53, ''),
(1650, '分割数列', '给你N个正整数，要求把它分割成连续的若干段，要求每段的和不大于M，使每段的最小值之和最小。', '多组测试数据。\r\n每组数据第一行两个整数N（0<N< = 100000）和M (0<M< = 10^8).\r\n随后是N个正整数，每个整数都不大于 M。', '输出满足条件的最小值。每组数据占一行。', 'd:\\oj\\data\\1650', 'd:\\oj\\data\\1650', '5 7\r\n1 4 2 5 3\r\n5 8\r\n1 4 2 5 3', '6\r\n4\r\nHint\r\nTest1： 1 4 | 2 5 | 3  => 1+2+3 =6 \r\nTest2： 1 4 2 | 5 3   =>1+3 = 4', '', '', '', '2010-11-03 11:07:14', 1000, 65536, 'N', NULL, 5, 33, 15, 24, 92, 3, 2, 30000, 51, ''),
(1651, '西科大的树', '西科大新区道路旁种了很多树，这些树慢慢长大了。这时人们发现，这些树显得过于密集，需要砍掉其中一些。假设原本相邻两棵树之间的距离是1，要求砍掉一些之后：\r\n任意相邻两棵树之间的距离至少是K。\r\n尽可能使剩下的树的高度之和最大。\r\n在满足A、B的基础上，尽可能使剩下的树中最矮的树最高。', '多组测试数据。\r\n每组数据两个整数N（ 0 < N < =100000）和K（0 < K < = 100000），然后是N个整数，代表这条道路旁树的高度，这些数据都是按顺序给出的。', '输出剩下的树的高度之和的最大值和剩下的树中最矮的树的最大值。\r\n每组数据占一行。', 'd:\\oj\\data\\1651', 'd:\\oj\\data\\1651', '10 3\r\n3 4 7 2 9 1 4 9 6 8', '22 4', '', '', '', '2012-05-18 16:02:14', 1000, 65536, 'N', NULL, 14, 38, 37, 22, 79, 6, 6, 30000, 352, ''),
(1652, '西科大的树', '西科大新区道路旁种了很多树，这些树慢慢长大了。这时人们发现，这些树显得过于密集，需要砍掉其中一些。假设原本相邻两棵树之间的距离是1，要求砍掉一些之后：\r\n任意相邻两棵树之间的距离至少是K。\r\n尽可能使剩下的树的高度之和最大。\r\n在满足A、B的基础上，尽可能使剩下的树中最矮的树最高。', 'Input\r\n多组测试数据。\r\n每组数据两个整数N（0<N< =100000）和K（0<K<= 100000），然后是N个整数，代表这条道路旁树的高度，这些数据都是按顺序给出的。', 'Output\r\n输出剩下的树的高度之和的最大值和剩下的树中最矮的树的最大值。\r\n每组数据占一行。', 'd:\\oj\\data\\1652', 'd:\\oj\\data\\1652', 'Sample Input\r\n10 3\r\n3 4 7 2 9 1 4 9 6 8', 'Sample Output\r\n22 4', '', '', '', '2010-10-30 13:30:55', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 1, ''),
(1653, 'Easy Problem', '有如下一个函数f,不知道具体的表达式,但知道具有如下的性质\r\n\r\n \r\n1.定义域是正整数域,值域是整数域.\r\n\r\n2.f(1)=0\r\n \r\n3.f(2*m)=2*f(m)+1\r\n\r\n4.f是严格递增函数,即如果m>n那么f(m)>f(n).\r\n \r\n并且我们知道用上面的性质就可以唯一确定f的表达式,现在给你一个正整数x,要求输出对应的函数值f(x)', '输入文件包含多组测试数据。\r\n第一行输入T，表示有T组数据。\r\n下面的T行，每一行给出一个正整数x,<font color=red>0< x<=100000000</font>.', '对应每组输入,输出一行,每行只有一个正整数,代表了x对应的函数值f(x).', 'd:\\oj\\data\\1653', 'd:\\oj\\data\\1653', '2\r\n1\r\n2', '0\r\n1', '', 'swust20095862', '', '2012-03-19 19:57:45', 1000, 65536, 'N', NULL, 52, 85, 61, 32, 40, 54, 49, 30000, 254, ''),
(1654, '公交换号', '本市8字头公交车路号本月将完成更换，所有8字头线路路号全部空出，为下一步规范9字头公交线路路号做出准备。 以下为公交车换号对应关系：\r\n\r\n801  601\r\n802  99\r\n808  608\r\n810  609\r\n814  614\r\n823  623\r\n826  626\r\n836  617\r\n846  619\r\n849  620\r\n852  621', '多组测试数据，以EOF结束。\r\n每一组测试数据，输入一个整数n（n<100），接下来有n个公交车号。', '对于每一组测试数据。\r\n输出换号后的公交车号，两个车号之间以空格隔开。', 'd:\\oj\\data\\1654', 'd:\\oj\\data\\1654', '5 110 498 826 731 331', '110 498 626 731 331', '', 'swust20095862', '', '2012-05-06 14:24:44', 1000, 65536, 'N', NULL, 43, 79, 54, 36, 46, 48, 42, 30000, 271, ''),
(1655, '简单的生活', 'clm喜欢简单的生活，她每天只做三种事，吃饭、睡觉、写程序。', '多组测试数据，读到EOF为止。每一组数据先给出一个整数n（n<20），表示她今天做了n件事，接下来有n行，每行有一个大写字母（S, E, C），和一个整数（小于24）。S表示睡觉sleep， E表示吃饭 eat，C表示写程序coding。', '对于每一组数据输出一行。如果吃饭、睡觉、写程序的时间加起来超过24小时，输出“Each day only has 24 hours!”，如果总时间小于等于24，但coding累加的时间小于8小时clm会因为工作的时间太少而感到内疚，输出 “Clm feels guilty!”，否则输出“It''s a nice day!”', 'd:\\oj\\data\\1655', 'd:\\oj\\data\\1655', '5\r\nS 4\r\nE 5\r\nC 6\r\nS 4\r\nC 5', 'It''s a nice day!', '注意数据的读入。\r\nscanf(" %c %d",&c,&a);\r\nscanf("%s%d",s,&a);', 'swust20095862', '', '2012-03-25 17:29:17', 1000, 65536, 'N', NULL, 52, 124, 42, 57, 55, 51, 47, 30000, 302, ''),
(1656, 'A luck number 2', '8是topcoder的幸运数，但是，8的n次方也被认为是幸运数，现在给你一个数x，请判断他是否为幸运数。', '多组测试数据。\r\n每行输入一个数x（在int）范围以内。', '如果这个数是幸运数，输出Yes，如果不是输出No', 'd:\\oj\\data\\1656', 'd:\\oj\\data\\1656', '8\r\n16\r\n64', 'Yes\r\nNo\r\nYes', '', 'bingshen', '', '2012-05-28 15:13:39', 1000, 65536, 'N', NULL, 48, 193, 25, 140, 76, 52, 44, 30000, 445, ''),
(1657, '圆的划分问题', '在一个无限延伸平面上有一个圆和n条直线，这些直线中每一条都在一个圆内，并且同其他所有的直线相交，假设没有3条直线相交于一点，试问这些直线<font color=red>最多&lt;/font>将圆分成多少区域。', '第一行包含一个整数T，(0< T<=100)表示测试次数。\r\n每组测试数据包含一个整数N（&lt;font color=red>0<=N<=10000000</font>），表示直线的条数。', '对于每一组测试数据，输出这个圆能被这N条直线分成的<font color=red>最多&lt;/font>区域数。', 'd:\\oj\\data\\1657', 'd:\\oj\\data\\1657', '2\r\n1\r\n2', '2\r\n4', '<font color=red>N可能等于0.<br/>输出范围可能达到64位整数。&lt;/font>\r\n64位整数详见&lt;a href="faq.htm#int64">F.A.Q</a>', 'swust20095862', '', '2012-07-19 17:07:43', 1000, 65536, 'N', NULL, 32, 144, 22, 67, 73, 29, 25, 30000, 252, ''),
(1658, 'Skateboarding game', '西科大的东七楼下广场比较宽阔，所以每天有很多的同学在那里练习滑板，但是每天重复着练习也使得他们感到相当的乏味。\r\n一天茂哥有一个主意，他和他的朋友们决定玩一个小游戏，他们在广场的地面上画了一些如图的矩形，每个矩形内部都被分成了小的正方形，假设每个小正方形的边长都为1m，然后他们开始游戏，规则是以左下角顶点为起点要求滑到右上角的顶点，每次只能往上和右两个方向滑，看谁能够准确的计算出从起点滑到终点有多少种方案。\r\n但是他们发现这并不是他们所想的那么简单，当矩形越来越大时他们甚至感觉不可能计算出来，因为会滑的很累。茂哥计算了一下，的确，当矩形长和宽都只有15米时他们即使滑上一天也不可能实地计算完。聪明的你能够计算出相应的矩形从起点滑到终点有多少种方案吗？\r\n<img src="images\\1658.jpg"></img>', '题目输入有多组数据，每行输入n和m的值，分别表示矩形的长和宽，因为广场并不是很大，假设1=< n,m<=15，当n=m=0时输入结束。', '输出方案种数。', 'd:\\oj\\data\\1658', 'd:\\oj\\data\\1658', '5 4\r\n10 8\r\n15 15\r\n0 0', '126\r\n43758\r\n155117520', '输出不会超出int数据范围。\r\n但是注意中间过程超过int型。', 'duanxian', '', '2012-04-07 23:21:17', 1000, 65536, 'N', NULL, 28, 46, 61, 17, 45, 25, 21, 30000, 266, ''),
(1659, 'X问题', '求在小于等于N的整数中有多少个X满足：X mod a[0] = b[0], X mod a[1] = b[1], X mod a[2] = b[2], …, X mod a[i] = b[i], … (0 < a[i] <= 100)。', '测试数据的第一行为两个正整数N，M (0 < N <= 10000 , 0 < M <= 10)，表示X小于等于N，数组a和b中各有M个元素。接下来两行，每行各有M个整数，分别为a和b中的元素。', '输出数据共两行：\r\n第一行为一个正整数，表示满足条件的X的个数sum。\r\n第二行输出按升序输出符合条件的sum个数，中间用空格隔开（注意最后一个数后面没有空格）。', 'd:\\oj\\data\\1659', 'd:\\oj\\data\\1659', '100 4 \r\n1 2 3 5\r\n0 1 2 4', '3\r\n29 59 89', '', 'liuyin', '', '2012-04-02 21:20:02', 1000, 65536, 'N', NULL, 22, 73, 30, 47, 71, 19, 19, 30000, 254, ''),
(1660, '小邪的烦恼', '小邪酷爱吃橘子，但他的橘子总是被同学们“打劫”。虽然小邪很大方，喜欢和同学们分享他的橘子，但如果和他分享的人太多，他自己就没有橘子吃啦！所以小邪希望找到一个和同学们分享橘子的方案。假设小邪一共有N个橘子，他自己希望至少保留M个给自己吃。小邪一共有K个同学，友好程度可以用一个正整数表示，数值越大表示友好程度越高，而每个同学想得到的橘子数不一定相同。小邪每次都会优先选择和自己关系比较好的同学分享橘子，并且一定会尽量满足他对橘子个数的需求。在此条件下，请你算出小邪最多能和几个同学分享橘子。', '输入有多组测试数据\r\n对于每组测试数据\r\n第1行：3个正整数N、M、K\r\n第2~K+1行：每行2个正整数，分别表示表示每个同学对橘子的需求数和与小邪的友好程度。\r\n（对于所有输入均在 0~1000 以内）', '对于每一组输入\r\n输出一个正整数表示小邪最多能与多少同学分享橘子。', 'd:\\oj\\data\\1660', 'd:\\oj\\data\\1660', '10 2 5\r\n1 30\r\n2 15\r\n1 10\r\n4 25\r\n2 20', '4', '', 'liuyin', '', '2012-03-19 19:47:03', 1000, 65536, 'N', NULL, 20, 139, 14, 104, 87, 23, 15, 30000, 219, ''),
(1661, '级数求和', '已知：Sn= 1＋1／2＋1／3＋…＋1／n。显然对于任意一个整数K，当n足够大的时候，Sn大于K。　　\r\n现给出一个整数k（1<=k<=15），要求计算出一个最小的n:使得Sn＞K。', '输入有多组数据\r\n输入k\r\n当k=0是输入结束', '输出 n', 'd:\\oj\\data\\1661', 'd:\\oj\\data\\1661', '1\r\n0', '2', '', 'liuyin', '', '2012-05-05 14:54:51', 1000, 65536, 'N', NULL, 43, 97, 44, 53, 58, 45, 39, 30000, 344, ''),
(1662, '约会', '有一天lotus和smiles同学一同去教室上自习。smiles百无聊赖地看着书本，觉得很无聊，看着右手边的lotus认真仔细的在画着她繁重的物理实验报告的图。smiles无聊地弄着他的冰红茶瓶子，结果一不小心就把瓶盖弄到了lotus刚画好的坐标纸上，而且冥冥之中仿佛有一双手在安排，瓶盖的中心正好和坐标纸的中心重合了，瓶盖的边缘有水，会弄湿坐标纸的。lotus很生气，后果很严重。\r\n于是，lotus由此情形想出了一道难题问smiles,如果他回答正确了。lotus就原谅了smiles并且答应他星期天去吃大餐的请求，不然一切都免谈。然后smiles就回去面壁思过了，现在smiles好无助的，希望得到广大编程爱好者的好心帮助。\r\n\r\n问题是这样的: lotus现在手上有一张2n * 2n的坐标纸，而smiles的圆形瓶盖的直径正好有2*n-1大，现在lotus想知道 smiles到底弄湿了多少个坐标纸的格子（坐标纸是由1 * 1的小格子组成的表格）\r\n\r\n如果还是有人觉得理解不了焦急的smiles的意思。干脆smiles做下翻译，毕竟smiles还是多了解lotus的O(∩_∩)O~。\r\n问题就是给你一个2n * 2n的正方形格子，分成1 * 1的格子，然后以中心为原点画一个直径为2n - 1的圆，问圆的周线穿过了多少个格子。\r\n<img src="images\\1662.png"></img>', '含有多组测试数据，每组数据都包含一个正整数n（n <= 1000）。\r\n当n = 0的时候结束程序，证明smiles经受住考验了的O(∩_∩)O~', '对于每个n，输出被瓶盖边缘的水弄湿了的格子数为多少。', 'd:\\oj\\data\\1662', 'd:\\oj\\data\\1662', '1\r\n2\r\n0', '4\r\n12', '', 'smiles', '', '2012-07-12 12:59:21', 1000, 65536, 'N', NULL, 20, 30, 67, 10, 33, 23, 20, 30000, 171, ''),
(1663, '汽水瓶', '有这样一道智力题：“某商店规定：三个空汽水瓶可以换一瓶汽水。小张手上有十个空汽水瓶，她最多可以换多少瓶汽水喝？”答案是5瓶，方法如下：先用9个空瓶子换3瓶汽水，喝掉3瓶满的，喝完以后4个空瓶子，用3个再换一瓶，喝掉这瓶满的，这时候剩2个空瓶子。然后你让老板先借给你一瓶汽水，喝掉这瓶满的，喝完以后用3个空瓶子换一瓶满的还给老板。如果小张手上有n个空汽水瓶，最多可以换多少瓶汽水喝？', '输入文件最多包含10组测试数据，每个数据占一行，仅包含一个正整数n（1<=n<=100），表示小张手上的空汽水瓶数。n=0表示输入结束，你的程序不应当处理这一行。', '对于每组测试数据，输出一行，表示最多可以喝的汽水瓶数。如果一瓶也喝不到，输出0。', 'd:\\oj\\data\\1663', 'd:\\oj\\data\\1663', '3\r\n10\r\n81\r\n0', '1\r\n5\r\n40', '', 'Hunan CPC6', '', '2012-03-19 23:51:23', 1000, 65536, 'N', NULL, 47, 66, 71, 18, 31, 42, 41, 30000, 197, ''),
(1664, '弟弟的作业', '你的弟弟刚做完了“100以内数的加减法”这部分的作业，请你帮他检查一下。每道题目（包括弟弟的答案）的格式为a+b=c或者a-b=c，其中a和b是作业中给出的，均为不超过100的非负整数；c是弟弟算出的答案，可能是不超过200的非负整数，也可能是单个字符"?"，表示他不会算。', '输入文件包含不超过100行，以文件结束符结尾。每行包含一道题目，格式保证符合上述规定，且不包含任何空白字符。输入的所有整数均不含前导0。', '输出仅一行，包含一个非负整数，即弟弟答对的题目数量。', 'd:\\oj\\data\\1664', 'd:\\oj\\data\\1664', '1+2=3\r\n3-1=5\r\n6+7=?\r\n99-0=99', '2', '', 'Hunan CPC6', '', '2012-04-09 23:48:55', 1000, 65536, 'N', NULL, 21, 47, 45, 25, 54, 23, 21, 30000, 186, ''),
(1665, '数字整除', '定理：把一个至少两位的正整数的个位数字去掉，再从余下的数中减去个位数的5倍。当且仅当差是17的倍数时，原数也是17的倍数 。\r\n例如，34是17的倍数，因为3-20=-17是17的倍数；201不是17的倍数，因为20-5=15不是17的倍数。输入一个正整数n，你的任务是判断它是否是17的倍数。', '输入文件最多包含10组测试数据，每个数据占一行，仅包含一个正整数n（1<=n<=10^100），表示待判断的正整数。n=0表示输入结束，你的程序不应当处理这一行。', '对于每组测试数据，输出一行，表示相应的n是否是17的倍数。1表示是，0表示否。', 'd:\\oj\\data\\1665', 'd:\\oj\\data\\1665', '34\r\n201\r\n2098765413\r\n1717171717171717171717171717171717171717171717171718\r\n0', '1\r\n0\r\n1\r\n0', '', 'Hunan CPC6', '', '2012-04-04 10:34:10', 1000, 65536, 'N', NULL, 14, 30, 47, 15, 63, 11, 9, 30000, 112, ''),
(1666, '台球碰撞', '在平面直角坐标系下，台球桌是一个左下角在(0,0)，右上角在(L,W)的矩形。有一个球心在(x,y)，半径为R的圆形母球放在台球桌上（整个球都在台球桌内）。受撞击后，球沿极角为a的射线（即：x正半轴逆时针旋转到此射线的角度为a）飞出，每次碰到球桌时均发生完全弹性碰撞（球的速率不变，反射角等于入射角）。\r\n	\r\n<img src="images/1666.png"></img>\r\n如果球的速率为v，s个时间单位之后球心在什么地方？', '输入文件最多包含25组测试数据，每个数据仅一行，包含8个正整数L,W,x,y,R,a,v,s（100<=L,W<=10^5, 1<=R<=5, R<=x<=L-R, R<=y<=W-R, 0<=a<360, 1<=v,s<=10^5），含义见题目描述。L=W=x=y=R=a=v=s=0表示输入结束，你的程序不应当处理这一行。', '对于每组数据，输出仅一行，包含两个实数x, y，表明球心坐标为(x,y)。x和y应四舍五入保留两位小数。', 'd:\\oj\\data\\1666', 'd:\\oj\\data\\1666', '100 100 80 10 5 90 2 23\r\n110 100 70 10 5 180 1 9999\r\n0 0 0 0 0 0 0 0', '80.00 56.00\r\n71.00 10.00', '', 'Hunan CPC6', '', '2010-12-10 14:02:56', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 55, ''),
(1667, '内部收益率', '在金融中，我们有时会用内部收益率IRR来评价项目的投资财务效益，它等于使得投资净现值NPV等于0的贴现率。换句话说，给定项目的期数T、初始现金流CF0和项目各期的现金流CF1, CF2, ...，CFT，IRR是下面方程的解：\r\n\r\n<img src="images/1667.png"></img>\r\n为了简单起见，本题假定：除了项目启动时有一笔投入（即初始现金流CF0 < 0）之外，其余各期均能赚钱（即对于所有i=1,2,...,T，CFi > 0）。根据定义，IRR可以是负数，但不能大于-1。', '输入文件最多包含25组测试数据，每个数据占两行，第一行包含一个正整数T（1<=T<=10），表示项目的期数。第二行包含T+1个整数：CF0, CF1, CF2, ..., CFT，其中CF0 < 0, 0 < CFi < 10000 (i=1,2,...,T)。T=0表示输入结束，你的程序不应当处理这一行。', '对于每组数据，输出仅一行，即项目的IRR，四舍五入保留小数点后两位。如果IRR不存在，输出"No"，如果有多个不同IRR满足条件，输出&quot;Too many"（均不含引号）', 'd:\\oj\\data\\1667', 'd:\\oj\\data\\1667', '1\r\n-1 2\r\n2\r\n-8 6 9\r\n0', '1.00\r\n0.50', '', 'Hunan CPC6', '', '2012-04-15 19:59:18', 1000, 65536, 'N', NULL, 12, 36, 33, 22, 76, 7, 7, 30000, 169, '');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1668, 'Biggest Number', 'You have a maze with obstacles and non-zero digits in it:\r\n\r\n\r\n<img src="images/1668.png"></img>\r\nYou can start from any square, walk in the maze, and finally stop at some square. Each step, you may only walk into one of the four neighbouring squares (up, down, left, right) and you cannot walk into obstacles or walk into a square more than once. When you finish, you can get a number by writing down the digits you encounter in the same order as you meet them. For example, you can get numbers 9784, 4832145 etc. The biggest number you can get is 791452384, shown in the picture above.\r\n\r\nYour task is to find the biggest number you can get.', 'There will be at most 25 test cases. Each test begins with two integers R and C (2<=R,C<=15, R*C<=30), the number of rows and columns of the maze. The next R rows represent the maze. Each line contains exactly C characters (without leading or trailing spaces), each of them will be either ''#'' or one of the nine non-zero digits. There will be at least one non-obstacle squares (i.e. squares with a non-zero digit in it) in the maze. The input is terminated by a test case with R=C=0, you should not process it.', 'For each test case, print the biggest number you can find, on a single line.', 'd:\\oj\\data\\1668', 'd:\\oj\\data\\1668', '3 7\r\n##9784#\r\n##123##\r\n##45###\r\n0 0', '791452384', '', 'Hunan CPC6', '', '2011-03-15 18:32:18', 1000, 65536, 'N', NULL, 0, 6, 0, 6, 100, 3, 0, 30000, 109, ''),
(1669, 'Repairing a Road', 'You live in a small town with R bidirectional roads connecting C crossings and you want to go from crossing 1 to crossing C as soon as possible. You can visit other crossings before arriving at crossing C, but it’s not mandatory. \r\n\r\nYou have exactly one chance to ask your friend to repair exactly one existing road, from the time you leave crossing 1. If he repairs the i-th road for t units of time, the crossing time after that would be vi*ai^(-t). It''s not difficult to see that it takes vi units of time to cross that road if your friend doesn’t repair it.\r\n\r\nYou cannot start to cross the road when your friend is repairing it.', 'There will be at most 25 test cases. Each test case begins with two integers C and R (2<=C<=100, 1<=R<=500). Each of the next R lines contains two integers xi, yi (1<=xi, yi<=C) and two positive floating-point numbers vi and ai (1<=vi<=20,1<=ai<=5), indicating that there is a bidirectional road connecting crossing xi and yi, with parameters vi and ai (see above). Each pair of crossings can be connected by at most one road. The input is terminated by a test case with C=R=0, you should not process it.', 'For each test case, print the smallest time it takes to reach crossing C from crossing 1, rounded to 3 digits after decimal point. It’s always possible to reach crossing C from crossing 1.', 'd:\\oj\\data\\1669', 'd:\\oj\\data\\1669', '3 2\r\n1 2 1.5 1.8\r\n2 3 2.0 1.5\r\n2 1\r\n1 2 2.0 1.8\r\n0 0', '2.589\r\n1.976', '', 'Hunan CPC6', '', '2010-12-10 14:06:14', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 78, ''),
(1670, '射击游戏', 'A和B在玩一个射击游戏，战场由若干单位正方形积木组成。积木占据了连续的若干列，且图形周长等于它最小包围矩形的周长。下图(a)是一个合法的战场，但(b)和(c)都不是：(b)中有空列；(c)的图形周长为14，而最小包围矩形（用虚线画出）的周长为12。受重力影响，每个积木的正下方要么是地面，要么是另一个积木。为了让战场看上去错落有致、玩着更刺激，它不能恰好是一个矩形（即：不能每列积木都一样高）。\r\n	<img src="images/16700.png"></img>\r\n\r\n	游戏规则如下：\r\nA和B轮流射击，A先射击。\r\n每次射击时，首先选择一行（该行必须至少有一个积木），以及“左”和“右”中的一个方向，然后往这个方向开火。子弹的威力为1~3的均匀随机整数（即：威力为1、2、3的概率各为1/3），表示子弹能打掉的积木个数，被打掉的积木将直接从战场中消失。如果该行的积木个数小于威力值，则子弹将在打掉该行所有积木后消失。例如，若选择往右射击从下往上数第3行，且威力为2，且这一行一共有4个积木，则最左边的两个积木将被打掉。注意：这两个积木可以不连续。 \r\n每次射击完成后，悬空的积木垂直往下落。所有积木不再下落后，下一位选手才能开始射击。\r\n谁打掉了最后一个积木，谁就获胜。\r\n\r\n	假定开局是&lt;img src="images/1670s.png"></img>，根据规则1，A先开火。射击后，B可能面临的后续局面中的其中三个如下表：\r\n	\r\n行编号（从下往上数）	子弹前进方向	威力（随机值）		刚射击后	积木稳定后\r\n	2	       从右往左		1		<img src="images/16701.png"></img>	<img src="images/16701.png"></img>\r\n	1	       从右往左		2		<img src="images/16702.png"></img>		<img src="images/16703.png"></img>\r\n	1	       从左往右		3		<img src="images/16704.png"></img>		<img src="images/16705.png"></img>\r\n	\r\n	假定A和B都足够聪明，采取让自己获胜概率尽量高的策略，你的任务是计算出A获胜的概率。', '输入文件最多包含25组测试数据，每个数据仅包含两行，第一行是整数n（1<=n<=6），即积木的列数。第二行包含n个正整数h1, h2,..., hn(1<=hi<=6)，表示从左往右数第i列的高度。积木的排列方式保证符合题目描述（即：图形周长等于它最小包围矩形的周长，且各列的高度不全相同）。n=0表示输入结束，你的程序不应当处理这一行。', '对于每组数据，输出仅一行，即A获胜的概率，四舍五入保留六位小数。', 'd:\\oj\\data\\1670', 'd:\\oj\\data\\1670', '3\r\n2 1 1\r\n0', '0.555556', '', 'Hunan CPC6', '', '2010-12-10 14:10:06', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 99, ''),
(1671, '战场的数目', '在上题中，假设战场的图形周长为p，一共有多少种可能的战场？\r\n\r\n例如，p<8时没有符合要求的战场，p=8时有2种战场：\r\n<img src="images/1671.png"></img>\r\np=10有9种战场：\r\n<img src="images/16711.png"></img>\r\n\r\n要求输出方案总数模987654321的值。', '输入文件最多包含25组测试数据，每个数据仅包含一行，有一个整数p（1<=p<=10^9），表示战场的图形周长。p=0表示输入结束，你的程序不应当处理这一行。', '对于每组数据，输出仅一行，即满足条件的战场总数除以987654321的余数。', 'd:\\oj\\data\\1671', 'd:\\oj\\data\\1671', '7\r\n8\r\n9\r\n10\r\n0', '0\r\n2\r\n0\r\n9', '', 'Hunan CPC6', '', '2010-12-11 11:03:04', 1000, 65536, 'N', NULL, 0, 3, 0, 3, 100, 1, 0, 30000, 104, ''),
(1672, 'Infinite Dictionaries', 'A dictionary is a set of key-value pairs, for example:\r\n\r\n{''color'':''red'', ''price'':2, 7:''test'', 100:-100}\r\n\r\nAs you can see, keys and values can be strings or integers. What’s more, values can also be dictionaries or variable references. Here is the formal definition of terms that will be used soon:\r\n\r\nkey   ::=      INTEGER | STRING\r\nvalue ::=      INTEGER | STRING | dict\r\npair  ::=      key '':'' value\r\ndict  ::=      ''{'' [pair ('','' pair)*] ''}''\r\nvar   ::=      ''a''|''b''|''c''|...|''z''\r\nslot  ::=      var(''['' key '']'')*\r\nlvar  ::=      slot\r\nrvar  ::=      slot | value\r\n\r\nHere (''['' key '']'')* means zero or more subscripts, [pair ('','' pair)*] means zero or more key-value pairs.\r\n\r\nStrings are always enclosed by single quotes ('''') and consists of up to 10 lower-case letters. Integers always have absolute values of no more than 1000. You can insert spaces anywhere, except inside strings or integers. For example, { ''a'':-1} and {''a'' : -1   } are the same, but {''a b'':1} and {''a'':- 1} are both illegal.\r\n\r\nYour task is to execute a series of commands and print the results. There are 3 kinds of commands:\r\n\r\n1. Assignment: <lvar> = <rval>\r\n\r\nAfter assigning a slot to a slot (rather than a value), the left-hand slot will be holding a reference to the right-hand. For example, After executing the following commands, b[1][0] is 1, rather than 0:\r\n\r\na = {0:0}\r\nb = {}\r\nb[1] = a\r\na[0] = 1\r\n\r\nSlots must be assigned before it is read or subscripted, and integers and strings cannot be subscripted. Consider the following comammd list:\r\n\r\nc = {}\r\nc[0] = 3\r\nc[1] = c[0]\r\nd[0] = ''i''\r\nc = d\r\nd = c[1][''a'']\r\nc[2][2] = 2\r\n\r\nThe first three commands are legal, but the next two are both illegal because slot d must be assigned before it is read or subscripted. The last three are also illegal.\r\n\r\n2. Length: length(<slot>)\r\n\r\nOutput the number of key-value pairs in the slot. Note that nested pairs are not counted. For example:\r\n\r\na = {0: {0:0, 1:1}}\r\nlength(a)\r\n\r\nwill output 1, not 3. In this command, it is guaranteed that <slot> is storing a dictionary, not a string or an integer.\r\n\r\n3. Infinity test: test(<slot>)\r\n\r\nIf the slot can be subscripted indefinitely, output 1. Otherwise, output 0. For example, after executing the following command list:\r\n\r\nd = {}\r\nd[0] = d\r\n\r\nThen d is infinite, since d[0][0][0][0][0][0]... is always d. In this command, it is guaranteed that <slot> is storing a dictionary, not a string or an integer.', 'The input contains at most 10000 lines of commands, each line will be non-empty and will contain no more than 300 characters. All the commands are legal.', 'Print the output (one line for each length/test command).', 'd:\\oj\\data\\1672', 'd:\\oj\\data\\1672', 'c = {}\r\nd = {''color'': ''red'', ''price'': 2, 7: ''test'', 100: -100}\r\nlength(d)\r\nd[7] = {''this'': ''is'', ''a'': ''book''}\r\nlength(d)\r\nd[8] = {''this'' : ''is'', ''another'' : {''a'' : ''book'', ''b'': ''book2''} }\r\nlength(d)\r\nc[7] = c\r\ntest(c)\r\ntest(d)\r\nlength(c)\r\nd[0] = c\r\nlength(d)\r\ntest(d[0])', '4\r\n4\r\n5\r\n1\r\n0\r\n1\r\n6\r\n1', 'The term definitions in this problem use a modified BNF grammar notation that is described in the official documentation of the Python programming language. Here is the explanation of the notation, extracted from the documentation:\r\n\r\nEach rule begins with a name (which is the name defined by the rule) and ::=. A vertical bar (|) is used to separate alternatives; it is the least binding operator in this notation. A star (*) means zero or more repetitions of the preceding item; likewise, a plus (+) means one or more repetitions, and a phrase enclosed in square brackets ([ ]) means zero or one occurrences (in other words, the enclosed phrase is optional). The * and + operators bind as tightly as possible; parentheses are used for grouping. Literal strings are enclosed in quotes. White space is only meaningful to separate tokens. Rules are normally contained on a single line; rules with many alternatives may be formatted alternatively with each line after the first beginning with a vertical bar.', 'Hunan CPC6', '', '2010-12-10 14:13:01', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 63, ''),
(1673, 'Tetrahedrons and Spheres', 'There are a tetrahedrons and b spheres in the 3D-splace, you’re asked to calculate the volume occupied by at least one of them (i.e. volume of the union of the objects).', 'There will be at most 20 test cases. Each case begins with two integers a, b, the number of tetrahedrons and the number of spheres (1<=a,b<=5). The next a lines each contains 12 integers: x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, the coordinates (xi, yi, zi)(1<=i<=4) of the four vertices  of a tetrahedron. The next b lines each contains 4 integers x, y, z, r, the coordinates of the center (x, y, z) and the radius r (r<=3). All the coordinate values are integers with absolute values no more than 5. The input is terminated by a=b=0.', 'For each test case, print a single line, the volume occupied by at least one of them, rounded to three decimal points.', 'd:\\oj\\data\\1673', 'd:\\oj\\data\\1673', '1 1\r\n0 0 4 1 0 4 0 1 4 0 0 5\r\n0 0 0 1\r\n0 0', '4.356', '', 'Hunan CPC6', '', '2010-12-10 14:13:46', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 60, ''),
(1674, 'Bunny Computer', 'Bunnies like programming and they often practice for contests. \r\n\r\nThere is a special computer named B-Computer, which all bunnies are eager to use. All bunnies want to solve a difficult problem using B-Computer. Because they type very fast, each of them wants to solve the problem according to the following process that consists of 3 stages (no delay is allowed between subsequent stages): \r\n1.Use B-Computer for exactly one time unit. \r\n2.Think and calculate on paper for exactly k time units, not using B-Computer. \r\n3.Use B-Computer for exactly one time unit again to complete. \r\nB-Computer cannot be used by more than one bunny at the same time, but when a bunny is thinking and calculating on paper, another bunny may use B-Computer. \r\n\r\nA day is divided into N equal time units, and each time unit has an associated positive integer value called preference. You are given a arry of N elements, which contains the preference values for a day. The number of elements in preference is the number of time units in the day, and the i-th element of preference is the preference of the i-th time unit. \r\n\r\nBunnies want to design a B-Computer schedule for a single day so that the sum of preferences of time units in which one of them uses B-Computer is maximized. The schedule must be such that each bunny uses B-computer exactly as described above and both time units at which the same bunny uses B-computer are in the same day. Find the maximum possible sum of preferences. You can assume that there are infinitely many bunnies.', 'There are many cases.\r\nThe first line of the input contains the  number N (1<=N<=200)and k(1<=k<=50).\r\nThe secode line contains n numbers ai(0<=i<n) and 1<=ai<=10^9.', 'The maximum possible sum of preferences.', 'd:\\oj\\data\\1674', 'd:\\oj\\data\\1674', '8 2\r\n3 1 4 1 5 9 2 6\r\n8 1\r\n3 1 4 1 5 9 2 6', '28\r\n31', 'In the first case:\r\nThe sum is maximized when three bunnies use B-Computer as follows: \r\nOne bunny uses B-Computer during the 1-st time unit and again during the 4-th time unit. \r\nOne bunny uses B-Computer during the 3-rd time unit and again during the 6-th time unit. \r\nOne bunny uses B-Computer during the 5-th time unit and again during the 8-th time unit. \r\n<img src="http://www.topcoder.com/contest/problem/BunnyComputer/BunnyComputerSample0.png" alt="BunnyComputer"></img>', 'TC SRM 487', '', '2010-12-12 13:15:29', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 61, ''),
(1675, 'Starport', 'A new starport has just started working. Starting from some moment of time (call it minute 0), a new spaceship arrives at the starport every M minutes. In other words, spaceships arrive at the starport at minutes 0, M, 2*M, 3*M and so on. \r\n\r\nSimilarly, starting from minute 0 and repeating each N minutes, all arrived spaceships that are still placed at the port are teleported to the shed. If a spaceship arrives at the exact same minute when such a teleportation happens, it will be teleported immediately. Otherwise it will need to wait until the next teleportation happens.\r\n\r\nLet the waiting time of a spaceship be the time between its arrival and its teleportation to the shed. Output the average waiting time of a spaceship in minutes. See notes for an exact definition.', 'There are many cases.\r\nEach line have two numbers N and M.\r\nN and M will each be between 1 and 1,000,000,000, inclusive.', 'Output the average waiting time of a spaceship in minutes.', 'd:\\oj\\data\\1675', 'd:\\oj\\data\\1675', '4 2\r\n5 3\r\n6 1\r\n12345 2345', '1.0\r\n2.0\r\n2.5\r\n6170.0', 'In the first case:\r\nSpaceships arrive at the starport at minutes 0, 2, 4, 6, 8, and so on. Teleportations are done at minutes 0, 4, 8, and so on. The waiting times for the spaceships are, correspondingly, 0, 2, 0, 2, 0, and so on, so the expected waiting time is 1.', 'TC SRM 490', '', '2011-04-12 08:25:48', 1000, 65536, 'N', NULL, 6, 9, 67, 3, 33, 7, 6, 30000, 148, ''),
(1676, 'Power的水题', 'power喜欢做水题，做了这么多水题，power也觉得无聊了。&lt;br />\r\n于是power开始自己出水题。&lt;br />\r\npower想啊想，终于想到了一道水题。&lt;br />\r\n这道水题是这样的：输入一个32位int型整数，你能把它的8进制数和16进制数算出来吗？<br />\r\n是不是很水啊。不要得意，int型整数可是有负数的。&lt;br />\r\n负数输出<a href="http://baike.baidu.com/view/377340.htm" target="blank"><b>补码</b></a>形式。', '多组数据每行输入一个32位int型整n。', '输出n和n对应的8进制数、16进制数。 16进制数是大写。', 'd:\\oj\\data\\1676', 'd:\\oj\\data\\1676', '1<br />\r\n10', '1 1 1<br />\r\n10 12 A', '32位int型整数范围：-2147483648~2147483647', 'Power', '', '2012-04-07 17:57:40', 1000, 65536, 'N', NULL, 27, 54, 50, 12, 39, 22, 19, 30000, 293, ''),
(1677, 'Analyzing algorithm', 'Problems in Computer Science are often classified as belonging to a certain class of problems (e.g., NP, Unsolvable, Recursive). In this problem you will be analyzing a property of an algorithm whose<br />\r\nclassification is not known for all possible inputs.<br />\r\n<br />\r\nConsider the following algorithm:<br />\r\n<pre>\r\n1.	input <i>n</i>\r\n2.	print <i>n</i>\r\n3.	if <i>n</i> = 1 then STOP\r\n4.	if <i>n</i> is even then  n = n / 2\r\n5.		else  n = n * 3 + 1\r\n6.	GOTO 2\r\n\r\n\r\n\r\nGiven the input 22, the following sequence of numbers will be printed\r\n22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1\r\n\r\nIt is conjectured that the algorithm above will terminate (when a 1 is printed) for any integral input value. Despite the simplicity of the algorithm, it is unknown whether this conjecture is true. It has been verified, however, for all integers <i>n</i> such that 0&lt;<i>n</i>&lt;=1,000,000 (and, in fact, for many more numbers than this.)\r\n\r\nGiven an input <i>n</i>, it is possible to determine the number of numbers printed (including the 1). For a given <i>n</i> this is called the <b>cycle-length</b> of <i>n</i>. In the example above, the cycle length of 22 is 16.\r\n\r\nFor any two numbers <i>i</i> and <i>j</i> you are to determine the maximum cycle length over all numbers between <u><i>i</i> and <i>j</i></u>.</pre>', 'Each line have two integers i and j.i,j&lt;=1,000,000<br />\r\nThe input cases&nbsp;are more than 100,000.', 'For each pair of input integers <i>i</i> and <i>j</i> you should output <i>i</i>, <i>j</i>, and the maximum cycle length for integers between and including <i>i</i> and <i>j</i>. These three numbers should be separated by at least one space with all three numbers on one line and with one line of output for each line of input. The integers <i>i</i> and <i>j</i> must appear in the output in the same order in which they appeared in the input and should be followed by the maximum cycle length (on the same line).<br />', 'd:\\oj\\data\\1677', 'd:\\oj\\data\\1677', '1 10<br />\r\n100 200<br />\r\n201 210<br />\r\n900 1000<br />', '1 10 20<br />\r\n100 200 125<br />\r\n201 210 89<br />\r\n900 1000 174', '', 'power', '', '2011-09-14 15:10:49', 1000, 65536, 'N', NULL, 7, 21, 33, 7, 70, 3, 3, 30000, 53, ''),
(1678, 'Distance Queries', 'Farmer John''s cows refused to run in his marathon since he chose a path much too long for their leisurely lifestyle. He therefore wants to find a path of a more reasonable length. The input to this problem consists of the same input as in "Navigation Nightmare",followed by a line containing a single integer K, followed by K "distance queries". Each distance query is a line of input containing two integers, giving the numbers of two farms between which FJ is interested in computing distance (measured in the length of the roads along the path between the two farms). Please answer FJ''s distance queries as quickly as possible!', '* Lines 1..1+M: Same format as "<a href="http://poj.org/problem?id=1984" target="_blank">Navigation Nightmare</a>"<br />\r\n<br />\r\n* Line 2+M: A single integer, K. 1 &lt;= K &lt;= 10,000<br />\r\n<br />\r\n* Lines 3+M..2+M+K: Each line corresponds to a distance query and contains the indices of two farms.', '* Lines 1..K: For each distance query, output on a single line an integer giving the appropriate distance.', 'd:\\oj\\data\\1678', 'd:\\oj\\data\\1678', '7 6\r\n1 6 13 E\r\n6 3 9 E\r\n3 5 7 S\r\n4 1 3 N\r\n2 4 20 W\r\n4 7 2 S\r\n3\r\n1 6\r\n1 4\r\n2 6', '13\r\n3\r\n36', 'Farms 2 and 6 are 20+3+13=36 apart.', 'USACO 2004 February & bingshen', '', '2011-10-14 17:19:48', 2000, 30000, 'N', NULL, 8, 17, 47, 3, 43, 4, 4, 10000, 94, ''),
(1679, 'Drainage Ditches(网络流入门)', 'Every time it rains on Farmer John''s fields, a pond forms over Bessie''s favorite clover patch. This means that the clover is covered by water for awhile and takes quite a long time to regrow. Thus, Farmer John has built a set of drainage ditches so that Bessie''s clover patch is never covered in water. Instead, the water is drained to a nearby stream. Being an ace engineer, Farmer John has also installed regulators at the beginning of each ditch, so he can control at what rate water flows into that ditch.<br />\r\n	Farmer John knows not only how many gallons of water each ditch can transport per minute but also the exact layout of the ditches, which feed out of the pond and into each other and stream in a potentially complex network.<br />\r\n	Given all this information, determine the maximum rate at which water can be transported out of the pond and into the stream. For any given ditch, water flows in only one direction, but there might be a way that water can flow in a circle.', '<b><i>The input includes several cases.</i></b> For each case, the first line contains two space-separated integers, N (0 &lt;= N &lt;= 500) and M (2 &lt;= M &lt;= 500). N is the number of ditches that Farmer John has dug. M is the number of intersections points for those ditches. Intersection 1 is the pond. Intersection point M is the stream. Each of the following N lines contains three integers, Si, Ei, and Ci. Si and Ei (1 &lt;= Si, Ei &lt;= M) designate the intersections between which this ditch flows. Water will flow through this ditch from Si to Ei. Ci (0 &lt;= Ci &lt;= 1,000,000) is the maximum rate at which water will flow through the ditch.', 'For each case, output a single integer, the maximum rate at which water may emptied from the pond.', 'd:\\oj\\data\\1679', 'd:\\oj\\data\\1679', '<pre class="sio">\r\n5 4\r\n1 2 40\r\n1 4 20\r\n2 4 20\r\n2 3 30\r\n3 4 10\r\n2 2\r\n1 2 100\r\n1 2 200</pre>', '<pre class="sio">\r\n50\r\n300</pre>', '', 'power', '', '2011-11-09 17:23:27', 2000, 65536, 'N', NULL, 43, 61, 70, 6, 55, 6, 5, 30000, 198, ''),
(1680, '推箱子', 'Farmer John and Betsy are playing a game with N (1 &lt;= N &lt;= 30,000)identical cubes labeled 1 through N. They start with N stacks, each containing a single cube. Farmer John asks Betsy to perform P (1&lt;= P &lt;= 100,000) operation. There are two types of operations:&nbsp;<br />\r\nmoves and counts.&nbsp;<br />\r\n* In a move operation, Farmer John asks Bessie to move the stack containing cube X on top of the stack containing cube Y.&nbsp;<br />\r\n* In a count operation, Farmer John asks Bessie to count the number of cubes on the stack with cube X that are under the cube X and report that value.&nbsp;<br />\r\n<br />\r\nWrite a program that can verify the results of the game.&nbsp;', '* Line 1: A single integer, P&nbsp;<br />\r\n<br />\r\n* Lines 2..P+1: Each of these lines describes a legal operation. Line 2 describes the first operation, etc. Each line begins with a &#39;M&#39; for a move operation or a &#39;C&#39; for a count operation. For move operations, the line also contains two integers: X and Y.For count operations, the line also contains a single integer: X.&nbsp;<br />\r\n<br />\r\nNote that the value for N does not appear in the input file. No move operation will request a move a stack onto itself.&nbsp;', 'Print the output from each of the count operations in the same order as the input file.&nbsp;', 'd:\\oj\\data\\1680', 'd:\\oj\\data\\1680', '<pre class="sio" style="font-family: ''Courier New'', Courier, monospace; font-size: 12pt; ">\r\n6\r\nM 1 6\r\nC 1\r\nM 2 4\r\nM 2 6\r\nC 3\r\nC 4</pre>', '<pre class="sio" style="font-family: ''Courier New'', Courier, monospace; font-size: 12pt; ">\r\n1\r\n0\r\n2</pre>', '', 'swust20095862', '', '2011-03-09 19:18:23', 2000, 65536, 'N', NULL, 1, 2, 50, 1, 50, 2, 1, 1000, 44, ''),
(1681, 'Cow Relays', 'For their physical fitness program, N (2 ≤ N ≤ 1,000,000) cows have decided to run a relay race using the T (2 ≤ T ≤ 100) cow trails throughout the pasture.\r\n\r\nEach trail connects two different intersections (1 ≤ I1i ≤ 1,000; 1 ≤ I2i ≤ 1,000), each of which is the termination for at least two trails. The cows know the lengthi of each trail (1 ≤ lengthi  ≤ 1,000), the two intersections the trail connects, and they know that no two intersections are directly connected by two different trails. The trails form a structure known mathematically as a graph.\r\n\r\nTo run the relay, the N cows position themselves at various intersections (some intersections might have more than one cow). They must position themselves properly so that they can hand off the baton cow-by-cow and end up at the proper finishing place.\r\n\r\nWrite a program to help position the cows. Find the shortest path that connects the starting intersection (S) and the ending intersection (E) and traverses exactly N cow trails.', '* Line 1: Four space-separated integers: N, T, S, and E\r\n* Lines 2..T+1: Line i+1 describes trail i with three space-separated integers: lengthi , I1i , and I2i', '* Line 1: A single integer that is the shortest distance from intersection S to intersection E that traverses exactly N cow trails.', 'd:\\oj\\data\\1681', 'd:\\oj\\data\\1681', '2 6 6 4\r\n11 4 6\r\n4 4 8\r\n8 4 9\r\n6 6 8\r\n2 6 9\r\n3 8 9', '10', '', 'USACO 2007 November Gold', '', '2011-03-11 10:30:19', 1000, 65536, 'N', NULL, 4, 12, 33, 0, 0, 1, 1, 3000, 39, ''),
(1682, '查找', '给你m(m&lt;=10000)个数，你能在n(n&lt;20000)个不相同的数中找出它们的位置吗？<br />', '多组数据。&lt;br />\r\n第一行两个数n和m。&lt;br />\r\n第二行有n个不同的int整数。&lt;br />\r\n后面m行每行一个整数。', '输出m行，每行一个数。&lt;br />\r\n第i行表示第i个查询数在n个数中的位置(从0开始)，如果没找到输出-1.', 'd:\\oj\\data\\1682', 'd:\\oj\\data\\1682', '2 3\r\n1 2\r\n1\r\n2\r\n3\r\n3 1\r\n2 1 3\r\n1', '0<br />\r\n1<br />\r\n-1<br />\r\n1', '欢迎大家使用各种暴力算法检验数据。', 'power', '', '2012-09-09 15:55:41', 2000, 65536, 'N', NULL, 46, 192, 24, 114, 83, 33, 24, 30000, 485, ''),
(1683, 'Farm Tour(最小费用流入门)', 'When FJ''s friends visit him on the farm, he likes to show them around. His farm comprises N (1 <= N <= 1000) fields numbered 1..N, the first of which contains his house and the Nth of which contains the big barn. A total M (1 <= M <= 10000) paths that connect the fields in various ways. Each path connects two different fields and has a nonzero length smaller than 35,000. \r\n\r\nTo show off his farm in the best way, he walks a tour that starts at his house, potentially travels through some fields, and ends at the barn. Later, he returns (potentially through some fields) back to his house again. \r\n\r\nHe wants his tour to be as short as possible, however he doesn''t want to walk on any given path more than once. Calculate the shortest tour possible. FJ is sure that some tour exists for any given farm.', '* Line 1: Two space-separated integers: N and M. \r\n\r\n* Lines 2..M+1: Three space-separated integers that define a path: The starting field, the end field, and the path''s length.', 'A single line containing the length of the shortest tour.', 'd:\\oj\\data\\1683', 'd:\\oj\\data\\1683', '4 5\r\n1 2 1\r\n2 3 1\r\n3 4 1\r\n1 3 2\r\n2 4 2', '6', 'The edge is undirected.', 'USACO 2003 February Green', '', '2011-09-18 20:51:48', 1000, 65536, 'N', NULL, 14, 24, 58, 0, 0, 2, 2, 30000, 114, ''),
(1684, 'Light on or off', 'There is N lights on the wall of Dreamone’s house from left to right.Initially,some lights on and some lights<br />\r\noff, and we use ‘1’ represented the light on, use ‘0’ represented the light off. As we know, there is a cat in<br />\r\ndremone’s house, and she is very naught. She always change the status continuously from Ath light to Bth<br />\r\none. (1&lt;=A, B&lt;=N).If the light is on, then the light will be off, If the light is off, then the light will be on.<br />\r\nActually, she can do it K times like this. Then the cat puts forward another problem: How many lights on<br />\r\nfrom Cth light to Dth (1&lt;=C, D&lt;=N) one? For example:<br />\r\nWhen N=4 K=2, and the initial status is assumed as:<br />\r\n1 0 1 1<br />\r\n‘1’ represented on,’0’ represented off.<br />\r\nFrom the initial status we can get: There is 3 lights on from 1st light to 4th, 2 lights on from 2nd to 4th and so<br />\r\non. Then we assume the first operation that we change the status from 2nd to 4th, and then the status will be:<br />\r\n1 1 0 0<br />\r\nThen there are 2 lights on from 1st light to 4th one, 1 light on from 2nd to 4th one and so on. Then the second<br />\r\noperation is assumed as from the 1st to 2nd .Then the status will be 0 0 0 0. And there will be no lights on.<br />\r\nCan you get the main idea? Can you help the naught cat?', 'The first line of input will be a positive integer indicating how many test cases will be included (T) and T<br />\r\nwill be less than 10. Each of the next T cases will contain two parts:<br />\r\nThe first part: two integer N, K (1&lt;=N&lt;=100000, 1&lt;=K&lt;=100000)<br />\r\nThe second part: N numbers (which is ‘0’ or ‘1’) represented the initial status from left to right.<br />\r\nThen third part: K lines. Each line will be X C D (1&lt;=C, D&lt;=N) X is a letter which is either ‘Q’ or ‘C’. If<br />\r\nX=’Q’, you will be output the numbers of lights on from Cth to Dth, and if X=’C’, you will be change the<br />\r\nstatus of lights as the rules described above.', 'For each query,(when X=’Q’)，you should output the numbers of lights on. What’s more, you must output a<br />\r\nblank line after you have processed a test case.', 'd:\\oj\\data\\1684', 'd:\\oj\\data\\1684', '2\r\n4 3\r\n1 0 1 1\r\nQ 2 4\r\nC 2 3\r\nQ 1 4\r\n4 1\r\n1 0 1 1\r\nQ 2 4', '2\r\n3\r\n\r\n2', '', '6th SWUST Programming Contest', '', '2012-08-09 13:55:53', 1000, 65536, 'N', NULL, 46, 253, 18, 179, 91, 30, 18, 30000, 871, ''),
(1685, 'Cube Simulation', '<p>\r\n	Here''s a cube whose size of its 3 dimensions are all infinite. Meanwhile, there''re 6 programs operating this cube:</p>\r\n<ul>\r\n	<li>\r\n		<p>\r\n	FILL(<em>X,Y,Z</em>): Fill some part of the cube with different values.</p>\r\n		<pre>\r\n	memset(cube, 0, sizeof(cube));\r\n	puts("START");\r\n	cnt = 0;\r\n	for (int i = 0; i &lt; X; i++) {\r\n		for (int j = 0; j &lt; Y; j++) {\r\n			for (int k = 0; k &lt; Z; k++) {\r\n				cube[i][j][k] = ++cnt;\r\n			}\r\n		}\r\n	}\r\n</pre>\r\n		<p>\r\n	SWAP1(<em>x<sub>1</sub>,x<sub>2</sub></em>): Swap two sub-cube along the first dimensions.</p>\r\n		<pre>\r\n	for (int j = 0; j &lt; Y; j++) {\r\n		for (int k = 0; k &lt; Z; k++) {\r\n			exchange(cube[x1][j][k], cube[x2][j][k]);\r\n		}\r\n	}\r\n</pre>\r\n	</li>\r\n	<li>\r\n		<p>\r\n	SWAP2(<em>y<sub>1</sub></em>,<em>y<sub>2</sub></em>): Swap two sub-cube along the second dimensions.</p>\r\n		<pre>\r\n	for (int i = 0; i &lt; X; i++) {\r\n		for (int k = 0; k &lt; Z; k++) {\r\n			exchange(cube[i][y1][k], cube[i][y2][k]);\r\n		}\r\n	}\r\n</pre>\r\n		<p>\r\n	SWAP3(<em>z<sub>1</sub>,z<sub>2</sub></em>): Swap two sub-cube along the third dimensions.</p>\r\n		<pre>\r\n	for (int i = 0; i &lt; X; i++) {\r\n		for (int j = 0; j &lt; Y; j++) {\r\n			exchange(cube[i][j][z1], cube[i][j][z2]);\r\n		}\r\n	}\r\n</pre>\r\n	</li>\r\n	<li>\r\n		<p>\r\n	FIND(<em>value</em>): Output the value''s location, <strong>if it exist</strong>.</p>\r\n		<pre>\r\n	for (int i = 0; i &lt; X; i++) {\r\n		for (int j = 0; j &lt; Y; j++) {\r\n			for (int k = 0; k &lt; Z; k++) {\r\n				if (cube[i][j][k] == value) {\r\n					printf("%d %d %d\\n", i, j, k);\r\n				}\r\n			}\r\n		}\r\n	}\r\n</pre>\r\n		<p>\r\n	QUERY(<em>x,y,z</em>): Output the value at (x,y,z).</p>\r\n		<pre>\r\n	printf("%d\\n", cube[x][y][z]);\r\n</pre>\r\n<p>\r\nWe''ll give a list of operations mentioned above. Your job is to simulate the program and tell us what does the machine output in progress.</p>', '<p>\r\nThere''ll be 6 kind of operations in the input.</p>\r\n<ul>\r\n	<li>\r\n<strong>FILL <em>X Y Z</em></strong> (1 &lt;= <em>X, Y, Z</em> &lt;= 1000) for FILL(<em>X,Y,Z</em>)</li>\r\n	<li>\r\n<strong>SWAP1 <em>X<sub>1</sub> X<sub>2</sub></em></strong> (0 &lt;= <em>X<sub>1</sub>, X<sub>2</sub></em> &lt; <em>X</em>) for SWAP1(<em>X<sub>1</sub>,X<sub>2</sub></em>)</li>\r\n	<li>\r\n<strong>SWAP2 <em>Y<sub>1</sub> Y<sub>2</sub></em></strong> (0 &lt;= <em>Y<sub>1</sub>, Y<sub>2</sub></em> &lt; <em>Y</em>) for SWAP2(<em>Y<sub>1</sub>,Y<sub>2</sub></em>)</li>\r\n	<li>\r\n<strong>SWAP3 <em>Z<sub>1</sub> Z<sub>2</sub></em></strong> (0 &lt;= <em>Z<sub>1</sub>, Z<sub>2</sub></em> &lt; <em>Z</em>) for SWAP3(<em>Z<sub>1</sub>,Z<sub>2</sub></em>)</li>\r\n	<li>\r\n<strong>FIND <em>value</em></strong> (<em>value</em> > 0) for FIND(<em>value</em>)</li>\r\n	<li>\r\n<strong>QUERY <em>x y z</em></strong> (0 &lt;= <em>x</em> &lt; <em>X</em>, 0 &lt;= <em>y</em> &lt; <em>Y</em>, 0 &lt;= <em>z</em> &lt; <em>Z</em>) for QUERY(<em>x,y,z</em>)</li>\r\n</ul>\r\n<p>\r\nThe input will always start with FILL operation and terminate by EOF.</p>\r\n<p>\r\nThe number of the operations will less than 200,000, while the FILL operation will less than 100.</p>', '<p>\r\nSimulate all of the operations in order, and print the output of the programs.</p>', 'd:\\oj\\data\\1685', 'd:\\oj\\data\\1685', '<pre>\r\nFILL 2 3 1\r\nSWAP1 0 1\r\nSWAP2 0 2\r\nSWAP3 0 0\r\nFIND 1\r\nFIND 2\r\nFIND 3\r\nFIND 4\r\nFIND 5\r\nFIND 6\r\nFIND 7\r\nQUERY 0 0 0\r\nQUERY 0 1 0\r\nQUERY 0 2 0\r\nQUERY 1 0 0\r\nQUERY 1 1 0\r\nQUERY 1 2 0\r\n</pre>', '<pre>\r\nSTART\r\n1 2 0\r\n1 1 0\r\n1 0 0\r\n0 2 0\r\n0 1 0\r\n0 0 0\r\n6\r\n5\r\n4\r\n3\r\n2\r\n1\r\n</pre>', '<p>\r\nexchange(x,y) means exchange the value of variable x and y.</p>\r\n<p>\r\nBecause of <strong>HUGE</strong> input and output, <strong>scanf</strong> and <strong>printf</strong> is recommended.</p>', 'OUYANG, Jialin', '', '2011-03-18 10:52:33', 5000, 65536, 'N', NULL, 3, 3, 100, 0, 0, 2, 2, 30000, 31, ''),
(1686, 'Monthly Expense', 'Farmer John is an astounding accounting wizard and has realized he might run out of money to run the farm. He has already calculated and recorded the exact amount of money (1 ≤ moneyi ≤ 10,000) that he will need to spend each day over the next N (1 ≤ N ≤ 100,000) days.\r\n\r\nFJ wants to create a budget for a sequential set of exactly M (1 ≤ M ≤ N) fiscal periods called "fajomonths". Each of these fajomonths contains a set of 1 or more consecutive days. Every day is contained in exactly one fajomonth.\r\n\r\nFJ''s goal is to arrange the fajomonths so as to minimize the expenses of the fajomonth with the highest spending and thus determine his monthly spending limit.', 'Line 1: Two space-separated integers: N and M \r\nLines 2..N+1: Line i+1 contains the number of dollars Farmer John spends on the ith day', 'Line 1: The smallest possible monthly limit Farmer John can afford to live with.', 'd:\\oj\\data\\1686', 'd:\\oj\\data\\1686', '7 5\r\n100\r\n400\r\n300\r\n100\r\n500\r\n101\r\n400', '500', 'If Farmer John schedules the months so that the first two days are a month, the third and fourth are a month, and the last three are their own months, he spends at most $500 in any month. Any other method of scheduling gives a larger minimum monthly limit.', 'USACO 2007 March Silver', '', '2012-03-18 21:31:24', 1000, 65536, 'N', NULL, 10, 21, 48, 6, 46, 7, 7, 30000, 97, ''),
(1687, '将军回家', '<p style="text-align: justify; font-size: 20px">\r\n	在涪江河的两边共有n个城市，其中位于一边的城市属于1类城市，另外一边的属于2类城市，（特别的:城市1属于1类，城市2属于2类）。现在知道一些道路的情况，比如知道城市1到城市5之间有一条长度为100的路。将军要从城市1回到城市2的家，他就开始设计回家的线路。回家时由于驾照的关系，只能越过一次涪江河。现在问从城市1到城市2的最短距离。&lt;/p>', '<p style="text-align: justify; font-size: 20px">\r\n	多组测试数据。&lt;/p>\r\n<p style="text-align: justify; font-size: 20px">\r\n	每组数据的第一行输入城市个数N(2&lt;=N&lt;=600),第二行输入城市之间的路的数目M（(0&lt;=M&lt;=10000），</p>\r\n<p style="text-align: justify; font-size: 20px">\r\n	接下里M行，输入每条道路的信息，每行S,E,T都是整数，代表城市S和城市E之间有一条长度为T的路。&lt;/p>\r\n<p style="text-align: justify; font-size: 20px">\r\n	最后一行N个数只能是1或2代表第i个城市属于哪类。&lt;/p>\r\n<p style="text-align: justify; font-size: 20px">\r\n	为了简化题目，我们总认为城市1是属于1类，城市2属于2类 N = 0时表示结束&lt;/p>', '<p style="text-align: justify; font-size: 20px">\r\n	输出城市1到城市2的最短路径，如果不存在则输出-1</p>', 'd:\\oj\\data\\1687', 'd:\\oj\\data\\1687', '2\r\n1\r\n1 2 100\r\n1 2\r\n3\r\n3\r\n1 2 100\r\n1 3 40\r\n2 3 50\r\n1 2 1\r\n5\r\n5\r\n3 1 200\r\n5 3 150\r\n2 5 160\r\n4 3 170\r\n4 2 170\r\n1 2 2 2 1\r\n0', '<pre>\r\n100\r\n90\r\n540\r\n</pre>', '', 'SWUST Monthly Contest - 2011.3.19, QiuYunChun', '', '2011-11-23 18:43:48', 1000, 65536, 'N', NULL, 12, 24, 50, 8, 50, 9, 8, 30000, 182, ''),
(1688, '最大乘积', '将一个整数n分解成x个正整数(a1+a2+a3+...+ax=n)，使它们的乘积(a1*a2*a3*...*ax)最大。&lt;br />\r\n答案可能很大，输出对m取模后的结果。', '每行两个整数n(2&lt;=n&lt;10^18)和m(1&lt;=m&lt;10^9)。', '每行输出一个整数。', 'd:\\oj\\data\\1688', 'd:\\oj\\data\\1688', '5 10<br />\r\n7 100<br />\r\n8 100<br />', '6<br />\r\n12<br />\r\n18<br />', '', 'power', '', '2012-04-25 14:03:28', 1000, 65536, 'N', NULL, 7, 33, 21, 6, 55, 8, 5, 30000, 227, ''),
(1689, 'Mayor''s posters', 'The citizens of Bytetown, AB, could not stand that the candidates in the mayoral election campaign have been placing their electoral posters at all places at their whim. The city council has finally decided to build an electoral wall for placing the posters and introduce the following rules:<br />\r\n<ul>\r\n<li>Every candidate can place exactly one poster on the wall.</li>\r\n<li>All posters are of the same height equal to the height of the wall; the width of a poster can be any integer number of bytes (byte is the unit of length in Bytetown).</li>\r\n<li>The wall is divided into segments and the width of each segment is one byte.</li>\r\n<li>Each poster must completely cover a contiguous number of wall segments.</li>\r\n</ul>\r\n<br />\r\nThey have built a wall 10000000 bytes long (such that there is enough place for all candidates). When the electoral campaign was restarted, the candidates were placing their posters on the wall and their posters differed widely in width. Moreover, the candidates started placing their posters on wall segments already occupied by other posters. Everyone in Bytetown was curious whose posters will be visible (entirely or in part) on the last day before elections.<br />\r\nYour task is to find the number of visible posters when all the posters are placed given the information about posters'' size, their place and order of placement on the electoral wall.', 'There are many cases.The first line of data for a single case contains number 1 &lt;= n &lt;= 10000. The subsequent n lines describe the posters in the order in which they were placed. The i-th line among the n lines contains two integer numbers l<sub>i</sub> and ri which are the number of the wall segment occupied by the left end and the right end of the i-th poster, respectively. We know that for each 1 &lt;= i &lt;= n, 1 &lt;= l<sub>i</sub> &lt;= ri &lt;= 10000000. After the i-th poster is placed, it entirely covers all wall segments numbered l<sub>i</sub>, l<sub>i</sub>+1 ,... , ri.', 'For each input data set print the number of visible posters after all the posters are placed.<br />\r\n<br />\r\nThe picture below illustrates the case of the sample input.<br />\r\n<img src="http://poj.org/images/2528_1.jpg" />', 'd:\\oj\\data\\1689', 'd:\\oj\\data\\1689', '5<br />\r\n1 4<br />\r\n2 6<br />\r\n8 10<br />\r\n3 4<br />\r\n7 10<br />', '4', '', 'Alberta Collegiate Programming Contest 2003.10.18', '', '2012-05-27 18:09:55', 1000, 65536, 'N', NULL, 37, 87, 43, 34, 85, 10, 6, 30000, 371, ''),
(1690, 'Find The Multiple', 'Given a positive integer n, write a program to find out a nonzero multiple m of n whose decimal representation contains only the digits 0 and 1. You may assume that n is not greater than 200 and there is a corresponding m containing no more than 100 decimal digits.', 'The input file may contain multiple test cases. Each line contains a value of n (1 <= n <= 200). A line containing a zero terminates the input.', 'For each value of n in the input print a line containing the corresponding value of m. The decimal representation of m must not contain more than 100 digits. If there are multiple solutions for a given value of n, any one of them is acceptable.', 'd:\\oj\\data\\1690', 'd:\\oj\\data\\1690', '2\r\n6\r\n19\r\n0', '10\r\n100100100100100100\r\n111111111111111111', '所有的最小倍数在64位整数内。', 'Dhaka 2002', '', '2011-08-02 20:54:13', 1000, 65536, 'N', NULL, 17, 32, 53, 9, 69, 6, 4, 30000, 103, ''),
(1691, 'Go Deeper', 'Here is a procedure''s pseudocode:<br />\r\n	<br />\r\n	go(int dep, int n, int m)<br />\r\n	begin<br />\r\n	output the value of dep.<br />\r\n	if dep &lt; m and x[a[dep]] + x[b[dep]] != c[dep] then go(dep + 1, n, m)<br />\r\n	end<br />\r\n	<br />\r\n	In this code n is an integer. a, b, c and x are 4 arrays of integers. The index of array always starts from 0. Array a and b consist of non-negative integers smaller than n. Array x consists of only 0 and 1. Array c consists of only 0, 1 and 2. The lengths of array a, b and c are m while the length of array x is n. Given the elements of array a, b, and c, when we call the procedure go(0, n, m) what is the maximal possible value the procedure may output?', 'There are multiple test cases. The first line of input is an integer T (0 &lt; T ≤ 100), indicating the number of test cases. Then T test cases follow. Each case starts with a line of 2 integers n and m (0 &lt; n ≤ 200, 0 &lt; m ≤ 10000). Then m lines of 3 integers follow. The i-th(1 ≤ i ≤ m) line of them are a<sub>i-1</sub> ,b<sub>i-1</sub> and c<sub>i-1</sub> (0 ≤ a<sub>i-1</sub>, b<sub>i-1</sub> &lt; n, 0 ≤ c<sub>i-1</sub> ≤ 2).', 'For each test case, output the result in a single line.', 'd:\\oj\\data\\1691', 'd:\\oj\\data\\1691', '3 \r\n2 1 \r\n0 1 0 \r\n2 1 \r\n0 0 0 \r\n2 2 \r\n0 1 0 \r\n1 1 2', '1 \r\n1 \r\n2', '', '2010 Asia Regional Chengdu', '', '2011-08-19 09:55:35', 1000, 65536, 'N', NULL, 4, 4, 100, 0, 0, 2, 2, 30000, 54, ''),
(1692, 'Micheal 题目测试专用', '', '', '', 'd:\\oj\\data\\1692', 'd:\\oj\\data\\1692', '', '', '', '', '', '2012-03-10 14:20:56', 1000000, 655360, 'N', NULL, 15, 45, 33, 3, 60, 3, 2, 30000, 192, ''),
(1693, '冰壶运动', 'On Planet MM-21, after their Olympic games this year, curling is getting popular. But the rules are somewhat different from ours. The game is played on an ice game board on which a square mesh is marked. They use only a single stone. The purpose of the game is to lead the stone from the start to the goal with the minimum number of moves. Fig. 1 shows an example of a game board. Some squares may be occupied with blocks. There are two special squares namely the start and the goal, which are not occupied with blocks. (These two squares are distinct.) Once the stone begins to move, it will proceed until it hits a block. In order to bring the stone to the goal, you may have to stop the stone by hitting it against a block, and throw again.\r\n<p align="center">\r\n	<img src="http://poj.org/images/3009_1.gif" /><br />\r\n	Fig. 1: Example of board (S: start, G: goal)</p>\r\nThe movement of the stone obeys the following rules:<br />\r\nAt the beginning, the stone stands still at the start square. The movements of the stone are restricted to x and y directions. Diagonal moves are prohibited. When the stone stands still, you can make it moving by throwing it. You may throw it to any direction unless it is blocked immediately(Fig. 2(a)).&lt; Once thrown, the stone keeps moving to the same direction until one of the following occurs: The stone hits a block (Fig. 2(b), (c)). The stone stops at the square next to the block it hit. The block disappears. The stone gets out of the board. The game ends in failure. The stone reaches the goal square. The stone stops there and the game ends in success. You cannot throw the stone more than 10 times in a game. If the stone does not reach the goal in 10 moves, the game ends in failure.\r\n<p align="center">\r\n	<img src="http://poj.org/images/3009_2.gif" /><br />\r\n	Fig. 2: Stone movements</p>\r\nUnder the rules, we would like to know whether the stone at the start can reach the goal and, if yes, the minimum number of moves required.<br />\r\nWith the initial configuration shown in Fig. 1, 4 moves are required to bring the stone from the start to the goal. The route is shown in Fig. 3(a). Notice when the stone reaches the goal, the board configuration has changed as in Fig. 3(b).\r\n<p>\r\n	&nbsp;</p>\r\n<p align="center">\r\n	<img src="http://poj.org/images/3009_3.gif" /><br />\r\n	Fig. 3: The solution for Fig. D-1 and the final board configuration</p>', '<p>\r\n	&nbsp;</p>\r\n<div>\r\n	The&nbsp;input&nbsp;is&nbsp;a&nbsp;sequence&nbsp;of&nbsp;datasets.&nbsp;The&nbsp;end&nbsp;of&nbsp;the&nbsp;input&nbsp;is&nbsp;indicated&nbsp;by&nbsp;a&nbsp;line&nbsp;containing&nbsp;two&nbsp;zeros&nbsp;separated&nbsp;by&nbsp;a&nbsp;space.&nbsp;The&nbsp;number&nbsp;of&nbsp;datasets&nbsp;never&nbsp;exceeds&nbsp;100.<br />\r\n	Each&nbsp;dataset&nbsp;is&nbsp;formatted&nbsp;as&nbsp;follows.<br />\r\n	the&nbsp;width(=w)&nbsp;and&nbsp;the&nbsp;height(=h)&nbsp;of&nbsp;the&nbsp;board&nbsp;<br />\r\n	First&nbsp;row&nbsp;of&nbsp;the&nbsp;board&nbsp;<br />\r\n	...&nbsp;<br />\r\n	h-th&nbsp;row&nbsp;of&nbsp;the&nbsp;board<br />\r\n	The&nbsp;width&nbsp;and&nbsp;the&nbsp;height&nbsp;of&nbsp;the&nbsp;board&nbsp;satisfy:&nbsp;2&nbsp;&lt;=&nbsp;w&nbsp;&lt;=&nbsp;20,&nbsp;1&nbsp;&lt;=&nbsp;h&nbsp;&lt;=&nbsp;20.<br />\r\n	Each&nbsp;line&nbsp;consists&nbsp;of&nbsp;w&nbsp;decimal&nbsp;numbers&nbsp;delimited&nbsp;by&nbsp;a&nbsp;space.&nbsp;The&nbsp;number&nbsp;describes&nbsp;the&nbsp;status&nbsp;of&nbsp;the&nbsp;corresponding&nbsp;square.<br />\r\n	<br />\r\n	0:vacant&nbsp;square<br />\r\n	1:block<br />\r\n	2:start&nbsp;position<br />\r\n	3:goal&nbsp;position<br />\r\n	<br />\r\n	The&nbsp;dataset&nbsp;for&nbsp;Fig.&nbsp;D-1&nbsp;is&nbsp;as&nbsp;follows:<br />\r\n	6&nbsp;6&nbsp;<br />\r\n	1&nbsp;0&nbsp;0&nbsp;2&nbsp;1&nbsp;0&nbsp;<br />\r\n	1&nbsp;1&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;<br />\r\n	0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;3&nbsp;<br />\r\n	0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;<br />\r\n	1&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;1&nbsp;<br />\r\n	0&nbsp;1&nbsp;1&nbsp;1&nbsp;1&nbsp;1<br />\r\n	&nbsp;</div>', '&nbsp;For each dataset, print a line having a decimal integer indicating the minimum number of moves along a route from the start to the goal. If there are no such routes, print -1 instead. Each line should not have any character other than this number.', 'd:\\oj\\data\\1693', 'd:\\oj\\data\\1693', '<pre class="sio" style="font-family: ''Courier New'', Courier, monospace; font-size: 12pt; ">\r\n2 1\r\n3 2\r\n6 6\r\n1 0 0 2 1 0\r\n1 1 0 0 0 0\r\n0 0 0 0 0 3\r\n0 0 0 0 0 0\r\n1 0 0 0 0 1\r\n0 1 1 1 1 1\r\n6 1\r\n1 1 2 1 1 3\r\n6 1\r\n1 0 2 1 1 3\r\n12 1\r\n2 0 1 1 1 1 1 1 1 1 1 3\r\n13 1\r\n2 0 1 1 1 1 1 1 1 1 1 1 3\r\n0 0</pre>', '<pre class="sio" style="font-family: ''Courier New'', Courier, monospace; font-size: 12pt; ">\r\n1\r\n4\r\n-1\r\n4\r\n10\r\n-1</pre>', '', 'swust20095862', '', '2011-03-29 12:54:15', 1000, 65536, 'N', NULL, 2, 3, 67, 1, 50, 1, 1, 1000, 71, '');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1694, 'Fraction', 'In mathematics, a rational number is any number that can be expressed as the quotient or fraction a/b of two integers, with the denominator b not equal to zero. Since b may be equal to 1, every integer is a rational number. The set of all rational numbers is usually denoted by a boldface Q, which stands for quotient.\r\nThe decimal expansion of a rational number always either terminates after finitely many digits or begins to repeat the same finite sequence of digits over and over. Moreover, any repeating or terminating decimal represents a rational number. These statements hold true not just for base 10, but also for binary, hexadecimal, or any other integer base.\r\nA real number that is not rational is called irrational. Irrational numbers include √2, π, and e. The decimal expansion of an irrational number continues forever without repeating. Since the set of rational numbers is countable, and the set of real numbers is uncountable, almost every real number is irrational.\r\n\r\nGive you a rational number, convert it to fraction in lowest term. \r\n[x] representing the fraction cycle section., such as 0.[3]=0.33333333333~~=1/3.', 'There are multiple test cases. \r\nEach line is a rational number as above.', 'Each line output the fraction in lowest term.', 'd:\\oj\\data\\1694', 'd:\\oj\\data\\1694', '.250 \r\n01.[142857] \r\n+5', '1/4\r\n8/7\r\n5', '<img  src="problem-images\\1694.png"  /><br />\r\n<br />', 'power', '', '2011-04-28 11:04:07', 1000, 65536, 'N', NULL, 4, 19, 21, 13, 76, 9, 4, 30000, 716, ''),
(1695, 'Fraction II', 'For a fraction of the following four operations:\r\n1. numerator and denominator plus one at the same time.\r\n2. numerator and denominator minus one at the same time.\r\n3. molecular multiplied by two.\r\n4. denominator multiplied by two.\r\nYou can not change the numerator or denominator becomes <b>negative</b>.\r\nGive you two fractions A and B,can you use the least number of operations on A, so that the <b>value</b> of A is equal to B''s <b>value</b>?', 'There are multiple test cases.\r\nEach line have two fractions A and B: b / a y / x. (0 <= b, y <= 20,0 < a, x <= 20)', 'Output the minimum number of operations.', 'd:\\oj\\data\\1695', 'd:\\oj\\data\\1695', '1/2 1/3\r\n1/3 2/6', '2\r\n0', '1/2->2/3->2/6', 'power', '', '2011-09-04 19:08:04', 3000, 65536, 'N', NULL, 38, 154, 25, 22, 55, 29, 18, 30000, 1126, ''),
(1696, 'Phillip’s tourism', 'Phillip is very fond of traveling, this time he wants to drive to the beautiful Jiuzhaigou.There are n toll stations between phillip’s home and Jiuzhaigou. When drive through a toll station you will pay the tolls.\r\nAs we all know that Phillip likes MM(beautiful girl),but there is seldom cashier is MM. Phillip decided not go through the same toll twice, so he will have more chance to see MM.\r\nOf course, if he see a MM on the way to Jiuzhaigou, when he come back home he cannot go to see the MM again, in case of other toll stations may have more beautiful MM (*^__^*)... ....\r\nRecently phillip was research Android phones and cost a lot of money, so he wants use the least toll during the <b>round-trip</b>, even if he can’t see MM. \r\nPhillip want you to help him write programs to calculate whether his request can meet, If the answer is yes, then what is the minimum cost?\r\n(phillip’s home numbered 0, Jiuzhaigou numbered n+1. n toll stations numbered 1 to n.)', 'There are multiple test cases.\r\nThe first line of data in each group there are two integers n and m. (1 <= n <= 200,1 <= m <= 10000)\r\nThe second line has n positive integers, the i-th number is the toll of toll station i.\r\nThe next m lines each line have two integers i and j, that means toll station i and toll station j is connected (0 <= i, j <= n +1).', 'If Phillip’s requirements cannot be satisfied then output -1, otherwise output the minimum cost.', 'd:\\oj\\data\\1696', 'd:\\oj\\data\\1696', '2 4\r\n1 2\r\n0 1\r\n0 2\r\n1 3\r\n2 3', '3', '', 'power', '', '2011-04-17 10:27:55', 3000, 65536, 'N', NULL, 2, 9, 22, 7, 87, 4, 1, 30000, 405, ''),
(1697, 'Half', 'In this year''s Spring Festival, two is frequently used. Because people often say:"happy 2 (rabbit) year 2 (to) you! ". Even “2B" is often said When people curse.But dearway asks you to write a program that finds all fractions of the form n/d such that n and d are positive integers with no occurrence of 0,n/d evaluates to 0.5, <b><font color=red>and every nonzero digit occrus once and only once (every digit doesn''t include zero and are different) in n and d</font></b>.the output of your program, should be lines of the form ……/…… = 0.5.', 'The first line is an integer T which shows the number of cases. \r\nThen T cases follow. Each case contains one interger n which denotes the number digit of the numerator ( 1 <=  n  <= 4 ):', 'For each case output the answer to meet the requirements of the problem.\r\nAnd the answer should be the ascending order of the numerator.', 'd:\\oj\\data\\1697', 'd:\\oj\\data\\1697', '1\r\n1', 'the form 1/2 = 0.5.\r\nthe form 2/4 = 0.5.\r\nthe form 3/6 = 0.5.\r\nthe form 4/8 = 0.5.\r\nthe form 6/12 = 0.5.\r\nthe form 7/14 = 0.5.\r\nthe form 8/16 = 0.5.\r\nthe form 9/18 = 0.5.', '', 'dearway', '', '2011-09-04 12:57:57', 1000, 65536, 'N', NULL, 26, 294, 9, 268, 91, 52, 26, 30000, 1169, ''),
(1698, 'Half II', 'Hilary and amy loves flowers very much! One day they found a bunch of N roses in the chonglong mountain. rose i has value v_i. They would like to split the roses as evenly as they can, but that is not always possible. What is the smallest difference between the values of the two piles?\r\nIn addition, Hilary and amy have found that there might be multiple ways to split the piles with that minimum difference. They would also like to know the number of ways to split the roses as fairly as possible. \r\nFor example, considering  a bunch of four roses of values: 1, 2,3, and 7. They can only split the roses like this:{1,2,3}，{7},so the smallest difference between the values of the tow piles is 1,and only one way.', 'The are multiple test cases. Each test cases contains:\r\nLine 1 : A single integer: N( 1 <= N <= 250)\r\nLines 2~N+1: Each line contains a single integer: V_i( 1 <= vi <= 2000);', 'Each test case contain two lines; The first line is the smallest difference of two partitions. And the second line is the number of ways to split the roses with the minimum difference. Because the number may be very huge,you should mod 1000000;', 'd:\\oj\\data\\1698', 'd:\\oj\\data\\1698', '4\r\n1\r\n3\r\n2\r\n7\r\n3\r\n2\r\n2\r\n2', '1\r\n1\r\n2\r\n3', '', 'dearway', '', '2011-09-04 14:11:10', 5000, 65536, 'N', NULL, 7, 37, 19, 14, 67, 14, 7, 30000, 662, ''),
(1699, 'I Know a Woman''s Heart', 'Like everyone other, dearway and Hilary like the weekend very much, especially for Hilary! On this weekend dearway and Hilary want to go to the cinema to see a film. To their surprise,they found a lot of people are standing in a line to buy tickets for the movie 《I Know a Woman’s Heart》 when they came to the cinema. Dearway also want to know the woman’s heart,so they joined in the queue!\r\n<img height="461" src="problem-images\\1699.JPG" width="426" /><br />\r\nAssume there are 2n people in the line want to enter the cinema. Admission is 50 yuan RMB. N people have only 50 yuan RMB, while N other people only have 100 yuan RMB(note that the 100 yuan RMB is a whole), the ticket office had no money initially and asked how many ways as long as the people who had only 100 yuan RMB went to buy ticket , the ticket office would have 50 yuan RMB to Keep the change!', 'The first line is an integer T which shows the number of cases. \r\nThen T cases follow. \r\nEach case contains one interger n(<font color=red> 1 &lt;= n &lt;= 30</font> ).', 'For each case output the answer one line.', 'd:\\oj\\data\\1699', 'd:\\oj\\data\\1699', '3 \r\n1 \r\n2 \r\n3', '1 \r\n2 \r\n5', 'If n is 1 ,they can only stand in the queue like this 50 100,and can’t as 100 50. \r\nIf n is 2. They can stand in the queue like this 50 50 100 100 or 50 100 50 100 and the answer is 2.\r\n\r\n<b>Updated data.</b>', 'dearway', '', '2012-02-11 18:45:10', 1000, 65536, 'N', NULL, 23, 130, 18, 107, 84, 52, 20, 30000, 961, ''),
(1700, 'E-rate II', 'As we all know Phillip is preparing GRE test and many students have develop a judge system for him from E-rate I. He appreciates what have done for him. However, he finds that sometimes he will have spelling mistakes. Therefore he plant to program a system that can help find his mistakes.  \r\nYour task is to identify every word from the given paragraphs, and find out whether the word is in the dictionary, if it is not, you should print a most similar word instead(the word should be the smallest lexicographic and nearest).\r\n<b>Note: each world will only be separated by the characters (“.” “!” “?”“,”“ ”). For more detail please refer to the sample input. </b>', 'It will be several lines each line will only contain one word which is the word in the dictionary. The end of dictionary will be a line with “—END--”.  \r\nThe following line is a single number T which indicates there will be T test cases followed.\r\nThen T compositions followed, each composition will contain several lines, and the last line will be “—END--” to specify this composition is finished. The total lines of input compositions will not exceed 1000, and each line will contain no more than 1000 ASCII characters.\r\nIt is guaranteed that dictionary will not be more than 20000 words each word will not exceed 10 characters. Since the length of word in dictionary is not exceeded 10, so for any word if its length longer than 10 should be separated!', 'Must follow the forms before:\r\nCase X:\r\n+--------------------------------+\r\n|             E-Rate             |\r\n|--------------------------------|\r\n|TOTAL WORDS            |      a |\r\n|--------------------------------|\r\n|WRONG WORDS            |      b |\r\n|--------------------------------|\r\n|CORRECT RATIO          |     c% |\r\n+--------------------------------+\r\nStrn: UNKNOWN! --> Ctrn\r\nNote: Strn refers to the nth wrong word, Ctrn refers to the nth word find in the dictionary. Strn should be right fitted! \r\na, b is the integer, and c is the float number which should be kept one number after decimal point. All the numbers must be right fitted. Please follow the format in Sample Output!', 'd:\\oj\\data\\1700', 'd:\\oj\\data\\1700', 'A\r\nABSTRACT\r\nACM\r\nAND\r\nBLUE\r\nBOY\r\nCHINA\r\nCOMPUTER\r\nCONTEST\r\nDEEP\r\nDICTINARY\r\nHAS\r\nIBM\r\nLAB\r\nLOVE\r\nOTHER\r\nPHILLIP\r\nPROGRAM\r\nSCIENCE\r\nSOME\r\nSPONSOR\r\n--END--\r\n1\r\nACM also sponsors other computer science related events such as the worldwide ACM International Collegiate Programming Contest, and has sponsored some other events such as the chess match between Garry Kasparov and the IBM Deep Blue computer.\r\n--END--', 'Case 1:\r\n+--------------------------------+\r\n|             E-Rate             |\r\n|--------------------------------|\r\n|TOTAL WORDS            |      39|\r\n|--------------------------------|\r\n|WRONG WORDS            |      24|\r\n|--------------------------------|\r\n|CORRECT RATIO          |   38.5%|\r\n+--------------------------------+\r\n      ALSO: UNKNOWN! --> A\r\n  SPONSORS: UNKNOWN! --> SPONSOR\r\n   RELATED: UNKNOWN! --> A\r\n    EVENTS: UNKNOWN! --> A\r\n      SUCH: UNKNOWN! --> SCIENCE\r\n        AS: UNKNOWN! --> A\r\n       THE: UNKNOWN! --> A\r\n WORLDWIDE: UNKNOWN! --> A\r\nINTERNATIO: UNKNOWN! --> IBM\r\n       NAL: UNKNOWN! --> A\r\nCOLLEGIATE: UNKNOWN! --> COMPUTER\r\nPROGRAMMIN: UNKNOWN! --> PROGRAM\r\n         G: UNKNOWN! --> A\r\n SPONSORED: UNKNOWN! --> SPONSOR\r\n    EVENTS: UNKNOWN! --> A\r\n      SUCH: UNKNOWN! --> SCIENCE\r\n        AS: UNKNOWN! --> A\r\n       THE: UNKNOWN! --> A\r\n     CHESS: UNKNOWN! --> CHINA\r\n     MATCH: UNKNOWN! --> A\r\n   BETWEEN: UNKNOWN! --> BLUE\r\n     GARRY: UNKNOWN! --> A\r\n  KASPAROV: UNKNOWN! --> A\r\n       THE: UNKNOWN! --> A', '', 'phillip', '', '2011-05-19 20:46:06', 1000, 65536, 'N', NULL, 6, 14, 43, 8, 73, 5, 3, 30000, 732, ''),
(1701, 'Rolling Chinese Word', 'Xiao Hei, a hardware engineer is developing a displaying system which can display any Chinese words in LED (light-emitting diode). It is common to use LED display words, however, Xiao Hei wants his system can display the words in any angle, therefore people will feel the words is rolling when the system changes the angle of words quickly enough. \r\nTo make it easier, we use hexadecimal number to represent the status of the LED, each number represents eight LED points, if the point is lighting the value in the corresponding point of the number will be 1, otherwise it will be 0. Therefore, each line (sixteen points) can be represented by two hexadecimal numbers, and for the 16*16 LED display we need 32 hexadecimal numbers.\r\n<img height="275" src="problem-images/1701-1.png" width="269" /><img height="277" src="problem-images/1701-2.png" width="277" />&nbsp;<br />     \r\n   For example, the binary format of 0xFF is 11111111, which means the corresponding LED positions should be lighting. When we roll the word in anticlockwise, it will inevitablely lose some points for some special angles. Especially we roll counterclockwise 45 degree, it will use the format in the right picture (the white lines will be the original parallel lines). Since the longest white line in the right picture contains 15 points, therefore we will lose all the original points in the most right column! <b>For more detail please see the sample output.    </b>', 'The first line will be 32 hexadecimal numbers separated by ‘,’. \r\nThe following line is a single number T which indicates there will be T test cases followed.\r\nThen T numbers followed, the numbers are the anticlockwise angles that the word will be rolled. The number of the angle is dividable by 45 and is in the range of the integer number.', 'Must follow the forms before:\r\nCase X:\r\n16*16 simulating LED display, if the position is lighting print ‘*’, else print ‘ ’, for each case should print 16 lines, each line must contain 16characters.', 'd:\\oj\\data\\1701', 'd:\\oj\\data\\1701', '0x00,0x00,0xFF,0xFE,0x04,0x40,0x04,0x40,0x7F,0xFC,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x48,0x3C,0x50,0x04,0x60,0x04,0x40,0x04,0x7F,0xFC,0x40,0x04,0x00,0x00\r\n3\r\n0\r\n45\r\n90', 'Case 1:\r\n                \r\n*************** \r\n     *   *      \r\n     *   *      \r\n *************  \r\n *   *   *   *  \r\n *   *   *   *  \r\n *   *   *   *  \r\n *   *   *   *  \r\n *  *     ****  \r\n * *         *  \r\n **          *  \r\n *           *  \r\n *************  \r\n *           *  \r\n                \r\nCase 2:\r\n   *     * *    \r\n  *       *     \r\n *       * *    \r\n*       *   *   \r\n       *     * *\r\n* * * *       * \r\n             * *\r\n            *   \r\n           *    \r\n*         *     \r\n *              \r\n  *       *     \r\n   *       *   *\r\n    *       * * \r\n     *       *  \r\n      *     *   \r\nCase 3:\r\n                \r\n  *           * \r\n  ************* \r\n  *           * \r\n  *          ** \r\n  *         * * \r\n  ****     *  * \r\n  *   *   *   * \r\n  *   *   *   * \r\n  *   *   *   * \r\n  *   *   *   * \r\n  ************* \r\n      *   *     \r\n      *   *     \r\n ***************', '', 'phillip', '', '2011-04-17 11:09:02', 1000, 65536, 'N', NULL, 1, 4, 25, 3, 75, 2, 1, 30000, 409, ''),
(1702, 'Fermat''s Easy Problem', 'In number theory, Pierre de Fermat''s theorem on sums of two squares states that an odd prime p .\r\nFermat usually did not prove his claims and he did not provide a proof of this statement. The first proof was found by Euler after much effort and is based on infinite descent. He announced it in a letter to Goldbach on April 12, 1749. \r\n\r\nGive you a number n,if n is a prime and n mod 4 =1,output "Yes" else "No"', 'Input a number n.(Multiple case)', '"Yes" or "No"', 'd:\\oj\\data\\1702', 'd:\\oj\\data\\1702', '2\r\n3\r\n5\r\n7\r\n11\r\n13', 'No\r\nNo\r\nYes\r\nNo\r\nNo\r\nYes', '<b>Updated data.</b>', 'Mi', '', '2012-05-28 15:30:58', 1000, 65536, 'N', NULL, 75, 373, 20, 298, 80, 86, 74, 30000, 927, ''),
(1703, 'Light on or off II', 'One day Mi watched a video on the Internet,Someone who wrote a program to play Tetris with the dormitory window.He is a ACMer,such as this program is easy to him.He was very excited after looked this video,he want to do that use the East-Five dormitory.But he eventually gave up the idea,because the classmate is all in dormitory.To do that do not a wise decision.But soon he had a new idea, he decided to play the Tetris with  road lights.\r\nAfter his written control a program,one night he sneaked into the school''s electrical control room.\r\nBut the tragedy he found his notebook was broken after he sneaked into the school''s electrical control room.But more tragic is his control program in the notebook.So he calls you for help.You are a ACMer.Can you help him to write the control program?\r\nHe told you, 0 means the road light is off, 1 means the road light is on. We can assume that all lights in a straight line.\r\n<center>\r\n<img src="problem-images/1703.png">\r\n</center>', 't(t<=10) in the first line is the case number.\r\nEach case has two integers in the first line: n and q (1 <= n , q <= 200000).\r\nThe next line contains n characters, ''0'' or ''1'' separated by spaces.\r\nThen q lines are the operations:\r\nop a b: 0 <= op <= 4 , 0 <= a <= b < n. \r\nThere are five Operations:\r\n0 a b :you will be turn off all the lights in [a , b]\r\n1 a b :you will be turn on all the lights in [a , b]\r\n2 a b :if the lights is on make it off otherwise make it on in [a, b]\r\nOutput operations:\r\n3 a b :you will be output the number of lights on in [a, b]\r\n4 a b :you will be output the length of the longest continuous lights on in [a , b]', 'For each output operation , output the result.', 'd:\\oj\\data\\1703', 'd:\\oj\\data\\1703', '2\r\n4 3\r\n1 0 1 1\r\n0 2 3\r\n1 1 2\r\n4 0 3\r\n4 5\r\n1 0 1 1\r\n0 1 2\r\n1 2 3\r\n2 1 3\r\n3 3 3\r\n4 0 3', '3\r\n0\r\n2', '', 'Mi', '', '2012-07-20 08:52:39', 10000, 65536, 'N', NULL, 16, 97, 16, 76, 90, 21, 8, 100000, 944, ''),
(1704, 'Betsy''s Tour', '一个正方形的镇区分为 N*N 个小方块（1 <= N <= 7）。农场位于方格的左上角，集市位于左下角。贝茜穿过小镇，从左上角走到左下角，刚好经过每个方格一次。当 N=3 时，贝茜的漫游路径可能如下图所示： \r\n\r\n----------------\r\n|    |    |    |\r\n| F**********  |\r\n|    |    | *  |\r\n------------*---\r\n|    |    | *  |\r\n|  *****  | *  |\r\n|  * | *  | *  |\r\n---*---*----*---\r\n|  * | *  | *  |\r\n|  M | ******  |\r\n|    |    |    |\r\n----------------\r\n写一个程序，对于给出的 N 值，计算贝茜从农场走到集市有多少种唯一的路径。', '一个整数 N （1 <= N <= 7）', '输出一个整数表示唯一路径的数量。', 'd:\\oj\\data\\1704', 'd:\\oj\\data\\1704', '3', '2', '', 'USACO', '', '2011-05-13 13:25:57', 1000, 65536, 'N', NULL, 1, 4, 25, 3, 75, 1, 1, 30000, 58, ''),
(1705, 'All Latin Squares', '一种正方形的数字编排 \r\n\r\n1 2 3 4 5\r\n2 1 4 5 3\r\n3 4 5 1 2\r\n4 5 2 3 1\r\n5 3 1 2 4\r\n是一个5×5的拉丁幻方，即每个1到5的整数在每行每列都出现且出现一次。 \r\n\r\n写个程序计算N×N的的拉丁幻方的总数且要求第一行是： \r\n\r\n1 2 3 4 5.......N\r\n2<=N<=7', '一行包含一个整数N', '只有一行，表示拉丁正方形的个数，且拉丁正方形的第一行为 1 2 3 . . . N.', 'd:\\oj\\data\\1705', 'd:\\oj\\data\\1705', '5', '1344', '', 'USACO', '', '2011-05-13 20:56:44', 3000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 41, ''),
(1706, 'K Service Stations', 'There is a rectangular city with N rows and M columns, and every grid has some people living there. Now Alibaba wants to choose some grids to build K service stations. The best way to build service stations is to make the largest distance among all distances between a grid and its nearest service station as short as possible. The distance between two grids (x1, y1) and (x2, y2) is max(|x1-x2|, |y1-y2|), where |x| is the absolute value of x. Now it’s you work to build service stations optimally.', 'The first line of input contains an integer T (T <= 1000), which is the number of data sets that follow.\r\n\r\nEvery test case consists of three integers N, M, K, which are specified before.\r\n\r\n1 <= N, M, K <= 1000000000.', 'For every test case, you should output "Case #k: " first, where k indicates the case number and starts at 1. Then output the largest distance among all distances between a grid and its nearest police station while you build police stations optimally.', 'd:\\oj\\data\\1706', 'd:\\oj\\data\\1706', '3\r\n1 1 1\r\n2 2 1\r\n3 3 1', 'Case #1: 0\r\nCase #2: 1\r\nCase #3: 1', '', 'The 9th UESTC Programming Contest Preliminary', '', '2011-09-23 00:52:14', 1000, 65536, 'N', NULL, 3, 11, 27, 7, 70, 3, 3, 30000, 109, ''),
(1707, 'Course', 'There is such a policy in Sichuan University that if you \r\nare not satisfied with the score of your course, you can\r\nstudy this course again to get a better score. If you do \r\nthis and get a higher score(than the highest score he got\r\nbefore), it can cover the original one. And we can say \r\nthis time you update the score of this course successfully.\r\n\r\nHere is one schoolmate''s all the courses he has studied \r\nand scores he got (sorted by chronological order). So \r\ncould you tell me how many time he successfully update his\r\nscores of courses?', 'The first of input is an integer T which stands for the \r\nnumber of test cases. For each test case the first line\r\nis an integer N (1 <= N <= 100) which stands for the number\r\nof courses he has studied.Then following N lines, each line\r\ncontains a string (only contains letters and the length is\r\nno more than 30,which stands for the course name) and an integer\r\n(0<=integer<=100, which stands for the score of the course),\r\nseparated by a space.\r\n\r\nRemember: the best way is getting the best score in one time.\r\nStudy one course many times is not a recommended choice!', 'For each test case output the number of times he update successfully.', 'd:\\oj\\data\\1707', 'd:\\oj\\data\\1707', '2\r\n6\r\nCProgramming 70\r\nDataStructrue 80\r\nCProgramming 80\r\nCProgramming 60\r\nCProgramming 90\r\nDataStructrue 70\r\n2\r\nCompilerTheory 95\r\nNetwork 90', '2\r\n0', '', 'wwr&fengzlzl', '', '2011-11-02 14:57:47', 1000, 65536, 'N', NULL, 24, 69, 35, 40, 66, 23, 21, 30000, 461, ''),
(1708, 'The Weight of Tree', '456 has a tree of n nodes, each node is assigned with an \r\ninteger number. Now 456 wants to select a subtree, such that\r\nthe sum of all integers on the nodes of the subtree is maxmized.\r\nCan you help him?', 'On the first line of the input is an integer T, and then T \r\ncases follows. Each case begins with a positive integer n(1 <= n <= 10^5), \r\nthen n numbers Wi(-1000 <= Wi <= 1000),Wi for \r\nthe number on the ith node. Then n - 1 lines follows, each \r\nline contains two numbers a, b(1 <= a, b <= n)\r\nindicate that there is a edge between node a and b.', 'For each test case, output one integer on a line, \r\nthe maximized sum can be achieved by selecting a subtree.', 'd:\\oj\\data\\1708', 'd:\\oj\\data\\1708', '3\r\n1\r\n5\r\n2\r\n5 -5\r\n1 2\r\n5\r\n-2 -3 7 -1 4\r\n1 2\r\n2 3\r\n3 4\r\n2 5', '5\r\n5\r\n8', '', '456', '', '2011-04-11 22:01:13', 3000, 65536, 'N', NULL, 6, 19, 32, 13, 68, 7, 6, 30000, 263, ''),
(1709, 'A Coin Problem', 'One day,Jiameier is tidying up the room,and find some coins. \r\nThen she throws the coin to play.Suddenly,she thinks of a \r\nproblem ,that if throw n times coin ,how many situations of\r\nno-continuous up of the coin. Hey,Let''s solve the problem.', 'The first of input is an integer T which stands for the \r\nnumber of test cases. For each test case, there is one integer\r\nn (1<=n<=1000000000) in a line, indicate the times of throwing coins.', 'The number of all situations of no-continuous up of the coin, moduled by 10000.', 'd:\\oj\\data\\1709', 'd:\\oj\\data\\1709', '3\r\n1\r\n2\r\n3', '2\r\n3\r\n5', '', 'Jiameier', '', '2012-03-18 14:08:44', 3000, 65536, 'N', NULL, 17, 34, 50, 17, 57, 16, 13, 30000, 382, ''),
(1710, 'Sawthooth II', 'There is a romantic line called sawthooth II which consists\r\nof two parallel infinite half-lines joined by a straight \r\nsegment. It looks like a character ‘Z’. You are given N ‘Z’ lines, \r\ncan you calculate the maximum number of regions they can divide the plane?', 'The first line is an integer T which stands for the number of test cases. \r\nThen it follows T test cases. Each test case has only one \r\nline contains only one integer N (0 <= N <= 10^9).', 'For each test case, print one line containing an integer which stands for \r\nthe maximum number of regions they can divide the plane.', 'd:\\oj\\data\\1710', 'd:\\oj\\data\\1710', '2\r\n1\r\n2', '2\r\n12', '', 'lne', '', '2011-04-11 14:17:42', 3000, 65536, 'N', NULL, 13, 32, 41, 16, 57, 13, 12, 30000, 264, ''),
(1711, 'Cheapest Cost', 'baihacker chooses the easy mode and is borned in X star. The \r\nlowest temperature of X star is 0 degree and the highest is \r\n1000 degree. \r\n\r\nThe technology of X star is so advanced that the relation \r\ndepartment can predict the temperature of the coming 1000 \r\ndays. The temperature of each day is independent. When the\r\ntemperature difference of two consecutive days is larger \r\nthan K, the people will be ill, so the relation department \r\nemploy Y company to control the temperature such that no\r\npeople will be ill for the temperature difference.\r\n\r\nThe cost of change the temperature S degree of a day is S * S.\r\nWhen temperature difference of two consecutive days is D, \r\nthen Y company have to pay A * D for maintaining his honor.\r\n \r\nAs the CTO of Y company, you are to calculate the cheapest cost.', 'The first line of the input is an integer T which stands for\r\nthe number of test cases. Then T test cases follow.\r\n\r\nThe first line of each test case is 3 integers N, K, A seperated\r\nby a space. Then N integers seperated by a space in a line to \r\nrepresent the temperatures in the coming n days.\r\n\r\nconstraints:\r\nA, K is in the range of [0, 1000].\r\nN is in the range of [1, 1000].\r\nThe temperature after adjusted can not be below 0 or higher than 1000.\r\nT is no more than 150.', 'For each test case, output the cheapest cost in a single line.\r\nThe cost is defined as the sum of changing the temperator and \r\nmaintaining their honor.', 'd:\\oj\\data\\1711', 'd:\\oj\\data\\1711', '2\r\n1 1 1\r\n1\r\n3 1 10\r\n1 2 3', '0\r\n2', '', 'baihacker', '', '2011-04-07 22:08:34', 10000, 65536, 'N', NULL, 2, 5, 40, 3, 60, 4, 2, 10000, 207, ''),
(1712, 'Bathroom', 'JiangAn''s bathroom is divided into N (1 <= N <= 50) rooms \r\nlabeled from 1 to N. And there are some compartments in each\r\nroom. If the compartment is available, it will be labeled\r\nwith a number. Otherwise it will be labeled with "XX".\r\nEach number of the compartment in one room is uniqueness.\r\n\r\nThe compartments in one room are arranged only in the shape\r\nof "U" (Such as the room 1 and room 2 in sample) or "II" \r\n(for example the sample of room 3). If a student wants to \r\nhave a shower, he should swipe his card on the machine firstly. \r\nIn order to facilitate your understanding, we would name \r\nthis machine with A. The machine A will assign an available \r\ncompartment for him randomly. And this compartment is marked \r\nas in use at the same time.\r\n \r\nWhen he finished his shower, he should swipe his card again\r\non machine B. The machine B will calculate the cost and this\r\ncompartment is marked as available again. As we know, many \r\npeople don''t like the compartments in corners,\r\n(Such as No.01, No.05, No.08 and No.12 compartments in room 1, \r\nNo.15, No.17, No.20 compartments in room 2, \r\nAnd No.01, No.05, No.06, No.10 compartments in room 3)\r\nAt least I don''t. zsasuke doesn''t like the compartments in \r\ncorners too. And he also doesn''t like the compartment whose \r\nthe room number connecting the compartment number is a prime number. \r\n(Such as room 1 No.01 compartment, 101 is a prime number).\r\n\r\nEvery time zsasuke is assigned to a compartment he doesn''t like, \r\nhe will immediately swipe his card on machine B to cancel this \r\nallocation, then swipe his card on machine A again. He won''t stop\r\nthis until he is assigned to a satisfactory compartment. (What a \r\nselfish person! Students in queue after him must curse him...)\r\nBut sometimes, it may take many times to get a satisfactory \r\ncompartment. Recently, our clever zsasuke think of a new idea \r\nthat he can take many cards to the bathroom. (We assumed that \r\nhe borrowed enough cards from his schoolmates, what a selfish person!)\r\nIf his first card is assigned to a unsatisfactory compartment, \r\nhe will immediately swipe the second card on machine A to get a \r\nnew compartment (Do not need to cancel previous assigning), \r\nuntil the compartment he got is satisfactory.\r\n\r\nzsasuke wants to know how much the new method better than the old one. \r\nSo can you do him a favor, What is expecting number of times zsasuke \r\nneeds to swiping his card(s) on machine A to get a satisfactory \r\ncompartment for the two methods respectively?', 'The first line of the input is an integer T which stands for \r\nthe number of test cases.\r\nFor each test case, the first line is an integer N and N lines\r\nfollow which stands for the information of each room.\r\nFor each room, the first line is an integer L, indicating that\r\nthis room has L lines. The following L lines stand for the map \r\nof the room and each line has at most 600 chars. We guarantee \r\nthe arrangement of compartments in the room strictly correspond\r\nwith the description above.\r\n\r\nThe shape of every compartment is strictly as follows:\r\n----\r\n|##|\r\n----\r\nThe "##" is either a number of exactly 2 digits (leading zeros may \r\nappeared) or "XX". Otherwise it is not a compartment.\r\nHere is sad news that zsasuke''s teammate, onmylove has used this \r\nmap paper as scratch paper. So on the map there may appear some other\r\nredundant chars. But fortunately, the redundant chars will not \r\ncover the origin compartments, or make up any new compartments.\r\nAfter the description of room there is a line contains an integer\r\nM which stands for how many people taking a shower when zsasuke come\r\nto the bathroom. And following M lines, each line contains two integers X and Y,\r\nwhich stands for the No.Y compartment in room X is used now.', 'For each test case, output one line contain two floating-point numbers \r\n(rounded to 6 digits after decimal point), which stands for the expecting\r\nnumber of times zsasuke needs for old and new methods respectively, separated by a space.', 'd:\\oj\\data\\1712', 'd:\\oj\\data\\1712', '1\r\n3\r\n11\r\n----     ----\r\n|01|     |12|\r\n----     ----\r\n|02|     |11|\r\n----     ----\r\n|03|     |10|\r\n----     ----\r\n|04|     |09|\r\n-------------\r\n|05|06|07|08|\r\n-------------\r\n9\r\n----  ----\r\n|XX|  |20|\r\n----  ----\r\n|13|  |19|\r\n----  ----\r\n|14|  |18|\r\n----------\r\n|15|16|17|\r\n----------\r\n11\r\n----  ----   :)\r\n|01|  |10|   Orz\r\n----01----   =.=||\r\n|02|==|09|\r\n----- ----   ---\r\n|03|04|08|   |11|\r\n----------    ---\r\n|04|  |07|\r\n----  ----\r\n|05|  |06|\r\n----  ----\r\n5\r\n1 2\r\n1 3\r\n2 13\r\n3 02\r\n3 09', '2.272727 2.166667', '', 'fengzlzl', '', '2011-04-07 20:25:31', 1000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 126, ''),
(1713, 'Game', 'At the break of an English class, a382050365 and Power were \r\nso bored that decided to play a word puzzle to kill time. \r\nThis game follows the following rules:\r\n\r\n1> They in turn say a word containing only vowel (A, E, I, O, U)\r\nand the next word being said should exactly begin with the same \r\nletter as the last letter of the former word.\r\n\r\n2> It can starts with only a single word.\r\n\r\n3> Each word can be said only once and must be \r\ncontained in the dictionary.\r\n\r\n4> The total length all the word used in the game is defined \r\nas the complexity of the game. Tian found it’s hard to end \r\nthe game in a short time. So he had a question .What’s the max \r\ncomplexity of the game based on a certain dictionary.', 'The first line is an integer T which stands for the number of \r\ntest cases. For each test case, The first line contains only \r\none integer N( 1<= N <= 16) which indicates the amount of dictionary . \r\nEach following line contains a certain word in the dictionary \r\nand each word is a string consist of A, E, I, O, U.\r\nThe length of each words is not more than 100, and all words are distinct.', 'For each test case , output one line with an integer indicating the max complexity.', 'd:\\oj\\data\\1713', 'd:\\oj\\data\\1713', '2\r\n3\r\nAE\r\nA\r\nIA\r\n2\r\nAI\r\nOUE', '5\r\n3', '', 'TLE/power/a382050365/hanchao717/Translated by Mo MEI', '', '2011-04-07 20:24:15', 3000, 65536, 'N', NULL, 4, 10, 40, 6, 60, 5, 4, 30000, 210, ''),
(1714, 'Tunnel', 'As is known to all, there was a huge earthquake attacking\r\nJapan recently, thus leading a series of after-disasters, \r\nsuchas Tsunami, swollowing a vast piece of land.Countless \r\npoeple died while many others lost their home.\r\n\r\nL.Alexander and Jinjin were one couple of lover of the homeless \r\nin the Tsunami. hand in hand, they were washed away by the high \r\ntide. After a long period of drifting, they landed at a place \r\ncalled Libya. Faced with a brand-new surroundings this couple \r\ndecided to rebuild their home.  But life is full of frustration, \r\nthe leader of Libya, Omar Mouammer al Gaddafi,offenced some \r\nleaders of powerfulcountries, resulting in Libya''s being bombed \r\nby the airfoce of the Country Combination. So there was a trail \r\nof destruction in the poor country after being bombed,however \r\nlove is strong and love is full of magic power,which makes the \r\ncouple determined to go against all obstacles that against their \r\nreconstruction, despite the war adding difficulties.\r\n\r\nThey learn from the great Chinese people defending the Japanese \r\n60 years ago, and lead the peole there to dig tunnels to fight \r\nagaint their enemies. They dig tunnels between the beachheads \r\nand Gaddafi. To save labor and time, assume there is a tunnel \r\nbetween A and B, also between B and C, and there will be no tunnel \r\nbetween A and C. That is, there does not exist three places such that\r\nevery pair of them are connected by a tunnel.\r\n\r\nIn this case your task is to figure out a way to dig as many tunnels\r\nas possible to help Omar Mouammer al Gaddafi, striving for the\r\nindependece. Give out your plan!', 'The first line is an integer T which stands for the number of test \r\ncases.\r\nEach test case contain one line with an integer N (0<=N<=10000) \r\nindicating the number of places.', 'For each test case only one line with an integer indicating the \r\nnumber of tunnels that can be dug.', 'd:\\oj\\data\\1714', 'd:\\oj\\data\\1714', '2\r\n1\r\n6', '0\r\n9', '', 'TLE/power/a382050365/hanchao717/Translated & Backgound designed by Mo MEI', '', '2011-05-24 07:26:26', 3000, 65536, 'N', NULL, 19, 28, 68, 9, 38, 17, 15, 30000, 264, ''),
(1715, 'Tim', 'As a leader,LiuBang has many excellent generals as his \r\nsubordinates,Such as Hanxin,YingBu,PengYue,JiBu,FanKuai and so on.\r\n\r\nAfter LiuBang unified China,he divided his territory into n \r\ndifferent regions and decided to send these generals out to \r\ngovern them. It is common sence that one general can at most\r\ngovern one region and one region can be governed by at most \r\none general. There exist some bidirectional roads between some\r\nregions, and for any two distinct regions, at most one road\r\nexists between them. there is no self-loop,that is to say,\r\nthe structure of the regions and  the roads connecting them \r\nforms a simple graph. Besides, for any two adjacent regions\r\n(a road connects them)A and B, there are at most two different\r\nsimple routes from A to B(Hint:simple route contains no duplicate\r\nregions or roads)\r\n\r\nIt is rumored that if there are two adjacent regions are both\r\nbeing governed by these generals, the two generals who govern \r\nthem will plot to rebel, LiuBang could not tolerate such situation\r\ncompletely. But it is also believed the more generals he send \r\nout to govern these regions, the more stable his country will be.\r\n\r\nNow LiuBang wants to know, how many generals he can send out at \r\nmost while guaranteeing no rebellion would happen.', 'The first line of the input contains an integer T indicating the\r\nnumber of cases.\r\n\r\nEach case contains two positive integers n,m (1 <= n <= 10000,1 <= m <= 20000 ),\r\nin the first line, indicating the number of regions and the number\r\nof roads. then m lines follow, each line contains 2 positive integers\r\nA,B(1 <= A,B <= n,A!=B) indicating a road connecting region A and region B.', 'a single Integer for each case indicating the maximun number \r\nof generals LiuBang could send out.', 'd:\\oj\\data\\1715', 'd:\\oj\\data\\1715', '1\r\n4 2\r\n1 2\r\n3 4', '2', 'LiuBang Can send two generals to 1 and 3,but if LiuBang send the two generals\r\nto 1 and 2,they will plot to rebel as region 1 and 2 are adjacent.', 'zsasuke', '', '2011-04-07 20:26:10', 1000, 65536, 'N', NULL, 3, 5, 60, 1, 33, 3, 2, 30000, 173, ''),
(1716, 'Dynamic Query System', 'Dynamic Query System (DQS) is a system can manage integers. \r\nIt have 8 kinds of commands as follow:\r\n\r\n1. I X : insert an integer X into this system.\r\n\r\n2. R X : remove integer X from this system, if the number \r\n         of X is greater than 1 , just remove one of them,\r\n         and if X does not exist, do nothing.\r\n         \r\n3. S   : print the number of the integers in the system \r\n         in a single line.\r\n\r\n4. L X : print the number of the integers which are less\r\n         than X in a single line.\r\n\r\n5. W K : print the K-th(1-based) integer in a single line \r\n         if the integers are sorted by ascending order.\r\n	 if K is zero or K is larger than the number of the\r\n         integers in the system, just output -1.\r\n         \r\n6. C X : print the number of X in this system.\r\n\r\n7. MI  : print the minimum integer of the system in a \r\n         single line. if the answer does not exist, just output -1.\r\n         \r\n8. MA  : print the maximum integer of the system in a\r\n         single line. if the answer does not exist, just output -1.', 'The first line of the input is an integer T which stands\r\nfor the number of test cases. Then T test cases follow.\r\n\r\nThe first line of test case is a number N, which is the \r\nnumber of commands. Then n commands follow, and each \r\ncommand is in a single line.\r\n\r\nconstraints:\r\nX is in the range of [0, 100000000).\r\nK is in the range of [0, 100000000).\r\nN is in the range of [0, 500000].', 'Simulate the DQS, and the output is the output of DQS.', 'd:\\oj\\data\\1716', 'd:\\oj\\data\\1716', '1\r\n6\r\nI 1\r\nI 2\r\nS\r\nC 2\r\nMI\r\nMA', '2\r\n1\r\n1\r\n2', '', 'baihacker', '', '2011-04-15 13:04:15', 9000, 65536, 'N', NULL, 5, 9, 56, 1, 33, 2, 2, 30000, 147, ''),
(1717, 'Refraction I', '<font face="Courier New">Refraction is a common phenomena in our life. Now ,comes a<br />\r\nproblem. Give you a kind of liquid and its refractive index,<br />\r\nyou should calculate the focus of the light on the ground<br />\r\n(Point T in the picture below).<br />\r\n<br />\r\nTo let the problem easier,we assume that the air`s refractive<br />\r\nindex is always 1. As the picture below,the light source is<br />\r\nalways in the air(the point S in the picture). We assume the<br />\r\nY coordinate of ground level is 0.<br />\r\n<br />\r\n<img src="problem-images/1717.jpg" /></font><br />', '<font face="Courier New">The first line of the data contains a number T(1&lt;=T&lt;=500),<br />\r\nindicating the total number of test cases. Each test case<br />\r\nconsists of 2 lines .The first line contains 4 numer x1,y1,x2,y2,<br />\r\nindicating the coordinate of the light and the coordinate of<br />\r\nthe direction respectively. The second line contains 2 numbers n,H,<br />\r\nindicating the refractive index of the liquid and the deepth of the liquid.</font><br />', '<font face="Courier New">For each test case, write a single float numbers x on a single<br />\r\nline, indicating the X coordinate of the focus,retain 3 digits<br />\r\nafter the decimal point.<br />\r\n<br />\r\nIf there&nbsp; is not focus on the ground ,just output “Impossible”&lt;br />\r\non a single line.</font><br />', 'd:\\oj\\data\\1717', 'd:\\oj\\data\\1717', '3\r\n3 6 0 6\r\n1.35 3\r\n3 6 0 3\r\n1.35 3\r\n3 6 3 3\r\n1.35 3', 'Impossible<br />\r\n-1.845<br />\r\n3.000<br />', '', 'SCUQIFUGUANG', '', '2011-06-02 12:49:28', 1000, 65536, 'N', NULL, 11, 25, 44, 14, 56, 11, 11, 30000, 256, ''),
(1718, 'Simple Again', 'Suppose you have n days to do something with your ability.\r\nThe initial value of your ability is zero.\r\n\r\nEvery single day(suppose the ith day) you can do only one of\r\nthe following things:\r\n\r\n(1) Improve yourself. So the value of your ability will increase a[i].\r\n\r\n(2) Use the current value of your ability to get the same \r\n    amounts of money.\r\n \r\nFor example, you have the ability as V, so this day you can get money V. \r\nHowever, you cannot improve your ability this day.\r\n\r\nCan you program to figure out:\r\nin these n days, how much money can you get at most?', 'the first line is an integer T which stands for the number of test cases.\r\nFor each test case, the first line gives you n(1<=n<=100000),\r\nwhich means you have n days totally. The following line consists\r\nof n integer(s), all of these represent the array a(0<=a[i]<=10^6),\r\nas we mentioned above.\r\n\r\nYou know, with your ages growing, the ability you can improve \r\neveryday is shrinking. So that for each i < n we have a[i] >= a[i+1].', 'For each test cases, output the number of money you can get at most.', 'd:\\oj\\data\\1718', 'd:\\oj\\data\\1718', '1\r\n3\r\n6 5 5', '12', '', 'onmylove', '', '2011-04-22 07:00:43', 3000, 65536, 'N', NULL, 24, 64, 37, 27, 60, 19, 18, 30000, 425, ''),
(1719, 'A Simple Problem', 'You know, just as the title imply, this is a simple problem.\r\nIn a contest, given the team-id, solved, penalty of all the \r\nteams, tell me the champion.If the numbers of solved problem\r\nof two team are different, the rank of the one who solves\r\nmore problems is higher. Otherwise, if the the penalties of \r\ntwo team are different, the rank of the one who has less penalty\r\nis higher. Otherwise, the rank of the one whose team-id''s \r\nlexicographic order is earlier than the other is higher.', 'The first line of the input is an integer T which stands for \r\nthe number of test cases. Then T test cases follow.\r\nThe first line of test case is a number n, which is the number\r\nof team in a contest. Then n line(s) follow. Each line contain\r\na string, and two integers: str, s( 0 <= s <= 15 ), p(0<=p <= 20000), \r\nseparated by a blank indicating that there is a team whose id is str,\r\nthe number of solved problem is s, and the penalty is p.\r\n\r\nconstraints:\r\nn is in the range of [1 100].\r\nEach team-id does not contain any blanks.\r\nThe length of team-id is in the range of[1, 20].\r\nAny two teams will not have the same team-id.', 'For each test case, output one line with an string indicating the the champion.', 'd:\\oj\\data\\1719', 'd:\\oj\\data\\1719', '1\r\n7\r\nRefreshing 5 745 \r\nRock_Restart 4 510 \r\nLeadWill 4 679 \r\nAPTX4869 5 374 \r\nWaterCop 5 607 \r\nISAP 5 638 \r\nTLE 4 902', 'APTX4869', '', 'onmylove', '', '2012-04-02 00:53:25', 3000, 65536, 'N', NULL, 26, 90, 29, 63, 72, 29, 24, 30000, 520, ''),
(1720, 'Academic Report in USTC', 'Dreamone has been studying in USTC for half a year. The hard-working of USTC students has impressed him deeply.\r\n\r\nDreamone is fond of attending academic reports, which are held in USTC from time to time. As we know, there are many roads in the campus. See the map of USTC west campus below:\r\n\r\n<img src=http://acm.ustc.edu.cn/ustcoj/img/1156.png />\r\n\r\nWe assume that the academic reports are held on roads (strange, huh?). Here comes the problem: Given a start point S and an end point T, Dreamone wants to travel from S to T. At the same time, he wants to attend exactly K reports on the way from S to T. The problem is to find the shortest path from S to T. \r\n\r\nBy the way, Dreamone can travel a road with an academic report more than once, Thus if he has passed a road with a report X times, the numbers of attended reports will be added by X.', 'The first line of the input file contains a single integer T (1 ≤ T ≤ 200), the number of test cases, followed by the input data for each test case. \r\n\r\nFor each test case, The first line consists of three integers N (1<=N<=100) and M (1<=M<=1000), K (1<=K<=10) . N indicates the numbers of vertices of the map, M indicates the numbers of roads. Vertices are numbered from 1 to N.\r\n\r\nThe next M lines each contain the information of road. Each road is described as follows: ‘U V C B’. U and V represent the two vertices of a road. C represents the length of the road. All the roads here are bidirectional. B represents whether there exists a report on the road, 1 indicates yes, 0 indicates no. (1<=U, V<=N, 0< C<=100, B=0 or 1)\r\n\r\nThe next line contains two numbers: S and T. (1<=S, T<=N), which represent the start point and the end point respectively.', 'Output such shortest path from S to T. if there is not such path ,output -1 instead.', 'd:\\oj\\data\\1720', 'd:\\oj\\data\\1720', '6\r\n2 1 1\r\n2 1 5 1\r\n1 2\r\n2 3 2\r\n1 2 5 1\r\n1 2 4 1\r\n1 1 2 1\r\n1 2\r\n2 1 3\r\n1 2 2 1\r\n1 2\r\n2 1 2\r\n1 2 2 1\r\n1 2\r\n3 2 1\r\n2 1 3 0\r\n2 3 2 1\r\n1 3\r\n3 2 3\r\n2 1 3 0\r\n2 3 2 1\r\n1 3', '5\r\n6\r\n6\r\n-1\r\n5\r\n9', '', 'Wenhong@USTC', '', '2011-04-11 21:19:12', 2000, 65536, 'N', NULL, 0, 2, 0, 2, 100, 1, 0, 30000, 75, ''),
(1721, 'Fraction', 'Convert a rational fraction to a decimal number.', 'There are multiple test cases.\r\nEach line is a fraction a/b(0<=a< b< 100).', 'Each line output the decimal number.', 'd:\\oj\\data\\1721', 'd:\\oj\\data\\1721', '1/2\r\n1/3', '0.500000\r\n0.333333', '', 'power', '', '2012-03-21 14:22:56', 1000, 65536, 'N', NULL, 51, 89, 57, 36, 42, 54, 49, 30000, 412, '');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1722, 'E-rate I', 'Phillip is preparing GRE(Graduate Record Examination) test. Recently, he has noticed that the ETS(Educational Test Service) will use computer to judge the Analyze Writing which is one of three parts of the GRE test. Since Phillip is a skillful ACMer, he decides to compose a program that can simulate the software which used by ETS. Therefore, he would have chance to improve his standard writing result. The software that used to judge the analyze writing is called E-rate system. This system can identify every letter, world, and even sentence in the candidate’s compositions.\r\nIn order to better evaluate Phillip’s standard writing before the GRE test, he decides to develop such a program that similar to e-rate system which used by ETS. However, due to the complex work of preparing the test, he dose not have any time to finish this work. Therefore, you as the school mates of Phillip, are so clever that can help Phillip develop this e-rate system.\r\nYour task is to identify every letter, word and sentence from the given paragraphs, and calculate the average length of the word and sentence, since they are also dominated factors to the final result. \r\n<b>Note: each world will only be separated by the characters (''.'' ''!'' ''?'' '','' '' '').For more detail please refer to the sample input. </b>', 'First line is a single number T which indicates there will be T test cases followed.\r\nThen T compositions followed, each composition will contain several lines, and the last line will be "—END--" to specify this composition is finished. The total lines of input compositions will not exceed 1000, and each line will contain no more than 1000 ASCII characters.', 'Must follow the forms before:\r\nCase X:\r\n+--------------------------------+\r\n|             E-Rate             |\r\n|--------------------------------|\r\n|TOTAL WORDS            |      a |\r\n|--------------------------------|\r\n|TOTAL SENTENCES        |      b |\r\n|--------------------------------|\r\n|AVERAGE WORD LENGTH    |      c |\r\n|--------------------------------|\r\n|AVERSGE SENTENCE LENGTH|      d |\r\n+--------------------------------+\r\n\r\nNote: a, b is the integer, and c, d is the float number which should be kept one number after decimal point. All the numbers must be right fitted.', 'd:\\oj\\data\\1722', 'd:\\oj\\data\\1722', '1\r\nACM also sponsors other computer science related events such as the worldwide ACM International Collegiate Programming Contest, and has sponsored some other events such as the chess match between Garry Kasparov and the IBM Deep Blue computer.\r\n--END--', 'Case 1:\r\n+--------------------------------+\r\n|             E-Rate             |\r\n|--------------------------------|\r\n|TOTAL WORDS            |      37|\r\n|--------------------------------|\r\n|TOTAL SENTENCES        |       1|\r\n|--------------------------------|\r\n|AVERAGE WORD LENGTH    |     5.5|\r\n|--------------------------------|\r\n|AVERSGE SENTENCE LENGTH|    37.0|\r\n+--------------------------------+', '', 'phillip', '', '2011-05-17 10:59:02', 1000, 65536, 'N', NULL, 2, 24, 8, 22, 92, 8, 2, 30000, 270, ''),
(1723, '郁闷的出纳员', 'OIER公司是一家大型专业化软件公司，有着数以万计的员工。作为一名出纳员，我的任务之一便是统计每位员工的工资。这本来是一份不错的工作，但是令人郁闷的是，我们的老板反复无常，经常调整员工的工资。如果他心情好，就可能把每位员工的工资加上一个相同的量。反之，如果心情不好，就可能把他们的工资扣除一个相同的量。我真不知道除了调工资他还做什么其它事情。\r\n工资的频繁调整很让员工反感，尤其是集体扣除工资的时候，一旦某位员工发现自己的工资已经低于了合同规定的工资下界，他就会立刻气愤地离开公司，并且再也不会回来了。每位员工的工资下界都是统一规定的。每当一个人离开公司，我就要从电脑中把他的工资档案删去，同样，每当公司招聘了一位新员工，我就得为他新建一个工资档案。\r\n老板经常到我这边来询问工资情况，他并不问具体某位员工的工资情况，而是问现在工资第k多的员工拿多少工资。每当这时，我就不得不对数万个员工进行一次漫长的排序，然后告诉他答案。\r\n好了，现在你已经对我的工作了解不少了。正如你猜的那样，我想请你编一个工资统计程序。怎么样，不是很困难吧？', '第一行有两个非负整数n和min。n表示下面有多少条命令，min表示工资下界。\r\n接下来的n行，每行表示一条命令。命令可以是以下四种之一：\r\n名称	格式	作用\r\nI命令	I_k	新建一个工资档案，初始工资为k。如果某员工的初始工资低于工资下界，他将立刻离开公司。\r\nA命令	A_k	把每位员工的工资加上k\r\nS命令	S_k	把每位员工的工资扣除k\r\nF命令	F_k	查询第k多的工资\r\n_（下划线）表示一个空格，I命令、A命令、S命令中的k是一个非负整数，F命令中的k是一个正整数。\r\n在初始时，可以认为公司里一个员工也没有。', '输出文件的行数为F命令的条数加一。\r\n对于每条F命令，你的程序要输出一行，仅包含一个整数，为当前工资第k多的员工所拿的工资数，如果k大于目前员工的数目，则输出-1。\r\n输出文件的最后一行包含一个整数，为离开公司的员工的总数。', 'd:\\oj\\data\\1723', 'd:\\oj\\data\\1723', '9 10\r\nI 60\r\nI 70\r\nS 50\r\nF 2\r\nI 30\r\nS 15\r\nA 5\r\nF 1\r\nF 2', '10\r\n20\r\n-1\r\n2', '【约定】\r\n&#61548;	I命令的条数不超过100000\r\n&#61548;	A命令和S命令的总条数不超过100\r\n&#61548;	F命令的条数不超过100000\r\n&#61548;	每次工资调整的调整量不超过1000\r\n&#61548;	新员工的工资不超过100000', 'noi2004', '', '2012-05-01 16:53:32', 5000, 65536, 'N', NULL, 8, 53, 15, 45, 92, 10, 4, 30000, 340, ''),
(1724, 'Sequence', 'Give you three numbers, can you guess the fourth?', 'Three integers.', 'One integer。', 'd:\\oj\\data\\1724', 'd:\\oj\\data\\1724', '1 2 3\r\n\r\n1 2 4', '4\r\n\r\n8', 'Single  case.\r\n<b>Updated data.</b>', '', '', '2012-03-28 12:45:36', 1000, 65536, 'N', NULL, 81, 231, 35, 150, 67, 86, 75, 30000, 740, ''),
(1725, 'Arbiter（暴力枚举练习 or 搜索）', 'Arbiter is a kind of starship in the StarCraft science-fiction series.  The Arbiter-class starship is a Protoss warship specializing in providing psychic support. Arbiters were crewed exclusively by Judicators; unlike other warships that were manned predominantly by Templar. The Judicator used the Arbiter as a base to provide support using space-time manipulation.\r\nArbiters could weaken space-time, tearing rifts in the fabric of space-time, creating a vortex linking another location to the Arbiter’s location. This could be used to move personnel over long distances between stars.\r\nIn the meantime of widely used Arbiter to transfer, KMXS, the captain of one Arbiter, was warning that some person had got a serious mental disorder after the trip on his Arbiter. By using mice as model animals, he found the sake, it’s because of chirality!\r\nEvery person has chirality, either left-handed or right-handed. Actually all the persons must live with the food which has the same chirality. When one person took Arbiter from one star to another one, his chirality will be changed (from left-handed to right-handed or from right-handed to left-handed). If a person took a long trip and finally got back to his own star, however, his chirality might be changed to the opposite state other than his original, which would cause fatal mental disorder, or even death. \r\nKMXS has the channels map among the starts and he need to prohibit minimum number of channels from traveling so that wherever a person starts his traveling from when he gets his original star he’ll be safe. KMXS turns to your help.', 'The first line of input consists of an integer T, indicating the number of test cases.\r\nThe first line of each case consists of two integers N and M, indicating the number of stars and the number of channels. Each of the next M lines indicates one channel (u, v) which means there is a bidirectional channel between star u and star v (u is not equal to v).', 'Output one integer on a single line for each case, indicating the minimum number of channels KMXS must prohibit to avoid mental disorder.\r\n\r\nConstraints\r\n\r\n0 < T <= 10\r\n0 <= N <= 15 0 <= M <= 300\r\n0 <= u, v < N and there may be more than one channel between two stars.', 'd:\\oj\\data\\1725', 'd:\\oj\\data\\1725', '1\r\n3 3\r\n0 1\r\n1 2\r\n2 0', '1', '', '', '', '2011-04-20 13:43:26', 1000, 65536, 'N', NULL, 3, 6, 50, 3, 60, 2, 2, 30000, 286, ''),
(1726, 'ChaeYeon', 'Chae Yeon is a popular pop female singer who rose to fame with her amazing sexy dance style and the sounds of nature voice she has. She proved to be a great dancer, and she showed off her vocals in her live performances. If you had ever seen her dance, I bet you’d love it.\r\nI felt stage lighting interesting when I was enjoying Chae Yeon’s performance. We all know that stage lighting instruments are used for the concerts and other performances taking place in live performance venues. They are also used to light the stages.  Actually this is a color mixing process.  There are two types of color mixing: Additive and Subtractive. Most stages use the former and in this case there are three primary colors: red, green, and blue. In the absence of color, or when no colors are showing, the stage is black. If all three primary colors are showing, the result is white. When red and green combine together, the result is yellow. When red and blue combine together, the result is magenta.  When blue and green combine together, the result is cyan.  When two same color combine together, the result is still that color.\r\n\r\nWe have got the coordinate and the primary color of the figure that each Stage Lighting Instrument sent out. For simplicity’s sake, we can just treat the figure as a circle. Of course we’ll know the radius of each colored circle. Some color may be changed based on the Color Mixed Theory we mentioned above. Can you find the area of each color?', 'The first line consists of an integer T, indicating the number of test cases.\r\nThe first line of each case consists of three integers R, G, B, indicating the number of red circles, green circles and blue circles. The next R + G + B lines, each line consists of three integer x, y, r, indicating the coordinate and the radius. The first R lines descript the red circles, the second G lines descript the green circles and the last B lines descript the blue circles.', 'Output seven floating numbers, they are the area of red, green, blue, white, yellow, magenta and cyan.  Please take each number with two factional digits.\r\nConstraints\r\n0 < T <= 20\r\n0 <= R, G, B <= 100\r\n-100 <= x, y <= 100; 0 <= r <= 100', 'd:\\oj\\data\\1726', 'd:\\oj\\data\\1726', '1\r\n1 1 1\r\n0 2 3\r\n2 0 3\r\n-2 0 3', '9.28 15.04 15.04 4.92 7.04 7.04 1.28', 'Gentleman’s Reminder: please make sure that your program won’t output “-0.00”.', '', '', '2011-04-18 14:28:55', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 100, ''),
(1727, 'Dolphin', 'Dolphins are marine mammals that are closely related to whales and porpoises. They might have some kind of the biggest brains in the water, but are dolphins really smart? Some scientists say that they use their big brains to stay warm in the sea, rather than for lots of thinking. Obviously those scientists don’t think dolphins are smart.\r\n We know that the brain is made up of two types of cells – neurons and glia. Neurons do the thinking, while glia do things like keeping the brain warm to help the neurons. After looking at how dolphins’ brains are put together, they claim that dolphins have lots of glia and not many neurons.\r\nIn order to find out how smart the dolphins are, we throw one of them into a maze we''ve just created, to see how long it''ll take the dolphin to get out.\r\nThe maze consists of nodes and bidirectional edges connecting them. \r\nThe dolphin needs power to swim, so we place exactly one fish at each node for him to enjoy.\r\nThe dolphin is not interested in eating the same kind of fish more than once, but he can''t resist any food if it''s just in front to him! As a result, the dolphin decided to PLAN a route before going, so that it will not REACH any kind of fish more than once.\r\nGiven the information above, can you tell me the minimum time that the dolphin needs to get out?', 'The first line consists of an integer T, indicating the number of test cases.\r\nThe first line of each case consists of four integers N, M, S and E, indicating the number of nodes, the number of edges, the starting node and destination.\r\nEach of the next M lines consists of three integers U, V, C, indicating that there is an edge with length C between node U and V. It will take a dolphin C time to pass this edge.\r\nThe next line consists of N integers. Ki indicates the label of which kind fishes i-th node has.', 'Output the minimum time that a dolphin needs to get to the destination on a single line. If a dolphin can never get to the destination, please output -1.\r\n\r\nConstraints\r\n0 < T <= 20\r\n2 <= N <= 100; 0 <= M <= 10000; 0 <= S, E < N\r\n0 <= U, V < N; 0 < C <= 1000\r\n0 <= Ki < 1000\r\nThere may be more than one edge between two nodes, and may be loop, an edge that begins and ends both on the same vertex. All edges are bidirectional.', 'd:\\oj\\data\\1727', 'd:\\oj\\data\\1727', '2\r\n2 1 0 1\r\n0 1 1\r\n0 0\r\n4 4 0 3\r\n0 1 1\r\n1 3 1\r\n0 2 2\r\n2 3 2\r\n0 0 1 2', '-1\r\n4', '', 'swust20095862', '', '2011-04-18 14:31:12', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 84, ''),
(1728, 'FreeOpen', 'FreeOpen is an organization which arranges blind data for girls and boys. The moral of that name is “Open your free mind to find your other half”. FreeOpen use a pet to make a match to a girl and a boy. FreeOpen believe that if a girl and a boy like each other and they like the same pet, they will be happy when they are living together with that pet.\r\nThere are n boys, m girls and k pets. FreeOpen want know the maximum matches. Each match consists of one girl, one boy and one pet, and each girl, boy or pet can only be in one single match.', 'The first line consists of an integer T, indicating the number of test cases.\r\nThe first line of each case consists of three integers G, B, P, indicating the number of girls, the number of boys and the number of pets. The next G * B matrix indicates whether a girl and a boy like each other. The i-th girl and j-th boy like each other if and only if Matrix (i, j) = 1; the next G * P matrix indicates whether a girl likes a pet and the next B * P matrix indicates whether a boy likes a pet.', 'Output the maximum matches on a single line for each test case.\r\nConstrains\r\n0 < T <= 10\r\n0 < G, B, P <= 20\r\n0 < G + B + P <= 60', 'd:\\oj\\data\\1728', 'd:\\oj\\data\\1728', '2\r\n2 1 3\r\n1\r\n1\r\n1 1 1\r\n1 1 1\r\n0 0 0\r\n15 15 15\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n1 1 1 1 1 1 1 1 1 1 0 1 1 1 1\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n1 1 1 1 1 1 1 1 1 1 0 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 0 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 0 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 0 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 0 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 0 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 0 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 0 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 0 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 0 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 0 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 0 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1', '0\r\n13', '', 'swust20095862', '', '2011-04-18 14:33:10', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 74, ''),
(1729, 'FreeRadiant', 'Desolators are the elite troops of the WHU army in the alternate world of ICPC.\r\nWhen the Desolator plant a powerful Radiation Cannon in the ground, the cannon emits a radiation field over a circular area with radius R, poisoning everything within the circle (including boundary).The desolator must remain immobile while using this attack; if he wishes to move he has to uproot the cannon, disabling the radiation field. To protect desolator himself from the harm of radiation, the Desolator wears an armored Radiation suit. This suit is protected against the radiation emitted by the cannon. \r\nThere are N enemies need to be destroyed. Each enemy can be destroyed if their total attacked times reach a certain value. Fortunately we know that value for each enemy. \r\nOur honored desolator FreeRadiant is executing this mission. He can use his cannon freely: e.g. plant it somewhere, wait for some time, uproot it and plant it somewhere else again and so on. The Desolator is so fast that planting, uprooting and moving the cannon takes no time, only the poisoning time matters. He just wants to know the total time needed in which he has to plant the cannon into the ground.', 'The first line consists of an integer of T, indicating the test cases in the file.\r\nEach case begins with two integers, N and R, indicating the number of enemies and the radius of the circle. The next N lines, each line consists of two integers Xi, Yi, Pi, indicating the coordinate and the time needed to destroy each enemy.', 'Output one float number rounded to 2 fractional digits, indicating the minimum time for the cannon needs to be planted in the ground.\r\nConstrains\r\nT <= 20\r\n0 < N <= 100 0 < R <= 10000\r\n0 <= Xi, Yi, Pi <= 10000', 'd:\\oj\\data\\1729', 'd:\\oj\\data\\1729', '2\r\n4 1\r\n1 1 3\r\n1 -1 3\r\n-1 1 3\r\n-1 -1 3\r\n5 1\r\n100 100 10000\r\n1 1 3\r\n1 -1 3\r\n-1 1 3\r\n-1 -1 3', '6.00\r\n10006.00', '', 'swust20095862', '', '2011-04-18 14:34:58', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 73, ''),
(1730, 'GCC', 'The GNU Compiler Collection (usually shortened to GCC) is a compiler system produced by the GNU Project supporting various programming languages.  But it doesn’t contains the math operator “!”.\r\nIn mathematics the symbol represents the factorial operation. The expression n! means "the product of the integers from 1 to n". For example, 4! (read four factorial) is 4 × 3 × 2 × 1 = 24. (0! is defined as 1, which is a neutral element in multiplication, not multiplied by anything.)\r\nWe want you to help us with this formation: (0! + 1! + 2! + 3! + 4! + ... + n!)%m', 'The first line consists of an integer T, indicating the number of test cases.\r\nEach test on a single consists of two integer n and m.', 'Output the answer of (0! + 1! + 2! + 3! + 4! + ... + n!)%m.\r\nConstrains\r\n0 < T <= 20\r\n0 <= n < 10^100 (without leading zero)\r\n0 < m < 1000000', 'd:\\oj\\data\\1730', 'd:\\oj\\data\\1730', '1\r\n10 861017', '593846', '', 'swust20095862', '', '2011-10-03 23:38:20', 1000, 65536, 'N', NULL, 8, 33, 24, 23, 79, 8, 6, 30000, 307, ''),
(1731, 'Moonmist', 'An Unidentified Flying Object (Commonly abbreviated as UFO) is the popular term for any aerial phenomenon whose cause cannot be easily or immediately identified. We always believe UFO is the vehicle of aliens. But there is an interrogation about why UFO always likes a circular saucer? There must be a reason. Actually our scientists are developing a new traffic system “Moonmist”. It is distinguished from the traditional traffic. We use circular saucers in this new traffic system and the saucers moves extremely fast. When our scientists did their test, they found that traffic accident was too hard to be avoided because of the high speed of the advanced saucer. They need us to develop a system that can tell them the nearest saucer. The distance between two saucers is defined as the shortest distance between any two points in different saucers.', 'The first line consists of an integer T, indicating the number of test cases.\r\nThe first line of each case consists of an integer N, indicating the number of saucers. Each saucer is represented on a single line, consisting of three integers X, Y, R, indicating the coordinate and the radius. You can assume that the distance between any two saucers will never be zero.', 'For each test case, please output a floating number with six fractional numbers, indicating the shortest distance.\r\n\r\nConstraints\r\n0 < T <= 10\r\n2 <= N <= 50000\r\n0 <= X, Y, R <= 100000', 'd:\\oj\\data\\1731', 'd:\\oj\\data\\1731', '1\r\n2\r\n0 0 1\r\n10 10 1', '12.142136', '', 'swust20095862', '', '2011-04-20 12:14:13', 1000, 65536, 'N', NULL, 0, 1, 0, 1, 100, 1, 0, 30000, 82, ''),
(1732, 'Nova', 'The Lich is a powerful hero that he can kill a wisp with his skill Frost Nova. The Burning Legion wants to conquer the forest so they sent some liches to kill all the wisps. A lich can kill a wisp once he could see the wisp and the wisp in his attack range. So the lich can attack a wisp when the distance between them is less than or equal to specific R and no trees are on the segment between the lich and wisp. Each lich has a cool down time that once he used Frost Nova he has to wait a few seconds for the next attack. Different liches may have different attack range and cool down time. The Lich King is the leader of the Burning Legion and he wants to arrange the attack order so the liches can wipe out all the wisps as soon as possible.', 'The first line consists of an integer T, indicating the number of test cases.\r\nThe first line of each case consists of three integers N, M, K, indicating the number of lich, the number of wisps and the number of trees. The next N lines, each line consists of four integers x, y, r, t indicating the coordinate of that a lich, the radius of the attack range that lich’s Frost Nova can reach and the value of cool down time. The next M lines, each line consists of two integers x, y indicating the coordinate of each wisp. The last K lines, each line consists of three integers x, y, r, indicating the coordinate and radius of a tree. A lich cannot attack a wisp if the segment between them has a common point with the tree. The lich, wisp and trees will not overlap with each other.', 'Output the minimum time lich need to kill all the wisps on a single line, or -1 if lich cannot kill all the wisps.\r\n\r\nConstrains\r\n0 < T <= 20\r\n0 <= N, M, K <= 200\r\n-10000 <= x, y <= 10000\r\n0 <= r, t <= 10002', 'd:\\oj\\data\\1732', 'd:\\oj\\data\\1732', '1\r\n2 3 1\r\n-100 0 100 3\r\n100 0 100 5\r\n-100 -10\r\n100 10\r\n110 11\r\n5 5 10', '5', '', 'swust20095862', '', '2011-04-18 14:41:32', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 73, ''),
(1733, 'Slash', 'The American English slash (/) is a punctuation mark. In the early modern period, in the Fraktur script, which was widespread through Europe in the Middle Ages, one slash(/) represented a comma, while two slashes (//) represented a dash.\r\nWith the wide use of computers, slash appeared far more than at any previous time in history. On Unix-like systems and in URLs, the slash is to separate directory and file components of a path:\r\n/home/whuacm/chaeyeon/Sherlockpp.jpg\r\nhttp://acm.whu.edu.cn/\r\nBut in Windows systems, it uses (\\) to separate directory and file components of a path:\r\nC:\\Users\\v-yungao\\Music\\Shake\r\nThat really confuses me. Could you help me to judge if the string I wrote is right. \r\nPlease notice that I would only make a mistake by changing (\\) to (/) or (/) to (\\). All the strings were constituted by a-z, A-Z, 0-9, (.) , (\\) and (/), no other characters would appear in the strings.\r\nA string of URL always begins with “[a-zA-Z]+://” (Notice (/) maybe changed to (\\) ), in which “[a-zA-Z]+” represents any non-empty string of letters.\r\nWindows path begins with “[a-zA-Z]:\\” (Notice (\\) maybe changed to (/)), in which “[a-zA-Z]” means an English letter. (e.g. “C:\\\\windows” is a URL not a Windows path)\r\nThe path of Unix-like system begins with (/) or (\\).\r\nI’ll give you some strings, can you tell me which type those strings belong to and those correct forms.', 'The first line consists of an integer T, indicating the number of strings.\r\nThe next T lines, each line consists of a single non-empty string.  All of those are really data from our daily life.', 'For each string:\r\nIf it belongs to a path in Unix-like systems, output “It’s a path in Unix-like systems!” in a new line and the correct string in the next line.\r\nIf it belongs to a path in Windows system, output “It’s a path in Windows system!” in a new line and the correct string in the next line.\r\nIf it’s a URL, output “It’s a URL!” in a new line and the correct string in the next line.\r\nThe kind of each input string can be uniquely determined. \r\nConstrains\r\n0 < T <= 20\r\nThe length of each string will not be longer than 50.', 'd:\\oj\\data\\1733', 'd:\\oj\\data\\1733', '4\r\nhttp://acm.whu.edu.cn/felioj\r\nhttp:/\\acm.whu.edu.cn/11111011001/\r\n\\home\\whuacm\\Slash\\yama\r\nZ:\\movie/chaeyeon', 'It''s a URL!\r\nhttp://acm.whu.edu.cn/felioj\r\nIt''s a URL!\r\nhttp://acm.whu.edu.cn/11111011001/\r\nIt''s a path in Unix-like systems!\r\n/home/whuacm/Slash/yama\r\nIt''s a path in Windows system!\r\nZ:\\movie\\chaeyeon', '', 'swust20095862', '', '2011-04-30 20:34:37', 1000, 65536, 'N', NULL, 11, 30, 37, 16, 62, 11, 10, 30000, 307, ''),
(1734, 'WHUgirls', 'There are many pretty girls in Wuhan University, and as we know, every girl loves pretty clothes, so do they. One day some of them got a huge rectangular cloth and they want to cut it into small rectangular pieces to make scarves. But different girls like different style, and they voted each style a price wrote down on a list. They have a machine which can cut one cloth into exactly two smaller rectangular pieces horizontally or vertically, and ask you to use this machine to cut the original huge cloth into pieces appeared in the list. Girls wish to get the highest profit from the small pieces after cutting, so you need to find out a best cutting strategy. You are free to make as many scarves of a given style as you wish, or none if desired. Of course, the girls do not require you to use all the cloth.', 'The first line of input consists of an integer T, indicating the number of test cases.\r\nThe first line of each case consists of three integers N, X, Y, N indicating there are N kinds of rectangular that you can cut in and made to scarves; X, Y indicating the dimension of the original cloth. The next N lines, each line consists of two integers, xi, yi, ci, indicating the dimension and the price of the ith rectangular piece cloth you can cut in.', 'Output the maximum sum of prices that you can get on a single line for each case.\r\n\r\n\r\nConstrains\r\n0 < T <= 20\r\n0 <= N <= 10; 0 < X, Y <= 1000\r\n0 < xi <= X; 0 < yi <= Y; 0 <= ci <= 1000', 'd:\\oj\\data\\1734', 'd:\\oj\\data\\1734', '1\r\n2 4 4\r\n2 2 2\r\n3 3 9', '9', '', 'swust20095862', '', '2011-05-01 01:02:01', 1000, 65536, 'N', NULL, 0, 2, 0, 2, 100, 1, 0, 30000, 89, ''),
(1735, 'Space Emergency II', 'There''s an emergency—in space! You need to send your fleet''s flagship as quickly as possible from star 0 to star N, traveling through the other stars in increasing numerical order along the way (0→1→...→N). Your flagship normally travels at a speed of 0.5 parsecs per hour. \r\n\r\nIn addition to sending your flagship, you can order your engineers to build up to L speed boosters at different stars. Building a speed booster takes t hours, and all L speed boosters can be built in parallel. While your flagship travels from a star with a completed speed booster to the next star, its speed is 1 parsec per hour. \r\n\r\nIf a speed booster is completed at a star while your flagship is traveling from that star to the next one, your flagship will start moving faster as soon as the speed booster is completed. \r\n\r\nHow many hours does it take your flagship to get to star N if you build speed boosters to make it arrive as soon as possible?', 'The first line of the input gives the number of test cases, T. T lines follow. Each contains integers, L, t, N and C, followed by C integers ai, all separated by spaces. ai is the number of parsecs between star k*C+i and star k*C+i+1, for all integer values of k. \r\n\r\nFor example, with N=8, C=3, a0=3, a1=5 and a2=4, the distances between stars are [3, 5, 4, 3, 5, 4, 3, 5]. \r\n\r\nLimits\r\n1 ≤ T ≤ 100.\r\n1 ≤ C ≤ 1000.\r\nC ≤ N.\r\n1 ≤ ai ≤ 104.\r\n0 ≤ t ≤ 1011.\r\nt is even. \r\n<b>\r\n1 ≤ N ≤ 10^6.\r\n0 ≤ L ≤ N. \r\n</b>', 'For each test case, output one line containing "Case #x: y", where x is the case number (starting from 1) and y is a single integer: the number of hours it takes to reach star N. The answer is guaranteed to always be an integer.', 'd:\\oj\\data\\1735', 'd:\\oj\\data\\1735', '2\r\n2 20 8 2 3 5\r\n1 4 2 2 10 4', 'Case #1: 54\r\nCase #2: 20', 'In the second case, we can build one speed booster. The distances between stars are [10, 4]. We build the speed booster on the first star. After 4 hours, our flagship has gone 2 parsecs and the speed booster is complete. It takes our flagship another 8 hours to get to star 1, then 8 more hours to get to star 2, our destination. \r\n\r\nNote: This problem takes place in a universe where the speed of light is much higher than 1 parsec per hour, so we don''t have to worry about special relativistic effects.', 'GCJ 2011 1C', '', '2011-04-19 15:33:13', 5000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 30, ''),
(1736, '飞行员配对方案问题', '第二次世界大战时期，英国皇家空军从沦陷国征募了大量外籍飞行员。由皇家空军派出\r\n的每一架飞机都需要配备在航行技能和语言上能互相配合的2 名飞行员，其中1 名是英国飞\r\n行员，另1 名是外籍飞行员。在众多的飞行员中，每一名外籍飞行员都可以与其他若干名英\r\n国飞行员很好地配合。如何选择配对飞行的飞行员才能使一次派出最多的飞机。对于给定的\r\n外籍飞行员与英国飞行员的配合情况，试设计一个算法找出最佳飞行员配对方案，使皇家空\r\n军一次能派出最多的飞机。\r\n对于给定的外籍飞行员与英国飞行员的配合情况，编程找出一个最佳飞行员配对方案，\r\n使皇家空军一次能派出最多的飞机。', '由文件input.txt提供输入数据。文件第1 行有2个正整数m和n。n是皇家空军的飞行\r\n员总数(n<100)；m是外籍飞行员数。外籍飞行员编号为1~m；英国飞行员编号为m+1~n。\r\n接下来每行有2 个正整数i和j，表示外籍飞行员i可以和英国飞行员j配合。文件最后以2\r\n个-1 结束。', '程序运行结束时，将最佳飞行员配对方案输出到文件output.txt 中。第1 行是最佳飞行\r\n员配对方案一次能派出的最多的飞机数M。接下来M 行是最佳飞行员配对方案。每行有2\r\n个正整数i和j，表示在最佳飞行员配对方案中，飞行员i和飞行员j 配对。\r\n如果所求的最佳飞行员配对方案不存在，则输出‘No Solution!’。', 'd:\\oj\\data\\1736', 'd:\\oj\\data\\1736', '5 10\r\n1 7\r\n1 8\r\n2 6\r\n2 9\r\n2 10\r\n3 7\r\n3 8\r\n4 7\r\n4 8\r\n5 10\r\n-1 -1', '4\r\n1 7\r\n2 9\r\n3 8\r\n5 10', '王晓东《线性规划和网络流24题》系列题目不需要管output.txt，是标准输入输出，多文件单数据。\r\n所有题目中n的值一般小于150.', '线性规划和网络流24题', '', '2012-09-04 20:18:09', 1000, 65536, 'N', NULL, 21, 36, 58, 15, 48, 18, 16, 30000, 232, 'power721'),
(1737, '太空飞行计划问题', 'W 教授正在为国家航天中心计划一系列的太空飞行。每次太空飞行可进行一系列商业\r\n性实验而获取利润。现已确定了一个可供选择的实验集合E={E1，E2，…，Em}，和进行这\r\n些实验需要使用的全部仪器的集合I={I1，I2，…In}。实验Ej需要用到的仪器是I的子集Rj。\r\n配置仪器Ik的费用为ck美元。实验Ej的赞助商已同意为该实验结果支付pj美元。W教授的\r\n任务是找出一个有效算法，确定在一次太空飞行中要进行哪些实验并因此而配置哪些仪器才\r\n能使太空飞行的净收益最大。这里净收益是指进行实验所获得的全部收入与配置仪器的全部\r\n费用的差额。\r\n&laquo;编程任务：\r\n对于给定的实验和仪器配置情况，编程找出净收益最大的试验计划。', '由文件input.txt提供输入数据。文件第1行有2 个正整数m和n。m是实验数，n是仪\r\n器数。接下来的m 行，每行是一个实验的有关数据。第一个数赞助商同意支付该实验的费\r\n用；接着是该实验需要用到的若干仪器的编号。最后一行的n个数是配置每个仪器的费用。', '程序运行结束时，将最佳实验方案输出到文件output.txt 中。第1 行是实验编号；第2\r\n行是仪器编号；最后一行是净收益。', 'd:\\oj\\data\\1737', 'd:\\oj\\data\\1737', '2 3\r\n10 1 2\r\n25 2 3\r\n5 6 7', '1 2\r\n1 2 3\r\n17', '', '线性规划和网络流24题', '', '2012-09-05 21:14:10', 1000, 65536, 'N', NULL, 20, 39, 51, 18, 62, 15, 11, 30000, 229, 'power721'),
(1738, '最小路径覆盖问题', '给定有向图G=(V,E)。设P 是G 的一个简单路（顶点不相交）的集合。如果V 中每个\r\n顶点恰好在P 的一条路上，则称P是G 的一个路径覆盖。P 中路径可以从V 的任何一个顶\r\n点开始，长度也是任意的，特别地，可以为0。G 的最小路径覆盖是G 的所含路径条数最少\r\n的路径覆盖。\r\n设计一个有效算法求一个有向无环图G 的最小路径覆盖。\r\n提示：设V={1，2，... ，n}，构造网络G1=(V1,E1)如下：\r\n<img src=problem-images\\1738.jpg />\r\n每条边的容量均为1。求网络G1的（ x0 , y0 ）最大流。\r\n编程任务：\r\n对于给定的有向无环图G，编程找出G的一个最小路径覆盖。', '由文件input.txt提供输入数据。文件第1 行有2个正整数n和m。n是给定有向无环图\r\nG 的顶点数，m是G 的边数。接下来的m行，每行有2 个正整数i和j，表示一条有向边(i,j)。', '程序运行结束时，将最小路径覆盖输出到文件output.txt 中。从第1 行开始，每行输出\r\n一条路径。文件的最后一行是最少路径数。', 'd:\\oj\\data\\1738', 'd:\\oj\\data\\1738', '11 12\r\n1 2\r\n1 3\r\n1 4\r\n2 5\r\n3 6\r\n4 7\r\n5 8\r\n6 9\r\n7 10\r\n8 11\r\n9 11\r\n10 11', '1 4 7 10 11\r\n2 5 8\r\n3 6 9\r\n3', '暂时未写判断路径的SPJ。', '线性规划和网络流24题', '', '2012-08-11 01:51:09', 1000, 65536, 'N', NULL, 9, 12, 75, 3, 33, 8, 6, 30000, 127, 'power721'),
(1739, '魔术球问题', '假设有n根柱子，现要按下述规则在这n根柱子中依次放入编号为1，2，3，...的球。\r\n（1）每次只能在某根柱子的最上面放球。\r\n（2）在同一根柱子中，任何2个相邻球的编号之和为完全平方数。\r\n试设计一个算法，计算出在n根柱子上最多能放多少个球。例如，在4 根柱子上最多可\r\n放11 个球。\r\n编程任务：\r\n对于给定的n，计算在n根柱子上最多能放多少个球。', '由文件input.txt提供输入数据。文件第1 行有1个正整数n(n<=55)，表示柱子数。', '程序运行结束时，将n 根柱子上最多能放的球数以及相应的放置方案输出到文件\r\noutput.txt中。文件的第一行是球数。接下来的n行，每行是一根柱子上的球的编号。', 'd:\\oj\\data\\1739', 'd:\\oj\\data\\1739', '4', '11\r\n1 8\r\n2 7 9\r\n3 6 10\r\n4 5 11', '', '线性规划和网络流24题', '', '2012-08-11 01:51:22', 1000, 65536, 'N', NULL, 9, 18, 50, 8, 62, 6, 5, 30000, 139, 'power721'),
(1740, '圆桌问题', '假设有来自n 个不同单位的代表参加一次国际会议。每个单位的代表数分别为\r\nri,i=1,2,...,n 。会议餐厅共有m张餐桌，每张餐桌可容纳ci(i=1,2, ,m) 个代表就餐。\r\n为了使代表们充分交流，希望从同一个单位来的代表不在同一个餐桌就餐。试设计一个算法，\r\n给出满足要求的代表就餐方案。\r\n编程任务：\r\n对于给定的代表数和餐桌数以及餐桌容量，编程计算满足要求的代表就餐方案。', '由文件input.txt提供输入数据。文件第1行有2 个正整数m和n，m表示单位数，n表\r\n示餐桌数，1<=m<=150, 1<=n<=270。文件第2 行有m个正整数，分别表示每个单位的代表\r\n数。文件第3 行有n个正整数，分别表示每个餐桌的容量。', '程序运行结束时，将代表就餐方案输出到文件output.txt 中。如果问题有解，在文件第\r\n1 行输出1，否则输出0。接下来的m行给出每个单位代表的就餐桌号。如果有多个满足要\r\n求的方案，只要输出1 个方案。', 'd:\\oj\\data\\1740', 'd:\\oj\\data\\1740', '4 5\r\n4 5 3 5\r\n3 5 2 6 4', '1\r\n1 2 4 5\r\n1 2 3 4 5\r\n2 4 5\r\n1 2 3 4 5', '', '线性规划和网络流24题', '', '2012-08-11 12:02:58', 1000, 65536, 'N', NULL, 14, 23, 61, 9, 56, 8, 7, 30000, 169, 'power721'),
(1741, '最长递增子序列问题', '给定正整数序列x1 ,... , xn  &#61516; 。\r\n（1）计算其最长递增子序列的长度s。\r\n（2）计算从给定的序列中最多可取出多少个长度为s的递增子序列。\r\n（3）如果允许在取出的序列中多次使用x1和xn，则从给定序列中最多可取出多少个长\r\n度为s的递增子序列。\r\n编程任务：\r\n设计有效算法完成（1）（2）（3）提出的计算任务。', '由文件input.txt提供输入数据。文件第1 行有1个正整数n(n<400)，表示给定序列的长度。接\r\n下来的1 行有n个正整数 x1 , ... , xn。', '程序运行结束时，将任务（1）（2）（3）的解答输出到文件output.txt中。第1 行是最长\r\n递增子序列的长度s。第2行是可取出的长度为s 的递增子序列个数。第3行是允许在取出\r\n的序列中多次使用x1和xn时可取出的长度为s 的递增子序列个数。', 'd:\\oj\\data\\1741', 'd:\\oj\\data\\1741', '4\r\n3 6 2 5', '2\r\n2\r\n3', '', '线性规划和网络流24题', '', '2012-08-11 15:03:32', 1000, 65536, 'N', NULL, 1, 18, 6, 10, 91, 6, 1, 30000, 150, 'power721'),
(1742, '试题库问题', '假设一个试题库中有n道试题。每道试题都标明了所属类别。同一道题可能有多个类别\r\n属性。现要从题库中抽取m 道题组成试卷。并要求试卷包含指定类型的试题。试设计一个\r\n满足要求的组卷算法。\r\n编程任务：\r\n对于给定的组卷要求，计算满足要求的组卷方案。', '由文件input.txt提供输入数据。文件第1行有2个正整数k和n (2 <=k<= 20, k<=n<= 1000)\r\nk 表示题库中试题类型总数，n 表示题库中试题总数。第2 行有k 个正整数，第i 个正整数\r\n表示要选出的类型i 的题数。这k个数相加就是要选出的总题数m。接下来的n行给出了题\r\n库中每个试题的类型信息。每行的第1 个正整数p表明该题可以属于p类，接着的p个数是\r\n该题所属的类型号。', '程序运行结束时，将组卷方案输出到文件output.txt 中。文件第i 行输出 “i：”后接类\r\n型i的题号。如果有多个满足要求的方案，只要输出1 个方案。如果问题无解，则输出“No Solution!”。', 'd:\\oj\\data\\1742', 'd:\\oj\\data\\1742', '3 15\r\n3 3 4\r\n2 1 2\r\n1 3\r\n1 3\r\n1 3\r\n1 3\r\n3 1 2 3\r\n2 2 3\r\n2 1 3\r\n1 2\r\n1 2\r\n2 1 2\r\n2 1 3\r\n2 1 2\r\n1 1\r\n3 1 2 3', '1: 1 6 8\r\n2: 7 9 10\r\n3: 2 3 4 5', '', '线性规划和网络流24题', '', '2012-09-12 09:19:16', 10000, 65536, 'N', NULL, 41, 53, 77, 6, 43, 9, 8, 30000, 170, 'power721'),
(1743, '机器人路径规划问题', '机器人Rob可在一个树状路径上自由移动。给定树状路径T上的起点s 和终点t，机器\r\n人Rob要从s运动到t。树状路径T上有若干可移动的障碍物。由于路径狭窄，任何时刻在\r\n路径的任何位置不能同时容纳2 个物体。每一步可以将障碍物或机器人移到相邻的空顶点\r\n上。设计一个有效算法用最少移动次数使机器人从s运动到t。\r\n编程任务：\r\n对于给定的树T，以及障碍物在树T中的分布情况。计算机器人从起点s 到终点t的最\r\n少移动次数。', '由文件input.txt提供输入数据。文件的第1 行有3 个正整数n，s和t，分别表示树T的\r\n顶点数，起点s的编号和终点t 的编号。\r\n接下来的n 行分别对应于树T 中编号为0，1，…，n-1 的顶点。每行的第1 个整数h\r\n表示顶点的初始状态，当h=1 时表示该顶点为空顶点，当h=0 时表示该顶点为满顶点，其\r\n中已有1 个障碍物。第2 个数k表示有k个顶点与该顶点相连。接下来的k个数是与该顶点\r\n相连的顶点编号。', '程序运行结束时，将计算出的机器人最少移动次数输出到文件output.txt 中。如果无法\r\n将机器人从起点移动到终点，输出“No solution！”。', 'd:\\oj\\data\\1743', 'd:\\oj\\data\\1743', '5 0 3\r\n1 1 2\r\n1 1 2\r\n1 3 0 1 3\r\n0 2 2 4\r\n1 1 3', '3', '', '线性规划和网络流24题', '', '2012-08-30 09:45:20', 1000, 65536, 'N', NULL, 0, 2, 0, 2, 100, 1, 0, 30000, 188, 'power721'),
(1744, '方格取数问题', '在一个有m*n 个方格的棋盘中，每个方格中有一个正整数。现要从方格中取数，使任\r\n意2 个数所在方格没有公共边，且取出的数的总和最大。试设计一个满足要求的取数算法。\r\n编程任务：\r\n对于给定的方格棋盘，按照取数要求编程找出总和最大的数。', '由文件input.txt提供输入数据。文件第1 行有2 个正整数m和n，分别表示棋盘的行数\r\n和列数。接下来的m行，每行有n个正整数，表示棋盘方格中的数。', '程序运行结束时，将取数的最大总和输出到文件output.txt中。', 'd:\\oj\\data\\1744', 'd:\\oj\\data\\1744', '3 3\r\n1 2 3\r\n3 2 3\r\n2 3 1', '11', '', '线性规划和网络流24题', '', '2012-08-29 21:10:59', 1000, 65536, 'N', NULL, 12, 22, 55, 8, 47, 10, 9, 30000, 125, 'power721'),
(1745, '餐巾计划问题', '一个餐厅在相继的N 天里，每天需用的餐巾数不尽相同。假设第i天需要ri块餐巾(i=1，\r\n2，…，N)。餐厅可以购买新的餐巾，每块餐巾的费用为p分；或者把旧餐巾送到快洗部，\r\n洗一块需m天，其费用为f 分；或者送到慢洗部，洗一块需n 天(n>m)，其费用为s< f 分。\r\n每天结束时，餐厅必须决定将多少块脏的餐巾送到快洗部，多少块餐巾送到慢洗部，以及多\r\n少块保存起来延期送洗。但是每天洗好的餐巾和购买的新餐巾数之和，要满足当天的需求量。\r\n试设计一个算法为餐厅合理地安排好N 天中餐巾使用计划，使总的花费最小。\r\n编程任务：\r\n编程找出一个最佳餐巾使用计划.', '由文件input.txt提供输入数据。文件第1 行有6 个正整数N,p,m,f,n,s。N 是要安排餐巾\r\n使用计划的天数；p 是每块新餐巾的费用；m 是快洗部洗一块餐巾需用天数；f 是快洗部洗\r\n一块餐巾需要的费用；n是慢洗部洗一块餐巾需用天数；s是慢洗部洗一块餐巾需要的费用。\r\n接下来的N 行是餐厅在相继的N 天里，每天需用的餐巾数。', '程序运行结束时，将餐厅在相继的N 天里使用餐巾的最小总花费输出到文件output.txt\r\n中。', 'd:\\oj\\data\\1745', 'd:\\oj\\data\\1745', '3 10 2 3 3 2\r\n5\r\n6\r\n7', '145', '', '线性规划和网络流24题', '', '2012-08-30 20:52:40', 1000, 65536, 'N', NULL, 12, 39, 31, 18, 75, 9, 6, 30000, 139, 'power721'),
(1746, '航空路线问题', '给定一张航空图，图中顶点代表城市，边代表2城市间的直通航线。现要求找出一条满\r\n足下述限制条件的且途经城市最多的旅行路线。\r\n(1)从最西端城市出发，单向从西向东途经若干城市到达最东端城市，然后再单向从东\r\n向西飞回起点(可途经若干城市)。\r\n(2)除起点城市外，任何城市只能访问1次。\r\n编程任务：\r\n对于给定的航空图，试设计一个算法找出一条满足要求的最佳航空旅行路线。', '由文件input.txt提供输入数据。文件第1 行有2个正整数N 和V，N 表示城市数，N<100，\r\nV 表示直飞航线数。接下来的N行中每一行是一个城市名，可乘飞机访问这些城市。城市名\r\n出现的顺序是从西向东。也就是说，设i,j 是城市表列中城市出现的顺序，当i>j 时，表示\r\n城市i 在城市j 的东边，而且不会有2 个城市在同一条经线上。城市名是一个长度不超过\r\n15 的字符串，串中的字符可以是字母或阿拉伯数字。例如，AGR34或BEL4。\r\n再接下来的V 行中，每行有2 个城市名，中间用空格隔开，如 city1 city2 表示city1\r\n到city2 有一条直通航线，从city2 到city1 也有一条直通航线。', '程序运行结束时，将最佳航空旅行路线输出到文件output.txt 中。文件第1 行是旅行路\r\n线中所访问的城市总数M。接下来的M＋1 行是旅行路线的城市名，每行写1 个城市名。首\r\n先是出发城市名，然后按访问顺序列出其它城市名。注意，最后1行（终点城市）的城市名\r\n必然是出发城市名。如果问题无解，则输出“No Solution!”。', 'd:\\oj\\data\\1746', 'd:\\oj\\data\\1746', '8 9\r\nVancouver\r\nYellowknife\r\nEdmonton\r\nCalgary\r\nWinnipeg\r\nToronto\r\nMontreal\r\nHalifax\r\nVancouver Edmonton\r\nVancouver Calgary\r\nCalgary Winnipeg\r\nWinnipeg Toronto\r\nToronto Halifax\r\nMontreal Halifax\r\nEdmonton Montreal\r\nEdmonton Yellowknife\r\nEdmonton Calgary', '7\r\nVancouver\r\nEdmonton\r\nMontreal\r\nHalifax\r\nToronto\r\nWinnipeg\r\nCalgary\r\nVancouver', '', '线性规划和网络流24题', '', '2012-09-08 10:28:19', 1000, 65536, 'N', NULL, 0, 10, 0, 10, 100, 5, 0, 30000, 88, 'power721'),
(1747, '软件补丁问题', 'T 公司发现其研制的一个软件中有n 个错误，随即为该软件发放了一批共m 个补丁程\r\n序。每一个补丁程序都有其特定的适用环境，某个补丁只有在软件中包含某些错误而同时又\r\n不包含另一些错误时才可以使用。一个补丁在排除某些错误的同时，往往会加入另一些错误。\r\n换句话说，对于每一个补丁i，都有2 个与之相应的错误集合B1[i]和B2[i]，使得仅当软件\r\n包含B1[i]中的所有错误，而不包含B2[i]中的任何错误时，才可以使用补丁i。补丁i 将修复\r\n软件中的某些错误F1[i]，而同时加入另一些错误F2[i]。另外，每个补丁都耗费一定的时间。\r\n试设计一个算法，利用T 公司提供的m个补丁程序将原软件修复成一个没有错误的软\r\n件，并使修复后的软件耗时最少。\r\n编程任务：\r\n对于给定的n个错误和m个补丁程序，找到总耗时最少的软件修复方案。', '由文件input.txt 提供输入数据。文件第1 行有2 个正整数n 和m，n 表示错误总数，m\r\n表示补丁总数，1<=n<=20, 1<=m<=100。接下来m行给出了m个补丁的信息。每行包括一\r\n个正整数，表示运行补丁程序i 所需时间，以及2 个长度为n的字符串，中间用一个空格符\r\n隔开。第1 个字符串中，如果第k个字符bk为“+”，则表示第k个错误属于B1[i]，若为“-”，\r\n则表示第k个错误属于B21[i]，若为“0”，则第k个错误既不属于B1[i]也不属于B2[i]，即\r\n软件中是否包含第k个错误并不影响补丁i的可用性。第2 个字符串中，如果第k个字符bk\r\n为“+”，则表示第k个错误属于F1[i]，若为“-”，则表示第k个错误属于F2[i]，若为“0”，\r\n则第k个错误既不属于F1[i]也不属于F2[i]，即软件中是否包含第k个错误不会因使用补丁\r\ni 而改变。', '程序运行结束时，将总耗时数输出到文件output.txt中。如果问题无解，则输出0。', 'd:\\oj\\data\\1747', 'd:\\oj\\data\\1747', '3 3\r\n1 000 00-\r\n1 00- 0-+\r\n2 0-- -++', '8', '', '线性规划和网络流24题', '', '2012-08-30 11:03:14', 1000, 65536, 'N', NULL, 5, 12, 42, 7, 70, 4, 3, 30000, 74, 'power721');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1748, '星际转移问题', '由于人类对自然资源的消耗，人们意识到大约在2300 年之后，地球就不能再居住了。\r\n于是在月球上建立了新的绿地，以便在需要时移民。令人意想不到的是，2177 年冬由于未\r\n知的原因，地球环境发生了连锁崩溃，人类必须在最短的时间内迁往月球。现有n个太空站\r\n位于地球与月球之间，且有m 艘公共交通太空船在其间来回穿梭。每个太空站可容纳无限\r\n多的人，而每艘太空船i 只可容纳H[i]个人。每艘太空船将周期性地停靠一系列的太空站，\r\n例如：(1，3，4)表示该太空船将周期性地停靠太空站134134134…。每一艘太空船从一个太\r\n空站驶往任一太空站耗时均为1。人们只能在太空船停靠太空站(或月球、地球)时上、下船。\r\n初始时所有人全在地球上，太空船全在初始站。试设计一个算法，找出让所有人尽快地全部\r\n转移到月球上的运输方案。\r\n编程任务：\r\n对于给定的太空船的信息，找到让所有人尽快地全部转移到月球上的运输方案。', '由文件input.txt提供输入数据。文件第1行有3 个正整数n（太空站个数），m（太空船\r\n个数）和k（需要运送的地球上的人的个数）。其中 1<=m<=13, 1<=n<=20, 1<=k<=50。\r\n接下来的m行给出太空船的信息。第i+1 行说明太空船pi。第1 个数表示pi 可容纳的\r\n人数Hpi；第2 个数表示pi 一个周期停靠的太空站个数r，1<=r<=n+2；随后r 个数是停靠\r\n的太空站的编号(Si1,Si2,…,Sir)，地球用0 表示，月球用-1 表示。时刻0 时，所有太空船都\r\n在初始站，然后开始运行。在时刻1，2，3…等正点时刻各艘太空船停靠相应的太空站。人\r\n只有在0,1,2…等正点时刻才能上下太空船。', '程序运行结束时，将全部人员安全转移所需的时间输出到文件output.txt 中。如果问题\r\n无解，则输出0。', 'd:\\oj\\data\\1748', 'd:\\oj\\data\\1748', '2 2 1\r\n1 3 0 1 2\r\n1 3 1 2 –1', '5', '', '线性规划和网络流24题', '', '2012-09-07 19:43:27', 1000, 65536, 'N', NULL, 4, 8, 50, 4, 50, 6, 4, 30000, 100, 'power721'),
(1749, '孤岛营救问题', '大兵瑞恩。瑞恩被关押在一个迷宫里，迷宫地形复杂，但幸好麦克得到了迷宫的\r\n地形图。迷宫的外形是一个长方形，其南北方向被划分为N 行，东西方向被划分为M列，\r\n于是整个迷宫被划分为N×M 个单元。每一个单元的位置可用一个有序数对(单元的行号，\r\n单元的列号)来表示。南北或东西方向相邻的2 个单元之间可能互通，也可能有一扇锁着的\r\n门，或者是一堵不可逾越的墙。迷宫中有一些单元存放着钥匙，并且所有的门被分成P类，\r\n打开同一类的门的钥匙相同，不同类门的钥匙不同。\r\n大兵瑞恩被关押在迷宫的东南角，即(N，M)单元里，并已经昏迷。迷宫只有一个入口，\r\n在西北角。也就是说，麦克可以直接进入(1，1)单元。另外，麦克从一个单元移动到另一个\r\n相邻单元的时间为1，拿取所在单元的钥匙的时间以及用钥匙开门的时间可忽略不计。\r\n编程任务：\r\n试设计一个算法，帮助麦克以最快的方式到达瑞恩所在单元，营救大兵瑞恩。', '由文件input.txt提供输入数据。第1行有3个整数，分别表示N,M,P的值。第2 行是1\r\n个整数K，表示迷宫中门和墙的总数。第I+2 行（1<=I<=K），有5 个整数，依次为\r\nXi1,Yi1,Xi2,Yi2,Gi：\r\n当Gi>=1时，表示(Xi1,Yi1)单元与(Xi2,Yi2)单元之间有一扇第Gi类的门，当Gi=0 时，\r\n表示(Xi1,Yi1)单元与(Xi2,Yi2)单元之间有一堵不可逾越的墙（其中，|Xi1-Xi2|+|Yi1-Yi2|=1，\r\n0<=Gi<=P）。\r\n第K+3行是一个整数S，表示迷宫中存放的钥匙总数。\r\n第K+3+J 行(1<=J<=S)，有3个整数，依次为Xi1,Yi1,Qi：表示第J 把钥匙存放在(Xi1,Yi1)\r\n单元里，并且第J 把钥匙是用来开启第Qi类门的。（其中1<=Qi<=P）。\r\n输入数据中同一行各相邻整数之间用一个空格分隔。', '程序运行结束时，将麦克营救到大兵瑞恩的最短时间的值输出到文件output.txt 中。如\r\n果问题无解，则输出-1。', 'd:\\oj\\data\\1749', 'd:\\oj\\data\\1749', '4 4 9\r\n9\r\n1 2 1 3 2\r\n1 2 2 2 0\r\n2 1 2 2 0\r\n2 1 3 1 0\r\n2 3 3 3 0\r\n2 4 3 4 1\r\n3 2 3 3 0\r\n3 3 4 3 0\r\n4 3 4 4 0\r\n2\r\n2 1 2\r\n4 2 1', '14', '', '线性规划和网络流24题', '', '2012-09-07 19:43:52', 1000, 65536, 'N', NULL, 8, 10, 80, 1, 14, 6, 6, 30000, 123, 'power721'),
(1750, '汽车加油行驶问题', '给定一个N*N 的方形网格，设其左上角为起点◎，坐标为（1，1），X 轴向右为正，Y\r\n轴向下为正，每个方格边长为1，如图所示。一辆汽车从起点◎出发驶向右下角终点▲，其\r\n坐标为（N，N）。在若干个网格交叉点处，设置了油库，可供汽车在行驶途中加油。汽车在\r\n行驶过程中应遵守如下规则：\r\n(1)汽车只能沿网格边行驶，装满油后能行驶K 条网格边。出发时汽车已装满油，在起\r\n点与终点处不设油库。\r\n(2)汽车经过一条网格边时，若其X 坐标或Y 坐标减小，则应付费用B，否则免付费用。\r\n(3)汽车在行驶过程中遇油库则应加满油并付加油费用A。\r\n(4)在需要时可在网格点处增设油库，并付增设油库费用C（不含加油费用A）。\r\n(5)(1)～(4)中的各数N、K、A、B、C均为正整数，且满足约束：2<=N<=100，2<=K<=10。\r\n设计一个算法，求出汽车从起点出发到达终点的一条所付费用最少的行驶路线。\r\n<img src=images/problem/1750.jpg />\r\n对于给定的交通网格，计算汽车从起点出发到达终点的一条所付费用最少的行驶路线。', '由文件input.txt提供输入数据。文件的第一行是N，K，A，B，C的值。第二行起是一\r\n个N*N 的0-1 方阵，每行N 个值，至N+1 行结束。方阵的第i 行第j 列处的值为1 表示在\r\n网格交叉点（i，j）处设置了一个油库，为0 时表示未设油库。各行相邻两个数以空格分隔。', '程序运行结束时，将最小费用输出到文件output.txt中。', 'd:\\oj\\data\\1750', 'd:\\oj\\data\\1750', '9 3 2 3 6\r\n0 0 0 0 1 0 0 0 0\r\n0 0 0 1 0 1 1 0 0\r\n1 0 1 0 0 0 0 1 0\r\n0 0 0 0 0 1 0 0 1\r\n1 0 0 1 0 0 1 0 0\r\n0 1 0 0 0 0 0 1 0\r\n0 0 0 0 1 0 0 0 1\r\n1 0 0 1 0 0 0 1 0\r\n0 1 0 0 0 0 0 0 0', '12', '', '线性规划和网络流24题', '', '2012-09-06 12:32:42', 1000, 65536, 'N', NULL, 4, 4, 100, 0, 0, 4, 4, 30000, 333, 'power721'),
(1751, '数字梯形问题', '给定一个由n 行数字组成的数字梯形如下图所示。梯形的第一行有m 个数字。从梯形\r\n的顶部的m 个数字开始，在每个数字处可以沿左下或右下方向移动，形成一条从梯形的顶\r\n至底的路径。\r\n规则1：从梯形的顶至底的m条路径互不相交。\r\n规则2：从梯形的顶至底的m条路径仅在数字结点处相交。\r\n规则3：从梯形的顶至底的m条路径允许在数字结点相交或边相交。\r\n      2 3\r\n     3 4 5\r\n    9 10 9 1\r\n   1 1 10 1 1\r\n 1 1 10 12 1 1\r\n\r\n对于给定的数字梯形，分别按照规则1，规则2，和规则3 计算出从梯形的顶至底的m\r\n条路径，使这m条路径经过的数字总和最大。', '由文件input.txt提供输入数据。文件的第1 行中有2个正整数m和n（m,n<=20），分别\r\n表示数字梯形的第一行有m个数字，共有n 行。接下来的n 行是数字梯形中各行的数字。\r\n第1 行有m个数字，第2 行有m+1 个数字，…。', '程序运行结束时，将按照规则1，规则2，和规则3 计算出的最大数字总和输出到文件\r\noutput.txt中。每行一个最大总和。', 'd:\\oj\\data\\1751', 'd:\\oj\\data\\1751', '2 5\r\n2 3\r\n3 4 5\r\n9 10 9 1\r\n1 1 10 1 1\r\n1 1 10 12 1 1', '66\r\n75\r\n77', '', '线性规划和网络流24题', '', '2012-08-19 18:13:39', 1000, 65536, 'N', NULL, 9, 11, 82, 2, 29, 5, 5, 30000, 109, 'power721'),
(1752, '运输问题', 'W 公司有m个仓库和n 个零售商店。第i 个仓库有ai 个单位的货物；第j 个零售商店\r\n需要bj个单位的货物。货物供需平衡，即sum(ai)=sum(bj)  。从第i 个仓库运送每单位货物到\r\n第j 个零售商店的费用为Cij 。试设计一个将仓库中所有货物运送到零售商店的运输方案，\r\n使总运输费用最少。\r\n编程任务：\r\n对于给定的m 个仓库和n 个零售商店间运送货物的费用，计算最优运输方案和最差运\r\n输方案。', '由文件input.txt提供输入数据。文件的第1行有2 个正整数m和n，分别表示仓库数和\r\n零售商店数。接下来的一行中有m个正整数ai ，1≤i≤m，表示第i个仓库有ai 个单位的货\r\n物。再接下来的一行中有n个正整数bj ，1≤j≤n，表示第j个零售商店需要bj 个单位的货\r\n物。接下来的m行，每行有n个整数，表示从第i 个仓库运送每单位货物到第j个零售商店\r\n的费用Cij 。', '程序运行结束时，将计算出的最少运输费用和最多运输费用输出到文件output.txt中。', 'd:\\oj\\data\\1752', 'd:\\oj\\data\\1752', '2 3\r\n220 280\r\n170 120 210\r\n77 39 105\r\n150 186 122', '48500\r\n69140', '', '线性规划和网络流24题', '', '2012-09-13 21:08:43', 1000, 65536, 'N', NULL, 8, 10, 80, 2, 22, 8, 7, 30000, 84, 'power721'),
(1753, '分配问题', '有n件工作要分配给n个人做。第i 个人做第j 件工作产生的效益为Cij 。试设计一个将\r\nn件工作分配给n个人做的分配方案，使产生的总效益最大。\r\n编程任务：\r\n对于给定的n件工作和n个人，计算最优分配方案和最差分配方案。', '由文件input.txt提供输入数据。文件的第1 行有1 个正整数n，表示有n件工作要分配\r\n给n 个人做。接下来的n 行中，每行有n 个整数Cij ，1≤i≤n，1≤j≤n(n<=100)，表示第i 个人做\r\n第j件工作产生的效益为Cij。', '程序运行结束时，将计算出的最小总效益和最大总效益输出到文件output.txt中。', 'd:\\oj\\data\\1753', 'd:\\oj\\data\\1753', '5\r\n2 2 2 1 2\r\n2 3 1 2 4\r\n2 0 1 1 1\r\n2 3 4 3 3\r\n3 2 1 2 1', '5\r\n14', '', '线性规划和网络流24题', '', '2012-08-13 23:07:39', 1000, 65536, 'N', NULL, 11, 14, 79, 2, 25, 6, 6, 30000, 109, 'power721'),
(1754, '负载平衡问题', 'G 公司有n 个沿铁路运输线环形排列的仓库，每个仓库存储的货物数量不等。如何用最\r\n少搬运量可以使n 个仓库的库存数量相同。搬运货物时，只能在相邻的仓库之间搬运。\r\n编程任务：\r\n对于给定的n 个环形排列的仓库的库存量，编程计算使n 个仓库的库存数量相同的最少\r\n搬运量。', '由文件input.txt 提供输入数据。文件的第1 行中有1 个正整数n（n<=100），表示有n\r\n个仓库。第2 行中有n个正整数，表示n个仓库的库存量。', '程序运行结束时，将计算出的最少搬运量输出到文件output.txt中。', 'd:\\oj\\data\\1754', 'd:\\oj\\data\\1754', '5\r\n17 9 14 16 4', '11', '', '线性规划和网络流24题', '', '2012-08-14 09:20:44', 1000, 65536, 'N', NULL, 4, 6, 67, 2, 33, 4, 4, 30000, 61, 'power721'),
(1755, '深海机器人问题', '深海资源考察探险队的潜艇将到达深海的海底进行科学考察。潜艇内有多个深海机器\r\n人。潜艇到达深海海底后，深海机器人将离开潜艇向预定目标移动。深海机器人在移动中还\r\n必须沿途采集海底生物标本。沿途生物标本由最先遇到它的深海机器人完成采集。每条预定\r\n路径上的生物标本的价值是已知的，而且生物标本只能被采集一次。本题限定深海机器人只\r\n能从其出发位置沿着向北或向东的方向移动，而且多个深海机器人可以在同一时间占据同一\r\n位置。\r\n&laquo;编程任务：\r\n用一个PxQ 网格表示深海机器人的可移动位置。西南角的坐标为（0,0），东北角的坐\r\n标为 (Q,P)。\r\n\r\n<img src=images/problem/1755.jpg />\r\n给定每个深海机器人的出发位置和目标位置，以及每条网格边上生物标本的价值。计算\r\n深海机器人的最优移动方案，使深海机器人到达目的地后，采集到的生物标本的总价值最高。', '由文件input.txt提供输入数据。文件的第1 行为深海机器人的出发位置数a，和目的地\r\n数b，第2 行为P和Q 的值。接下来的P+1 行，每行有Q 个正整数，表示向东移动路径上\r\n生物标本的价值，行数据依从南到北方向排列。再接下来的Q+1 行，每行有P 个正整数，\r\n表示向北移动路径上生物标本的价值，行数据依从西到东方向排列。接下来的a行，每行有\r\n3 个正整数k,x,y，表示有k个深海机器人从(x,y)位置坐标出发。再接下来的b行，每行有3\r\n个正整数r,x,y，表示有r个深海机器人可选择(x,y)位置坐标作为目的地。', '程序运行结束时，将采集到的生物标本的最高总价值输出到文件output.txt中。', 'd:\\oj\\data\\1755', 'd:\\oj\\data\\1755', '1 1\r\n2 2\r\n1 2\r\n3 4\r\n5 6\r\n7 2\r\n8 10\r\n9 3\r\n2 0 0\r\n2 2 2', '42', '', '线性规划和网络流24题', '', '2012-08-14 09:52:14', 1000, 65536, 'N', NULL, 3, 7, 43, 4, 57, 3, 3, 30000, 136, 'power721'),
(1756, '最长k可重区间集问题', '<img src=images/problem/1756.jpg />\r\n&laquo;编程任务：\r\n对于给定的开区间集合I和正整数k，计算开区间集合I的最长k可重区间集的长度。', '由文件input.txt提供输入数据。文件的第1 行有2 个正整数n和k，分别表示开区间的\r\n个数和开区间的可重迭数。接下来的n行，每行有2个整数，表示开区间的左右端点坐标。', '程序运行结束时，将计算出的最长k可重区间集的长度输出到文件output.txt中。', 'd:\\oj\\data\\1756', 'd:\\oj\\data\\1756', '4 2\r\n1 7\r\n6 8\r\n7 10\r\n9 13', '15', '', '线性规划和网络流24题', '', '2012-09-15 10:33:25', 1000, 65536, 'N', NULL, 10, 14, 71, 2, 29, 6, 5, 30000, 140, 'power721'),
(1757, '最长k可重线段集问题', '<img src=images/problem/1757.jpg />\r\n&laquo;编程任务：\r\n对于给定的开线段集合I和正整数k，计算开线段集合I的最长k可重线段集的长度。', '由文件input.txt提供输入数据。文件的第1 行有2 个正整数n和k，分别表示开线段的\r\n个数和开线段的可重迭数。接下来的n行，每行有4个整数，表示开线段的2 个端点坐标。', '程序运行结束时，将计算出的最长k可重线段集的长度输出到文件output.txt中。', 'd:\\oj\\data\\1757', 'd:\\oj\\data\\1757', '4 2\r\n1 2 7 3\r\n6 5 8 3\r\n7 8 10 5\r\n9 6 13 9', '17', '', '线性规划和网络流24题', '', '2012-09-15 10:45:11', 1000, 65536, 'N', NULL, 0, 8, 0, 8, 100, 5, 0, 30000, 93, 'power721'),
(1758, '火星探险问题', '火星探险队的登陆舱将在火星表面着陆，登陆舱内有多部障碍物探测车。登陆舱着陆后，\r\n探测车将离开登陆舱向先期到达的传送器方向移动。探测车在移动中还必须采集岩石标本。\r\n每一块岩石标本由最先遇到它的探测车完成采集。每块岩石标本只能被采集一次。岩石标本\r\n被采集后，其他探测车可以从原来岩石标本所在处通过。探测车不能通过有障碍的地面。本\r\n题限定探测车只能从登陆处沿着向南或向东的方向朝传送器移动，而且多个探测车可以在同\r\n一时间占据同一位置。如果某个探测车在到达传送器以前不能继续前进，则该车所采集的岩\r\n石标本将全部损失。\r\n&laquo;编程任务：\r\n用一个PxQ 网格表示登陆舱与传送器之间的位置。登陆舱的位置在(X1,Y1)处，传送器\r\n的位置在(XP ,YQ)处。\r\n\r\n<img src=images/problem/1758.jpg />\r\n给定每个位置的状态，计算探测车的最优移动方案，使到达传送器的探测车的数量最多，\r\n而且探测车采集到的岩石标本的数量最多。', '由文件input.txt提供输入数据。文件的第1行为探测车数，第2 行为P的值，第3 行为\r\nQ 的值。接下来的Q 行是表示登陆舱与传送器之间的位置状态的PxQ 网格。用3 个数字表\r\n示火星表面位置的状态：0 表示平坦无障碍，1表示障碍，2 表示石块。', '程序运行结束时，将每个探测车向传送器移动的序列输出到文件output.txt 中。每行包\r\n含探测车号和一个移动方向，0 表示向南移动，1 表示向东移动。', 'd:\\oj\\data\\1758', 'd:\\oj\\data\\1758', '2\r\n10\r\n8\r\n0 0 0 0 0 0 0 0 0 0\r\n0 0 0 0 0 1 1 0 0 0\r\n0 0 0 1 0 2 0 0 0 0\r\n1 1 0 1 2 0 0 0 0 1\r\n0 1 0 0 2 0 1 1 0 0\r\n0 1 0 1 0 0 1 1 0 0\r\n0 1 2 0 0 0 0 1 0 0\r\n0 0 0 0 0 0 0 0 0 0', '1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 0\r\n1 0\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 0\r\n1 0\r\n1 1\r\n1 0\r\n1 0\r\n1 0\r\n2 1\r\n2 1\r\n2 1\r\n2 1\r\n2 0\r\n2 0\r\n2 0\r\n2 0\r\n2 1\r\n2 0\r\n2 0\r\n2 1\r\n2 0\r\n2 1\r\n2 1\r\n2 1', '', '线性规划和网络流24题', '', '2012-08-14 20:15:57', 1000, 65536, 'N', NULL, 3, 15, 20, 2, 40, 3, 3, 30000, 154, 'power721'),
(1759, '骑士共存问题', '在一个n*n个方格的国际象棋棋盘上，马（骑士）可以攻击的棋盘方格如图所示。棋盘\r\n上某些方格设置了障碍，骑士不得进入。\r\n<img src=images/problem/1759.jpg />\r\n对于给定的n*n个方格的国际象棋棋盘和障碍标志，计算棋盘上最多可以放置多少个骑\r\n士，使得它们彼此互不攻击。', '由文件input.txt给出输入数据。第一行有2 个正整数n 和m (1<=n<=200, 0<=m<n^2)，\r\n分别表示棋盘的大小和障碍数。接下来的m 行给出障碍的位置。每行2 个正整数，表示障\r\n碍的方格坐标。', '将计算出的共存骑士数输出到文件output.txt。', 'd:\\oj\\data\\1759', 'd:\\oj\\data\\1759', '3 2\r\n1 1\r\n3 3', '5', '', '线性规划和网络流24题', '', '2012-08-14 21:08:58', 2000, 65536, 'N', NULL, 6, 28, 21, 17, 81, 5, 4, 30000, 149, 'power721'),
(1760, '数论概论', '最近毛哥买来一本数论方面的书《数论概论》，这本书上定义了两个很有趣的数：三角数，平方数。\r\n三角数：\r\n  n=4        n=3       n=2         n=1   \r\n <img src=images/problem/17601.png />\r\n平方数：\r\n   n=4         n=3        n=2    n=1\r\n  <img src=images/problem/17602.png />\r\n但是书上出了一个难题：当三角数和平方数相等时，叫做三角平方数。问你第n个三角平方数是什么。毛哥想了很久都不会，你能帮他找出第n个三角平方数吗？', '多组数组，输入一个数n(1<=n<=25)', '输出有两个数，第n个三角平方数（分别输出是第几个三角数和第几个平方数，中间用空格隔开）', 'd:\\oj\\data\\1760', 'd:\\oj\\data\\1760', '1\r\n2\r\n3\r\n4\r\n5', '1 1\r\n8 6\r\n49 35\r\n288 204\r\n1681 1189', '(8+1)*8/2=6*6，是第8个三角数，第6个平方数。\r\n输出可能会超过32位', 'mi', '', '2012-04-03 11:43:12', 1000, 65536, 'N', NULL, 3, 15, 20, 10, 77, 7, 3, 30000, 112, ''),
(1761, 'RSA', 'RSA公钥加密算法是1977年由Ron Rivest、Adi Shamirh和LenAdleman开发的。RSA是目前最有影响力的公钥加密算法，它能够抵抗到目前为止已知的所有密码攻击，已被ISO推荐为公钥数据加密标准。\r\nRSA的算法涉及三个参数，n、e1、e2。 \r\n其中，n是两个大质数p、q的积，n的二进制表示时所占用的位数，就是所谓的密钥长度。 \r\ne1和e2是一对相关的值，e1可以任意取，但要求e1与(p-1)*(q-1)互质；再选择e2，要求(e2*e1)mod((p-1)*(q-1))=1。\r\nRSA加解密的算法完全相同,设A为明文，B为密文，则：A=B^e1 mod n；&lt;b>B=A^e2 mod n</b>；\r\n\r\n可是这三个参数很难生成，于是power把它简化为RSA-pow算法：\r\n明文A为不超过100位的16进制数，e2和n为小于10^10的16进制数。\r\n你能算出密文B吗？\r\n输入和输出都用&lt;b>大写16进制</b>表示。', '多组数据。\r\n每行三个数A，e2，n。', '输出密文B。', 'd:\\oj\\data\\1761', 'd:\\oj\\data\\1761', '2 3 10\r\n2 A 64\r\nA 30 10000', '8\r\n18\r\n0', '', 'power', '', '2012-08-09 22:26:15', 1000, 65536, 'N', NULL, 5, 15, 33, 9, 64, 5, 5, 30000, 106, ''),
(1762, 'Friend', '每个人都有朋友，朋友也有很多种，比如：\r\n石友－－情谊坚贞的朋友。\r\n挚友－－志同道合的朋友。\r\n益友－－于己有帮助的朋友。\r\n网友－－在互联网结识的朋友。\r\n闺友－－闺房中无话不谈的朋友。\r\n君子交：指道义之交，即在道义上相互支持的朋友。\r\n竹马之交：少年时骑竹马为戏的朋友，指自幼相交的朋友，等等。\r\n现在dearway定义如果王二和张三是朋友，李四和张三也是朋友，那么王二和李四也是朋友，即朋友具有传递关系。现在给你N种朋友关系，问你有多种朋友集合，这些集合里不会出现两个朋友来自两个不同的集合。', '多组数据输入（小于等于10组）。每组数据第一行为一个整数N（ 1 <= N <= 1000）表示N种朋友关系，接下来N行，每行首先输入一个整数ni( 1 <= ni <= 10)表示该种朋友关系中包含ni个人。然后ni个字符串，每个字符串由52个大小写英文字母及数字组成且长度小于10，表示ni个不同的人。', '每组数据输出一行，表示满足要求的答案。', 'd:\\oj\\data\\1762', 'd:\\oj\\data\\1762', '4\r\n2 Hilary Dearway\r\n1 Hilary\r\n2 Rusty Serena\r\n2 Serena Luoxi\r\n10\r\n2 a b\r\n2 b c\r\n1 c\r\n3 a d e\r\n2 e f\r\n2 f g\r\n2 g h\r\n2 h i\r\n2 j k\r\n1 z', '2\r\n3', '', 'Jiangliubin', '', '2012-07-16 10:57:38', 1000, 65536, 'N', NULL, 35, 129, 27, 79, 80, 23, 20, 30000, 751, ''),
(1763, 'help', 'Dearway 非常喜欢喝水，今天来到信息学院ACM实验室，突然却发现没水了，OMG。于是Dearway到隔壁实验室去蹭水。隔壁实验室的一位GG正在帮一位MM答疑，但是GG马上就要考计算机四级了，于是他向学过算法的Dearway求助。\r\n这个题是这样的：\r\n这些数要满足三个条件\r\none+one=two。\r\nseven是素数。\r\nnine是完全平方数（平方数即一个数可以分解为2个相同的数的乘积，比如4 = 2*2 是平方数，3不是平方数）。\r\n求one two seven nine分别代表哪4个数\r\n上面一个字母代表一个数字且每个字母代表不同的数字（0……9，且‘o’,’t’,’s’,’n’不能为0）;\r\nDearway 觉得这个问题挺有意思的，于是向你们求助。', '不用输入。', '输出格式为:\r\none = (),two = (),seven = (),and nine = () is a solution.', 'd:\\oj\\data\\1763', 'd:\\oj\\data\\1763', '', '', '括号里为满足要求的数，答案如果唯一按要求输出一行，如果不唯一，每组解输出一行。', 'Jiangliubin', '', '2011-05-15 16:02:12', 5000, 65536, 'N', NULL, 8, 12, 67, 4, 33, 8, 8, 30000, 121, ''),
(1764, '猫与老鼠', '大家肯定都看过一部很出名的动画片《猫与老鼠》吧，动画片中的猫Tom太笨了，总是被老鼠捉弄，哎，杯具猫呀 ！ 不过后来猫Tom接受了swust的一名acmer—“WS毛哥”的训练，变得很聪明啦！现在所有的老鼠都怕猫Tom啦！\r\n有一天猫Tom走到一个老鼠很多的地方去啦（当然是捉老鼠了），为了简单起见，我们假设这个地方由N个老鼠洞组成，每个洞i里面都有Ai个老鼠。并且这些洞由N-1条无向“老鼠道路”连通，也就是说从任何一个老鼠洞出发都能到达其他任何一个老鼠洞。\r\n现在假定猫Tom位于洞S处，它要在P分钟的时间内（包括第P分钟），经过一些老鼠洞又最终能回到S，它想知道它应该怎样选择路径，才能使得所抓到的老鼠尽可能的多,初始时间为0。\r\n老鼠从一个洞转移到另一个与之相邻的洞，需要1分钟的时间；当它处于某个洞想抓该洞中的老鼠，需要2分钟的时间。', '多组测试数据。\r\n第一行输入三个数N，S，P。(1<=N<=2000,0<=S<N,1<=P<=8000)\r\n第二行包括N个正整数：A0,A1,..,An-1，分别代表着每个老鼠洞中的老鼠数目（0<=Ai<=100000）。\r\n接下来N-1行，每行有两个正整数a,b（0<=a,b< N）,代表老鼠洞a与b之间直接连通。', '输出Tom可能抓到的最多的老鼠数目。', 'd:\\oj\\data\\1764', 'd:\\oj\\data\\1764', '4 0 6\r\n5 5 5 100\r\n0 1\r\n1 3\r\n0 2\r\n1 0 2\r\n2\r\n1 0 1\r\n2', '100\r\n2\r\n0', '', 'dreamone', '', '2011-04-23 23:57:34', 2000, 65536, 'N', NULL, 1, 3, 33, 2, 67, 2, 1, 30000, 69, ''),
(1765, 'Fence Rails', '农民John准备建一个栅栏来围住他的牧场。他已经确定了栅栏的形状，但是他在木料方面有些问题。当地的杂货储存商扔给John一些木板，而John必须从这些木板中找出尽可能多所需的木料。 \r\n\r\n当然，John可以切木板。因此，一个9英尺的木板可以切成一个5英尺和一个4英尺的木料 (当然也能切成3个3英尺的，等等)。John有一把（完美的）梦之锯，因此他在切木料时，不会有木料的损失。 \r\n\r\n所需要的栅栏长度可能会有重复（比如，一个3英尺和另一个3英尺长的栅栏可能同时都需要）。所需要的木料规格都已经给定。你不必切出更多木料，那没有用。', '第1行: N (1 <= N <= 50), 表示提供的木板的数目 \r\n\r\n第2行到第N+1行: N行，每行包括一个整数，表示各个木板的长度。 \r\n\r\n第N+2行: R (1 <= R <= 1023), 所需木料的数目 \r\n\r\n第N+3行到第N+R+1行: R行，每行包括一个整数(1 <= ri <= 128)表示所需木料的长度。', '只有一行，一个数字，表示能切出的最多的所需木料的数目。当然，并不是任何时候都能切出所有所需木料。', 'd:\\oj\\data\\1765', 'd:\\oj\\data\\1765', '4\r\n30\r\n40\r\n50\r\n25\r\n10\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n25\r\n24\r\n30', '7', '', 'USACO', '', '2011-04-23 18:47:08', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 40, ''),
(1766, 'Function Run Fun', 'We all love recursion! Don''t we? \r\n\r\nConsider a three-parameter recursive function w(a, b, c): \r\n\r\nif a <= 0 or b <= 0 or c <= 0, then w(a, b, c) returns: \r\n1 \r\n\r\nif a > 20 or b > 20 or c > 20, then w(a, b, c) returns: \r\nw(20, 20, 20) \r\n\r\nif a < b and b < c, then w(a, b, c) returns: \r\nw(a, b, c-1) + w(a, b-1, c-1) - w(a, b-1, c) \r\n\r\notherwise it returns: \r\nw(a-1, b, c) + w(a-1, b-1, c) + w(a-1, b, c-1) - w(a-1, b-1, c-1) \r\n\r\nThis is an easy function to implement. The problem is, if implemented directly, for moderate values of a, b and c (for example, a = 15, b = 15, c = 15), the program takes hours to run because of the massive recursion.', 'The input for your program will be a series of integer triples, one per line, until the end-of-file flag of -1 -1 -1. Using the above technique, you are to calculate w(a, b, c) efficiently and print the result.', 'Print the value for w(a,b,c) for each triple.', 'D:\\oj\\data\\1766', 'D:\\oj\\data\\1766', '1 1 1\r\n2 2 2\r\n10 4 6\r\n50 50 50\r\n-1 7 18\r\n-1 -1 -1', 'w(1, 1, 1) = 2\r\nw(2, 2, 2) = 4\r\nw(10, 4, 6) = 523\r\nw(50, 50, 50) = 1048576\r\nw(-1, 7, 18) = 1', '', 'Pacific Northwest 1999', '', '2011-05-13 14:25:00', 1000, 10000, 'N', NULL, 9, 20, 45, 8, 62, 5, 5, 30000, 98, ''),
(1767, '子集和问题', '给你n个正整数你能找出一些数使它们的和等于m吗？', '每组数据第一行是n(n<=100)和m(m<=10^7)。\r\n下一行有n个数ai(ai<=10^6)。', '如果能找出一些数和等于m，输出&quot;yes"否则输出"no"。', 'D:\\oj\\data\\1767', 'D:\\oj\\data\\1767', '3 5\r\n1 2 3\r\n4 14\r\n1 4 5 7', 'yes\r\nno', '', 'power', '', '2012-03-08 11:26:04', 1000, 65536, 'N', NULL, 8, 59, 14, 18, 82, 7, 4, 1000, 343, ''),
(1768, 'n皇后问题', 'n皇后问题指的是：\r\nn*n的国际象棋棋盘上摆放n个皇后，使其不能互相攻击，\r\n即任意两个皇后都不能处于同一行、同一列或同一斜线上，\r\n问有多少种摆法。\r\n\r\n和一般n皇后问题不同的是，现在棋盘上有可能已经放了一个皇后了。\r\n你能求出有多少合法的方案吗？', '多组数据。\r\n第一行有两个数n和m，n<=13表示棋盘大小，m<=1表示棋盘上已经有m个皇后了。\r\n下面m行，每一行有两个数x、y(x,y< n)表示棋盘上x行y列已经有一个皇后了。', '输出方案数。', 'D:\\oj\\data\\1768', 'D:\\oj\\data\\1768', '5 0\r\n5 1\r\n0 0', '10\r\n2', '', 'power', '', '2012-08-13 11:01:55', 1000, 65536, 'N', NULL, 8, 30, 27, 8, 73, 4, 3, 50000, 486, ''),
(1769, 'Rescue', 'Angel was caught by the MOLIGPY! He was put in prison by Moligpy. The prison is described as a N * M (N, M <= 200) matrix. There are WALLs, ROADs, and GUARDs in the prison.\r\n\r\nAngel''s friends want to save Angel. Their task is: approach Angel. We assume that "approach Angel" is to get to the position where Angel stays. When there''s a guard in the grid, we must kill him (or her?) to move into the grid. We assume that we moving up, down, right, left takes us 1 unit time, and killing a guard takes 1 unit time, too. And we are strong enough to kill all the guards.\r\n\r\nYou have to calculate the minimal time to approach Angel. (We can move only UP, DOWN, LEFT and RIGHT, to the neighbor grid within bound, of course.)', 'First line contains two integers stand for N and M.\r\n\r\nThen N lines follows, every line has M characters. "." stands for road, "a" stands for Angel, "x" stands for guard, and "r" stands for each of Angel''s friend. \r\n\r\nProcess to the end of the file.', 'For each test case, your program should output a single integer, standing for the minimal time needed. If such a number does no exist, you should output a line containing "Poor ANGEL has to stay in the prison all his life."', 'D:\\oj\\data\\1769', 'D:\\oj\\data\\1769', '7 8\r\n#.#####.\r\n#.a#..r.\r\n#..#x...\r\n..#..#.#\r\n#...##..\r\n.#......\r\n........', '13', '', 'CHEN, Xue ZOJ Monthly, October 2003', '', '2011-08-01 20:02:30', 1000, 65536, 'N', NULL, 6, 24, 25, 18, 75, 8, 6, 30000, 222, ''),
(1770, '排队洗澡', 'Bathing is a normal thing for the students in SCU.But for a school like SCU, too many students ,too little Bathroom. \r\nxy is a bathing-like girl. So she bathes everyday. However, with so many students waiting to bathe, it''s a time-wasting thing to bathe. \r\nNow there are many students before her waiting to bathe .How long must her wait?', 'The first line is an integer T for test cases.\r\nFor every test case, the first line of an input contains two integer n and m (n for the number of students before her (0<=n<=10^5), m for the number of shower positons ( 1<=m<=10^5) )\r\nThe next n lines contain numbers ti(the bathing time for the i-th person,5<=ti<=90), one number per line.\r\nAssume it takes no time to come in or out.', 'The output file contains T lines ,each for one test case.\r\nEach line contains one number, the time before her turn.\r\nIf the time is greater than 600, print "-1".', 'D:\\oj\\data\\1770', 'D:\\oj\\data\\1770', '1\r\n2 3\r\n19\r\n30', '0', '9th SCU Programming Contest Final', 'swust20095862', '', '2011-05-10 20:56:19', 1000, 65536, 'N', NULL, 5, 7, 71, 2, 50, 2, 2, 30000, 94, ''),
(1771, 'Mobile phones', 'Suppose that the fourth generation mobile phone base stations in the Tampere area operate as follows. The area is divided into squares. The squares form an SxS matrix with the rows and columns numbered from 0 to S-1. Each square contains a base station. The number of active mobile phones inside a square can change because a phone is moved from a square to another or a phone is switched on or off. At times, each base station reports the change in the number of active phones to the main base station along with the row and the column of the matrix. Write a program, which receives these reports and answers queries about the current total number of active mobile phones in any rectangle-shaped area.', 'The input is read from standard input as integers and the answers to the queries are written to standard output as integers. The input is encoded as follows. Each input comes on a separate line, and consists of one instruction integer and a number of parameter integers according to the following table.\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n				Instruction</td>\r\n			<td>\r\n				Parameters</td>\r\n			<td>\r\n				Meaning</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				0</td>\r\n			<td>\r\n				<h4>\r\n					<em>S</em></h4>\r\n			</td>\r\n			<td>\r\n				Initialize the matrix size to <em>SxS</em>containing all zeros. This instruction is given only once and it will be the first instruction.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				1</td>\r\n			<td>\r\n				<em>X</em> <em>Y</em> <em>A</em></td>\r\n			<td>\r\n				Add <em>A</em> to the number of active phones in table square (<em>X</em>, <em>Y</em>). <em>A</em> may be positive or negative.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				2</td>\r\n			<td>\r\n				<em>L</em> <em>B</em> <em>R</em> <em>T</em></td>\r\n			<td>\r\n				Query the current sum of numbers of active mobile phones&nbsp; in squares (<em>X</em>,<em>Y</em>), where <em>L</em> &lt;=<em>X</em>&lt;=<em>R</em>, <em>B</em>&lt;=<em>Y</em>&lt;=<em>T</em></td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				3</td>\r\n			<td>\r\n				&nbsp;</td>\r\n			<td>\r\n				Terminate program. This instruction is given only once and it will be the last instruction.</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n&nbsp;<br />\r\nThe values will always be in range, so there is no need to check them. In particular, if A is negative, it can be assumed that it will not reduce the square value below zero. The indexing starts at 0, e.g. for a table of size 4x4, we have 0&lt;=X&lt;=3 and 0&lt;=Y&lt;=3.', 'Your program should not answer anything to lines with an instruction other than 2. If the instruction is 2, then your program is expected to answer the query by writing the answer as a single line containing a single integer to standard output.', 'D:\\oj\\data\\1771', 'D:\\oj\\data\\1771', '0 4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n1 1 2 3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n2 0 0 2 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n1 1 1 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n1 1 2 -1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n2 1 1 2 3&nbsp;<br />\r\n3<br />\r\n<br />', '3<br />\r\n4<br />', 'In the examples below, the integer last is the last one to be read from a line, and answer is the integer variable containing your answer. If you program in C++ and use iostreams, you should use the following implementation for reading standard input and writing to standard output: cin&gt;&gt;last; cout&lt;&lt; answer&lt;&lt; endl&lt;&lt; flush; If you program in C or C++ and use scanf and printf, you should use the following implementation for reading standard input and writing to standard output: scanf ("%d", &amp;last); printf("%d\\n",answer); fflush (stdout); If you program in Pascal, you should use the following implementation of reading standard input and writing to standard output: Read(last); ... Readln; Writeln(answer);\r\n<table border="1" cellpadding="0" cellspacing="0">\r\n	<tbody>\r\n		<tr>\r\n			<td style="width: 158px">\r\n				Table size</td>\r\n			<td style="width: 57px">\r\n				<em>S</em>&acute;<em>S</em></td>\r\n			<td style="width: 164px">\r\n				1x1 ,=<em>Sx</em><em>S&lt;=</em>1024x1024</td>\r\n		</tr>\r\n		<tr>\r\n			<td style="width: 158px">\r\n				Cell value <em>V</em> at any time</td>\r\n			<td style="width: 57px">\r\n				<h5>\r\n					<em>V</em></h5>\r\n			</td>\r\n			<td style="width: 164px">\r\n				0&lt;=<em>V</em> &lt;=2<sup>15 </sup>&ndash;1&nbsp; (= 32767)</td>\r\n		</tr>\r\n		<tr>\r\n			<td style="width: 158px">\r\n				Update amount</td>\r\n			<td style="width: 57px">\r\n				<h5>\r\n					<em>A</em></h5>\r\n			</td>\r\n			<td style="width: 164px">\r\n				-2<sup>15 &lt;=</sup><em>A</em> &lt;=2<sup>15</sup>&ndash;1&nbsp; (= 32767)</td>\r\n		</tr>\r\n		<tr>\r\n			<td style="width: 158px">\r\n				No of instructions in input</td>\r\n			<td style="width: 57px">\r\n				<h5>\r\n					<em>U</em></h5>\r\n			</td>\r\n			<td style="width: 164px">\r\n				3 &lt;=<em>U</em> &lt;=60002</td>\r\n		</tr>\r\n		<tr>\r\n			<td style="width: 158px">\r\n				Maximum number of phones in the whole table</td>\r\n			<td style="width: 57px">\r\n				<h5>\r\n					<em>M</em></h5>\r\n			</td>\r\n			<td style="width: 164px">\r\n				<em>M</em>= 2<sup>30</sup></td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n&nbsp;<br />\r\nOut of the 20 inputs, 16 are such that the table size is at most 512x512.<br />', 'IOI2001', '', '2011-08-07 19:50:28', 5000, 65536, 'N', NULL, 13, 25, 52, 10, 53, 10, 9, 50000, 360, ''),
(1772, 'Tree’s Problem', 'There is a special tree in Dreamone’s world ! There are N nodes in the tree,and each of them has its value(a positive integer not larger than 10^8).The tree is connected by N-1 bidirectional roads.The tree make all the nodes connected(meaning you can travel between any two nodes of them).The values of the nodes are variable.Now Dreamone wants to know something if he destorys one of the tree roads.In detail,you are to handle totally some instructions:each of them can be expressed as follows:\r\nCHANGE i w  : that means the value of the ith node was changed to w (0<w<=10^8)\r\nQUERY j  : j means the jth road according to the input order.we know the jth roads will divide the tree into two connected components,named P1 and P2 respectively. we define following five variables:\r\nMin1 : the minimum value in P1.\r\nMax1: the maximum value in P1.\r\nMin2 : the minimum value in P2.\r\nMax2: the maximum value in P2.\r\nM: min(Min1,Max2)+max(Max1,Min2),in which min(a,b) meaning taking the smaller value of a and b,max(a,b) meaning taking the bigger value of a and b.\r\nSo for the query,you should output the value of the funcion fun(M). and the function fun(M) is defined as follows:\r\nVoid fun(int M){\r\nif(solve1(M) is less than 100){\r\n    Output solve1(M);\r\n    return; \r\n}\r\nElse{\r\n   Output solve2(M);\r\n   return ;\r\n}\r\n}\r\nIn which, solve1(M),solve2(M) are functions and defined as follows:\r\nInt solve1(int M){\r\n    int i,res=0;\r\n    for(i=1;i<=M;i++){\r\n         if(M%i==0)\r\n             res++;\r\n}\r\nreturn res;\r\n}\r\n\r\n\r\nInt solve2(int M){\r\n    If(M==1){\r\n        Return 0 ;\r\n}\r\nif(M is odd number){\r\n    M=3*M+1;\r\n    Return 1+solve2(M);\r\n}\r\nElse{\r\n   M=M/2;\r\n   Return 1+solve2(M);\r\n}\r\n}\r\nIn which,M=M/2 means if M=3,then M will become 1,if M=4 then M will become 2.what’s more,M=3*M+1 means if M=3,then M will become 28.', 'The first line,an integer T,representing T test cases blew.(T<=10).\r\nFor each test case,the first line contains two integers N(2<=N<=100000)\r\nand Q(1<=Q<=100000),indicating the number of nodes and instructions.\r\nThe following line contains N integers(positive integer not larger than 10^8),indicating the initial value of each node(nodes are numbers from 1 to N).\r\nThe following N-1 lines,each line contains two integers u and v,meaning node u and node v are connected directly by a bidirectional road(the roads are numbers from 1 to N-1).\r\nThe following Q lines,each line contains an instruction according to the specification above.', 'For each “QUERY” instruction,output the value of the function fun(M).', 'D:\\oj\\data\\1772', 'D:\\oj\\data\\1772', '1\r\n5 3\r\n1 2 3 4 5\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\nQUERY 1\r\nCHANGE 1 10\r\nQUERY 1', '4\r\n6', '', 'dreamone @ The 7th Programming Contest Southwest University of Science and Technology', '', '2011-05-16 10:21:06', 3000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 41, ''),
(1773, 'A simple problem again', 'Although Dreamone has been studying in USTC for nearly one year,he is missing the mates of swust all the time.Recently Dreamone has found the equation through which he can feel be with them immediately,then what is the mysterious equation?\r\nGiven a number x(-100<=x<=100) and a funciton f(x).\r\nwhen x<0,f(x)=0\r\nwhen 0<=x<1,f(x)=1\r\nwhen 1<=x<=100,f(x)=f(x-20.07)+f(x-4.28)+f(x-20.10)+f(x-6.11)\r\nBecause 2007.4.28 is a special day for Dreamone,so is 2010.6.11!\r\nMaybe f(x) will be very large,so only output the most right four numbers(omitting leading zero).For example,if f(x)=521314,just output 1314;if f(x)=20080906,just output 906;\r\nif f(x)=306,just output 306.\r\nCan you solve the simple problem?', 'The first line,a integer T,representing T test cases blew.(T<=1000).\r\nThen each line contains a number x(-100<=x<=100).', 'For each number x,output the most right four numbers of f(x)(omitting leading zero).', 'D:\\oj\\data\\1773', 'D:\\oj\\data\\1773', '2\r\n-1\r\n2', '0\r\n0', '<font color=red><b>Modified data.</b></font>', 'dreamone @ SWUST 7th ACM/ICPC Programming Contest - 2011', '', '2011-05-22 16:26:52', 1000, 65536, 'N', NULL, 1, 16, 6, 10, 91, 6, 1, 30000, 135, ''),
(1774, 'Boys and Girls', 'The annual Children’s Day is coming.Teacher Chen with other teachers is considering rewarding the acmer of swust.Then what is the present?Surely,it is the lolipop!Assuming there are N boys,M girls.The ith boy will get Ai candies,the ith girl will get Bi candies if there is no restriction.But there keeps intimate relationship between some boys and some girls (You know it!),so they won’t be get candies simultaneously.the following example will explain it:\r\nAssuming there is a boy B and a girl G,if there is no restriction,Boy B will get x candies,Girl G will get y candies.But based on the intimate relationship between them , they can’s get candies simultaneously,so the most candies they get are Max(x,y).\r\nNow,Here comes the problem:choose some girls and boys to get the most candies for them,what’s more,it must guarantee that none any so-called intimate relationship exists among them.\r\nYou,as a talented programmer,must have the ability to find the most candy numbers they get.Right?', 'The first line of input contains a number T, representing the numbers of test cases.Then each test case contains three parts:\r\nThe first part: N and M(1<=N,M<=200),representing the numbers of boys and girls respectively.\r\nThe second part: N numbers,representing the candy numbers, Ai(0<Ai<=100) for the ith boy under nonrestraint condition from left to right(1<=i<=N).\r\nThe third part: M numbers,representing the candy numbers, Bi (0<Bi<=100) for the ith girl under nonrestraint condition from left to right(1<=i<=M).\r\nThe last part: one 0-1 matrix with its size N by M.Considering the ith row,the jth column element of it.if 1,representing that the ith boy and the jth girl keep intimate relationship,so they can’s get candies simultaneously.otherwise 0,representing they can get candies simultaneously.', 'Output the most candy numbers they can get.', 'D:\\oj\\data\\1774', 'D:\\oj\\data\\1774', '1\r\n2 2\r\n3 4\r\n3 5\r\n0 1\r\n0 0', '12', '', 'dreamone @ SWUST 7th ACM/ICPC Programming Contest - 2011', '', '2011-06-21 11:18:26', 1000, 65536, 'N', NULL, 6, 7, 86, 1, 50, 1, 1, 30000, 59, ''),
(1775, 'Digital Plus', 'As you all know, MOD is a mathematical operatio. Giving you two numbers n,m（0 < m,n <= 10^10001），Your task is to calculate the sum of every digit of m MOD every digit of n. We can guarantee that there is no zero in digits of n.', 'The first line, a integer T, representing T test cases blew.(T<=10).\r\n\r\n In each case, the first line is the integer m, the second line is the integer n.', 'Print the sum of every digit of m MOD every digit of n.', 'D:\\oj\\data\\1775', 'D:\\oj\\data\\1775', '1\r\n13\r\n21', '2', '', 'SWUST 7th ACM/ICPC Programming Contest - 2011', '', '2011-05-19 18:30:18', 1000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 39, ''),
(1776, 'Tree Division', 'As we all know that we can consider a tree as a graph. Now give you a tree with nodes having its weight. We define the weight of a tree is the sum of the weight of all nodes on it. You know we can divide the tree into two subtrees by any edge of the tree. And your task is to tell me the minimum difference between the two subtrees’ weight.', 'The first line, an integer T (T <= 30), representing T test cases blew.\r\n\r\n For each test case, the first line contains one integer N (2 <= N <= 10000), indicating the number of tree’s nodes. Then follow N integers in one line, indicating the weight of nodes from 1 to N.\r\n\r\n For next N-1 lines, each line contains two integers Vi and Vj (1 <= Vi, Vj <= N), indicating one edge of the tree.', 'For each test case, output the minimum weight difference. We assume that the result will not exceed 2^20.', 'D:\\oj\\data\\1776', 'D:\\oj\\data\\1776', '1\r\n5\r\n6 3 9 3 1\r\n2 3\r\n3 1\r\n4 1\r\n1 5', '2', '', 'SWUST 7th ACM/ICPC Programming Contest - 2011', '', '2011-05-24 13:47:41', 1000, 65536, 'N', NULL, 4, 6, 67, 1, 33, 2, 2, 30000, 46, ''),
(1777, 'Another 0-1 String', 'Assuming there is a 0-1 string with its length L,what’s more,a legal 0-1 string can’t contain any sub-string as follows: ‘101’, ‘10011’。\r\nFor example, ‘10001’ is a legal string,because it doesn’t contain any sub-string ‘101’ or ‘10011’。But ‘100000101’ is an illegal string,because it contains sub-string ‘101’。\r\nCan you compute the numbers of such legal string with its length L?\r\nMaybe the result will be very huge,so divide by 20110514,then output the remaider.', 'Input a number T in the first line,representing T test cases below。Then each case only contains a number L (3<=L<=1000000000)。', 'Output the correct answer。', 'D:\\oj\\data\\1777', 'D:\\oj\\data\\1777', '2\r\n3\r\n5', '7\r\n20', 'when L=3, Legal strings are as follows: 000,001,010,011,100,110,111。', 'dreamone @ SWUST 7th ACM/ICPC Programming Contest - 2011', '', '2011-05-16 10:24:58', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 54, ''),
(1778, 'Fake Problem', 'Filix is a acm lover. Also he is a acm master-hand, because he can figure out the time complexity’s recursion of every acm problem. The recursion is given as T(n)=a*T(n/b)+f(n).\r\n\r\n In the recursion, n represents the scale of the acm problem, and the time complexity of f(n) is Θ（n^d）.\r\n\r\n Regretfully, Filix cannot figure out the final time complexity by the recursion. Can you help him?\r\n\r\n Notice that Filix is not able to solve a Fake Problem. The acm problem is considered as a Fake Problem by Filix, only if the number a,b and d in the recursion satisfy the follow three requirements ,\r\n\r\n （1）：The number a fulfill the essential condition that number c=(2^a)+1 is a prime number;\r\n\r\n （2）：The result of b*(b+1)/2 is both even number and perfect number. When the sum of all the factors of a number equals to the value of double itself, the number is called as perfect number.\r\n\r\n （3）：The number d satisfies that: d=(c^b)%b。', 'There are multiple input.\r\n\r\n For each input, there will be a Integer n（0<n<=10）in the first line，representing the test case num of the input. And ,for each test case, there will be three integers a, b and d (0<a<63,0<b<=1000000,0<=d<b) in one line.', 'For each test case, just output only one line. If the acm problem to be solved is a Fake Problem, then just output ”So sorry!”, indicating that Filix cannot solve this problem. Otherwise ,output three non-negative integers:x,y and z, indicating that the final time complexity is.\r\n\r\n\r\n<img src=images\\problem\\fp.png />', 'D:\\oj\\data\\1778', 'D:\\oj\\data\\1778', '1\r\n1 3 0\r\n1\r\n16 32769 57', '0 1 0\r\nSo sorry!', '', 'SWUST 7th ACM/ICPC Programming Contest - 2011', '', '2011-05-19 17:04:38', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 36, '');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1779, 'Diamonds', 'Caspar has n diamonds, and each of them has a certain value. He decides to choose some of them to form two groups, one for his girlfriend and the other for his another female friend. To make sure that his girlfriend would be satisfied, Caspar must promise that the least valuable diamond he gives to his girlfriend is more valuable than any of the diamond that the other female friend receives. Besides that, his girlfriend demands that if a diamond is given to one person, all the diamonds of the same value should be given to the person too. Would you help Caspar to calculate the number of the solutions?', 'There are multiple test cases.In each test case, the first line contains an integer n(1<=n<=10000), indicating the number of the diamonds.The following line contains n positive integers, which represent the value of each diamond.', 'For each test case, please print an integer M as the number of the solutions. Notice that M may be very large, so you just have to print M%100007', 'D:\\oj\\data\\1779', 'D:\\oj\\data\\1779', '5\r\n1 1 2 2 3', '5', '{3} {11}\r\n{3}{22}\r\n{3}{2211}\r\n{22}{11}\r\n{322}{11}', 'SWUST 7th ACM/ICPC Programming Contest - 2011', '', '2011-05-19 17:02:57', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 30, ''),
(1780, 'Help', 'You are a warrior, but your dear princess was caught by big devil. you want to save the princess. each round, you can go around (up ,down ,left, right) ,if the place you stand is a slime or snake you will dead, if the place you stand is a boat or a sword you will take it always, if the place you stand is princess then you save her success . You can also kill a Slime or snake around you in one round, then the place become empty space. at first you can only beat over slime, if you got the sword, you can beat over snake. You can not stand on the river, only when you get a boat. Please find the minimum round to save princess.', 'The input consists of several test cases. The first line of each test case contains two integers M and N (2 <= M, N <= 300). Each of the following M lines contains N uppercase letters, each of which is one of ''Y'' (you), ''P''(princess), ''S'' (snake), ''L'' (Slime), ''R'' (river), ''W'' (sword), ''B'' (boat) and ''E'' (empty space). Both ''Y'' and ''P'' appear only once, ''B'' and ''W'' appear at most once. A test case of M = N = 0 indicates the end of input, and should not be processed.', 'For each test case, please output the turns you take at least in a separate line. If you can''t arrive at the target, output "-1" instead.', 'D:\\oj\\data\\1780', 'D:\\oj\\data\\1780', '3 4\r\nYLEL\r\nEERE\r\nSSPE\r\n5 5\r\nYEEER\r\nESSRR\r\nBSSSP\r\nRRRRR\r\nEEEEE\r\n0 0', '8\r\n8', '', 'SWUST 7th ACM/ICPC Programming Contest - 2011 - SCPC_2008_tangbinjie', '', '2012-05-09 14:42:47', 1000, 65536, 'N', NULL, 1, 8, 13, 7, 88, 2, 1, 30000, 54, ''),
(1781, 'Identify the text', 'The extraction of webpage contents has great importance in information retrieval systems. In HTML, the contents and tags are always mixed together, which makes it difficult to extract contents form HTML pages.\r\nNow some people have come up with a new algorithm of contents extraction which requires deleting all tags, leaving all the contents and blank position information of deleted tags. The remaining contents are called Ctext (n lines) and it is defined as follows:\r\n1. Cblock: Continuous k lines (3<=k<=5, as thickness of Cblock) begins form a certain line of Ctext. Cblock[i] is a Cblock begins from line i of Ctext.\r\n2. Y[i] (Length of Cblock[i]): the number of characters besides blank line (“blank”)\r\nYou can find a continuous sub-sequence from startX to endX as follows:\r\n1.	Y[startX]>=p (p represents the minimum length)\r\n2.	The Cblock of longest length must appear in [startX, endX]\r\n3.	Y[m]=0 (m=endX+1) or endX is the last Cblock.\r\n4.	Y[n]!=0 (startX <=n < startX +k)\r\nYour task is to find the longest continuous sub-sequence of Y.', 'The first line contains three integers n (10<=n<=100), k (3<=k<=5), p (3<=p<=10) \r\nThen there are n lines, each line is a string. A blank line is descript by “blank” (besides quotation marks)', 'Just output the startX and endX of the longest continuous sub-sequence of Y in one line.', 'D:\\oj\\data\\1781', 'D:\\oj\\data\\1781', '10 3 3\r\nblank\r\naaaa\r\nblank\r\nblank\r\nblank\r\naaa\r\nblank\r\nblank\r\naaaaa\r\nblank', '4 8', '', 'SWUST 7th ACM/ICPC Programming Contest - 2011', '', '2011-05-19 17:04:17', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 29, ''),
(1782, 'Jump', 'There is n pillars, their heights are （A1,A2,A3,…An. You can jump at the top of the pillars. But you will lose abs(a[j]-a[i])*abs(j-i) power when you jump from i-th pillar to j-th pillar. At first you have m power. Can you jump from s-th pillar to e-th pillar?', 'The input consists of several test cases.\r\nEvery test case is two integer n（2<=n<200）, q(1=<q<=10000).\r\nThe second line contain n integer A1, A2, A3,..An.\r\nThe next q line contain there integer s, e, m .', 'If you can jump from s to e, with less or equal m power output “Yes”, else output “No”', 'D:\\oj\\data\\1782', 'D:\\oj\\data\\1782', '3 3\r\n1 2 3\r\n1 3 2\r\n1 2 1\r\n1 3 1', 'Yes\r\nYes\r\nNo', 'Abs(a-b) mean the absolute value of a-b.', 'SWUST 7th ACM/ICPC Programming Contest - 2011', '', '2012-05-13 17:53:17', 1000, 65536, 'N', NULL, 22, 88, 25, 64, 77, 23, 19, 30000, 491, ''),
(1783, 'The war of QQ & 360', 'One day, China''s Internet firm Tencent said it is shutting down its popular instant messaging service QQ on computers installed with anti-virus software run by the company''s rival Qihoo360, as a war between the two software giants escalated over the course of the past several months.\r\n \r\nThis problem has two parts.\r\nPart #1:\r\nThe first line of Part #1 is an integer N (N<=100), which stands for the number of operations:\r\nThen N lines follow, each line as an operation.\r\nThe operations should be described as:\r\nCreate File_name Ext_name\r\nIf there is a file called File_name, then output “File already exist!” and ignore this operation, else create that file.\r\nDelete File_name\r\nIf there is a file called File_name, then remove it; else output ”No such file!” and ignore this operation.\r\nQQ File_name \r\nIf the file called File_name does not exist, output ”No such file!”; else if the Ext_name is ”exe” then output ”QQ has not collected your private information!”, otherwise output ” QQ has collected your private information!”.\r\nPart #2:\r\nThere is a list of softwares by Qihoo 360.\r\n360SAFE\r\n360BROWSER\r\nQQGUARD\r\n360SD\r\n360DESKTOP\r\n360YASUO\r\n360WD\r\n360SAFEBOX\r\nThe following line is an integer M(M<=100), which stands for the number of operations:\r\nThen M lines follow, each line as an operation.\r\nThe operations should be described as:\r\nInstall Software_name\r\nIf the software called Software_name is installed, output “The software is already installed!” and ignore the operation; else install it.\r\nUninstall Software_name\r\nIf the software called Software_name does not exist, output “The software is not found!” and ignore the operation; else uninstall it.\r\n360 \r\nIf all the softwares in the list are installed in your computer, output “Your computer is secure!” else output “Your computer is not secure!”', 'The input is specified before.', 'The output is specified before.', 'D:\\oj\\data\\1783', 'D:\\oj\\data\\1783', '5\r\nCreate qq exe\r\nCreate search dat\r\nQQ search\r\nDelete qqmusic\r\nCreate qq exe\r\n3\r\nInstall 360SAFE\r\nInstall 360SAFE\r\n360', 'QQ has collected your private information!\r\nNo such file!\r\nFile already exist!\r\nThe software is already installed!\r\nYour computer is not secure!', '', 'SWUST 7th ACM/ICPC Programming Contest - 2011', '', '2011-05-19 19:13:43', 1000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 55, ''),
(1784, 'Dividing', 'Marsha and Bill own a collection of marbles. They want to split the collection among themselves so that both receive an equal share of the marbles. This would be easy if all the marbles had the same value, because then they could just split the collection in half. But unfortunately, some of the marbles are larger, or more beautiful than others. So, Marsha and Bill start by assigning a value, a natural number between one and six, to each marble. Now they want to divide the marbles so that each of them gets the same total value. Unfortunately, they realize that it might be impossible to divide the marbles in this way (even if the total value of all marbles is even). For example, if there are one marble of value 1, one of value 3 and two of value 4, then they cannot be split into sets of equal value. So, they ask you to write a program that checks whether there is a fair partition of the marbles.', 'Each line in the input file describes one collection of marbles to be divided. The lines contain six non-negative integers n1 , . . . , n6 , where ni is the number of marbles of value i. So, the example from above would be described by the input-line "1 0 1 2 0 0". The maximum total number of marbles will be 20000.\r\nThe last line of the input file will be "0 0 0 0 0 0"; do not process this line.', 'For each collection, output "Collection #k:", where k is the number of the test case, and then either "Can be divided." or "Can''t be divided.".\r\nOutput a blank line after each test case.', 'D:\\oj\\data\\1784', 'D:\\oj\\data\\1784', '1 0 1 2 0 0 \r\n1 0 0 0 1 1 \r\n0 0 0 0 0 0', 'Collection #1:\r\nCan''t be divided.\r\n\r\nCollection #2:\r\nCan be divided.', '', 'Mid-Central European Regional Contest 1999', '', '2012-05-17 11:52:54', 1000, 10000, 'N', NULL, 13, 39, 33, 26, 74, 10, 9, 30000, 377, ''),
(1785, '数论专题训练C', 'Computer generated and assisted proofs and verification occupy a small niche in the realm of Computer Science. The first proof of the four-color problem was completed with the assistance of a computer program and current efforts in verification have succeeded in verifying the translation of high-level code down to the chip level. \r\nThis problem deals with computing quantities relating to part of Fermat''s Last Theorem: that there are no integer solutions of a^n + b^n = c^n for n > 2. \r\nGiven a positive integer N, you are to write a program that computes two quantities regarding the solution of x^2 + y^2 = z^2, where x, y, and z are constrained to be positive integers less than or equal to N. You are to compute the number of triples (x,y,z) such that x < y < z, and they are relatively prime, i.e., have no common divisor larger than 1. You are also to compute the number of values 0 < p <= N such that p is not part of any triple (not just relatively prime triples).', 'The input consists of a sequence of positive integers, one per line. Each integer in the input file will be less than or equal to 1,000,000. Input is terminated by end-of-file', 'For each integer N in the input file print two integers separated by a space. The first integer is the number of relatively prime triples (such that each component of the triple is <=N). The second number is the number of positive integers <=N that are not part of any triple whose components are all <=N. There should be one output line for each input line.', 'D:\\oj\\data\\1785', 'D:\\oj\\data\\1785', '10\r\n25\r\n100', '1 4\r\n4 9\r\n16 27', '', 'bingshen', '', '2011-06-09 15:03:58', 1500, 65536, 'N', NULL, 2, 2, 100, 0, 0, 2, 2, 30000, 227, ''),
(1786, '数论专题训练B', '给你一个正整数序列a1,a2,a3,a4……an，现在需要从这个序列中选出一些数，让这些数的和是n的倍数（即选出来的数的和s=n*k,k>=1）', '多组数据输入\r\n对于每一组数据：\r\n第一行输入一个n（n<=10000）\r\n第二行输入n个数，a1,a2,a3,a4…….an  (ai<=10000)', '如果你的程序不能找到一个集合，让他们的和是n的倍数，那么就输出-1\r\n反之则输出有两行：\r\n第一行输出选择了几个数\r\n第二行输出这几个数', 'D:\\oj\\data\\1786', 'D:\\oj\\data\\1786', '5\r\n1 2 3 4 1', '2\r\n2 3', '', 'bingshen', '', '2012-04-23 19:20:50', 1000, 65536, 'N', NULL, 12, 16, 75, 4, 31, 9, 9, 30000, 359, ''),
(1787, '数论专题训练A', '计算n！的位数。', '多组数据输入，每次输入一个自然数n，n<=10^9', 'n！的位数', 'D:\\oj\\data\\1787', 'D:\\oj\\data\\1787', '10\r\n20', '7\r\n19', '', 'bingshen', '', '2011-06-10 14:51:46', 1000, 65536, 'N', NULL, 31, 104, 30, 29, 56, 30, 23, 30000, 618, ''),
(1788, '数论专题训练D', 'Some people believe that there are three cycles in a person''s life that start the day he or she is born. These three cycles are the physical, emotional, and intellectual cycles, and they have periods of lengths 23, 28, and 33 days, respectively. There is one peak in each period of a cycle. At the peak of a cycle, a person performs at his or her best in the corresponding field (physical, emotional or mental). For example, if it is the mental curve, thought processes will be sharper and concentration will be easier. \r\nSince the three cycles have different periods, the peaks of the three cycles generally occur at different times. We would like to determine when a triple peak occurs (the peaks of all three cycles occur in the same day) for any person. For each cycle, you will be given the number of days from the beginning of the current year at which one of its peaks (not necessarily the first) occurs. You will also be given a date expressed as the number of days from the beginning of the current year. You task is to determine the number of days from the given date to the next triple peak. The given date is not counted. For example, if the given date is 10 and the next triple peak occurs on day 12, the answer is 2, not 3. If a triple peak occurs on the given date, you should give the number of days to the next occurrence of a triple peak.', 'You will be given a number of cases. The input for each case consists of one line of four integers p, e, i, and d. The values p, e, and i are the number of days from the beginning of the current year at which the physical, emotional, and intellectual cycles peak, respectively. The value d is the given date and may be smaller than any of p, e, or i. All values are non-negative and at most 365, and you may assume that a triple peak will occur within 21252 days of the given date. The end of input is indicated by a line in which p = e = i = d = -1.', 'For each test case, print the case number followed by a message indicating the number of days to the next triple peak, in the form: \r\n\r\nCase 1: the next triple peak occurs in 1234 days. \r\n\r\nUse the plural form ``days'''' even if the answer is 1.', 'D:\\oj\\data\\1788', 'D:\\oj\\data\\1788', '0 0 0 0\r\n0 0 0 100\r\n5 20 34 325\r\n4 5 6 7\r\n283 102 23 320\r\n203 301 203 40\r\n-1 -1 -1 -1', 'Case 1: the next triple peak occurs in 21252 days.\r\nCase 2: the next triple peak occurs in 21152 days.\r\nCase 3: the next triple peak occurs in 19575 days.\r\nCase 4: the next triple peak occurs in 16994 days.\r\nCase 5: the next triple peak occurs in 8910 days.\r\nCase 6: the next triple peak occurs in 10789 days.', '', 'bingshen', '', '2012-02-19 13:19:10', 1000, 65536, 'N', NULL, 21, 25, 84, 4, 21, 15, 15, 30000, 343, ''),
(1789, '数论专题训练E', 'Computers normally cannot generate really random numbers, but frequently are used to generate sequences of pseudo-random numbers. These are generated by some algorithm, but appear for all practical purposes to be really random. Random numbers are used in many applications, including simulation. \r\nA common pseudo-random number generation technique is called the linear congruential method. If the last pseudo-random number generated was L, then the next number is generated by evaluating ( Z x L + I ) mod M, where Z is a constant multiplier, I is a constant increment, and M is a constant modulus. For example, suppose Z is 7, I is 5, and M is 12. If the first random number (usually called the seed) is 4, then we can determine the next few pseudo-random numbers are follows: \r\n<img src=images\\problem\\1.jpg /> \r\nAs you can see, the sequence of pseudo-random numbers generated by this technique repeats after six numbers. It should be clear that the longest sequence that can be generated using this technique is limited by the modulus, M. \r\nIn this problem you will be given sets of values for Z, I, M, and the seed, L. Each of these will have no more than four digits. For each such set of values you are to determine the length of the cycle of pseudo-random numbers that will be generated. But be careful: the cycle might not begin with the seed!', 'Each input line will contain four integer values, in order, for Z, I, M, and L. The last line will contain four zeroes, and marks the end of the input data. L will be less than M.', 'For each input line, display the case number (they are sequentially numbered, starting with 1) and the length of the sequence of pseudo-random numbers before the sequence is repeated.', 'D:\\oj\\data\\1789', 'D:\\oj\\data\\1789', '7 5 12 4\r\n5173 3849 3279 1511\r\n9111 5309 6000 1234\r\n1079 2136 9999 1237\r\n0 0 0 0', 'Case 1: 6\r\nCase 2: 546\r\nCase 3: 500\r\nCase 4: 220', '', 'bingshen', '', '2011-07-22 18:53:01', 1000, 65536, 'N', NULL, 6, 14, 43, 8, 57, 9, 6, 30000, 246, ''),
(1790, '数论专题训练F', '完全数是数论中常常出现的一个概念，他与麦森数的关系及其密切，目前人类已经发现了40多个完全数。毛哥认为，验证一个数是否为完全数是一件非常容易的事情。所谓完全数就是一个数的所有小于它本身的因子之和就是这个数本身，比如说：6的因子是1、2、3\r\n而且6=1+2+3，再比如说，28=1+2+4+7+14\r\n现在WS的dreamone也觉得，验证一个数是否为完全数是很容易的，所以他决定加大难度来考考毛哥。\r\nDreamone给毛哥一个数n，然后让毛哥判断，如果这个数的所有因子的和大于了n的话就输出ABUNDANT，小于的话就输出DEFICIENT，刚好等于(即n是完全数)的话输出PERFECT\r\n毛哥很快就写出了程序，聪明的你也一定知道办法吧~O(∩_∩)O~', '多组数据输入，每一组数据输入一个n(n不超过10^8)当n为0的时候结束输入', '第一行输出为：PERFECTION OUTPUT\r\n对于每一个n，如果这个数的所有因子的和大于了n的话就输出ABUNDANT，小于的话就输出DEFICIENT，刚好等于(即n是完全数)的话输出PERFECT\r\n最后一行输出：END OF OUTPUT', 'D:\\oj\\data\\1790', 'D:\\oj\\data\\1790', '15 \r\n28 \r\n6 \r\n56 \r\n60000 \r\n22 \r\n496 \r\n0', 'PERFECTION OUTPUT\r\n   15  DEFICIENT\r\n   28  PERFECT\r\n    6  PERFECT\r\n   56  ABUNDANT\r\n60000  ABUNDANT\r\n   22  DEFICIENT\r\n  496  PERFECT\r\nEND OF OUTPUT', '输出格式为\r\nprintf("%5d  PERFECT\\n",N);\r\nprintf("%5d  ABUNDANT\\n",N);\r\nprintf("%5d  DEFICIENT\\n",N);\r\n%5d后面有两个空格！！\r\n建议直接复制这个hint', 'bingshen', '', '2012-04-26 10:31:57', 1000, 65536, 'N', NULL, 9, 38, 24, 24, 80, 8, 6, 30000, 327, ''),
(1791, '数论专题训练G', 'power给了毛哥n个数a1,a2,a3,a4……an并且power告诉了毛哥i到j的连续字段和的意思就是a[i]+a[i+1]+a[i+2]+…+a[j]。\r\n现在毛哥想知道对于一串序列，在这个序列中到底有多少个连续的字段和可以被另外一个数m整除呢？', '多组数据输入\r\n对于每一组数据有两行输入\r\n第一行输入两个数n m (0< n< 10000,0< m< 5000)\r\n第二行输入n个数，每个数小于10000', '输出可以被m整除的连续字段和的个数', 'D:\\oj\\data\\1791', 'D:\\oj\\data\\1791', '5 4\r\n1 2 3 4 5\r\n6 7\r\n9 8 7 6 5 4', '2\r\n3', '', 'bingshen', '', '2011-06-11 12:43:27', 1500, 65536, 'N', NULL, 10, 17, 59, 7, 50, 7, 7, 30000, 268, ''),
(1792, '数论专题训练H', 'bingshen养了很多猪。他想要给猪安家。但是bingshen没有足够的猪圈，很多猪只能够在一个猪圈安家。举个例子，假如有16头猪，bingshen建了3个猪圈，为了保证公平，剩下1头猪就没有地方安家了。WSN生气了，骂bingshen没有脑子，并让他重新建立猪圈。这回bingshen建造了5个猪圈，但是仍然有1头猪没有地方去，然后bingshen又建造了7个猪圈，但是还有2头没有地方去。bingshen都快疯了。你对这个事情感兴趣起来，你想通过bingshen建造猪圈的过程，知道bingshen家至少养了多少头猪。', '输入包含多组测试数据。每组数据第一行包含一个整数n (n <= 10) –bingshen建立猪圈的次数，解下来n行，每行两个整数ai, bi( bi <= ai <= 1000), 表示bingshen建立了ai个猪圈，有bi头猪没有去处。你可以假定gcd(ai, aj) = 1.', '输出包含一个正整数，即为bingshen家至少养猪的数目。', 'D:\\oj\\data\\1792', 'D:\\oj\\data\\1792', '3\r\n3 1\r\n5 1\r\n7 2', '16', '', 'bingshen', '', '2011-06-11 12:42:58', 1000, 65536, 'N', NULL, 21, 111, 19, 80, 82, 23, 18, 30000, 765, ''),
(1793, '数论专题训练I', 'bingshen有n个金币，但是不幸的是，bingshen不能完全占有这些金币，他必须把这些金币平均分成m个部分(m > 1)，并且他只能得到其中的一份金币。现在你的任务是，计算bingshen有多少种平均分的方法，bingshen最多又能得到多少金币？', '多组数据输入，而且输入组数有5万组，对于每一个输入，第一行有一个整数N (2 <= N <= 10^9)\r\n表示bingshen有N个金币', '对于每一个输入，输出有两个数，X和Y，X代表bingshen有多少种平均分金币的方案，Y代表冰神最多能得到多少块金币', 'D:\\oj\\data\\1793', 'D:\\oj\\data\\1793', '5\r\n6\r\n8', '1 1\r\n3 3\r\n3 4', '造数据你伤不起。。。', 'bingshen', '', '2012-04-23 20:02:19', 1000, 65536, 'N', NULL, 22, 73, 30, 44, 85, 12, 8, 30000, 439, ''),
(1794, '数论专题训练K', '输入二个正整数x0,y0(2<=x0<100000,2<=y0<=1000000),求出满足下列条件的P,Q的个数 \r\n\r\n条件: 1.P,Q是正整数 \r\n\r\n2.要求P,Q以x0为最大公约数,以y0为最小公倍数. \r\n\r\n试求:满足条件的所有可能的两个正整数的个数.', '输入二个正整数x0,y0', '满足条件的所有可能的两个正整数的个数.', 'D:\\oj\\data\\1794', 'D:\\oj\\data\\1794', '3 60', '4', '数据组数已经改为了1349的五千多倍，而且加入了很多变态测试数据。\r\n题意理解不太清楚的，可以参见1349的hint，另外，本题加入了很多原数据中没有出现的情况，需要考虑到各种恶心情况才可以AC~\r\n\r\n毛哥说：从A到K都是水题。\r\nbingshen说：从K到A都是原题。', 'bingshen', '', '2012-04-26 11:02:08', 1000, 65536, 'N', NULL, 20, 61, 33, 37, 79, 14, 10, 30000, 408, ''),
(1795, 'Power的水题II', 'power又忍不住出水题了。。。\r\n这次的题目更简单：\r\n给你一个字符串排序后输出。', '一个只包含小写字母的字符串，长度小于等于10^7。', '输出排序后的字符串。', 'D:\\oj\\data\\1795', 'D:\\oj\\data\\1795', 'cba', 'abc', 'OJ有BUG，此题无法AC。。。 \r\n可以去老OJ试试。', 'power', '', '2012-04-04 21:05:09', 1000, 65536, 'N', NULL, 0, 163, 0, 24, 100, 24, 0, 30000, 706, ''),
(1796, 'Space Emergency', 'There''s an emergency—in space! You need to send your fleet''s flagship as quickly as possible from star 0 to star N, traveling through the other stars in increasing numerical order along the way (0→1→...→N). Your flagship normally travels at a speed of 0.5 parsecs per hour. \r\n\r\nIn addition to sending your flagship, you can order your engineers to build up to L speed boosters at different stars. Building a speed booster takes t hours, and all L speed boosters can be built in parallel. While your flagship travels from a star with a completed speed booster to the next star, its speed is 1 parsec per hour. \r\n\r\nIf a speed booster is completed at a star while your flagship is traveling from that star to the next one, your flagship will start moving faster as soon as the speed booster is completed. \r\n\r\nHow many hours does it take your flagship to get to star N if you build speed boosters to make it arrive as soon as possible?', 'The first line of the input gives the number of test cases, T. T lines follow. Each contains integers, L, t, N and C, followed by C integers ai, all separated by spaces. ai is the number of parsecs between star k*C+i and star k*C+i+1, for all integer values of k. \r\n\r\nFor example, with N=8, C=3, a0=3, a1=5 and a2=4, the distances between stars are [3, 5, 4, 3, 5, 4, 3, 5]. \r\n\r\nLimits\r\n1 ≤ T ≤ 100.\r\n1 ≤ C ≤ 1000.\r\nC ≤ N.\r\n1 ≤ ai ≤ 104.\r\n0 ≤ t ≤ 1011.\r\nt is even. \r\n\r\n1 ≤ N ≤ 1000.\r\n0 ≤ L ≤ 2.', 'For each test case, output one line containing "Case #x: y", where x is the case number (starting from 1) and y is a single integer: the number of hours it takes to reach star N. The answer is guaranteed to always be an integer.', 'D:\\oj\\data\\1796', 'D:\\oj\\data\\1796', '2\r\n2 20 8 2 3 5\r\n1 4 2 2 10 4', 'Case #1: 54\r\nCase #2: 20', 'In the second case, we can build one speed booster. The distances between stars are [10, 4]. We build the speed booster on the first star. After 4 hours, our flagship has gone 2 parsecs and the speed booster is complete. It takes our flagship another 8 hours to get to star 1, then 8 more hours to get to star 2, our destination. \r\n\r\nNote: This problem takes place in a universe where the speed of light is much higher than 1 parsec per hour, so we don''t have to worry about special relativistic effects.', 'GCJ 2011 1C', '', '2011-05-22 22:44:20', 1000, 65536, 'N', NULL, 2, 2, 100, 0, 0, 1, 1, 30000, 45, ''),
(1797, 'Bearboy的旅游路线', 'Bearboy是西南科技大学信息工程学院的一名ACM Player 。他每天的生活非常单调。宿舍，食堂，教室和实验室。四点一线的生活让他很少有时间能够出学校玩。现在快暑假集训了，所以Bearboy决定组队一起出去玩一下，但是绵阳有那么多的旅游景点，由于经费问题，Bearboy一伙只能去一个地方。因为经费问题，Bearboy心情很不好，所以心情很烦的Bearboy想要找聪明的你来帮他设计一条从西科大到目的地的最短路径。（你可以认为起点都是：西南科技大学）', '输入的第一行为一个整数T（测试数据的组数 ）\r\n\r\n对于每组测试数据，第一行为 两个整数 N,M。N为 旅游景点的个数（N<=150）,M为景点之间的道路条数（M<=(N*(N+1)/2)）；\r\n\r\n接下来的M行，每行包括两个字符串 Str1  Str2 和一个整数 Len\r\n\r\n表示地点Str1到Str2的路程为Len。\r\n\r\n最后一行为 目的地。（所有输入的字符串中不包含空格，长度不超过20）', '对于每组测试数据，输出包括两行。\r\n\r\n第一行是从西南科技大学到目的地的最短距离\r\n\r\n如果不能到达，则输出“You can''t reach!”', 'D:\\oj\\data\\1797', 'D:\\oj\\data\\1797', '1\r\n\r\n5 10\r\n\r\n西南科技大学  李白故里  400\r\n\r\n西南科技大学   窦团山  50\r\n\r\n西南科技大学   猿王洞  250\r\n\r\n龙山   西南科技大学  550\r\n\r\n猿王洞   窦团山  120\r\n\r\n窦团山  龙山  400\r\n\r\n猿王洞  李白故里  40\r\n\r\n李白故里 窦团山 230\r\n\r\n西南科技大学  李白故里  220\r\n\r\n李白故里  龙山  120\r\n\r\n李白故里', '210', '', 'swust20095862', '', '2011-05-23 13:07:15', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 56, ''),
(1798, 'Bearboy的旅行', 'Bearboy是swust信息工程学院的一名ACM Player 。他每天的生活非常单调。宿舍，食堂，教室和实验室。四点一线的生活让他很少有时间能够出学校玩。现在快暑假集训了，所以Bearboy决定组队一起出去玩一下，但是绵阳有那么多的旅游景点，由于经费问题，Bearboy一伙只能去一个地方。因为经费问题，Bearboy心情很不好，所以心情很烦的Bearboy想要找聪明的你来帮他设计一条从西科大到目的地的最短路径。（你可以认为起点都是：swust）', '输入的第一行为一个整数T（测试数据的组数 ）\r\n对于每组测试数据，第一行为 两个整数 N,M。N为 旅游景点的个数（N<=150,）,<b><font color=red>swust是世界100强名校，不算景点</font></b>，M为景点之间的道路条数（M<=(N*(N+1)/2)）；\r\n接下来的M行，每行包括两个字符串 Str1  Str2 和一个整数 Len\r\n表示地点Str1到Str2的路程为Len。\r\n最后一行为 目的地。（所有输入的字符串中不包含空格，长度不超过20）', '对于每组测试数据\r\n对于每组测试数据输出从swust到目的地的最短距离（如果不能到达，输出You can''t reach!）', 'D:\\oj\\data\\1798', 'D:\\oj\\data\\1798', '1\r\n5 10\r\nswust  libaiguli  600\r\nswust   Doutuanshan  50\r\nswust   Yuanwangdong  250\r\nlongshan   swust  550\r\nYuanwangdong   Doutuanshan  120\r\nDoutuanshan  longshan  400\r\nYuanwangdong  libaiguli  40\r\nlibaiguli Doutuanshan 230\r\nDoutuanshan  libaiguli  220\r\nlibaiguli  longshan  120\r\nlibaiguli', '210', '', 'swust20095862', '', '2012-05-13 14:33:50', 1000, 65536, 'N', NULL, 68, 296, 23, 178, 82, 42, 39, 30000, 2027, ''),
(1799, 'WS旅行社', '西科大新成立了一个WS旅行社。现在在全校范围内招收导游，旅行社为前来应聘的同学设计了一道难题：给应聘者一张地图，看他能否很快的计算出从出发点到达终点的最短路径，这个问题，相信对于来自西科大的你来说，是轻而易举的事情，但是作为旅行社的社长，Bearboy 还要求应聘者能够在地图中画出这条最短路。', '输入的第一行为一个整数T（T组测试数据&lt;=100）\r\n对于每一组测试数据，第一行为两个整数 N,M。N表示地图上的景点个数(N<=2000)。（1 . 2 . 3....N）,M表示道路个数。接下来是M行，每行包括三个整数 S .T .L，表示 景点S与景点T之间的距离是L(L<=1000)\r\n最后一行是两个整数st 和 en ，表示旅行的 起点 和 目的地。', '对于每组测试数据，输出包括两行，第一行是从st到en的最短路径长度。\r\n第二行是输出从起点到目的地所经过的所有景点（如Sample output所示） 以先后顺序输出，数据保证只有一条最优路径\r\n如果不能到达就输出 none!\r\n每两组测试数据之间用一个空行隔开。', 'D:\\oj\\data\\1799', 'D:\\oj\\data\\1799', '1\r\n5 8\r\n1 2 1\r\n1 4 10\r\n2 3 5\r\n2 4 1\r\n2 5 12\r\n3 4 1\r\n3 5 1\r\n5 4 8\r\n1 5', 'Case 1 : 4\r\n1 2 4 3 5', '', 'swust20095862', '', '2012-05-12 13:05:03', 1500, 65536, 'N', NULL, 46, 204, 23, 135, 80, 39, 33, 30000, 1257, ''),
(1800, 'WS旅行社 II', '西科大新成立了一个WS旅行社。现在在全校范围内招收导游，旅行社为前来应聘的同学设计了一道难题：给应聘者一张地图，看他能否很快的计算出从出发点到达终点的最短路径，这个问题，相信对于来自西科大的你来说，是轻而易举的事情，但是作为旅行社的社长，Bearboy 还要求应聘者能够在地图中画出这条最短路。', '输入的第一行为一个整数T（T组测试数据&lt;=500）\r\n\r\n对于每一组测试数据，第一行为两个整数 N,M。N表示地图上的景点个数(N<=2000)。（1 . 2 . 3....N）,M表示道路个数。接下来是M行，每行包括三个整数 S .T .L，表示 景点S与景点T之间的距离是L(L<=1000)\r\n\r\n最后一行是两个整数st 和 en ，表示旅行的 起点 和 目的地。', '对于每组测试数据，输出包括两行，第一行是从st到en的最短路径长度。\r\n\r\n第二行是输出从起点到目的地所经过的所有景点（如Sample Input 所示）\r\n如果不能到达就输出 none!\r\n\r\n每两组测试数据之间用一个空行隔开', 'D:\\oj\\data\\1800', 'D:\\oj\\data\\1800', '2\r\n5 8\r\n1 2 1\r\n1 4 10\r\n2 3 5\r\n2 4 1\r\n2 5 12\r\n3 4 1\r\n3 5 1\r\n5 4 8\r\n1 5\r\n5 1\r\n1 2 1\r\n4 5', 'Case 1 : 4\r\n1 2 4 3 5                             \r\nCase 2 : none!', '', 'swust20095862', '', '2012-05-12 12:56:31', 1000, 65536, 'N', NULL, 41, 101, 41, 55, 63, 36, 32, 30000, 853, ''),
(1801, '纠结的Bearboy', '自从Bearboy 来到了西南科技大学，就很少回家，也很少见到他中学时期的同学，所以，他很想念他以前的那些朋友们。现在他打算去拜访他的朋友们。但是在他的所有的Q个朋友里面，他都很想要去拜访，但是Bearboy的时间真的很少，所以最后他决定只去拜访这Q位朋友中的一位。现在的问题是：由于Bearboy在西科大的特殊地位，学校愿意派校车送他去西科大附近的P个车站中的任意一个，现在Bearboy犯难了。他不知道应该先坐校车到哪个车站，并从那个车站出发，也不知道应该去拜访Q为朋友中哪一位。纠结的Bearboy打算把这个问题交给你。', '输入有多组测试数据：（输入到结束符结束）\r\n对于每组测试数据，第一行包括四个整数 N(N<=5000)，M(M<=100000)，Q(Q<=N)，P(P<=1000)；\r\nN表示总的车站个数（分别编号为（0.1.2.....N-1）。接下来M行，每行包括三个数 St 、En、 Len(0<=St ,En<N;Len<=1000)\r\n表示从车站St到车站En的车费是Len。\r\n接下来是最后两行，第一行包括Q个数，分别表示这Q个朋友所在地的车站编号。\r\n最后一行包括P个数，分别表示校车可以到达的车站编号。', '对于每组测试数据。可以选择这P个车站中的任意一个作为起点，去拜访这Q位朋友中的任意一个，显而易见，一共有P*Q中出行方案，现在让你找出其中花费最小的一种出行方案。', 'D:\\oj\\data\\1801', 'D:\\oj\\data\\1801', '5 7 2 2\r\n0 1 3\r\n0 4 12\r\n1 4 5\r\n1 3 7\r\n1 2 6\r\n2 4 3\r\n3 4 1\r\n3 4\r\n0 1', '5', '', 'swust20095862', '', '2012-04-14 21:57:10', 1000, 65536, 'N', NULL, 17, 47, 36, 21, 75, 9, 7, 30000, 616, ''),
(1802, 'Power721的表白', 'Power721最近的心情很不好，编程的时候很不在状态。他的朋友Bearboy发现了Power721的不正常。在Bearboy在再三追问下，Power721终于道出了实情。事情是这样的：在5月20号这天，Power721终于鼓足了勇气，向他一个喜欢了很久的女生表白了。现在的女生啊，总是口是心非，虽然很喜欢我们的Power721，但是她还是想要考验一下Power721：她要让Power721从西科大坐车到她的老家去，一定要在最短的时间内到达。而且中途必须“转车”T次。（Power721每坐车到一个城市，就必须换乘一辆车。。称作“转车”）', '输入包多组测试数据。\r\n每组测试数据以三个整数N，M，T开始（当T=M=N=0时，输入结束）N（N<=200）表示城市的个数（1.2.3.....N）。T(T<=N)为转车的次数。接下来是M行，每行有三个整数St  .En  .Len 。表示从城市St到城市En要花掉Len的时间(双向的通路) 。\r\n可以认为西科大在第一个城市（1）。那个女生的家乡在第N个城市（N）。', '对于每组测试数据如果Power721不能在转车T的情况下到达的话\r\n就输出“Orz has be failed!”.否则，输出所花的最短时间。', 'D:\\oj\\data\\1802', 'D:\\oj\\data\\1802', '5 8 4\r\n1 2 3\r\n1 5 12\r\n2 5 5\r\n2 3 6\r\n3 5 13\r\n5 4 1\r\n4 2 7\r\n3 4 2', '13', '', 'swust20095862', '', '2011-06-02 09:38:27', 1000, 65536, 'N', NULL, 6, 24, 25, 7, 70, 5, 3, 30000, 366, ''),
(1803, '灾后城市道路规划问题', '2008年5月12日的汶川地震给绵阳带来重大的损失，在全国人名的努力下，经过近三年的灾后重建。灾区的生活终于又恢复了平静，美丽的汶川有出现在了世人的面前，但是随着经济的恢复，绵阳的交通出现了很大的问题，特别是灾区的交通。以前留下的一些旧的公路和现在新修的一些公路错杂交错。让人们的出行很不方面。作为绵阳道路规划的负责人，Bearboy,想要找西科大的你来帮他解决这个交通问题：在整个交通网络中，去掉一些不必要的公路，以节省开支，同时保证交通的畅通，也就是，在去掉一些公路的同时，任然能够保证任意两个地点之间能够正常的交通，而且使去掉的公路长度总和最大。', '输入包括多组测试数据，输入到结束符时结束。\r\n每组测试数据，第一行为两个整数N,M。N表示地点个数（N<=3000），M表示这个N个地点之间的公路条数（M<=((N(N+1))/2)）。接下来是M行，每行有三个整数St，En，Len。表示地点St和地点En之间的公路长度是Len。（可以认为在去掉公路之前所有的点都是连通的）', '对于每组测试数据，输出在去掉一些公路之后剩下的交通的公路总长度。', 'D:\\oj\\data\\1803', 'D:\\oj\\data\\1803', '7 12\r\n1 2 8\r\n1 3 5\r\n2 3 10\r\n2 4 2\r\n3 4 3\r\n2 5 18\r\n3 6 16\r\n4 5 12\r\n4 6 30\r\n4 7 14\r\n5 7 4\r\n7 6 26', '42', '', 'swust20095862', '', '2012-05-13 08:57:36', 1000, 65536, 'N', NULL, 58, 98, 59, 26, 43, 35, 35, 30000, 801, ''),
(1804, '二进制', '对于一串自然数序列0,1,2,3,4,5,6......,n。\r\n冰神给了你一个任务，就是求，0到n中，所有自然数的二进制码中的‘1’的个数\r\n举个例子：当n=5的时候\r\n十进制数         二进制数\r\n-------------------------\r\n0                  0\r\n1                  1\r\n2                 10\r\n3                 11\r\n4                100\r\n5                101\r\n\r\n0,1,10,11,100,101这5个二进制数中间共有7个‘1’出现，所以当n=5的时候，答案为7', '输入数据多组，读入EOF的时候结束\r\n每一行输入一个数n', '对于每一个输出，答案占一行。', 'D:\\oj\\data\\1804', 'D:\\oj\\data\\1804', '2\r\n3\r\n5\r\n1164\r\n20071010\r\n20100512\r\n835672545', 'Case 1: 2\r\nCase 2: 4\r\nCase 3: 7\r\nCase 4: 5744\r\nCase 5: 239720074\r\nCase 6: 240071643\r\nCase 7: 12245574353', '输入虽然只有2^32，但是输出会超出int，所以请选择合适的数据类型', 'bingshen', '', '2012-05-02 19:09:01', 1000, 65536, 'N', NULL, 6, 9, 67, 1, 17, 6, 5, 30000, 182, ''),
(1805, '完全平方数', '一个非负整数n是完全平方数当且仅当存在非负整数m，使得n=m<sup>2</sup>\r\n据说完全平方数具有某种神奇的力量，谁知道呢。\r\n聪明的你一定想到了，这道题的任务就是编写一个程序，判断给定的n是否是完全平方数。', '输入包含多组数据。\r\n每组数据占一行，包含一个非负整数n，n不超过10<sup>9</sup>\r\n输入以n=-1结束', '对每组输入数据输出一行，如果n是完全平方数则输出”Yes”，否则输出”No”', 'D:\\oj\\data\\1805', 'D:\\oj\\data\\1805', '0\r\n1\r\n2\r\n3\r\n4\r\n-1', 'Yes\r\nYes\r\nNo\r\nNo\r\nYes', '', 'ustc2010', '', '2012-04-13 17:50:29', 1000, 65536, 'N', NULL, 17, 39, 44, 22, 58, 18, 16, 30000, 279, ''),
(1806, 'Latin square', '拉丁方阵是一种n×n的方阵，方阵中恰有n种不同的元素，每种元素恰有n个，并且每种元素在一行和一列中恰好出现一次。著名数学家和物理学家欧拉使用拉丁字母来作为拉丁方阵里元素的符号，拉丁方阵因此而得名。例如下图是一个3×3的拉丁方阵：\r\n\r\n3 2 1\r\n2 1 3\r\n1 3 2\r\n如果一个拉丁方阵的第一行和第一列按照元素的先后顺序来排列，那么这称为拉丁方阵的标准型，例如下图就是一个3x3的拉丁方阵标准型，第一行和第一列都是”1 2 3”。\r\n\r\n1 2 3\r\n2 3 1\r\n3 1 2\r\n你的任务是，编写一个程序读入一个方阵，判断其是否为拉丁方阵；进一步地，判断是否为标准型。', '输入包含多组数据。\r\n每组数据第一行为正整数n，表示方阵的大小。\r\n其后n行，每行有n个1到n之间的整数，整数之间恰有一个空格，表示方阵的内容。\r\n输入保证1≤n≤100\r\n输入以n=0结束，不要处理这个数据。', '每组数据对应于一行输出。如果输入是拉丁方阵，但不是标准型则输出1；如果输入是标准型则输出2；如果输入不是拉丁方阵则输出0', 'D:\\oj\\data\\1806', 'D:\\oj\\data\\1806', '2\r\n1 1\r\n2 2\r\n3\r\n3 2 1\r\n2 1 3\r\n1 3 2\r\n3\r\n1 2 3\r\n3 2 1\r\n2 1 2\r\n5\r\n4 3 5 2 1 \r\n5 4 1 3 2 \r\n1 5 2 4 3 \r\n2 1 3 5 4 \r\n3 2 4 1 5\r\n3\r\n1 2 3\r\n2 3 1\r\n3 1 2\r\n0', '0\r\n1\r\n0\r\n1\r\n2', '', 'ustc2010', '', '2012-02-19 17:34:27', 1000, 65536, 'N', NULL, 18, 54, 33, 36, 67, 20, 18, 30000, 487, ''),
(1807, '取石子游戏', '在组合博弈论中，Nim游戏是一个非常经典的问题，Nim游戏可描述如下：\r\n有n堆石子，每堆石子数分别为a1, a2, …, an (ai≥0)。现有两人轮流从这n堆中取石子，每次必须从某一堆中取任意多的石子，至少要取一个，必须从同一堆中取石子，并且不能超过这一堆石子的总数。如果某一方没有石子可取，那么他就输了。\r\n例如有3堆石子，分别有3, 2, 2个，A和B两人轮流取。\r\nA先从第2堆取1个，然后B从第1堆取3个，此时石子数分别为0, 1, 2\r\nA又从第3堆取1个，然后B从第1堆取1个，此时石子数分别为0, 0, 1\r\nA最后从第3堆取1个，此时所有石子都被取走，B无石子可取，所以B输了。\r\nC. L. Bouton给出了Nim游戏的解法：\r\n考虑把每堆的石子数a1, a2, …, an表示成二进制，那么当前游戏局面的Nim数为a1, a2, …, an的按位异或。比如在上面的例子中，3=11(2), 2=10(2), 2=10(2), 将这3个数按位异或得11(2)=3。所以3是当前游戏局面的Nim数。\r\n这里不加证明地给出结论：假设游戏双方都非常聪明，当Nim数为0时，当前游戏者必败；当Nim数不为0时，当前游戏者必胜。\r\n再考虑上面的例子，A取走第2堆的1个石子后，石子数变为3, 1, 2，其Nim数为0，从而使得B必败；此后A每次取石子后总能使得留给B的局面的Nim数为0，所以A最终取得了胜利。\r\n既然你已经知道了如何判断当前Nim游戏局面是否必胜，那么请完成一个稍稍复杂些的任务：\r\n给定Nim游戏的当前局面，如果必胜，请找出当前游戏者需要取走多少石子才能让对方必败，如果有多种取石子的方式，请给出要取石子数最少的。再如上面的例子，初始时，A从第1堆取3个石子，或从第2或3堆取1个石子都可以保证B必败，但因为后者所取的石子数最少，所以这种情况下答案为1。', '输入包含多组数据。\r\n每组数据第一行为n (1≤n≤10<sup>6</sup>)，表示石子的堆数。\r\n第二行包含n个非负整数，表示每堆石子的数量，每堆石子不超过10<sup>9</sup>个。注意，可以有空的石子堆。\r\n输入以n=0结束，不要处理这个数据。', '对每组数据输出一行，为需要取走的最少的石子数，如果当前局面必败则输出-1', 'D:\\oj\\data\\1807', 'D:\\oj\\data\\1807', '1\r\n10\r\n2\r\n17 17\r\n3\r\n3 2 2\r\n4\r\n1 2 3 4\r\n0', '10\r\n-1\r\n1\r\n4', '', 'ustc2010', '', '2011-05-28 11:49:20', 1000, 65536, 'N', NULL, 2, 2, 100, 0, 0, 2, 2, 30000, 192, ''),
(1808, 'Matrix', '有一个m行，n列的矩阵，矩阵中的元素最多只有四个相邻的元素（上，下，左，右)，对于任何一对相邻的元素，你能够对他们同时加上一个相同的整数，现在的问题是： 不断重复这一操作，你能让该矩阵的元素全变为0吗？', '多组测试数据，首先输入m和n(1<=m,n<=5)，代表矩阵的行和列，然后再输入一个m*n的矩阵，矩阵中元素都为整数，范围\r\n[-1000000,1000000]。 输入m=0，n=0时结束。', '如果不断重复这一操作，能让矩阵中元素全变为0，请输出1，否则输出0.', 'D:\\oj\\data\\1808', 'D:\\oj\\data\\1808', '2 2\r\n1 1\r\n1 1\r\n2 2\r\n1 1\r\n1 0', '1\r\n0', '', '', '', '2012-01-26 22:08:41', 1000, 65536, 'N', NULL, 8, 32, 25, 24, 75, 11, 8, 30000, 440, ''),
(1809, 'Formula of Love', '“两个原来陌生的名字\r\n 寂寞的公因数\r\n 是什么样子\r\n 我们受过的伤\r\n 在困难的考试\r\n 时间用它的方法\r\n 计算出爱的公式” \r\nWAG经过两年的思考，终于研究出了爱的方程式: f(x) = f(x-5.21)+f(x-13.14), x>=1 \r\n现在已知: f(x)=0, x<0\r\nf(x)=1, 0<=x<1 \r\n对于给定的x，求解f(x).也许f(x)的值可能会很大，输出对1000000007取模后的余数。', '第一行一个数N，表明有N个Cases（N<=100）。 \r\n之后有N行，每行一个数X（-1000<=X<=1000）（<b>小数点后一定会有，且只有两位&lt;/b>），求f(X)。', '对应每一个X，输出f(X)。', 'D:\\oj\\data\\1809', 'D:\\oj\\data\\1809', '2\r\n13.24\r\n2.00', '1\r\n0', '注意TLE啊', '', '', '2011-06-12 22:32:13', 1000, 65536, 'N', NULL, 8, 43, 19, 16, 73, 11, 6, 30000, 540, ''),
(1810, 'Treasure', 'Loneknight is finding treasures in a maze. He is so greedy that he always takes away all the treasure he can reach. Now, he has a map for the maze, and he want to know the maximum of treasure he can get. Please help him calculate this value. Note that in every step, Loneknight can only move up, down, left, or right, if the target place is not a wall. Moreover, he can''t move out of the maze, or you may assume that there is a wall suround the whole maze.', 'The input consists of several test cases. Each test case start with a line containing two number, n, m(1 < n, m <= 100), the rows and the columns of grid. Then n lines follow, each contain exact m characters, representing the type of block in it. (. for empty place, X for loneknight, * for treasure, # for wall). Each case contain exactly one X. The input end with EOF.', 'You have to print the maximum number of treasures loneknight can get in a single line for each case.', 'D:\\oj\\data\\1810', 'D:\\oj\\data\\1810', '4 4\r\n*...\r\n.X..\r\n....\r\n...*\r\n\r\n4 4\r\n*#..\r\n#X..\r\n....\r\n...*', '2\r\n1', '', '', '', '2012-03-27 19:43:22', 1000, 65536, 'N', NULL, 17, 31, 55, 14, 48, 16, 15, 30000, 492, ''),
(1811, 'Bearboy 的新队员', '2011集训队省赛选拔终于开始了， Bearboy 想要在这次选拔中为他选拔一名优秀的队员。所以他想要出一道难题来考考大家。他这样定义了一个函数 f(n).\r\n	If(n==0)  return  a;\r\n	If(n==1)  return  b;\r\n	Else  return  (1+f(n-1))/f(n-2)', '多组测试数据。对于每组测试数据包括三个整数 a b n。（0< a,b<10^5;n<=10^10）', '对于每组测试数据，输出相应的f(n)。输出保留六位小数。', 'D:\\oj\\data\\1811', 'D:\\oj\\data\\1811', '1 1 4\r\n1 2 3\r\n4 6 3', '2.000000\r\n2.000000\r\n0.458333', '', 'swust20095862', '', '2012-04-18 20:57:06', 2000, 65536, 'N', NULL, 6, 7, 86, 0, 0, 6, 6, 30000, 138, ''),
(1812, 'Bad Random Numbers', 'Bessie is trying to generate random numbers. She stumbled upon an\r\nold reference to the ''middle square'' method for making numbers that\r\nappear to be random. It works like this:\r\n\r\n        * Pick a starting four digit number (1 <= N <= 9999)\r\n\r\n        * Extract its middle two digits (the hundreds and tens digit)\r\n          as a number\r\n\r\n        * Compute the square of those two digits\r\n\r\n	* That square is the ''random number'' and becomes the new\r\n	  starting number\r\n\r\nHere''s a sample:\r\n\r\n                Num  Middle  Square\r\n               7339    33     1089\r\n               1089     8       64\r\n                 64     6       36\r\n                 36     3        9\r\n                  9     0        0\r\n                  0     0        0\r\n\r\nThe ''pigeon hole principle'' tells us that the random numbers surely\r\nmust repeat after no more than 10,000 of them -- and the sequence\r\nabove repeats after just six numbers (the next number and all\r\nsubsequent numbers are 0).\r\n\r\nNote that some sequences repeat in a more complex way; this one\r\nalternates back and forth between 576 and 3249:\r\n\r\n                Num  Middle  Square\r\n                2245   24      576  \r\n                 576   57     3249 \r\n                3249   24      576  \r\n\r\nYour job is to tell Bessie the count of ''random numbers'' that can\r\nbe generated from a starting number before the sequence repeats\r\na previously seen number. In the first case above, the answer is\r\n''6''. In the ''alternating'' case, the answer is ''3''.', '* Line 1: A single integer: N', '* Line 1: A single integer that is the count of iterations through the\r\n        middle square random number generator before a previous value\r\n        is repeated', 'D:\\oj\\data\\1812', 'D:\\oj\\data\\1812', '7339', '6', '', '', '', '2011-05-31 12:53:15', 1000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 91, '');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1813, 'Cow Pals', 'Bessie 和其他的所有奶牛的耳朵上都戴有一个射频识别（RFID）序列号码牌。因此 FJ 可以机械化地计算他们的数量。很多奶牛有一个“牛友”：一只奶牛的牛友的序列号刚好等 于奶牛自己的序列号的所有约数之和。在这里，一个数的“约数”不包括这个数本身。 \r\n\r\n 因为一些奶牛的号码约数和大于其他任何奶牛的号码，所以这些奶牛没有牛友。  \r\n 一些奶牛有一个“非常好友”。当两个奶牛互为“牛友”时，他们就是一对“非常好友”。 \r\n<b>注意在这道题中，忽略那些自己是自己的“非常好友”的情况。 </b>\r\n\r\n 给定一个序列号 S (6 <= S <= 18,000)，找到序列号不小于 S 的第一只有“非常好友” 的奶牛。 \r\n\r\n 比如说，考虑序列号 220，它的约数是 1, 2, 4, 5, 10, 11, 20, 22, 44, 55, 110。它们的和是 284。\r\n类似的，284 的约数是 1, 2, 4, 71, 和142。他们的和是 220。因此，220 和284 是一对“非常好友”。', '一个单独的整数: S，即给定的序列号。', '单独一行，包含 2 个由空格隔开的整数。  \r\n 第一个整数表示第一个序列号不小于 S 的有“非常好友”的奶牛的序列号。  \r\n 第二个整数是他的“非常好友”的序列号。', 'D:\\oj\\data\\1813', 'D:\\oj\\data\\1813', '206', '220 284', '', '', '', '2011-09-11 17:57:37', 1000, 65536, 'N', NULL, 15, 61, 25, 45, 80, 16, 11, 30000, 532, ''),
(1814, 'Median', 'A median is described as the numeric value separating the higher half of a list, from the lower half. The median of a finite list of numbers can be found by arranging all the elements from lowest value to highest value and picking the middle one. If there is an even number of elements, the median is then defined to be the mean of the two middle values. Now, could you write a program to help to find the median?', 'There are multiple test cases. The first line of input is an integer T ≈ 100 indicating the number of test cases. The first line of each test is an integer 0 < n < 500 indicating the number of elements. The second line consists of n numbers, the elements of the list, whose absolute values are smaller than 1,000,000.', 'For each test case, output the median, with 3 decimal digits.', 'D:\\oj\\data\\1814', 'D:\\oj\\data\\1814', '3\r\n1\r\n0.0\r\n4\r\n1.0 1000.3 100.2 10.1\r\n5\r\n2.0 3.0 5.0 7.0 11.0', '0.000\r\n55.150\r\n5.000', '', '', '', '2012-04-16 09:24:10', 1000, 65536, 'N', NULL, 17, 39, 44, 22, 56, 19, 17, 30000, 382, ''),
(1815, '斐波那契数列推论', '假设f[1],f[2],f[3],f[4]...为斐波那契数列（f[1]=1,f[2]=1）\r\n试求：f[s]^2+f[s+1]^2+f[s+2]^2+...+f[t]^2的值对10007取模是多少？', '多组数据输入\r\n每一行输入两个数s,t\r\n如果s>t请交换次序\r\n\r\ns和t均在int范围内', '输出sigma((i : s - > t)fi^2)%10007的值', 'D:\\oj\\data\\1815', 'D:\\oj\\data\\1815', '1 4\r\n1 6', '15\r\n104', '', 'bingshen', '', '2012-05-18 17:16:32', 1000, 65536, 'N', NULL, 21, 104, 20, 81, 84, 18, 16, 30000, 685, ''),
(1816, 'Convolution Codes', 'Channel is a very important part of a digital communication system．The characteristics of the channel affect the performance of the whole digital communication system．The noise and interference in the real channel make the codes received different from the codes sent．The difference is generally called error．In order to improve the quality of communication and ensure the reliability and validity of communication, error-control coding is usually adopted to correct the errors produced in the process of transfer before the digital signals enter the channel．\r\nError-control coding is all effective method to enhance the communication quality by adding redundant information into the original message. Convolution code is a kind of error-correcting code which is used very widely. So，as the corresponding best decode method of the convolution codes，Viterbi decoder is always researched widely．\r\nNow, we only want to do some research about the encoding of convolution codes. First we give an example to you to explain the procedure of the encoding:\r\nIf we research the encoding of the （2，1，7） convolution codes. And the rate of the convolution codes is 1/2, the construction is the following picture:\r\n<img src=images/problem/1816.jpg />\r\nsequence after encoding. As above, the generation matrix has told to you, so We can calculate the answer as follows:\r\nB = A <img src=images/problem/18161.jpg /> P(1);\r\nC = A <img src=images/problem/18161.jpg /> P(2);\r\nThen for every B(i) and C(i), you just need do like this \r\nB(i) = B(i) % 2=[1100110001100101]; \r\nC(i) = C(i) % 2=[1011110001110011];\r\nThe encoding output is [B(1)C(1)B(2)C(2) ……];\r\nIn this problem, the generation matrix is unique which is told above, we will give you the input sequence, you will tell us the sequence after encoding.\r\nPay attention to that all the input and output is 0 or 1 sequence.', 'There are plenty of test cases，for each test case ：\r\nThere is a sequence which contains a series of ‘0’ and ‘1’ in one line. The length of the input sequence is at most 1000 and at least 1.\r\nThe end of the input is indicated by the end of the file(EOF).', 'For each test case , you should output the test case number and the sequence after convolution encoding in a line. The format is like the sample.', 'D:\\oj\\data\\1816', 'D:\\oj\\data\\1816', '1110111011\r\n0100111\r\n111011000\r\n1111\r\n01100\r\n110101', 'Case 1: 11100101111100000011110100100111\r\nCase 2: 00110111001011100001010111\r\nCase 3: 111001011111110100100111000000\r\nCase 4: 11100110011010010111\r\nCase 5: 0011101000111001110000\r\nCase 6: 111010111010110001111011', '<a href=../gongju/hun6.zip>比赛题目下载</a>', 'Huicpc6168@monster', '', '2011-06-02 13:41:26', 1000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 92, 'power721'),
(1817, 'Equivalent Synonym', 'We all know about synonym, two words that can be interchanged in a context are said to be synonymous relative to that context. Sometimes, we also interested in Equivalent synonyms, that two words can be interchanged context-free. The fact is that words often have many meaning, each meaning has its own synonyms, and the synonyms may different. For example, word “predominant” has two meanings: 1.most frequent or common 2.having superior power and influence, in first meaning “prevailing” is its synonym, in second meaning the synonyms are overriding, paramount, preponderant, preponderating, so when we cannot interchanged the words not consider context, there are not equivalent synonym. But if word W1 synonymous with word W2’s all meaning, and for W2, also in each W1’s meaning’s synonyms. We can say W1 and W2 are Equivalent synonyms. For example, word “program” have five meanings, and “programme” is its synonym in five meaning, and consider “programme”, “program” also appear in each meaning’s synonym. So “programme” is program’s equivalent synonym, at any time it can replace “program”. Now give you the synonym list can you write a program to find out the equivalent synonym.', 'The first block of input is the synonym list, less than 100000 lines. Each line has at least one words, The first word is the underlying word, the other are its synonym in this meaning. The underlying word may appear more than once which mean different meanings. The synonym list is ended with a line contain ###, the next is a integer m, the number of query (m<10000), then followed by m lines, each line contain a word.', 'Output all the equivalent synonyms in alphabet order. If no equivalent synonym output “No Equivalent Synonym” instead.', 'D:\\oj\\data\\1817', 'D:\\oj\\data\\1817', 'program programme\r\nprogram programme\r\nprogram programme plan\r\nprogram programme\r\nprogram programme\r\nprogramme program\r\nprogramme program\r\nprogramme program plan\r\nprogramme program\r\nprogramme program\r\nplan programme program\r\nplan design\r\n###\r\n3\r\nprogram\r\nprogramme\r\nplan', 'programme\r\nprogram\r\nNo Equivalent Synonym', 'To simple the problem we not consider the transitivity of Equivalent Synonym.', 'xnby@Footmen', '', '2011-05-30 18:24:56', 3000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 59, 'power721'),
(1818, 'Boss Xnby’s Scheduling Problem', 'Boss xnby owns a company, as you know, in the company there are lots of jobs to do.Each job J has a processing requirement pj (denoting the number of machine days required to complete the job), a release date rj (representing the beginning of the day when job j becomes avalible for processing), and a due date dj ≥ rj  + pj (representing the beginning of the day by which the job must be completed). What could we do when facing so many jobs? Thank goodness, in xnby’s company, there are some parallel machines can do these jobs.Since a machine can work on only one job at a time and each job can be processed by at most one machine at a time.And preemptions(i.e., we can interrupt a job and process it on different machines on different days) is allowed.Now xnby can use these parallel machines to process these boring jobs,but he also need to determine a feasible schedule that completes all jobs before their due dates or show no such schedule existd.Xnby is a boss, he is a big shot, he had no time to do with these trivial things, so he arranged for you to do this task.', 'An integer T (T ≤ 100) indicated the number of test cases. \r\nFor each test cases:\r\nTwo integers J and M (J ≤ 100, M ≤ 100) denote jobs and machines respectively.\r\nIn the following J lines(each job one line, in ascending order), each line contains three integers p, r, d (p ≤ 100,r ≤ 100 and d ≤ 200) denote processing requirement, release date and due date respectively.', 'For each test case, output “Boss xnby is angry!” if no such schedule exists.Otherwise output “Boss xnby is happy!”.', 'D:\\oj\\data\\1818', 'D:\\oj\\data\\1818', '1\r\n4 3\r\n2 3 5\r\n1 1 4\r\n2 3 7\r\n4 5 9', 'Boss xnby is happy!', 'One schedule: Job 1 must be done in day 3 and day 4, and job 2 can be done in day 1,job 3 can be done in day 5 or day 6,the last job’s first two days can be done in day 5 and day 6(since there 3 machines, so it will not conflict with job 3), the remaining 2 days can be done in day 7 and day 8.', 'monster@monster', '', '2011-06-20 16:16:08', 2000, 65536, 'N', NULL, 1, 2, 50, 1, 50, 1, 1, 30000, 61, 'power721'),
(1819, 'Chinese Suit Tiles', 'Chinese suit tiles is one of traditional Chinese Dicegame, its origins can be traced back to before the Han Dynasty, according to legend, Chinese suit tiles and Chinese chess  belong to the same pulse, condensed the essence of ancient Chinese civilization, is also a quintessence of Chinese culture. China plates spread widely, basically covering most parts of China. Chinese suit tiles and Chinese mahjong card games are played similar, but more than mahjong skills and flexibility. Two to four people can play against, to hone and improve the analytical skills of thinking is very useful. Chinese suit tiles contains twenty kinds of cards , such  as "一，二，三，四，五，六，七，八，九，十，壹，贰，叁，肆，伍，陆，柒，捌，玖，拾" , each kind has four cards.  The rules of Chinese suit tiles is relatively simple , but more flexible. Tom has special hobby in Chinese suit tiles. As this kind game is very flexible, Tom is very difficult to see if he is the winner. As a very clever programmer, can you help him. \r\nEach one has n (0 < n ≤ 21) cards, these cards must divide into some group, each group must have three cards, and each group must satisfy one of following rules:\r\n1.	The value of each cards is equal, for example: the value of  "一" is equal to "壹&quot;.\r\n2.	The value of each cards is consecutive numbers, and each cards must  be lowercase Chinese character digital or capital Chinese character digital. For example:"一二三" is satisfied the condition, but "一贰三" is not satisfied the condition.\r\nIf the number of a kind card is equal to or more than three, they must in the same group. (So "一一一一二三" or "一二三一一壹&quot; is not satisfied the condition )\r\nWhoes cards satisfy the rules, he is the winner.\r\n<img src=images/problem/1817.jpg />', 'The first line contain a number n (0 ≤ n ≤ 21),the number of cards. If input 0 is the end of the case.\r\nThe following line contain a string of letters. \r\n"a,b,c,d,e,f,g,h,i,j,A,B,C,D,E,F,G,H,I,J" is in place of "一，二，三，四，五，六，七，八，九，十，壹，贰，叁，肆，伍，陆，柒，捌，玖，拾".', 'If the cards satisfy the rules, output “Yes”.\r\nIf the cards don’t satisfy the rules, output “No”.', 'D:\\oj\\data\\1819', 'D:\\oj\\data\\1819', '3\r\nacb\r\n3\r\naBc\r\n3\r\naaA\r\n6\r\naaaAbc\r\n0', 'Yes\r\nNo\r\nYes\r\nNo', '', 'Huicpc215@Zealor', '', '2011-06-06 22:32:44', 1000, 65536, 'N', NULL, 0, 2, 0, 2, 100, 1, 0, 30000, 68, 'power721'),
(1820, 'God Created The Integers', '“God created the integers, while the rest is the work of man” is a famous remark on mathematics by Kronecker, a famous mathematician. People understand numbers gradually through the process of solving equations. A very long time ago, people only know the integers Z. In order to let the equation 2x+1=0 has a solution, they introduce the notion of rational numbers Q. Later, man find that there is quite a lot situation requiring the solvability of equations x^2=0, which leads to the emergence of real numbers R. Finally, people import the concept of complex numbers C to make any polynomial has a zero point.\r\n	Number theory is a centuries-old subject focusing its attention on the theory of integers. There are many beautiful theorems and methods in number theory. As with everything else, so with the number theory: beauty can be perceived, but not explained. In this problem, we will try to solve an interesting one.\r\n	Mathematicians also try to solve equations in number theory, but here they do it in a different way. For example, they find quadratic equations x^a 0(mod b) is of special importance. As you can see, the operation related here is taken in the modular form. If you are familiar with number theory, you will find that we only need to consider the situation where b is a prime through the famous Chinese Remainder Theorem.\r\n	Now, let us consider the equation x^2 t(mod p) where p is a prime. Unfortunately, not any t can guarantee the existence of b satisfying b^2 t(mod p). It is important to find the condition of t guaranteeing the solvability. But as you know, this problem is a little difficult and thus let us try to solve a little easier problem related.\r\n	Let p be a prime and p 1(mod 4). You are asked to calculate <img src=images/problem/1818.jpg />, where [a] denotes the largest integer not larger than a. Since sp can be quite large and as a lover of number theory, you are required to calculate its reverse with respect to p, namely, the number rp satisfying 0 < rp < p and rpsp  1(mod p).', 'The first line contains a number T ≤ 200, which indicates the number of test case.\r\nThen in follows T lines, each line is a prime number p. 10 < p < 4 * 10 ^ 8, p   1 ( mod 4 )', 'For each test case, output one line containing "Case #x: y", where x is the case number (starting from 1) and y is rp.', 'D:\\oj\\data\\1820', 'D:\\oj\\data\\1820', '2\r\n17\r\n29', 'Case #1: 15\r\nCase #2: 28', '', 'Huicpc302@Zealor', '', '2011-05-30 18:30:14', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 52, 'power721'),
(1821, 'Optimal Compress', 'In the early year age,the storerage of the computer is very expensive.So when storing message,the worker try to compress the message.Since the storerage is very expensive.The message doesn''t exceed 200. \r\nThey compress the message in the following way.\r\n- adjacent repeats:[S]k\r\nWhich means:S repeated k times(where k is a one-byte integer.Recall that the length of message doesn''t exceed 200).\r\n- repeats with gaps:[S]k{S_1}t_1{S_2}t_2...{S_r}t_r, where 1 <= t_i < k, t_i < t_{i+1}\r\nwhich means: write S for k times, then insert string S_i after the t_i-th occurrence of S.\r\nNote that the message S can be compressed further.\r\nFor example:\r\naaabaaabaaa\r\nCan be compressed into:\r\n[a]9{b}4{b}8 with length 12\r\nand aaa[baaa]2 with length 10\r\nIn fact the optimal compress is aaa[baaa]2  \r\naaaaaaaabaaaa\r\nCan be compressed into [a]12{b}8 which is the optimal compress.', 'Input consist of multi test case.Each test case is a string conist of lowerletters. And the length doesn''t exceed doesn''t 200.Input ends with a line contain a singal letter ''*''.', 'One integer for each case,the optimal compress string''s length.', 'D:\\oj\\data\\1821', 'D:\\oj\\data\\1821', 'aaabaaabaaa\r\naaaaaaaabaaaa\r\n*', '10\r\n8', 'For the number 128 or 200,the length of them all count as 1.Since they can be store in one byte integer.', 'Huicpc035@Zealor', '', '2011-05-30 18:32:03', 10000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 300000, 40, 'power721'),
(1822, 'The Gougu Theorem', '<img src=images/problem/1822.jpg />\r\nPythagorean Theorem is "humanity''s greatest scientific discoveries of the ten" is a basic elementary geometry theorems.  "This theorem has a very long history, almost all ancient civilizations (Greece, China, Egypt, Babylon, India, etc.) have studied this theorem. Pythagorean Theorem in the West known as the Pythagorean Theorem, are said to Ancient Greek mathematician and philosopher Pythagoras (Pythagoras, BC572 ~ BC497) was first discovered in BC550.\r\nPythagorean Theorem in China known as the Gougu/勾股 Theorem. Around 1100 BC, the Western Zhou period, the ancient Chinese mathematician, Shanggao, first described the Gougu Theorem. In the famous ancient mathematics book, 《九章算术》,the proof was given  (left). The Gougu Theorem is that "in the right triangle, the sum of the squares of two right sides is equal to the square of the hypotenuse." In other words, the three sides (a, b, c) of right-angled triangle satisfies the following equation:\r\na<sup>2</sup>+b<sup>2</sup>=c<sup>2</sup>\r\nWhere a is called 勾/Gou, b is 股/Gu, and c is 弦/Xian.\r\nFor given c, how many different positive integer solutions are there? ((a,b,c）are relatively-prime. ) It is an interesting problem.\r\nNow, your task is to solve it.', 'There are several test cases; each test case contains one positive integer c (0 < c < 2<sup>30</sup> ) in a line. c = 0 is the end of input and need not to process.', 'For each test case, your program should output by following format:\r\nCase #:\r\nThere are n solution(s).\r\na<sup>2</sup>+b<sup>2</sup>=c<sup>2</sup>\r\n…..(total n line(s) )….\r\n\r\nWhere # is the test case number starting from 1, two consecutive cases should be separated by a single blank line.\r\nFor each given c, output all solutions satisfying:\r\na<sup>2</sup>+b<sup>2</sup>=c<sup>2</sup>\r\nEach solution should be in one line, and in order a<b<c.\r\nYou should output n solutions by ascending order of a.', 'D:\\oj\\data\\1822', 'D:\\oj\\data\\1822', '65\r\n20\r\n0', 'Case 1:\r\nThere are 2 solution(s).\r\n16^2 + 63^2 = 65^2\r\n33^2 + 56^2 = 65^2\r\n\r\nCase 2:\r\nThere are 0 solution(s).', '', 'Huicpc39@Hnu', '', '2011-05-30 18:34:35', 2000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 72, 'power721'),
(1823, 'World Exposition’s Puzzle', 'On 5.1 this year, the 41st World Exposition was held in Shanghai. In order to visit the World Exposition, reason flied to Shanghai. When he arrived at the airport, he was very excited. Because this was the first time he went to Shanghai. After the opening of the World Exposition, he wanted to walk around the city. Shanghai was beautiful, he went to some of attractions. Such as Nanjing Road, Oriental Pearl and Bund, etc. He went east and west, suddenly he found himself lost his way. He asked for your help.\r\n	There are N stops and M roads, reason was at stop S, he wanted to go to stop T. Reason was a lazy boy, he want to go to the stop T as short as possible. At the same time, reason has a habit, he always likes to walk to the stop T in K roads, and K is a multiple of X. \r\n<img src=images/problem/1823.jpg />', 'The input consists of several test cases. The first line is the number of test cases. \r\n	For each test case, the first line is the integer n and m, means there are N stops and M path, 1 ≤ N ≤ 100, 1 ≤ M ≤10000.\r\n	Then M lines, three number u, v, w. means there is a directed road from u to v, w is the length of the road. 0 ≤ u, v ≤ n, 0 ≤ w ≤ 230.\r\n	Last line contains three number: S, T and X. 0 ≤ S, T ≤ n, 1 ≤ X ≤ 10\r\n	There is a blank line between each case.', 'For each test case, output the total distance reason likes to walk from S stop to T stop. If there is no such path, output “No Answer!”', 'D:\\oj\\data\\1823', 'D:\\oj\\data\\1823', '2\r\n\r\n2 1\r\n0 1 1\r\n0 1 2\r\n\r\n3 2\r\n0 1 1\r\n1 2 1\r\n0 2 2', 'No Answer!\r\n2', '', 'reason@sword', '', '2011-05-30 18:37:15', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 55, 'power721'),
(1824, 'QQ Farm', '<img src=images/problem/1824.jpg />\r\nMany boys and girls play the game QQ farm, For example, in this picture we can see xnby、 Lance and so on. Sometimes there are some mosquitoes in our farm, we use a rectangular-shaped pad to kill them, and our experience will increase by 3 points after killing each mosquito .But now we find that using a square-shaped pad works better. when using the square-shaped pad, if we kill n mosquito at one time, our experience will increase by n×n points. For example, if we kill 4 mosquitoes at one time, our experience will increase by 16 points. A mosquito was killed when it is covered by the pad, but killing them is not so easy, because them are flying all the time. Now we got the radius of the pad and the location of every mosquito in each second, in each second we could use the pad just once, and we must kill at least one mosquito every second. You are asked to write a program to compute how many points we can get at most.', 'There are multiple test cases.\r\nIn each case, The first line contains two integers: N, T, which indicate the number of mosquitoes and the number of seconds. \r\nThe second line contains one Real number R, the length of the pad’s side.\r\nThe following T lines, each contains N pairs of Real numbers: (X1, Y1), (X2, Y2)…(XT, YT), which indicate the locations of those mosquitoes at the corresponding second.\r\nThose real numbers are rounded to two digits after the decimal point.\r\nThe sides of the pad must be parallel to x-axis or Y-axis. \r\n( 0 < N ≤ 10, 0 < T ≤ N, -1000000 ≤ R, Xi, Yi ≤ 1000000 )', 'The number of points we could get at most.', 'D:\\oj\\data\\1824', 'D:\\oj\\data\\1824', '3 2\r\n2.00\r\n1.00 1.00 2.00 2.00 3.00 3.00\r\n0.00 0.00 2.00 2.00 4.00 4.00\r\n3 1\r\n2.00\r\n1.00 1.00 2.00 2.00 3.00 3.00', '5\r\n9', '', 'yiyi4321@Footmen', '', '2011-05-30 18:38:40', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 100, 'power721'),
(1825, 'Trie Braiding', 'Many popular algorithms for fast packet forwarding and filtering rely on the tree data structure. Examples are the trie-based IP lookup and packet                                                      classification algorithms. With the recent interest in network virtualization, the ability to run multiple virtual router instances on a common physical router platform is essential. \r\nFirst, we build two original trie tree with single stride. \r\n<img src=images/problem/18251.jpg />\r\n<img src=images/problem/18252.jpg />\r\nIn fact, before building the multi-stride tree, we must expand the prefix. For example, the prefix 0(p1) is expanded to 00(p1),01(p1), the prefix 1(p2) is expanded to 10(p2),11(p2), but 10(p3) is already in the original table, so the prefix 10(p2) should be ignored.\r\n     \r\nHere comes the problem, we give you two prefix tables and the needed stride, please calculated the minimal total nodes you can get after Trie Braiding.', 'There will be several test cases. In each case, the first line have three integers , m, n, s (0 < m, n < 1000, 0 < s < 6 ), presented the size of two tables and the needed stride. Then follows the two prefix tables in order.', 'For each test case, the output should contain only one integer, the minimal total nodes.', 'D:\\oj\\data\\1825', 'D:\\oj\\data\\1825', '4 3 2\r\n0\r\n1\r\n01\r\n001\r\n0\r\n110\r\n111', '9', '', 'huicpc3-15@footmen', '', '2011-05-30 18:42:09', 5000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 50000, 58, 'power721'),
(1826, 'Bee Movie', 'Barry B. Benson is "just an ordinary bee" in a hive located in Sheep''s Meadow in Central Park in New York City. Barry recently graduated from college and is about to enter the hive''s Honex Industries (a division of Honesco Corporation and owned by the Hexagon Group) honey-making workforce. Along with his best friend Adam Flayman (voiced by Matthew Broderick) Barry is initially very excited, but his latent, non-conformist attitude emerges upon finding out that his choice of job will never change once picked.He absolutely disappointed, he joins the team responsible for bringing the honey and pollination of the flowers to visit the world outside the hive. The bee will draw out in battle array when they want to go outside.\r\n<img src=images/problem/1826.jpg />\r\nActually, this problem is about alignment of N (1 ≤ N ≤ 455) bees numbered 1..N who are grazing in their field that is about 15,000×15,000 units. Their grazing locations all fall on integer coordinates in a standard x,y scheme (coordinates are in the range 0..15,000). \r\n	Barry looks up and notices that she is exactly lined up with Huacm534(bee) and AcmIcpc20060820322(bee). He wonders how many groups of three aligned bees exist within the field. \r\n	Given the locations of all the bees (no two bees occupy the same location), figure out all sets of three bees are exactly collinear. Keep track of the sets, sorting the bees in each set by their ID number, lowest first. Then sort the sets by the three ID numbers (lowest first), breaking ties by examining the second and third ID numbers.', 'Line 1: A single integer, N \r\n\r\nLines 2..N+1: Line i+1 describes bee i''s location with two space-separated integers that are his x and y coordinates', 'Line 1: A single integer X that is the number of sets of three bees that are exactly collinear. A set of four collinear bees would, of course, result in four sets of three collinear bees. \r\n\r\nLines 2..X+1: Each line contains three space-separated integers that are the bee ID numbers of three collinear bees. The lines are sorted as specified above. This output section is empty if no collinear sets exist.', 'D:\\oj\\data\\1826', 'D:\\oj\\data\\1826', '8\r\n0 0\r\n0 4\r\n1 2\r\n2 4\r\n4 3\r\n4 5\r\n5 1\r\n6 5\r\n4\r\n0 0\r\n1 1\r\n2 2\r\n3 3', '1\r\n1 3 4\r\n4\r\n1 2 3\r\n1 2 4\r\n1 3 4\r\n2 3 4', 'Be careful of floating point arithmetic. Floating point comparison for equality almost never works as well as one would hope. \r\n\r\nExplanation of the sample 1: \r\n\r\nEight bees grazing on a grid whose lower left corner looks like this: \r\n. . . . 6 . 8   \r\n\r\n2 . 4 . . . .   \r\n\r\n. . . . 5 . .   \r\n\r\n. 3 . . . . .   \r\n\r\n. . . . . 7 .  \r\n\r\n1 . . . . . .\r\n\r\nThe digits mark the collinear bee IDs: \r\n. . . . * . *   \r\n\r\n* . 4 . . . .   \r\n\r\n. . . . * . .   \r\n\r\n. 3 . . . . .   \r\n\r\n. . . . . * .  \r\n\r\n1 . . . . . .', 'kenan5020@Monster', '', '2011-05-30 18:44:02', 2000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 48, 'power721'),
(1827, 'Light or Weight?', 'The "Gold Bar"bank received information from reliable sources that in their last group of N coins exactly one coin is false and differs in weight from other coins (while all other coins are equal in weight). After the economic crisis they have only a simple balance available. Using this balance, one is able to determine if the weight of objects in the left pan is less than, greater than, or equal to the weight of objects in the right pan. \r\nIn order to detect the false coin the bank employees numbered all coins by the integers from 1 to N, and there is a standard coin (The standard coin means its weight is standard) numbered 0. \r\nYou are to write a program that will help the bank employees to determine the identifier of the false coin and weight. And your program must determine the false coin in K times weighting.\r\nTo challenge your algorithmic ability, the number of coins fixed at N=（3<sup>K</sup>-1）/2, is the limit of coins which you can determine the false coin in K weightings.', 'There are several test cases. For each test case, a single line contains only one integer K. K is the number of weightings (1≤K≤12). The input file will end when K=0 and not need to process.\r\nThen by calling function SetCoin, computer set one coin false: the identifier of the false coin, light or weight. \r\nBy calling Function Judge, the function will return a char:\r\n''<'' means that the weight of coins in the left pan is less than the weight of coins in the right pan, \r\n''>'' means that the weight of coins in the left pan is greater than the weight of coins in the right pan, \r\n''='' means that the weight of coins in the left pan is equal to the weight of coins in the right pan. \r\nFor each test case, your program can at most call the function Judge K times, if not, the function Judge will return 0;', 'For each test case, output a single line in following format:\r\n# c\r\nWhere # is the identifier of the false coin, c is ‘&lt;’ if the false coin is light, ‘&gt;’ if the false coin is weight.\r\nYou may assume that the false coin must exist.', 'D:\\oj\\data\\1827', 'D:\\oj\\data\\1827', '2\r\n3\r\n0', '1 >\r\n13 <', 'The following may be the possible interaction between your program and the computer in the sample testcases.\r\n\r\nYour Program                 Computer\r\nInput 2\r\n(n)2 (left)0 1 (right)2 3\r\n(n)1 (left)2 (right)3\r\nOutput 1 >\r\nInput 3\r\n(n)6 (left)1 2 3 4 5 6 (right)7 8 9 10 11 12\r\n(n)1 (left)0 (right)13\r\nOutput 13 <	SetCoin\r\n>\r\n=\r\n\r\nSetCoin\r\n=\r\n>\r\n\r\nFor C/C++ Language:\r\nIn your program, the file named “FalseCoin.c” must be included in the following format:\r\n#include “FalseCoin.c”\r\nIn the file“FalseCoin.c”, there are 2 functions (SetCoin and Judge).\r\nvoid SetCoin(); \r\nThe function SetCoin will set one coin false: the identifier of the false coin ,light or weight.\r\nchar Judge(int n, int *left, int *right);\r\nWhere the parameter n is a positive integer, representing the number of coins placed in the left and in the right pans, the integer array left of length n represent the identifier of coins placed in the left, the integer array right of length n represent the identifier of coins placed in the right. The function Judge will return a char:\r\n''<'' means that the weight of coins in the left pan is less than the weight of coins in the right pan, \r\n''>'' means that the weight of coins in the left pan is greater than the weight of coins in the right pan, \r\n''='' means that the weight of coins in the left pan is equal to the weight of coins in the right pan.\r\n   If the number of times which your program calls the function Judge exceeded K, or the parameters do not meet the requirements, the function Judge will return 0;\r\n\r\n\r\nFor Pascal Language:\r\nIn your program, the file named “FalseCoin.pas” must be included in the following format:\r\nUses FalseCoin;\r\nIn the file“FalseCoin.pas”, there are one procedure (SetCoin), one functions (Judge), and one definition of data type(LongArray).\r\nType LongArray = array[0 .. 133000] of longint;\r\nProcedure SetCoin;\r\nThe function SetCoin will set one coin false: the identifier of the false coin ,light or weight.\r\nFunction Judge(n : longint; var left, right: LongArray):char;\r\nWhere the parameter n is a positive integer, representing the number of coins placed in the left and in the right pans, the integer array left of length n represent the identifier of coins placed in the left, the integer array right of length n represent the identifier of coins placed in the right. The function Judge will return a char:\r\n''<'' means that the weight of coins in the left pan is less than the weight of coins in the right pan, \r\n''>'' means that the weight of coins in the left pan is greater than the weight of coins in the right pan, \r\n''='' means that the weight of coins in the left pan is equal to the weight of coins in the right pan.\r\n   If the number of times which your program calls the function Judge exceeded K, or the parameters do not meet the requirements, the function Judge will return ''0'';\r\n\r\n\r\nFor Java Language:\r\nIn your program, the file named “FalseCoin.java” must be included in the following format:\r\nimport JavaPack.FalseCoin;\r\nIn the file“FalseCoin.java”, there are 2 functions (SetCoin and Judge).\r\npublic void SetCoin(); \r\nThe function SetCoin will set one coin false: the identifier of the false coin ,light or weight.\r\npublic char Judge(int n, int left[], int right[]);\r\nWhere the parameter n is a positive integer, representing the number of coins placed in the left and in the right pans, the integer array left of length n represent the identifier of coins placed in the left, the integer array right of length n represent the identifier of coins placed in the right. The function Judge will return a char:\r\n''<'' means that the weight of coins in the left pan is less than the weight of coins in the right pan, \r\n''>'' means that the weight of coins in the left pan is greater than the weight of coins in the right pan, \r\n''='' means that the weight of coins in the left pan is equal to the weight of coins in the right pan.\r\n   If the number of times which your program calls the function Judge exceeded K, or the parameters do not meet the requirements, the function Judge will return 0;', '', '', '2011-05-30 18:45:42', 6000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 60000, 54, 'power721'),
(1828, '乡村医院', '在一条笔直的公路上分布着n个村庄，为了节省开支，我们将挑选其中至多m个村庄修建医院。各医院所在的村庄的村民可以在本村的医院接受服务，而其他村庄的村民则去最近的医院接受服务。如果某村庄与多家医院的距离相同，可以任选一个医院。\r\n为了减轻村民们的负担，我们希望让村民去医院所要行走的最远距离最小化。\r\n为了方便描述，不妨设这条公路与X坐标轴重合，这样我们就可以用X坐标表示村庄的位置。\r\n例如下图中有5个村庄，我们将挑选至多2个村庄修建医院，方格上端的数字表示坐标。左图中村庄3和4中有医院，村庄1的村民需要行走2个单位距离才能到达最近的医院；右图村庄2和4中有医院，所有村民至多行走1个单位距离就能到达最近的医院。事实上右图的方案就是最优的。\r\n<img src=images/problem/1828.gif />', '输入包含多组数据。\r\n每组数据第一行为整数n和m，表示村庄的数量和医院数量的上限。输入保证1≤m≤n≤20000\r\n第二行包含n个非负整数，表示每个村庄的坐标。输入保证坐标严格递增，并且坐标的值不超过10<sup>9</sup>\r\n输入以n=m=0结束，不要处理这组数据。', '对每组输入数据输出一个整数，表示最小的最远距离。', 'D:\\oj\\data\\1828', 'D:\\oj\\data\\1828', '5 2\r\n0 1 2 5 6\r\n3 3\r\n1 2 4\r\n4 1\r\n2 3 4 5\r\n0 0', '1\r\n0\r\n2', '', 'ustc2010', '', '2012-07-30 21:46:14', 1000, 65536, 'N', NULL, 4, 46, 9, 39, 93, 3, 3, 30000, 160, 'power721'),
(1829, '未知星球', 'fuch正在驾驶太空船探索一个未知的星球。已知这个星球可以近似认为是个规则的球体，并且fuch的太空船正在赤道上空沿着规则的圆形轨道绕这个星球飞行。通过一些采样测量，fuch获取到了这个星球赤道的高度信息。\r\n采样数据共有n个，均匀覆盖了整个赤道，并且都是整数（因为太空船的计算机不支持浮点运算）。\r\nfuch正打算降落，所以需要找一片平原。fuch想从采样数据中找出最长的一段序列，使得这段序列对应的星球表面是平原。如果一段序列的最大值和最小值之差不超过k，我们就可以认为是平原。', '输入包含多组数据。\r\n每组数据第一行包含两个整数n和k，含义如上所述。 (1≤n≤20000, 0≤k≤100)\r\n第二行包含n个非负整数，表示采样数据，不超过10<sup>9</sup>\r\n输入以n=k=0结束，不要处理这组数据。', '对每组输入数据输出最长的序列长度，使得其对应的星球表面是平原。', 'D:\\oj\\data\\1829', 'D:\\oj\\data\\1829', '4 0\r\n0 0 1 0\r\n3 1\r\n1 2 3\r\n3 2\r\n0 1 2\r\n0 0', '3\r\n2\r\n3', '', 'ustc2010', '', '2011-06-02 13:59:39', 1000, 65536, 'N', NULL, 2, 2, 100, 0, 0, 1, 1, 30000, 53, 'power721'),
(1830, '无聊的游戏', 'ckf最近很无聊，所以他想出来一个无聊的游戏来打发时间。\r\nckf在纸上绘制了一副n×n的棋盘，左上角坐标为(1,1)，右下角坐标为(n,n)，开始时(1,1)位置有一颗棋子。\r\nckf有一个骰子，骰子有六个面，我们可以相信这个骰子是均匀的。每一轮游戏中，ckf会掷两次骰子，设第一次的结果是a，第二次的结果是b，两次的结果都是1到6间的均匀分布，且相独立。如果投掷骰子前棋子在(x,y)位置，那么ckf将把棋子移动到(x+a,y+b)。ckf不断重复这一过程。如果棋子被移出棋盘，即x>n或y>n，那么游戏结束。ckf掷骰子的轮数就是他的得分。\r\nckf想知道，一场游戏中，他的得分的期望是多少？', '输入包含多组数据。\r\n每组包含一个整数n，表示棋盘的大小 (1≤n≤300)\r\n输入以n=0结束，不要处理这组数据。', '对每组输入数据输出得分的期望，四舍五入到小数点后2位。', 'D:\\oj\\data\\1830', 'D:\\oj\\data\\1830', '1\r\n2\r\n10\r\n100\r\n0', '1.00\r\n1.03\r\n2.84\r\n27.58', '在一个子函数内定义(static)静态局部变量要比定义全局变量和(动态)局部变量快。', 'ustc2010', '', '2011-06-02 16:09:14', 10000, 65536, 'N', NULL, 8, 8, 100, 0, 0, 1, 1, 30000, 80, 'power721'),
(1831, '最短路径', '最短路径问题是图论中的经典问题。在实际的应用中，最短路径问题还有各种各样的变型，这里需要你解决的就是其中一个：\r\n给定一个有向图G=(V,E)，E中的每条边都有可正可负的权值，表示距离。指定V中的两个顶u和w，请求出从u到w恰好含有k条边的最短路径。注意，路径可以重复经过同一条边。', '输入包含多组数据。\r\n每组数据第一行包含三个整数， n, m, k，表示图中顶的数量，边的数量和最短路径的边数 (1≤n≤100, 0≤m≤n<sup>2</sup>, 1≤k≤10<sup>9</sup>)\r\n第二行包含两个整数u和w，表示起点和终点的编号。顶的编号在1到n之间。\r\n其后m行，每行包含三个整数a, b, c，表示从编号为a的顶到编号为b的顶有一条权为c的边。输入保证没有重边，c的绝对值不超过1000。\r\n输入以n=m=k=0结束，不要处理这组数据。', '对每组输入数据输出从u到w恰含k条边的最短路径长度，如果不存在这样的路径则输出”None”。注意答案可能会超过32位整型的范围。', 'D:\\oj\\data\\1831', 'D:\\oj\\data\\1831', '1 1 2\r\n1 1\r\n1 1 1\r\n2 2 999999999\r\n1 2\r\n1 2 1000\r\n2 1 -100\r\n2 2 1000000000\r\n1 1\r\n1 2 1000\r\n2 1 -100\r\n3 3 4\r\n1 2\r\n1 2 -1\r\n2 3 1\r\n3 1 1\r\n3 3 5\r\n1 2\r\n1 2 -1\r\n2 3 1\r\n3 1 1\r\n0 0 0', '2\r\n450000000100\r\n450000000000\r\n0\r\nNone', '', 'ustc2010', '', '2011-06-02 13:11:48', 3000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 59, 'power721'),
(1832, '最大公约数GCD（终极版）', '给你两个数n和m，找出在1-n之间有多少个k，使得GCD(k, n)>=m', '第一行是t，表示有多少组测试数据接下来有t行，每行一个n和m (1<= m,n <=1e9)', '对于每组数据输出仅一行，输出符合要求的数的个数。', 'D:\\oj\\data\\1832', 'D:\\oj\\data\\1832', '3\r\n1 1\r\n10 2\r\n10000 72', '1\r\n6\r\n260', '切勿暴力~~', 'bingshen', '', '2012-05-17 21:17:48', 1000, 65536, 'N', NULL, 6, 9, 67, 3, 43, 6, 4, 30000, 166, ''),
(1833, 'Longest Subsequence', 'Recently,Nero is researching a kind of sequence problem related to the sphere.This kind of problem ressembles the Longest Ascending Subsequence.\r\nFor instance,Given a sequence,can you find the longest subsequence in it?\r\nFollowing constraints should be meeted:\r\n1:the elements in the subsequence should be totally equal.\r\n2:the interval between the adjacent elements in the subsequence shouldn''t be greater than one(in the hint,we''ll show clearly what the interval is)', 'T indicating the number of test cases\r\nEach case begins with a interger n(0<=n<=100000),representing the length of sequence\r\nFollowing are n integers,Pi stands for the value of each element.', 'One line,contains a integer indicating the length of the longest\r\nsubsequence.', 'D:\\oj\\data\\1833', 'D:\\oj\\data\\1833', '3\r\n6\r\n1 2 2 1 1 1\r\n8\r\n1 2 2 2 1 1 1 1\r\n5\r\n1 2 1 2 1', '3\r\n4\r\n3', '', '', '', '2012-06-06 22:09:38', 1000, 65536, 'N', NULL, 19, 34, 56, 10, 50, 10, 10, 30000, 307, 'power721'),
(1834, 'T-Residual Set', 'Given a pair of number (p,t) where p is a prime and t is a non-negative integer.\r\n\r\nThe ''Residual Set'' of any prime number p is all the integers between 1 and p-1,\r\n\r\nthat is, ''1 2 3 4 ... p-2 p-1''.\r\n\r\nWhat''s more, a ''T-Residual Set'' of any prime number p means the set of integers below:\r\n\r\n''1^T%p 2^T%p 3^T%p 4^T%p ... (p-2)^T%p (p-1)^T%p'', where T must be non-negative.\r\n\r\nNow for each pair of (p,t), you should calculate how many distinct numbers there are in the ''t-Residual Set'' of p.', 'A number T (T<=10^6) in first line.\r\n\r\nThen T test cases follow.\r\n\r\nEach Test case contains two number p (0< p<10^8) and t (0< t<2^31),\r\n\r\nwhich meanings areaccording to the description.', 'Output T lines.\r\n\r\nEach line contains one number, refers to the answer.', 'D:\\oj\\data\\1834', 'D:\\oj\\data\\1834', '3\r\n7 9\r\n17 89\r\n47 56', '2\r\n16\r\n23', '', '', '', '2011-06-07 19:20:02', 1000, 65536, 'N', NULL, 3, 5, 60, 2, 40, 4, 3, 30000, 208, 'power721'),
(1835, 'Water Tanks', 'There is a system of water tanks. The water tanks are connected by pipes. Below are the illustration:\r\n<img src=images/problem/1835.png>\r\nThe water tanks above a certain level will be empty since the water will flow to lower ones.\r\n\r\nNow given the height and dimensions of each water tank, as well as the total volume of water, can you calculate the level of water? To simplify the problem, water in pipes can be ignored.\r\n\r\nThe illustration describes the third case of sample input.', 'The input contains multiple test cases. \r\n\r\nThe first line of input file is an integer k, indicating the number of test cases.\r\n\r\nFor each test case:\r\n\r\nThe first line is an integer N (1 <= N <= 1000), indicating the number of water tanks;\r\n\r\nThen N lines are followed. In each line there will be 4 nonnegative integers: b, w, h, d, they are the base level of the cistern, its height, width and depth, measured in meters.\r\n\r\nThe last line contains a single integer V (1 <= V <= 2^31-1), the total volume of water.\r\n\r\nIt is guaranteed that 0 <= b <= 10000 and 1 <= w*h*d <= 10000.', 'For each test case, you should output a single line containing the level that the water will reach, measured in meters\r\n\r\nIn case the volume of water exceeds the total capacity of the whole system, you should output the word ''OVERFLOW'' instead.', 'D:\\oj\\data\\1835', 'D:\\oj\\data\\1835', '3\r\n2\r\n0 1 1 1\r\n2 1 1 1\r\n1\r\n4\r\n11 7 5 1\r\n15 6 2 2\r\n5 8 5 1\r\n19 4 8 1\r\n132\r\n4\r\n11 7 5 1\r\n15 6 2 2\r\n5 8 5 1\r\n19 4 8 1\r\n78', '1.000000\r\nOVERFLOW\r\n17.000000', 'Special Judged \r\nAnswers with relative or absolute error of at most 10<sup>-3</sup> will be accepted.', '', '', '2011-06-06 05:16:19', 1000, 65536, 'N', NULL, 2, 9, 22, 4, 67, 2, 2, 30000, 136, 'power721'),
(1836, 'Scheduling Problem', 'Recently,wangkun is focused on the scheduling,proposing a method which can meet the scheduling demand.However,the principle is a little sophisticated.He wants to know how much time it takes to complete all the tasks.So,you are asked for help.\r\n\r\nFollowings are the principles:\r\nFirst there exist N tasks,numbered from 1 to N.Each task i is assigned a\r\npriority Pi.Additionally,each task is divided into S subtasks.Tj time is needed to spend on each subtask j.Now,M machines are available.Every machine can only take a single subtask a time.\r\n\r\nAt the beginning,all the M machines are available.we assume that,if a machine is available,it can take a subtask.Pay attention that,every time among the uncompleted subtasks,the subtask with the highest priority is taken out.For two subtasks with equal priority,we rank them according to their rank number.For instance,there is a subtask 3 in task 1 and a subtask 2 in task 2,and task 1 and task 2 are having the same priority.We define that subtask 3 is prior to subtask 2.Besides,for two subtasks in the same task,such as subtask 2 in task 1 and subtask 3 in task 1,subtask 2 is prior to subtask 3.', 'First line is a integer T,representing the number of test cases\r\nIn each test cases,first line contains two integers N(number of tasks 0 < N < =100),M(number of machines 0 < M < =100)\r\nFollowing are N tasks.\r\nIn each task,first line contains two integers S(number of subtasks in the task 0 < S < =100),P(the priority of the task 0 < = p < = 100)\r\nFollowing S lines indicate the executing time for each subtask.', 'One line,the time needed to complete all the tasks.', 'D:\\oj\\data\\1836', 'D:\\oj\\data\\1836', '1\r\n2 3\r\n2 2\r\n1\r\n2\r\n2 5\r\n3\r\n4', '4', '', '', '', '2011-06-10 18:52:32', 1000, 65536, 'N', NULL, 4, 14, 29, 10, 83, 3, 2, 30000, 166, 'power721'),
(1837, 'Graph', 'Saerdna likes travelling, but he can not afford the GPS. He only has a broken map with him. However, he could only find out the approximate locations of the tourist attractions with the map which is too dilapidated. After arriving there, he could ask for the specific destination. Can you help him?', 'The first line of the input is an integer T(T<=10), which represents that there are T test cases.\r\n\r\nEach test case starts with two integers R, U(U<=20) representing the number of points and the number of connected blocks in the map. \r\n\r\nAnd then U blocks follow. \r\n\r\nThe first line of each block contains two integers K(K<=20), I(I<=K^2), which represent the number of points and the number of edges in each connected block.\r\n\r\nThis is followed by I lines, each line contains three integers a, b, c, which represents that there is an edge between a and b with the length c(c<=100000).\r\n\r\nAfter the U blocks, there is an integer Q (Q<=5000), for Q queries.\r\n\r\nNext there are Q lines; each line has one of the two forms as follow:\r\n\r\nadd a b c\r\n\r\nquery a b\r\n\r\n0<=a,b< r', 'Each case starts with Case :S (S represents for the case number).\r\n\r\nThen for each query, print the shortest path between a and b, if there is no path, print -1.Print each answer in a line.', 'D:\\oj\\data\\1837', 'D:\\oj\\data\\1837', '1\r\n4 2\r\n2 1\r\n0 1 1\r\n2 1\r\n2 3 1\r\n3\r\nquery 0 3\r\nadd 1 2 2\r\nquery 0 3', 'Case :1\r\n-1\r\n4', '(1)We guarantee that a and b are not in the same connected block when add edge.\r\n(2)Point numbers in the same connected block are <b>continues</b>.\r\n(3)About 90% of the operations is query.', '', '', '2012-06-06 20:21:36', 2000, 65536, 'N', NULL, 7, 46, 15, 35, 90, 4, 4, 30000, 292, 'power721'),
(1838, 'BG', 'Wangkun has to treat his friend gleiz a meal for he has got an offer from PKU.\r\n\r\nWangkun has M yuan in his pocket and of course gleiz wants to spend all of them for the meal, and they want to order at least K dishes for the abundance of the cuisine.\r\n\r\nNow you are shown the menu which gives you the prices of all the dishes in the restaurant. Your task is to figure out the number of plans that help gleiz spend all wangkun''s money to fulfill his appetite!', 'There are multiple cases.\r\n\r\nThe first line of a case contains 3 integers N and K and M(1 <= K <= N <= 38, 1 <= M <= 38*10^9), the number of dishes in the restaurant.\r\n\r\nThe second line of a case contains N integers P[1], P[2], ..., P[N] (1 <= P[i] <= 10^9), giving you the prices of the dishes respectively.\r\n\r\nIt is ensured that all the prices are distinct.', 'For each case you should output the number of plans in a line.', 'D:\\oj\\data\\1838', 'D:\\oj\\data\\1838', '5 1 5\r\n5 4 3 2 1\r\n4 2 3\r\n1 2 4 8\r\n4 2 1\r\n1 2 4 8', '3\r\n1\r\n0', '', '', '', '2011-07-13 11:10:46', 5000, 65536, 'N', NULL, 3, 22, 14, 19, 90, 5, 2, 30000, 262, 'power721');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1839, 'Airport Walkways', 'You''re in an airport, standing at point 0. A corridor of length X leads to the gate, where your plane is about to leave. There are moving walkways in the corridor, each moving with some speed wi. When you walk or run on one of those, you move with speed (your speed + wi). The walkways do not change their position; they just make you move faster. The walkways do not overlap: at any given point of the corridor there is at most one walkway, but one walkway can begin at the point where another ends. \r\n\r\nYour normal walking speed is S. You are worried that you might not catch your plane, though, so you can run a bit - you can run with speed R for at most t seconds in total. You do not have to run for t consecutive seconds: you can split these t seconds into any number of intervals, or even not use some part of them. \r\n\r\nHow long does it take you to get to the gate, assuming you choose when to walk and when to run in order to reach it as soon as possible?', 'The first line of the input gives the number of test cases, T. T test cases follow. Each test case begins with a line containing five integers: X (the length of the corridor, in meters), S (your walking speed, in meters per second), R (your running speed, in meters per second), t (the maximum time you can run, in seconds) and N (the number of walkways). \r\n\r\nEach of the next N lines contains three integers: Bi, Ei and wi - the beginning and end of the walkway (in meters from your starting point) and the speed of the walkway (in meters per second). \r\n\r\n1 ≤ T ≤ 40.\r\n<b>1 ≤ S < R ≤ 100</b>.\r\n1 ≤ wi ≤ 100.\r\n0 ≤ Bi < Ei ≤ X.\r\nEi ≤ Bi+1.\r\n1 ≤ t ≤ 10<sup>6</sup>.\r\n1 ≤ X ≤ 10<sup>6</sup>.\r\n1 ≤ N ≤ 10<sup>6</sup>.', 'For each test case, output one line containing "Case #x: y", where x is the case number (starting from 1) and y is the time (in seconds) you need to reach point X if you walk and run optimally. Answers with relative or absolute error of at most 10-6 will be accepted.', 'D:\\oj\\data\\1839', 'D:\\oj\\data\\1839', '3\r\n10 1 4 1 2\r\n4 6 1\r\n6 9 2\r\n12 1 2 4 1\r\n6 12 1\r\n20 1 3 20 5\r\n0 4 5\r\n4 8 4\r\n8 12 3\r\n12 16 2\r\n16 20 1', 'Case #1: 4.000000\r\nCase #2: 5.500000\r\nCase #3: 3.538095', '', '', '', '2011-06-20 09:34:54', 1000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 108, 'power721'),
(1840, 'Find the last string', '给出两个字符串，要求出第二个字符串在第一个字符串中最后一次出现的位置。所有字符的位置下标都从0开始。\r\n如字符串"ba"，在另一字符串&quot;abababa"中出现的位置分别为1,3,5。那么答案就是5，如果子字符串没有在原字符串中出现过，则答案为-1。', '输入有多组测试数据。\r\n每组测试数据两行，第一行为原字符串，第二行为子字符串。\r\n两行都不为空串，而且长度均不超过1000000。', '对于每组测试数据，在一行上输出一个整数，表示子字符串最后一次在原字符串中出现的位置。', 'D:\\oj\\data\\1840', 'D:\\oj\\data\\1840', 'abababa\r\nba', '5', '', '', '', '2012-04-01 16:34:25', 1000, 65536, 'N', NULL, 9, 48, 19, 38, 83, 11, 8, 30000, 325, 'power721'),
(1841, 'Polynomial multiplication', '对于两个多项式A和B，我们仅需要判断其乘积是否为多项式C。\r\n其中A=a0*(x^0)+a1*(x^1)+...+ai*(x^i)+...+an*(x^n)\r\n     B=b0*(x^0)+b1*(x^1)+...+bi*(x^i)+...+bm*(x^m)\r\n     C=c0*(x^0)+c1*(x^1)+...+ci*(x^i)+...+c(n+m)*(x^(n+m))\r\n其中x^i表示x的i次方。你可以认为A是n次多项式，B是m次多项式，C是n+m次多项式，不同的是所有系数都有可能为0。', '输入有多组测试数据。\r\n对于每组测试数据，第一行为两个整数n(0&lt;n<=10000)和m(0&lt;m<=10000)，\r\n接下来三行，第一行为n+1个整数表示A的系数a<sub>0</sub>到a<sub>n</sub>的值，\r\n第二行为m+1个整数，表示B的系数b<sub>0</sub>到b<sub>m</sub>的值，\r\n第三行为n+m+1个整数，表示C的系数c<sub>0</sub>到c<sub>(n+m)</sub>的值。\r\n最后出现n=0且m=0表示输入结束，不需处理这组数据。\r\n可以假定输入系数均为整数，A与B的所有系数均小于100，C的所有系数都在32位有符号整型范围内。', '对于每组测试数据，输出为一行，如果A*B=C，则输出"YES"，否则输出&quot;NO"。', 'D:\\oj\\data\\1841', 'D:\\oj\\data\\1841', '1 1\r\n1 2\r\n1 2\r\n1 4 4\r\n1 1\r\n1 2\r\n1 2\r\n1 3 4\r\n0 0', 'YES\r\nNO', '大量测试数据。', '', '', '2011-07-30 14:38:23', 3000, 65536, 'N', NULL, 4, 11, 36, 7, 70, 3, 3, 30000, 166, 'power721'),
(1842, 'Hash Table', 'Akemi Homura is a Mahou Shoujo (Puella Magi/Magical Girl).\r\nTo help her friend Madoka save the world, Homura need to collect data, and she choose a kind of data structure called Hash Table.\r\nI suppose all of you are familiar with the Hash Table (if not, you won''t take part in the competition!), for a piece of data D, the Hash Function H gives a Hash Key = H(D), and the data will be stored in Hash Table[H(D)]. For two pieces of data D1 and D2, if their Hash Keys are the same (H(D1) = H(D2)), we say an "COLLUSION" occurs. D1 and D2 cannot be stored in the same position of the Hash Table. The most convenient way to solve the problem is linear probing.\r\nWe assume that D1 has been inserted into Hash Table[H(D1)], now if we need to insert D2 into the Hash Table, since Hash Table[H(D1)] has been occupied by D1, D2 has to find the next position of H(D1): Hash Table[H(D1)+1]. If Hash Table[H(D1)+1] is also occupied, D2 has to find the next position of H(D1)+1: Hash Table[H(D1)+1] ... Till D2 finds an unoccupied position: Hash Table[p], and be stored in it.\r\nAs It is known that Homura has magic that can control time, she can rearrange the order that data is inserted into the Hash Table in. Given N Hash Keys H(D1), H(D2), ... , H(DN) of data D1, D2, ... , DN, your task is to help her rearrange the order to minimize the total collusion times. You may assume the length of the Hash Table is infinitive.', 'The first line contains an integer N (1 <= N <= 10^6).\r\nThe second line contains N integers D1, D2, ... , DN (1 <= Di <= 2^31-1).', 'The minimum of total collusion times.', 'D:\\oj\\data\\1842', 'D:\\oj\\data\\1842', '5\r\n1 2 1 3 2', '6', 'Huge input. "scanf" recommended.', '', '', '2012-04-05 10:20:02', 3000, 65536, 'N', NULL, 3, 4, 75, 1, 33, 2, 2, 30000, 113, 'power721'),
(1843, 'Rank and File', '<i>Note: The chess piece images below were created by Colin M.L. Burnett and are used under the auspices of the BSD license, the text of which follows the problem statement.</i>\r\n<p>Programs and algorithms for playing the game of chess have been around as long as computers themselves, with the first chess playing program being developed in the 50''s by Alan Turing. Computer chess has come a long way since then, and in 1997 IBM''s Deep Blue defeated chess grandmaster Garry Kasparov. One thing all these chess programs have in common though is a need to determine when the winning move, or <i>checkmate</i>, is reached. Your goal for this problem is to implement an algorithm such that, given the current layout of the chessboard, it will detect if a checkmate has occurred during that turn.</p>\r\n<p>Chess is played on a board divided into a 8x8 grid of 64 squares. On a real chessboard, the 64 squares have alternating light and dark colors. For this problem the individual square colors are irrelevant and the entire board is simply treated as a uniform 8x8 grid.</p>\r\n<p>The game is played by two opposing sides, white and black, with each side controlling up to six kinds of pieces: a <i>king</i>, <i>queen</i>, <i>rook</i>, <i>bishop</i>, <i>knight</i>, and one or more <i>pawn</i>s. For simplicity''s sake, however, this problem will only consider the first five and not make any use of the pawn chess piece. The two players take turns moving one piece at a time on every turn. It is up to each player to decide which piece they wish to move on their turn, but it is not possible for a player to "skip" or "pass"; each player <b>must</b> move one of their pieces in some fashion.</p>\r\n<p>Each kind of chess piece moves in a distinct way as explained in the list below, and <i>Figure 1</i> gives an example using an X to show each square that a chess piece can move to.</p>\r\n<ul class="example">\r\n    <li><i>Rook</i>: The rook moves in a straight line by any number of squares in any of the four cardinal (horizontal and vertical) directions.</li>\r\n    <li><i>Bishop</i>: The bishop moves in a line by any number of squares in any of the four diagonal directions.</li>\r\n    <li><i>Queen</i>: The queen can move in a line by any number of squares in any of the eight cardinal and diagonal directions. As such, it is considered to be the most powerful piece in the game.</li>\r\n    <li><i>Knight</i>: The knight always moves by "jumping" two squares in one cardinal direction and one square in a direction perpendicular to the first. There are 8 possible squares that a knight can move to from a given position, and these are shown in the figure below.</li>\r\n    <li><i>King</i>: The king can move in any of the eight cardinal and diagonal directions but by one square only. Put another way, the king can only move into the eight immediately adjacent squares. As such, this makes the king one of the weakest pieces on the board.</li>\r\n</ul>\r\n<table border="0" align="center" class="example">\r\n    <tbody>\r\n        <tr>\r\n            <td><img src="images/problem/pic1843_0" alt="" /> <br />\r\n            <i>Rook</i></td>\r\n            <td><img src="images/problem/pic1843_1" alt="" /> <br />\r\n            <i>Bishop</i></td>\r\n            <td><img src="images/problem/pic1843_2" alt="" /> <br />\r\n            <i>Queen</i></td>\r\n            <td><img src="images/problem/pic1843_3" alt="" /> <br />\r\n            <i>Knight</i></td>\r\n            <td><img src="images/problem/pic1843_4" alt="" /> <br />\r\n            <i>King</i></td>\r\n        </tr>\r\n    </tbody>\r\n    <caption> <b>Figure 1:</b> Valid moves for each kind of chess piece </caption>\r\n</table>\r\n<p>On every turn, a chess piece may be moved either into a vacant square or into a square already occupied by an opposing piece. In the latter case, the opposing chess piece is said to be</p>\r\n<i>captured</i>\r\n<p>and is permanently removed from the game. However, a chess piece</p>\r\n<b>may not</b>\r\n<p>move into a square already occupied by another friendly piece, because each square can be occupied by at most one piece at a time. Most chess pieces move by "sliding" across vacant squares on the board. In other words, any other chess piece (be it friendly or foe) in the path of the moving piece will block any further movement of that piece. The only exception to this rule is the knight which "jumps" directly to its final destination square, and therefore its movement cannot be blocked  by any surrounding pieces between it and the destination square. See</p>\r\n<i>Figure 2</i>\r\n<p>for an example: image (a) shows a white rook''s movement blocked by two other pieces, and image (b) shows the same white rook capturing a black bishop (the rook''s previous position before the capture is shown as a white outline).</p>\r\n<p>\r\n<table border="0" align="center" class="example">\r\n    <tbody>\r\n        <tr>\r\n            <td><img src="images/problem/pic1843_5" alt="" /> <br />\r\n            <i>(a)</i></td>\r\n            <td><img src="images/problem/pic1843_6" alt="" /> <br />\r\n            <i>(b)</i></td>\r\n        </tr>\r\n    </tbody>\r\n    <caption> <b>Figure 2:</b> (a) rook''s movement blocked by other pieces; (b) rook capturing the black bishop </caption>\r\n</table>\r\nAlthough the king may be one of the weakest pieces on the board, it is also the most important. A king cannot be captured directly by another piece but it can be threatened. When the king is threatened, or <i>checked</i>, it means that on the <b>next</b> turn, the opposing side would be able to capture the king. Putting a king in check forces the checked side to defend their king by moving the king out of harm''s way, blocking the threat with another piece, or capturing the threatening piece. If the checked player has no valid move that they can make to protect the king, then the king is in fact <i>checkmated</i>, and that player has lost the game. Also note that a player may never put their own king in check. <i>Figure 3</i> shows the difference between a check and checkmate. In image (a), the imminent capture of the white king can still be avoided by either moving the king out of the way or by capturing the black queen. Image (b) shows an example of checkmate, where no valid moves exist for the white side that would eliminate the threat to the king.</p>\r\n<p>\r\n<table border="0" align="center" class="example">\r\n    <tbody>\r\n        <tr>\r\n            <td><img src="images/problem/pic1843_7" alt="" /> <br />\r\n            <i>Check</i></td>\r\n            <td><img src="images/problem/pic1843_8" alt="" /> <br />\r\n            <i>Checkmate</i></td>\r\n        </tr>\r\n    </tbody>\r\n    <caption> <b>Figure 3:</b> Example of white king in (a) check and (b) checkmate </caption>\r\n</table>\r\nThe rules laid out above are the only ones that should be considered for the purposes of this problem. Any other special rules or moves present in a real game of chess, such as <i>castling</i>, are <b>not</b> considered valid in the context of this problem. For the chessboard layout in each data set, you may assume it will contain exactly one white king and exactly one black king, although either side may have any number of rooks, bishops, queens, and knights.</p>', '<p>Input to this problem will begin with a line containing a single integer <i>D</i> (1 &le; <i>D</i> &le; 100) indicating the number of data sets. Each data set consists of the following components:</p>\r\n<ul>\r\n    <li>A line containing a single lower case "<tt>w</tt>" or upper case "<tt>B</tt>" indicating which side is to be analyzed for a check or checkmate (and which side is about to move on this turn), with "<tt>w</tt>" specifying the white side and "<tt>B</tt>" specifying black.</li>\r\n    <li>A series of eight lines, with each line containing eight characters. These lines specify the state of the chessboard to be analyzed in this data set. The characters used on these eight lines are:\r\n    <ul>\r\n        <li>A "<tt>.</tt>" (period) to indicate an empty square</li>\r\n        <li>The lower case letters "<tt>r</tt>", "<tt>b</tt>", "<tt>q</tt>", "<tt>n</tt>", and "<tt>k</tt>", to respectively indicate the <b>white</b> side''s rook, bishop, queen, knight, and king pieces</li>\r\n        <li>The capital letters "<tt>R</tt>", "<tt>B</tt>", "<tt>Q</tt>", "<tt>N</tt>", and "<tt>K</tt>", to indicate the same respective pieces but for the <b>black</b> side</li>\r\n    </ul>\r\n    </li>\r\n</ul>\r\n<p></p>', '<p>For each data set in the input, print a single line.  Begin the line with either "<tt>WHITE IS </tt>" or "<tt>BLACK IS </tt>" depending on which side was analyzed in the data set. Finally, complete the line with "<tt>CHECKED</tt>" or "<tt>CHECKMATED</tt>" if either is detected, or complete the line with "<tt>SAFE</tt>" if neither condition holds.  If both check and checkmate are detected, print "<tt>CHECKMATED</tt>".</p>', 'D:\\oj\\data\\1843', 'D:\\oj\\data\\1843', '3\r\nw\r\n........\r\n........\r\n........\r\n.Qk.K...\r\n........\r\n........\r\n........\r\n........\r\nB\r\n........\r\n........\r\n........\r\n.qK.k...\r\n........\r\n........\r\n........\r\n.r......\r\nw\r\n........\r\n..k.....\r\n........\r\n.Q..K...\r\n........\r\n........\r\n........\r\n........', 'WHITE IS CHECKED\r\nBLACK IS CHECKMATED\r\nWHITE IS SAFE', '', '2008 ACM ICPC South Central USA Regional Programming Contest', '', '2011-06-10 20:06:17', 1000, 131072, 'N', NULL, 1, 2, 50, 0, 0, 1, 1, 1000, 32, 'power721'),
(1844, 'The Extent of the Problem', '<p>Files on modern filesystems are not always stored contiguously.  Instead, they are broken up into chunks (called</p>\r\n<p><i>extents</i></p>\r\n<p>), each of which may be located almost anywhere on the underlying disk.  Each extent takes up one or more contiguous</p>\r\n<p><i>blocks</i></p>\r\n<p>on the disk, which represent the underlying physical disk structure.  Files may not share blocks or extents between themselves, although there may be (and hopefully are) blocks not currently in use on the filesystem.</p>\r\n<p>Despite all of the advances in modern disk technology, this disparate layout still makes for slower access than when all of a file''s blocks are in order and adjacent (and therefore occupying a single extent). Because of this, many modern filesystems support <i>defragmentation</i>: the reorganizing of files on the disk so that the blocks of any given file are in order and adjacent.</p>\r\n<p>With RAD''s Awesome Dynamic Filesystem (commonly referred to as <b>RADfs</b>), a file can occupy any number of extents, each of which consists of at least two adjacent blocks.  The first block in an extent holds metadata about that extent; the rest contain some portion of the file.  Consider this simple representation of the extents and blocks occupied by a file:</p>\r\n<p></p>\r\n<pre>\r\nRADfs.doc: 57-58,102-114,23-47</pre>\r\n<p>The file <tt>RADfs.doc</tt> currently occupies 40 blocks on the disk, even though the file itself is only 37 blocks in size.  The smallest on-disk size that it could have is 38 blocks (37 plus a single metadata block), and that can only happen if the entire file is in a single extent.  One potential single-extent representation of the file is:</p>\r\n<p></p>\r\n<pre>\r\nRADfs.doc: 115-152</pre>\r\n<p>Here, the single metadata block (115) is followed by the 37 data blocks in a single extent.</p>\r\n<p>The developers of RADfs have also developed the RADical Defragmentation Daemon, or RADDD.  RADDD works with a simple two-step algorithm; despite its simplicity, it still manages to significantly reduce the number of extents consumed by files, given enough free space on the disk.</p>\r\n<p>A RADDD pass works as follows:</p>\r\n<ul>\r\n    <li>First Step ("to the back"):\r\n    <ul>\r\n        <li>For every file on the filesystem that hasn''t been run through this           step on this pass, sorted in <b>ascending</b> order by the           <b>first</b> block it occupies on the disk:\r\n        <ul>\r\n            <li>Find the series of adjacent unused blocks nearest the               <b>end</b> of the disk that can hold the file plus a single               metadata block</li>\r\n            <li>If such a series exists:\r\n            <ul>\r\n                <li>Move the file to those blocks</li>\r\n                <li>Mark the original blocks as unused</li>\r\n            </ul>\r\n            </li>\r\n            <li>Else do nothing to the file</li>\r\n        </ul>\r\n        </li>\r\n    </ul>\r\n    </li>\r\n    <li>Second Step ("to the front"):\r\n    <ul>\r\n        <li>For every file on the filesystem that hasn''t been run through this           step on this pass, sorted in <b>descending</b> order by the           <b>last</b> block it occupies on the disk:\r\n        <ul>\r\n            <li>Find the series of adjacent unused blocks nearest the               <b>beginning</b> of the disk that can hold the file plus a               single metadata block</li>\r\n            <li>If such a series exists:\r\n            <ul>\r\n                <li>Move the file to those blocks</li>\r\n                <li>Mark the original blocks as unused</li>\r\n            </ul>\r\n            </li>\r\n            <li>Else do nothing to the file</li>\r\n        </ul>\r\n        </li>\r\n    </ul>\r\n    </li>\r\n</ul>\r\n<p>After one pass on a filesystem with some free space, some files have hopefully been reduced to a single extent.  Multiple passes can often defragment the filesystem even further.</p>\r\n<p>Of course, it''s not that simple; some files simply cannot be moved, perhaps due to being in use at the time of the run.  These are marked on the filesystem as <i>immobile</i>, and are ignored by RADDD.</p>\r\n<p>Given the size of a disk, the current layout of files on the disk, and a number of passes of RADDD to run, can you determine the final filesystem layout?</p>', '<p>Input to this problem will begin with a line containing a single integer</p>\r\n<p><i>N</i></p>\r\n<p>(1 &le;</p>\r\n<p><i>N</i></p>\r\n<p>&le; 100) indicating the number of data sets. Each data set consists of the following components:</p>\r\n<ul>\r\n    <li>A line containing a single integer <i>S</i> (2 &le; <i>S</i> &le; 100000) indicating the number of blocks on the particular filesystem;</li>\r\n    <li>A line containing a single integer <i>C</i> (1 &le; <i>C</i> &le; 100) indicating the number of files on the filesystem;</li>\r\n    <li><i>C</i> lines representing the files on the filesystem, in the format "<tt><i>NAME</i> <i>TYPE</i> <i>E</i> <i>A</i>-<i>B</i>[ <i>X</i>-<i>Y</i>[ ...]]</tt>", where:\r\n    <ul>\r\n        <li><i>NAME</i> is a unique (to the dataset) identifier, consisting of at least 1 and     no more than 16 lowercase letters;</li>\r\n        <li><i>TYPE</i> is "<tt>I</tt>" if the file is immobile, or "<tt>M</tt>"     otherwise;</li>\r\n        <li><i>E</i> is an integer (1 &le; <i>E</i> &le; 20) representing the number of     extents the file occupies;</li>\r\n        <li><i>A</i> and <i>B</i> (1 &le; <i>A</i>, <i>B</i> &le; <i>S</i>) are, respectively, the first and last blocks of the      first extent the file occupies;</li>\r\n        <li><i>X</i> and <i>Y</i> (1 &le; <i>X</i>, <i>Y</i> &le; <i>S</i>) are, if present, the first and last blocks of the      second extent the file occupies;</li>\r\n        <li>and so on;</li>\r\n    </ul>\r\n    </li>\r\n    <li>A line containing a single integer <i>P</i> (1 &le; <i>P</i> &le; 100) indicating the number of passes of RADDD that should be run.</li>\r\n</ul>\r\n<p></p>', '<p>For each data set in the output, output the heading "<tt>DATA SET #<i>k</i></tt>" where <i>k</i> is 1 for the first data set, 2 for the second, and so on.  On the next <i>C</i> lines, output the locations of the files on the disk after the RADDD passes in ascending order by the first block occupied on the disk. The format should be identical to the representation in the input; if a file occupies multiple extents, the output should be sorted in ascending order by the first block in each extent.</p>', 'D:\\oj\\data\\1844', 'D:\\oj\\data\\1844', '2\r\n152\r\n1\r\nradfsdoc M 3 57-58 102-114 23-47\r\n1\r\n100\r\n4\r\nswapfile I 3 5-10 80-95 25-50\r\nsmallfile M 2 1-4 11-14\r\nbigfile M 2 15-24 51-60\r\ntinyfile M 1 61-64\r\n2', 'DATA SET #1\r\nradfsdoc M 1 1-38\r\nDATA SET #2\r\ntinyfile M 1 1-4\r\nswapfile I 3 5-10 25-50 80-95\r\nbigfile M 2 15-24 51-60\r\nsmallfile M 1 61-67', '', '2008 ACM ICPC South Central USA Regional Programming Contest', '', '2011-06-10 19:38:03', 10000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 10000, 20, 'power721'),
(1845, 'Filtration', '<p>Digital Signal Processing is used for such clever effects as the "echo" often heard in music, or that annoying modulation done with the voices of certain singers.  The field makes the use of</p>\r\n<i>Finite Impulse Response</i>\r\n<p>(FIR) filters to make these effects happen.</p>\r\n<p></p>\r\n<p>Consider an input stream of samples, represented as a series of integers between 0 and 255 inclusive.  (This is, you should not be surprised to discover, the range of an <i>8-bit</i> sample.)  These samples come in a very specific sequence, one after the other, as the digital representation of a given waveform.  A FIR mixer will take multiple streams and combine them into one, a FIR echo filter will take one input and provide a single output, and so on.</p>\r\n<p>A FIR filter can be represented as an equation, with the input signals on one side and the output on the other.  For example:</p>\r\n<pre>\r\n   Y = X[0] + X[-5]\r\n</pre>\r\n<p>represents an echo filter (more specifically, a post-echo filter); a given sample of Y is equal to the value of X at the same location in the input stream, plus the value of the sample that occurred five samples prior in X. Values that are not available (such as X[-5] for the first four samples of X) are set to 0.</p>\r\n<p>In this problem, all FIR equations obey the following Backus-Naur Form (BNF) grammar:</p>\r\n<p>\r\n<table border="0" align="center">\r\n    <tbody>\r\n        <tr>\r\n            <td><b><i>EQUATION</i></b></td>\r\n            <td><b><tt>::=</tt></b>&nbsp;</td>\r\n            <td><b><i>STREAM</i></b> &nbsp;__            &nbsp;"<tt>=</tt>"&nbsp; __&nbsp;           <b><i>EXPR</i></b></td>\r\n        </tr>\r\n        <tr>\r\n            <td><b><i>STREAM</i></b></td>\r\n            <td><b><tt>::=</tt></b></td>\r\n            <td>A single upper-case letter representing a sample stream, such as           <tt>A</tt> or <tt>X</tt></td>\r\n        </tr>\r\n        <tr>\r\n            <td><b><i>EXPR</i></b></td>\r\n            <td><b><tt>::=</tt></b>&nbsp;</td>\r\n            <td><b><i>VALUE</i></b> &nbsp;|&nbsp; <b><i>SAMPLE</i></b>           &nbsp;|&nbsp;           <b><i>EXPR</i></b>           &nbsp;__&nbsp;           <b><i>OPER</i></b>           &nbsp;__&nbsp;           <b><i>EXPR</i></b>           &nbsp;|&nbsp;           "<tt>(</tt>"           &nbsp;__&nbsp;           <b><i>EXPR</i></b>           &nbsp;__&nbsp;           "<tt>)</tt>"</td>\r\n        </tr>\r\n        <tr>\r\n            <td><b><i>VALUE</i></b></td>\r\n            <td><b><tt>::=</tt></b></td>\r\n            <td>A floating-point number, such as <tt>0.25</tt>, <tt>5</tt>,          or <tt>-1.5</tt></td>\r\n        </tr>\r\n        <tr>\r\n            <td><b><i>SAMPLE</i></b></td>\r\n            <td><b><tt>::=</tt></b>&nbsp;</td>\r\n            <td><b><i>STREAM</i></b>           &nbsp;"<tt>[</tt>"&nbsp; <b><i>OFFSET</i></b>           &nbsp;"<tt>]</tt>"</td>\r\n        </tr>\r\n        <tr>\r\n            <td><b><i>OFFSET</i></b></td>\r\n            <td><b><tt>::=</tt></b>&nbsp;</td>\r\n            <td>An integer representing the sample offset into the stream, such as           <tt>0</tt>, <tt>1</tt>, or <tt>-5</tt>, between <tt>-100</tt> and           <tt>100</tt> inclusive.</td>\r\n        </tr>\r\n        <tr>\r\n            <td><b><i>OPER</i></b></td>\r\n            <td><b><tt>::=</tt></b>&nbsp;</td>\r\n            <td>"<tt>*</tt>"&nbsp; | &nbsp;"<tt>+</tt>"&nbsp; |           &nbsp;"<tt>-</tt>"</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n</p>\r\n<p>Operations are handled in the standard order of precedence (parentheses first, multiplication before addition and subtraction, otherwise left-to-right), and the resulting value is rounded <i>down</i> to the nearest integer between 0 and 255 only <i>after</i> all calculations (if any) are done by the FIR filter. The __ symbol in the above grammar specifies a series of one or more spaces. Note that whitespace in an equation is only allowed where explicitly specified by the above grammar.</p>\r\n<p>For example, a simple low-pass filter could be expressed as:</p>\r\n<pre>\r\n   Z = 0.5 * Y[0] + 0.25 * Y[-1] + 0.25 * Y[1]\r\n</pre>\r\n<p>Each output value of Z is based on the matching value in Y, modified by the nearest values of Y.  A simple mixer can be represented as follows:</p>\r\n<pre>\r\n   D = C[0] + B[0]\r\n</pre>\r\n<p>although the clipping problems that such a filter would have should be apparent.</p>\r\n<p>Obviously, for complicated effects, a number of filters can be connected together.  In this problem, this is represented by <i><b>STREAM</b></i>; any relevant stream will either be an input value (the source audio, for example) or the output of a single FIR filter.  However, a stream may be <i>used</i> as an input by more than one other filter.  This constitutes a <i>filter network</i>.</p>\r\n<p>Given a series of definitions of FIR filters and starting inputs, your task is to provide all of the outputs of the various filters.  No FIR filter will have more than 10 operators or more than ten pairs of parentheses, nor will its representation use more than 80 characters.  There will be at least one input stream and at least one output stream per data set, and all streams referenced in a filter equation will be defined in the same data set. All input streams and output streams will have the same number of samples, and there will be no "feedback loops" described by a filter network; that is, no filter will have input dependent on its output.</p>\r\n<p>Although they sure sound cool when Pete Townshend uses them.</p>', '<p>Input to this problem will begin with a line containing a single integer</p>\r\n<i>D</i>\r\n<p>(1 &le;</p>\r\n<i>D</i>\r\n<p>&le; 100) indicating the number of data sets. Each data set consists of the following components:</p>\r\n<ul>\r\n    <li>A line containing a single integer <i>N</i> (2 &le; <i>N</i> &le; 26) indicating the number of streams in the data set;</li>\r\n    <li>A line containing a single integer <i>S</i> (1 &le; <i>S</i> &le; 100) indicating the number of samples in every stream of the data set;</li>\r\n    <li>A series of <i>N</i> lines, each representing one of the streams. There     will be no duplicate stream names in a data set, and each stream is one     of either:\r\n    <ul>\r\n        <li>an input stream, in which case its representation is of the form         "<tt><i>STREAM</i> % <i>sam1 sam2 sam3 </i></tt><i>&hellip;<tt> samS</tt></i>", where         <tt><i>STREAM</i></tt> is a single capital letter, and <i>sam1</i> is the first         sample of the input stream, <i>sam2</i> is the second sample, and so         on. The individual samples and the <tt>%</tt> operator are         all separated with whitespace.</li>\r\n        <li>a FIR filter, in which case its representation is of the form         "<tt><i>STREAM</i> = <i>EXPR</i></tt>", as described above.</li>\r\n    </ul>\r\n    </li>\r\n</ul>', '<p>For each data set in the input, output the heading "<tt>DATA SET #<i>k</i></tt>" where <i>k</i> is 1 for the first data set, 2 for the second, and so on. Then print the output sample streams for every FIR filter in the data set, in alphabetical order, in the format "<tt><i>STREAM</i> % <i>sam1 sam2 sam3 </i></tt><i>&hellip;<tt> samS</tt></i>".</p>', 'D:\\oj\\data\\1845', 'D:\\oj\\data\\1845', '3\r\n3\r\n5\r\nA % 10 20 30 20 10\r\nB = A[0] + A[-1]\r\nC = 0.5 * ( A[0] + B[0] )\r\n3\r\n5\r\nZ = 0.5 * Y[0] + 0.5 * B[0]\r\nY % 50 10 50 10 50\r\nB % 10 50 10 50 15\r\n3\r\n5\r\nA % 1 2 3 4 5\r\nB = A[-2]\r\nC = B[2]', 'DATA SET #1\r\nB % 10 30 50 50 30\r\nC % 10 25 40 35 20\r\nDATA SET #2\r\nZ % 30 30 30 30 32\r\nDATA SET #3\r\nB % 0 0 1 2 3\r\nC % 1 2 3 0 0', '', '2008 ACM ICPC South Central USA Regional Programming Contest', '', '2011-06-10 19:38:03', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 16, 'power721'),
(1846, 'Like Water for Clay', '<p>People do strange things.  Recently, some folks have started building structures out of Stick-Tite blocks ("They stick ... tight!"), pressing them between two sheets of perspex, and dunking them in water.</p>\r\n<p>Yeah, I don''t know either.</p>\r\n<p>Stick-Tite blocks are one inch cubes of some sort of material that is permeable to air but not water.  They stick quite nicely to each other when properly aligned, such that it''s delightfully easy to make any sort of nice pixel-esque structure. They also stick well (but not <i>too</i> well) to perspex (also known as Plexiglas(tm)).</p>\r\n<p>When dunked underwater and shaken about a bit, water fills the open space in a Stick-Tite construction such that any open spaces are filled unless they are completely enclosed inside the construction.  While Stick-Tite blocks are water-impermeable, water can fill from any open space to any other open space that is orthogonally <i>or diagonally</i> adjacent.\r\n<table border="1" align="center">\r\n    <tbody>\r\n        <tr>\r\n            <td>\r\n            <pre>\r\nX..\r\n.X.\r\n..X\r\n</pre>\r\n            </td>\r\n            <td>Water can flow between the top-right and bottom-left areas</td>\r\n        </tr>\r\n        <tr>\r\n            <td>\r\n            <pre>\r\nX..\r\nXXX\r\n...\r\n</pre>\r\n            </td>\r\n            <td>Water cannot flow between the top-right and bottom-left areas</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\nConsider the above two examples of such a construction.  At the top, water can come through the blocks (represented by <tt>X</tt>es) to fill the top chamber.  At the bottom, water would not be able to flow between the two areas unless they were connected elsewhere.</p>\r\n<p>After being dunked and wiggled, the Stick-Tite construction is pulled straight out of the water.  Water drains out from any holes in the bottom or sides of the construction, coming out of all internal chambers and passages until the water level is even with the bottom of holes in the sides of chambers. In addition, due to static water pressure, the height of water in any pool still connected after this draining will never be higher than the bottom of the lowest hole that the pool''s water can flow from.</p>\r\n<pre>\r\nXXXXXXXXXXX\r\nXX......XXX\r\nXXX.XXXXX.X\r\nX...X.XXXXX\r\nX.X.X...X.X\r\nX.X~X~X.X.X\r\nX.X~~~X...X\r\nX.XXXXXXX.X\r\n</pre>\r\n<p>In the above example, the tildes represent the maximum amount of water that the center pool can hold; while the left side has a hole one unit higher than the right side, the water level for the pool as a whole cannot be higher than the one on the right side.  The act of draining pools may make a pool of water into smaller, separate pools; these would then drain independently.</p>\r\n<pre>\r\nXXXXXXXXXXX\r\nX......X..X\r\nX.XXXX~X..X\r\nX.X~~~~X...\r\nX~XXXXXX~~X\r\nX~~~~~~X~~X\r\nX~~~~~~~~~X\r\nXXXXXXXXXXX\r\n</pre>\r\n<p>A particular Stick-Tite construction will hold different amounts of water depending on which direction it''s dunked into the bucket from.  Given the blocks comprising a particular construction, you will determine how much water it can hold when dunked with each of its four edges facing straight up.  (The construction is dried out completely between dunkings.)</p>\r\n<br />', '<p></p>\r\n<p>Input to this problem will begin with a line containing a single integer <i>N</i> (1 &le; <i>N</i> &le; 100) indicating the number of data sets. Each data set consists of the following components:</p>\r\n<ul>\r\n    <li>A line containing two integers <i>H</i> and <i>W</i> (1 &le; <i>H</i>, <i>W</i> &le; 40) representing the height and width of the following Stick-Tite construction;</li>\r\n    <li><i>H</i> lines representing the blocks, each with <i>W</i> characters, with:\r\n    <ul>\r\n        <li><tt>X</tt> representing Stick-Tite blocks, and</li>\r\n        <li><tt>.</tt> representing open spaces.</li>\r\n    </ul>\r\n    </li>\r\n</ul>\r\n<p></p>', '<p>For each data set, print a single line of four space-separated integers, sorted from highest to lowest, representing the number of cubic inches of water the Stick-Tite structure can hold after being submerged and drained four times, each time with a different one of the four edges facing straight up.</p>\r\n<p></p>', 'D:\\oj\\data\\1846', 'D:\\oj\\data\\1846', '2\r\n8 11\r\nXXXXXXXXXXX\r\nXX......XXX\r\nXXX.XXXXX.X\r\nX...X.XXXXX\r\nX.X.X...X.X\r\nX.X.X.X.X.X\r\nX.X...X...X\r\nX.XXXXXXX.X\r\n8 11\r\nXXXXXXXXXXX\r\nX......X..X\r\nX.XXXX.X..X\r\nX.X....X...\r\nX.XXXXXX..X\r\nX......X..X\r\nX.........X\r\nXXXXXXXXXXX', '31 5 4 1\r\n40 25 24 10', '', '2008 ACM ICPC South Central USA Regional Programming Contest', '', '2011-06-10 19:38:03', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 17, 'power721'),
(1847, 'Wandering Aimlessly', '<p>Most console role-playing games, such as the famous <i>Final Fantasy</i> and <i>Dragon Quest</i> games, have towns filled with inconsequential characters that wander around aimlessly, waiting for the player to speak to them.</p>\r\n<p>You''ve been tasked with the development of the town character (or  <i>NPC</i>) movement handling for a new game.</p>\r\n<p>Any given NPC has a movement script with a few simple commands:\r\n<table border="1" align="center">\r\n    <tbody>\r\n        <tr>\r\n            <td>Command</td>\r\n            <td>Behavior</td>\r\n        </tr>\r\n        <tr>\r\n            <td><tt>NORTH x</tt></td>\r\n            <td>Move NORTH (up) <tt>x</tt> steps, one per turn</td>\r\n        </tr>\r\n        <tr>\r\n            <td><tt>SOUTH x</tt></td>\r\n            <td>Move south (down) <tt>x</tt> steps, one per turn</td>\r\n        </tr>\r\n        <tr>\r\n            <td><tt>EAST x</tt></td>\r\n            <td>Move east (right) <tt>x</tt> steps, one per turn</td>\r\n        </tr>\r\n        <tr>\r\n            <td><tt>WEST x</tt></td>\r\n            <td>Move west (left) <tt>x</tt> steps, one per turn</td>\r\n        </tr>\r\n        <tr>\r\n            <td><tt>PAUSE x</tt></td>\r\n            <td>Stay in the current location <tt>x</tt> turns</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\nNote that the individuals who write the NPC movement scripts aren''t the most careful coders in the world.  Sometimes the scripts have the NPCs attempting to walk through walls and other barriers or even off the edge of the map.  When this occurs, all of the steps of movement that would put the NPC in such an invalid location are converted into <tt>PAUSE</tt>s. For example, given this small snippet of a town:</p>\r\n<pre>\r\n...#\r\n.1.#\r\n...#\r\n</pre>\r\n<p>if the NPC represented by the 1 had</p>\r\n<tt>EAST 5</tt>\r\n<p>as their next command, that would be converted on the fly to</p>\r\n<tt>EAST 1</tt>\r\n<p>followed by</p>\r\n<tt>PAUSE 4</tt>\r\n<p>.  This processing must be done before determining whether a script is</p>\r\n<i>cyclic</i>\r\n<p>or</p>\r\n<i>reversible</i>\r\n<p>.</p>\r\n<p>A script is <i>cyclic</i> if, at the end of the script, the NPC back in their starting position.  This sort of script is simply looped indefinitely.  The other type of script is <i>reversible</i>; if, at the end of the script, the NPC is <i>not</i> back in their starting position, they then run a reversed copy of the script, with directions switched (<tt>WEST</tt> becomes <tt>EAST</tt>, <tt>EAST</tt> becomes <tt>WEST</tt>, <tt>NORTH</tt> becomes <tt>SOUTH</tt>, and <tt>SOUTH</tt> becomes <tt>NORTH</tt>) and <tt>PAUSE</tt>s intact.  The end result is the character returning to their starting location.\r\n<table border="1" align="center">\r\n    <tbody>\r\n        <tr>\r\n            <td>Original script segment</td>\r\n            <td>Reversed script segment</td>\r\n        </tr>\r\n        <tr>\r\n            <td><tt> SOUTH 1<br />\r\n            PAUSE 5<br />\r\n            EAST 1 </tt></td>\r\n            <td><tt> WEST 1<br />\r\n            PAUSE 5<br />\r\n            NORTH 1 </tt></td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n</p>\r\n<p>For the sake of this problem, you can assume that no NPCs will ever attempt to occupy the same location on the map at the same time, although one may enter a location on the same turn as a different NPC leaves it, which is valid behavior.</p>\r\n<p>The simulation starts at turn 0; your task is to show, given a map and set of NPCs with their scripts, what the simulation looks like after a large number of turns have passed.</p>', '<p>Input to this problem will begin with a line containing a single integer <i>N</i> (1 &le; <i>N</i> &le; 100) indicating the number of data sets. Each data set consists of the following components:</p>\r\n<ul>\r\n    <li>A line containing a single integer <i>C</i> (1 &le; <i>C</i> &le; 35) indicating the number of NPCs in this town;</li>\r\n    <li>A line containing two integers <i>H</i> and <i>W</i> (1 &le; <i>H</i>, <i>W</i> &le; 40) representing the height and width of the town;</li>\r\n    <li><i>H</i> lines representing the town, each with <i>W</i> characters, with:\r\n    <ul>\r\n        <li>Hash marks (<tt>#</tt>) representing walls and other impassible     obstructions;</li>\r\n        <li>Periods (<tt>.</tt>) representing open spaces; and</li>\r\n        <li>digits and capital letters representing the starting location of the NPCs, with <tt>1</tt> representing the first one, <tt>2</tt> representing the second (if present), and so on through the digits, then <tt>A</tt> representing the tenth NPC (if present), <tt>B</tt> representing the eleventh (if present), and so on.  The space under an NPC''s starting location is open.</li>\r\n    </ul>\r\n    </li>\r\n    <li><i>C</i> sets of lines describing the NPC scripts; each set consists of:\r\n    <ul>\r\n        <li>A line containing a single character and an integer <i>L</i> (1 &lt; <i>L</i> &lt; 20), separated by spaces, where the character is one of the digits or letters used on the map to represent a particular NPC, and <i>L</i> is the length of that NPC''s script; and</li>\r\n        <li><i>L</i> lines representing the NPC''s script, in the format given above, with no value lower than 1 or higher than 40.</li>\r\n    </ul>\r\n    </li>\r\n    <li>A line containing a single integer <i>T</i> (1 &le; <i>T</i> &le; 1000000) indicating a number of turns to calculate</li>\r\n</ul>', '<p>For each data set in the output, output the heading "<tt>DATA SET #<i>k</i></tt>" where <i>k</i> is 1 for the first data set, 2 for the second, and so on. the next <i>H</i> lines, output a representation of the town map, using the same symbols as the input format described above, with the NPCs in the correct locations after the given number of turns have passed.</p>', 'D:\\oj\\data\\1847', 'D:\\oj\\data\\1847', '1\r\n2\r\n5 5\r\n...#.\r\n.1.#.\r\n...#.\r\n...2.\r\n.....\r\n1 4\r\nEAST 5\r\nSOUTH 1\r\nPAUSE 1\r\nWEST 1\r\n2 4\r\nEAST 1\r\nSOUTH 1\r\nWEST 1\r\nNORTH 1\r\n22', 'DATA SET #1\r\n...#.\r\n...#.\r\n..1#.\r\n.....\r\n....2', '', '2008 ACM ICPC South Central USA Regional Programming Contest', '', '2011-06-10 19:38:03', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 20, 'power721'),
(1848, 'Cables ... in Spaaace!', '<p>Many science fiction stories take place on distant planets in galaxies far, far, away. Some of the best writers will spend time researching the relevant scientific fields of today to make their futuristic technology seem believable to a modern day audience. As a budding young writer participating in the National Novel Writing Month (NaNoWriMo) in November, you''d like to do some technological research as well to make sure your own SF universe is up to par.</p>\r\n<p>In your own SF novel, humanity has spread out throughout the galaxy and has come to colonize many a planet. Aside from the obvious requirement of interstellar space flight in your book, you''d like to keep all other technologies, computers especially, similar to what is available in today''s world. That means the computer networks on many of the colonized planets will still be designed by running copper or fiber optic cable between the computers.</p>\r\n<p>Modern computer networks use packet switching which means that you do <b>not</b> have to physically run a separate cable between every pair of computers. It''s enough that the computer network remains <i>strongly connected</i>. In other words, it''s enough that for every pair of computers on the network, some path exists such that packets traveling to and fro between the computers can reach their destinations by being forwarded through any number of computers in-between.</p>\r\n<p>This property of packet switching allows us to minimize how much cable has to be laid down to allow every computer on the network to communicate with every other. As a budding SF writer, you''d like to know the absolute minimum total length of cable that would be required to create a computer network between all the cities on your newly colonized planet, assuming there are no redundant or aggregate links in the network. When performing your calculations, you may assume that the planet is a perfect sphere, all the cables are run along the surface of the planet, and that no surface obstructions (like rivers or mountain ranges) exist to impede the run of cable.</p>\r\n<p>The input to this problem will specify the diameter of the planet in question, and it will include a list of city coordinates given in degrees of</p>\r\n<p><i>latitude</i></p>\r\n<p>and</p>\r\n<p><i>longitude</i></p>\r\n<p>. For those who are not as cartographically savvy as they''d like, latitude is an angular measurement ranging from &minus;90&deg; at the South pole to +90&deg; at the North pole and with 0&deg; located at a planet''s</p>\r\n<p><i>equator</i></p>\r\n<p>. Longitude is an angular measurement ranging between &minus;180&deg; and +180&deg; with 0&deg; specifying the</p>\r\n<p><i>prime meridian</i></p>\r\n<p>. By convention negative longitude represents locations to the West of the prime meridian, and positive longitude presents locations to the East.</p>', '<p>Input to this problem will begin with a line containing a single integer <i>N</i> (1 &le; <i>N</i> &le; 100) indicating the number of data sets. Each data set consists of the following components:</p>\r\n<ul>\r\n    <li>A line containing a single decimal number <i>D</i> (1 &le; <i>D</i> &le; 1,000,000) specifying the diameter (in kilometers) of the planet in question.</li>\r\n    <li>A line containing a single decimal number <i>L</i> (1 &le; <i>L</i> &le; 1,000,000) giving the total length of cable (in kilometers) available for building a network on the newly colonized planet.</li>\r\n    <li>A line containing a single integer <i>C</i> (1 &le; <i>C</i> &le; 100) indicating the number of cities this planet contains.</li>\r\n    <li>A series of <i>C</i> lines, each of which contains two decimal numbers of the form "<i>X</i> <i>Y</i>" respectively specifying the latitude and longitude (both in degrees) of one city with (&minus;90 &le; <i>X</i> &le; 90) and (&minus;180 &le; <i>X</i> &le; 180).</li>\r\n</ul>', '<p>For each data set in the input, print a single line. Print either "<tt>IS POSSIBLE</tt>" if the available length of cable <i>L</i> is enough to network all the cities, or print "<tt>IS NOT POSSIBLE</tt>" if the available length of cable <i>L</i> is too short.</p>', 'D:\\oj\\data\\1848', 'D:\\oj\\data\\1848', '2\r\n12742\r\n5900\r\n3\r\n51.3 0\r\n42.5 -75\r\n48.8 3\r\n12742\r\n620\r\n2\r\n30.266 97.75\r\n30.45 91.1333', 'IS POSSIBLE\r\nIS NOT POSSIBLE', '', '2008 ACM ICPC South Central USA Regional Programming Contest', '', '2011-06-10 19:38:03', 20000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 20000, 17, 'power721'),
(1849, 'Patterns and Pictures', '<p>Fabrics often have repeating patterns on them, such as a tessellation of carrots and bats.</p>\r\n<p>A given image, such as a carrot in the above example, takes up a certain number of square inches on the fabric.  In addition, a piece of fabric with more than one image will have those images in some sort of simple integral ratio, such as 3 carrots for every 2 bats.  One instance of images in the given ratio is considered a <i>full set</i>.</p>\r\n<p>Fabrics are sold by the square yard (and, for those of you who have forgotten, there are 36 inches to the yard).  Given a collection of images, their sizes, and the ratios in which they occur, what is the maximum number of full sets that could possibly appear on one, two, and three square yards of patterned fabric?</p>\r\n<p>(Note that this maximum implies totally arbitrary shapes and placements for the images, which may be different for the three lengths of fabric; the particulars of the layout are irrelevant for the purposes of the problem.)</p>', '<p>Input to this problem will begin with a line containing a single integer <i>N</i> (1 &le; <i>N</i> &le; 100) indicating the number of data sets. Each data set consists of the following components:</p>\r\n<ul>\r\n    <li>A line containing a single integer <i>I</i> (1 &le; <i>I </i>&le; 10) indicating the number of images in a particular pattern;</li>\r\n    <li>A series of <i>I</i> lines, each with two integers <i>S</i>, <i>R</i> (1 &le; <i>S </i>&le; 1000; 1 &le; <i>R</i> &le; 100) separated by spaces representing the images.  <i>S</i> is the number of square inches that the image occupies; <i>R</i> is the count of the images contained in a full set.</li>\r\n</ul>\r\n<br />', '<p>For each data set, print "<tt><i>A</i> <i>B</i> <i>C</i></tt>", where <i>A</i> is the maximum number of full sets that could possibly appear on one square yard of fabric, <i>B</i> is the maximum number of full sets that could possibly appear on two square yards of fabric, and <i>C</i> is the maximum number of full sets that could possibly appear on three square yards of fabric.</p>', 'D:\\oj\\data\\1849', 'D:\\oj\\data\\1849', '1\r\n2\r\n15 3\r\n17 2', '16 32 49', '', '2008 ACM ICPC South Central USA Regional Programming Contest', '', '2011-06-10 19:38:03', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1850, 'No Wormholes Were Harmed...', '<p>As director of the Causality Infraction Agency, your primary objective is track down and arrest unscrupulous individuals attempting to alter the course of history.</p>\r\n<p>Although your mission briefings include the exact year that a time agent must travel to, the physics of time travel don''t make it quite so simple. Time travel can only be done by moving through wormholes that connect two specific instances of time together. As a result, an agent must travel through several wormholes in sequence to reach his or her destination time. In addition, an agent may have to spend some time living in the past or future while waiting for the next wormhole to appear. Traveling through a wormhole also isn''t as simple as it might seem: moving forward in time through a wormhole will instanteously age the user by a certain number of years and moving backwards through one will instanteously make the traveller slightly younger.</p>\r\n<p>Because the agency pays its agents based on how many years they''ve aged since joining the service, you are required to minimize the "aging process" as much as possible for every agent. Your goal therefore is to write a program that finds the optimal itinerary of wormhole jumps for each agent''s mission and then reports the total number of years each agent will age after completing their assignment.</p>\r\n<p>For agency accounting purposes, the formulas for computing total years aged on a mission are as follows:</p>\r\n<p></p>\r\n<ul class="example">\r\n    <li>When starting from some year of <i>origin</i> and simply waiting until some <i>destination</i> year, the age a body accumulates in years equals:\r\n    <p align="center"><i>destination</i> - <i>origin</i></p>\r\n    <p>In other words, if you were currently in the year 1785 and had to wait until the year 1793, then you will have aged 8 years.</p>\r\n    </li>\r\n    <li>When traveling forward in time through a wormhole that connects one year of <i>departure</i> with a later year of <i>arrival</i>, then the number of years a body ages is equal to:\r\n    <p align="center">floor((<i>arrival</i> - <i>departure</i>) / 2)</p>\r\n    <p>Put in another way, you will age half the number of years (rounded down) you normally would have had you instead waited for the equivalent number of years to pass by. Note that when traveling over a small enough time difference, the years aged may be rounded down to zero for accounting purposes.</p>\r\n    </li>\r\n    <li>When traveling backward in time through a wormhole that connects one year of <i>departure</i> with an earlier year of <i>arrival</i>, then the number of years a body "gains back" by becoming younger is equal to:\r\n    <p align="center">floor((<i>departure</i> - <i>arrival</i>) / 4)</p>\r\n    In other words, you gain back a quarter of the difference between the two years (rounded down). Note that when traveling over a small enough time difference, the years "gained back" may be rounded down to zero for accounting purposes.</li>\r\n    <li>A wormhole that starts and ends at the same year is possible, but causes no     aging or time travel, and as such serves little purpose other than to     confound the scientists.</li>\r\n</ul>\r\n<p>Each dataset to this problem will contain a starting year from which all agents begin their travels and a list of mission assignments, one for each agent. Every mission assignment includes a final destination year that the agent must travel to. The mission can only be completed if the agent is able to make a round trip by traveling from the starting year to the mission''s destination year and then traveling back to the initial starting year again. If such a round trip cannot be completed, then that particular mission is invalid. For the purposes of this problem, you also do not have to consider the maximum lifespan of any given agent. A mission is considered valid as long as a round trip is possible regardless of how high the count of years aged will be.</p>', '<p>Input to this problem will begin with a line containing a single integer <i>N</i> (1 &le; <i>N</i> &le; 100) indicating the number of data sets. Each data set consists of the following components:</p>\r\n<ul>\r\n    <li>A line containing a single integer <i>W</i> (1 &le; <i>W</i> &le; 100) specifying the number of wormholes present for this dataset.</li>\r\n    <li>A series of <i>W</i> lines of the form "<i>D</i> <i>A</i>" (1 &le; <i>D</i>, <i>A</i> &le; 9999), each of which describes a single wormhole. The numbers <i>D</i> and <i>A</i> respectively specify the <i>departure</i> and <i>arrival</i> years of the wormhole''s two endpoints in time. A wormhole is unidirectional allowing travel only from its departure year to its arrival year, but not vice-versa.</li>\r\n    <li>A line containing a single integer <i>S</i> (1 &le; <i>S</i> &le; 9999) which is the starting year for all agents.</li>\r\n    <li>A line containing a single integer <i>M</i> (1 &le; <i>M</i> &le; 100) indicating the number of missions to be analyzed.</li>\r\n    <li>A series of <i>M</i> lines, each containing a single integer <i>F</i> (1 &le; <i>F</i> &le; 9999) which specifies the final destination year for each of the <i>M</i> missions.</li>\r\n</ul>\r\n<br />', '<p>For each data set in the input, output the heading "<tt>DATA SET #<i>k</i></tt>" where <i>k</i> is 1 for the first data set, 2 for the second, and so on. Then print <i>M</i> lines showing the results of each of the <i>M</i> missions from the input and in the same relative order as the input. Each of the <i>M</i> lines should contain either a single integer indicating the number of years aged by that respective agent or the words "<tt>IMPOSSIBLE</tt>" if that particular mission cannot be completed (either because the destination is unreachable or a return trip is not possible).</p>', 'D:\\oj\\data\\1850', 'D:\\oj\\data\\1850', '1\r\n2\r\n2011 1956\r\n1975 2005\r\n2008\r\n3\r\n1969\r\n2012\r\n1982', 'DATA SET #1\r\n27\r\nIMPOSSIBLE\r\n42', '', '2008 ACM ICPC South Central USA Regional Programming Contest', '', '2011-06-10 19:38:03', 40000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 40000, 26, 'power721'),
(1851, 'Tribute (Editor)', '<p>This problem is not about the greatest editor in the world; it is just a tribute.</p>\r\n<p>The <i>Tenacious eDitor</i> is an attempt to clone to power of a certain modal editor.  However, it is notoriously bug-ridden.  You''ve been asked to replace Kyle (who quit the devteam) and help with fixing some of the bugs.</p>\r\n<p>The main problem with the current release of <tt>td</tt>, as it is commonly referred to, is that it cannot differentiate between text on a line and commands.  Whenever a user wants to type an <tt>x</tt>, the editor interprets it as a command to delete the last character.  This is problematic.  Thankfully, commands are case-sensitive, and each letter is at most a single command (sometimes uppercase, sometimes lowercase), so one can manage to write any given line of text as long as it''s allowed to look like something written by a fourteen-year-old hacker wannabe.</p>\r\n<p>Editing occurs in an <i>edit buffer</i>, which starts out empty. The cursor in <tt>td</tt> rests in <i>gaps</i>, locations surrounding each printed character.  When a non-command character is entered, the character is inserted to the right of the cursor''s current location and the cursor moves to the gap to the right of the new character.  (This is the standard behavior of most editors.)  A line with no characters has a single gap. A line with a single printable character has two (one before and one after), a line with two printable characters has three, and so on.</p>\r\n<p>The currently-implemented commands are:\r\n<table border="1" align="center">\r\n    <tbody>\r\n        <tr>\r\n            <td>Command keys</td>\r\n            <td>Result</td>\r\n            <td>Cursor location after operation</td>\r\n        </tr>\r\n        <tr>\r\n            <td><tt>x</tt></td>\r\n            <td>Delete the character immediately to the left of the cursor</td>\r\n            <td>One gap to the left</td>\r\n        </tr>\r\n        <tr>\r\n            <td><tt>K</tt></td>\r\n            <td>Delete all non-spaces to the left of the cursor, stopping at the           first space encountered or the beginning of the line; if the           previous character is a space, delete nothing</td>\r\n            <td>The gap to the right of the "stop" character</td>\r\n        </tr>\r\n        <tr>\r\n            <td><tt>c</tt></td>\r\n            <td>Duplicate the character to the left of the cursor, inserting it to           the right of the cursor</td>\r\n            <td>The gap to the right of the duplicate character (one right)</td>\r\n        </tr>\r\n        <tr>\r\n            <td><tt>D</tt></td>\r\n            <td>Duplicate all non-spaces to the left of the cursor, stopping at the           first space encountered or the beginning of the line and inserting           them to the right of the cursor; if the previous character is a           space, duplicate nothing</td>\r\n            <td>The gap to the right of the rightmost duplicate character</td>\r\n        </tr>\r\n        <tr>\r\n            <td><tt>R</tt></td>\r\n            <td>Reverse all non-spaces to the left of the cursor, stopping at the           first space encountered or the beginning of the line; if the           previous character is a space, reverse nothing</td>\r\n            <td>No change</td>\r\n        </tr>\r\n        <tr>\r\n            <td><tt>p</tt></td>\r\n            <td>Delete all characters to the left of the cursor</td>\r\n            <td>Leftmost gap</td>\r\n        </tr>\r\n        <tr>\r\n            <td><tt>W</tt></td>\r\n            <td>Delete all characters to the right of the cursor</td>\r\n            <td>No change</td>\r\n        </tr>\r\n        <tr>\r\n            <td><tt>h</tt></td>\r\n            <td>Move the cursor one gap to the left</td>\r\n            <td>One gap to the left</td>\r\n        </tr>\r\n        <tr>\r\n            <td><tt>L</tt></td>\r\n            <td>Move the cursor one gap to the right</td>\r\n            <td>One gap to the right</td>\r\n        </tr>\r\n        <tr>\r\n            <td><tt>f</tt></td>\r\n            <td>Move the cursor to the first gap on the line</td>\r\n            <td>Leftmost gap</td>\r\n        </tr>\r\n        <tr>\r\n            <td><tt>G</tt></td>\r\n            <td>Move the cursor to the last gap on the line</td>\r\n            <td>Rightmost gap</td>\r\n        </tr>\r\n        <tr>\r\n            <td><i>any non-command character</i></td>\r\n            <td>Insert the character into the edit buffer to the right of the cursor</td>\r\n            <td>One gap to the right</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\nFor the purposes of this problem, the only characters are uppercase and lowercase characters, digits, and spaces.</p>\r\n<p>When a character is added internally to a line of text, all subsequent characters shift to the right (as in "insert mode"); when characters are deleted from anywhere other than the end of a line, all subsequent characters shift to the left.</p>\r\n<p>Any commands which cannot properly do anything (attempting to move past the first or last gap, deleting characters when none exist, and so on) do nothing.  They do <b>not</b> show up as printed characters.</p>\r\n<p>Each line represents a different session of <tt>td</tt>; at the beginning of a new session, the edit buffer is empty.</p>\r\n<p>Given a series of keystrokes by a user, can you determine what text actually results if it were entered in the current version of <tt>td</tt>?</p>', '<p>Input to this problem will begin with a line containing a single integer <i>N</i> (1 &le; <i>N</i> &le; 100) indicating the number of data sets.  Each data set consists of a single line of characters, as defined above, with no leading or trailing whitespace.  There are no less than 1 and no more than 100 characters per line.  They represent the series of keystrokes entered by a user for a particular session of <tt>td</tt>. </p>', '<p>For each data set, print the final state of the edit buffer from the sequence of characters  entered, with a carat (<tt>^</tt>) at the location of the cursor.</p>', 'D:\\oj\\data\\1851', 'D:\\oj\\data\\1851', '2\r\nDeletex bigdeleteKduPc bigduPD esreverR midinhhdleGxx midelletehhhxGfmoo\r\nTHis ratHer obnoXious line oF CHaraCters surPrisingly triggers no Commands', 'moo^elet duPP bigduPbigduP reverse middle midelete\r\nTHis ratHer obnoXious line oF CHaraCters surPrisingly triggers no Commands^', '', '2008 ACM ICPC South Central USA Regional Programming Contest', '', '2011-06-10 19:38:03', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 21, 'power721'),
(1852, '采油区域', '<p>Siruseri政府决定将石油资源丰富的Navalur省的土地拍卖给私人承包商以建立油井。被拍卖的整块土地为一个矩形区域，被划分为M&times;N个小块。 Siruseri地质调查局有关于Navalur土地石油储量的估测数据。这些数据表示为M&times;N个正整数，即对每一小块土地石油储量的估计值。 为了避免出现垄断，政府规定每一个承包商只能承包一个由K&times;K块相连的土地构成的正方形区域。 AoE石油联合公司由三个承包商组成，他们想选择三块互不相交的K&times;K的区域使得总的收益最大。 例如，假设石油储量的估计值如下：</p>\r\n<p><img width="276" height="231" src="images/problem/pic1852_0" alt="" /></p>\r\n<p><br />\r\n如果K = 2, AoE公司可以承包的区域的石油储量总和为100, 如果K = 3, AoE公司可以承包的区域的石油储量总和为208。 AoE公司雇佣你来写一个程序，帮助计算出他们可以承包的区域的石油储量之和的最大值。&lt;/p>\r\n<p></p>\r\n<p>数据保证K&le;M且K&le;N并且至少有三个K&times;K的互不相交的正方形区域。其中30%的输入数据，M, N&le; 12。所有的输入数据, M, N&le; 1500。每一小块土地的石油储量的估计值是非负整数且&amp;le; 500。&lt;/p>', '<p>输入第一行包含三个整数M, N, K，其中M和N是矩形区域的行数和列数，K是每一个承包商承包的正方形的大小（边长的块数）。接下来M行，每行有N个正整数表示这一行每一小块土地的石油储量的估计值。&lt;/p>', '<p>输出只包含一个正整数，表示AoE公司可以承包的区域的石油储量之和的最大值。&lt;/p>', 'D:\\oj\\data\\1852', 'D:\\oj\\data\\1852', '9 9 3 \r\n1 1 1 1 1 1 1 1 1 \r\n1 1 1 1 1 1 1 1 1 \r\n1 8 8 8 8 8 1 1 1 \r\n1 8 8 8 8 8 1 1 1 \r\n1 8 8 8 8 8 1 1 1 \r\n1 1 1 1 8 8 8 1 1 \r\n1 1 1 1 1 1 8 8 8 \r\n1 1 1 1 1 1 9 9 9 \r\n1 1 1 1 1 1 9 9 9', '208', '', 'APIO2009', '', '2011-06-10 19:38:06', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 44, 'power721'),
(1853, '会议中心', '<p>Siruseri政府建造了一座新的会议中心。许多公司对租借会议中心的会堂很感兴趣，他们希望能够在里面举行会议。 对于一个客户而言，仅当在开会时能够独自占用整个会堂，他才会租借会堂。会议中心的销售主管认为：最好的策略应该是将会堂租借给尽可能多的客户。显然，有可能存在不止一种满足要求的策略。 例如下面的例子。总共有4个公司。他们对租借会堂发出了请求，并提出了他们所需占用会堂的起止日期（如下表所示）。&lt;/p>\r\n<p><img width="348" height="145" src="images/problem/pic1853_0" alt="" /></p>\r\n<p>上例中，最多将会堂租借给两家公司。租借策略分别是租给公司1和公司3，或是公司2和公司3，也可以是公司1和公司4。注意会议中心一天最多租借给一个公司，所以公司1和公司2不能同时租借会议中心，因为他们在第九天重合了。&lt;br />\r\n销售主管为了公平起见，决定按照如下的程序来确定选择何种租借策略：首先，将租借给客户数量最多的策略作为候选，将所有的公司按照他们发出请求的顺序编号。对于候选策略，将策略中的每家公司的编号按升序排列。最后，选出其中字典序最小1的候选策略作为最终的策略。 例中，会堂最终将被租借给公司1和公司3：3个候选策略是{(1,3),(2,3),(1,4)}。而在字典序中(1,3)&lt;(1,4)&lt;(2,3)。 你的任务是帮助销售主管确定应该将会堂租借给哪些公司。&lt;/p>\r\n<p>对于50%的输入，N&le;3000。在所有输入中，N&le;200000。&lt;/p>\r\n<p></p>\r\n<p>-------------------</p>\r\n<p>1 字典序指在字典中排列的顺序，如果序列l1是序列l2的前缀，或者对于l1和l2的第一个不同位置j，l1[j]&lt;l2[j]，则l1比l2小。&lt;/p>', '<p>输入的第一行有一个整数N，表示发出租借会堂申请的公司的个数。第2到第N+1行每行有2个整数。第i+1行的整数表示第i家公司申请租借的起始和终止日期。对于每个公司的申请，起始日期为不小于1的整数，终止日期为不大于109的整数。&lt;/p>', '<p>输出的第一行应有一个整数M，表示最多可以租借给多少家公司。第二行应列出M个数，表示最终将会堂租借给哪些公司。&lt;/p>', 'D:\\oj\\data\\1853', 'D:\\oj\\data\\1853', '4\r\n4 9\r\n9 11\r\n13 19\r\n10 17', '2\r\n1 3', '', 'APIO2009', '', '2011-06-10 19:38:09', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 40, 'power721'),
(1854, '抢掠计划', '<p>Siruseri城中的道路都是单向的。不同的道路由路口连接。按照法律的规定，在每个路口都设立了一个Siruseri银行的ATM取款机。令人奇怪的是，Siruseri的酒吧也都设在路口，虽然并不是每个路口都设有酒吧。 Banditji计划实施Siruseri有史以来最惊天动地的ATM抢劫。他将从市中心出发，沿着单向道路行驶，抢劫所有他途径的ATM机，最终他将在一个酒吧庆祝他的胜利。 使用高超的黑客技术，他获知了每个ATM机中可以掠取的现金数额。他希望你帮助他计算从市中心出发最后到达某个酒吧时最多能抢劫的现金总数。他可以经过同一路口或道路任意多次。但只要他抢劫过某个ATM机后，该ATM机里面就不会再有钱了。 例如，假设该城中有6个路口，道路的连接情况如下图所示：</p>\r\n<p></p>\r\n<p><img width="478" height="184" src="images/problem/pic1854_0" alt="" /></p>\r\n<p>市中心在路口1，由一个入口符号&amp;rarr;来标识，那些有酒吧的路口用双圈来表示。每个ATM机中可取的钱数标在了路口的上方。在这个例子中，Banditji能抢劫的现金总数为47，实施的抢劫路线是：1-2-4-1-2-3-5。&lt;/p>\r\n<p>50%的输入保证N, M&lt;=3000。所有的输入保证N, M&lt;=500000。每个ATM机中可取的钱数为一个非负整数且不超过4000。输入数据保证你可以从市中心沿着Siruseri的单向的道路到达其中的至少一个酒吧。&lt;/p>', '<p>第一行包含两个整数N、M。N表示路口的个数，M表示道路条数。接下来M行，每行两个整数，这两个整数都在1到N之间，第i+1行的两个整数表示第i条道路的起点和终点的路口编号。接下来N行，每行一个整数，按顺序表示每个路口处的ATM机中的钱数。接下来一行包含两个整数S、P，S表示市中心的编号，也就是出发的路口。P表示酒吧数目。接下来的一行中有P个整数，表示P个有酒吧的路口的编号。&lt;/p>', '<p>输出一个整数，表示Banditji从市中心开始到某个酒吧结束所能抢劫的最多的现金总数。&lt;/p>', 'D:\\oj\\data\\1854', 'D:\\oj\\data\\1854', '6 7\r\n1 2\r\n2 3\r\n3 5\r\n2 4\r\n4 1\r\n2 6\r\n6 5\r\n10\r\n12\r\n8\r\n16\r\n1\r\n5\r\n1 4\r\n4 3 5 6', '47', '', 'APIO2009', '', '2011-06-10 19:38:09', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 35, 'power721'),
(1855, '除法', '给你两个正整数a和b，求出a除以b的商和余数。', '每行两个正整数a和b。(a<=10^1000,b<=10^8)', '每行输出两个整数，分别是商和余数。', 'D:\\oj\\data\\1855', 'D:\\oj\\data\\1855', '123 5\r\n1234567890 123', '24 3\r\n10037137 39', '', 'power', '', '2012-04-09 21:10:47', 1000, 65536, 'N', NULL, 6, 8, 75, 2, 40, 4, 3, 1000, 105, 'power721'),
(1856, '选数', '<p>　　已知 n 个整数 x1,x2,…,xn，以及一个整数 k（k＜n）。从 n 个整数中任选 k 个整数相加，可分别得到一系列的和。例如当 n=4，k＝3，4个整数分别为 3，7，12，19 时，可得全部的组合与它们的和为：<br />\r\n3＋7＋12=22　　3＋7＋19＝29　　7＋12＋19＝38　　3＋12＋19＝34。&lt;br />\r\n现在，要求你计算出和为素数共有多少种。&lt;br />\r\n例如上例，只有一种的和为素数：3＋7＋19＝29）。&lt;/p>', '<p>键盘输入，格式为：&lt;br />\r\nn , k（1&lt;=n&lt;=20，k＜n）&lt;br />\r\nx1,x2，…,xn （1&lt;=xi&lt;=5000000）&lt;/p>', '<p>　屏幕输出，格式为：&lt;br />\r\n一个整数（满足条件的种数）。&lt;/p>', 'D:\\oj\\data\\1856', 'D:\\oj\\data\\1856', '4 3\r\n3 7 12 19', '1', '', 'NOIP2002', '', '2012-04-19 15:07:07', 1000, 131072, 'N', NULL, 4, 4, 100, 0, 0, 3, 3, 1000, 76, 'power721'),
(1857, '产生数', '<p>给出一个整数 n（n&lt;10^30) 和 k个变换规则（k&lt;=15）。规则：<br />\r\n一位数可变换成另一个一位数：&lt;br />\r\n规则的右部不能为零。&lt;br />\r\n例如：n=234。有规则（k＝2）：<br />\r\n2－&gt; 5<br />\r\n3－&gt; 6<br />\r\n上面的整数 234 经过变换后可能产生出的整数为（包括原数）:<br />\r\n234<br />\r\n534<br />\r\n264<br />\r\n564<br />\r\n共 4 种不同的产生数&lt;br />\r\n问题：&lt;br />\r\n给出一个整数 n 和 k 个规则。&lt;br />\r\n求出：&lt;br />\r\n经过任意次的变换（0次或多次），能产生出多少个不同整数。&lt;br />\r\n仅要求输出个数。&lt;/p>', '<p>键盘输人，格式为：&lt;br />\r\n&nbsp;　　n k<br />\r\n&nbsp;　　x1 y1<br />\r\n&nbsp;　　x2 y2<br />\r\n&nbsp;　　... ...<br />\r\n&nbsp;　　xn yn</p>', '<p>　 屏幕输出，格式为：&lt;br />\r\n一个整数（满足条件的个数）：&lt;/p>', 'D:\\oj\\data\\1857', 'D:\\oj\\data\\1857', '234 2\r\n2 5\r\n3 6', '4', '', 'NOIP2002', '', '2012-03-09 19:48:08', 1000, 131072, 'N', NULL, 1, 8, 13, 7, 88, 2, 1, 1000, 80, 'power721'),
(1858, '过河卒', '<p>如图，A 点有一个过河卒，需要走到目标 B 点。卒行走规则：可以向下、或者向右。同时在棋盘上的任一点有一个对方的马（如上图的C点），该马所在的点和所有跳跃一步可达的点称为对方马的控制点。例如上图 C 点上的马可以控制 9 个点（图中的P1，P2 … P8 和 C）。卒不能通过对方马的控制点。&lt;/p>\r\n<p><img width="722" height="449" src="images/problem/pic1858_0" alt="" /></p>\r\n<p>棋盘用坐标表示，A 点（0，0）、B 点（n,m）(n,m 为不超过 20 的整数，并由键盘输入)，同样马的位置坐标是需要给出的（约定: C&lt;>A，同时C&lt;>B）。现在要求你计算出卒从 A 点能够到达 B 点的路径的条数。&lt;/p>', '<p>键盘输入<br />\r\nB点的坐标（n,m）以及对方马的坐标（X,Y）{不用盘错}</p>', '<p>屏幕输出<br />\r\n一个整数（路径的条数）。&lt;/p>', 'D:\\oj\\data\\1858', 'D:\\oj\\data\\1858', '6 6 3 2', '17', '', 'NOIP2002', '', '2011-12-16 08:54:34', 1000, 131072, 'N', NULL, 4, 14, 29, 10, 71, 4, 4, 1000, 131, 'power721'),
(1859, '乒乓球', '<p><!--[if gte mso 9]><xml>\r\n<w:WordDocument>\r\n<w:View>Normal</w:View>\r\n<w:Zoom>0</w:Zoom>\r\n<w:PunctuationKerning />\r\n<w:DrawingGridVerticalSpacing>7.8 磅&lt;/w:DrawingGridVerticalSpacing>\r\n<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>\r\n<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>\r\n<w:ValidateAgainstSchemas />\r\n<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>\r\n<w:IgnoreMixedContent>false</w:IgnoreMixedContent>\r\n<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>\r\n<w:Compatibility>\r\n<w:SpaceForUL />\r\n<w:BalanceSingleByteDoubleByteWidth />\r\n<w:DoNotLeaveBackslashAlone />\r\n<w:ULTrailSpace />\r\n<w:DoNotExpandShiftReturn />\r\n<w:AdjustLineHeightInTable />\r\n<w:BreakWrappedTables />\r\n<w:SnapToGridInCell />\r\n<w:WrapTextWithPunct />\r\n<w:UseAsianBreakRules />\r\n<w:DontGrowAutofit />\r\n<w:UseFELayout />\r\n</w:Compatibility>\r\n<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>\r\n</w:WordDocument>\r\n</xml><![endif]--><!--[if gte mso 9]><xml>\r\n<w:LatentStyles DefLockedState="false" LatentStyleCount="156">\r\n</w:LatentStyles>\r\n</xml><![endif]--><!--[if gte mso 10]>\r\n<style>\r\n/* Style Definitions */\r\ntable.MsoNormalTable\r\n{mso-style-name:普通表格;\r\nmso-tstyle-rowband-size:0;\r\nmso-tstyle-colband-size:0;\r\nmso-style-noshow:yes;\r\nmso-style-parent:"";\r\nmso-padding-alt:0cm 5.4pt 0cm 5.4pt;\r\nmso-para-margin:0cm;\r\nmso-para-margin-bottom:.0001pt;\r\nmso-pagination:widow-orphan;\r\nfont-size:10.0pt;\r\nfont-family:"Times New Roman";\r\nmso-fareast-font-family:"Times New Roman";\r\nmso-ansi-language:#0400;\r\nmso-fareast-language:#0400;\r\nmso-bidi-language:#0400;}\r\n</style>\r\n<![endif]--><span style="font-size: 10.5pt; font-family: 宋体;">国际乒联现在主席沙拉拉自从上任以来就立志于推行一系列改革，以推动乒乓球运动在全球的普及。其中&lt;span lang="EN-US">11</span>分制改革引起了很大的争议，有一部分球员因为无法适应新规则只能选择退役。华华就是其中一位，他退役之后走上了乒乓球研究工作，意图弄明白&lt;span lang="EN-US">11</span>分制和&lt;span lang="EN-US">21</span>分制对选手的不同影响。在开展他的研究之前，他首先需要对他多年比赛的统计数据进行一些分析，所以需要你的帮忙。&lt;/span></p>\r\n<p></p>\r\n<p><!--[if gte mso 9]><xml>\r\n<w:WordDocument>\r\n<w:View>Normal</w:View>\r\n<w:Zoom>0</w:Zoom>\r\n<w:PunctuationKerning />\r\n<w:DrawingGridVerticalSpacing>7.8 磅&lt;/w:DrawingGridVerticalSpacing>\r\n<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>\r\n<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>\r\n<w:ValidateAgainstSchemas />\r\n<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>\r\n<w:IgnoreMixedContent>false</w:IgnoreMixedContent>\r\n<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>\r\n<w:Compatibility>\r\n<w:SpaceForUL />\r\n<w:BalanceSingleByteDoubleByteWidth />\r\n<w:DoNotLeaveBackslashAlone />\r\n<w:ULTrailSpace />\r\n<w:DoNotExpandShiftReturn />\r\n<w:AdjustLineHeightInTable />\r\n<w:BreakWrappedTables />\r\n<w:SnapToGridInCell />\r\n<w:WrapTextWithPunct />\r\n<w:UseAsianBreakRules />\r\n<w:DontGrowAutofit />\r\n<w:UseFELayout />\r\n</w:Compatibility>\r\n<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>\r\n</w:WordDocument>\r\n</xml><![endif]--><!--[if gte mso 9]><xml>\r\n<w:LatentStyles DefLockedState="false" LatentStyleCount="156">\r\n</w:LatentStyles>\r\n</xml><![endif]--><!--[if gte mso 10]>\r\n<style>\r\n/* Style Definitions */\r\ntable.MsoNormalTable\r\n{mso-style-name:普通表格;\r\nmso-tstyle-rowband-size:0;\r\nmso-tstyle-colband-size:0;\r\nmso-style-noshow:yes;\r\nmso-style-parent:"";\r\nmso-padding-alt:0cm 5.4pt 0cm 5.4pt;\r\nmso-para-margin:0cm;\r\nmso-para-margin-bottom:.0001pt;\r\nmso-pagination:widow-orphan;\r\nfont-size:10.0pt;\r\nfont-family:"Times New Roman";\r\nmso-fareast-font-family:"Times New Roman";\r\nmso-ansi-language:#0400;\r\nmso-fareast-language:#0400;\r\nmso-bidi-language:#0400;}\r\n</style>\r\n<![endif]--></p>\r\n<p class="a">华华通过以下方式进行分析，首先将比赛每个球的胜负列成一张表，然后分别计算在<span lang="EN-US">11</span>分制和&lt;span lang="EN-US">21</span>分制下，双方的比赛结果（截至记录末尾）。&lt;/p>\r\n<p class="a">比如现在有这么一份记录，（其中&lt;span lang="EN-US">W</span>表示华华获得一分，<span lang="EN-US">L</span>表示华华对手获得一分）：&lt;/p>\r\n<p class="a"><span lang="EN-US">WWWWWWWWWWWWWWWWWWWWWWLW</span></p>\r\n<p class="a">在&lt;span lang="EN-US">11</span>分制下，此时比赛的结果是华华第一局<span lang="EN-US">11</span>比&lt;span lang="EN-US">0</span>获胜，第二局<span lang="EN-US">11</span>比&lt;span lang="EN-US">0</span>获胜，正在进行第三局，当前比分&lt;span lang="EN-US">1</span>比&lt;span lang="EN-US">1</span>。而在<span lang="EN-US">21</span>分制下，此时比赛结果是华华第一局<span lang="EN-US">21</span>比&lt;span lang="EN-US">0</span>获胜，正在进行第二局，比分&lt;span lang="EN-US">2</span>比&lt;span lang="EN-US">1</span>。如果一局比赛刚开始，则此时比分为<span lang="EN-US">0</span>比&lt;span lang="EN-US">0</span>。&lt;/p>\r\n<p class="a">你的程序就是要对于一系列比赛信息的输入（<span lang="EN-US">WL</span>形式），输出正确的结果。&lt;/p>\r\n<p class="a"><span lang="EN-US">&nbsp;</span></p>', '<p><!--[if gte mso 9]><xml>\r\n<w:WordDocument>\r\n<w:View>Normal</w:View>\r\n<w:Zoom>0</w:Zoom>\r\n<w:PunctuationKerning />\r\n<w:DrawingGridVerticalSpacing>7.8 磅&lt;/w:DrawingGridVerticalSpacing>\r\n<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>\r\n<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>\r\n<w:ValidateAgainstSchemas />\r\n<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>\r\n<w:IgnoreMixedContent>false</w:IgnoreMixedContent>\r\n<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>\r\n<w:Compatibility>\r\n<w:SpaceForUL />\r\n<w:BalanceSingleByteDoubleByteWidth />\r\n<w:DoNotLeaveBackslashAlone />\r\n<w:ULTrailSpace />\r\n<w:DoNotExpandShiftReturn />\r\n<w:AdjustLineHeightInTable />\r\n<w:BreakWrappedTables />\r\n<w:SnapToGridInCell />\r\n<w:WrapTextWithPunct />\r\n<w:UseAsianBreakRules />\r\n<w:DontGrowAutofit />\r\n<w:UseFELayout />\r\n</w:Compatibility>\r\n<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>\r\n</w:WordDocument>\r\n</xml><![endif]--><!--[if gte mso 9]><xml>\r\n<w:LatentStyles DefLockedState="false" LatentStyleCount="156">\r\n</w:LatentStyles>\r\n</xml><![endif]--><!--[if gte mso 10]>\r\n<style>\r\n/* Style Definitions */\r\ntable.MsoNormalTable\r\n{mso-style-name:普通表格;\r\nmso-tstyle-rowband-size:0;\r\nmso-tstyle-colband-size:0;\r\nmso-style-noshow:yes;\r\nmso-style-parent:"";\r\nmso-padding-alt:0cm 5.4pt 0cm 5.4pt;\r\nmso-para-margin:0cm;\r\nmso-para-margin-bottom:.0001pt;\r\nmso-pagination:widow-orphan;\r\nfont-size:10.0pt;\r\nfont-family:"Times New Roman";\r\nmso-fareast-font-family:"Times New Roman";\r\nmso-ansi-language:#0400;\r\nmso-fareast-language:#0400;\r\nmso-bidi-language:#0400;}\r\n</style>\r\n<![endif]--></p>\r\n<p class="a">每个输入文件包含若干行字符串（每行至多&lt;span lang="EN-US">20</span>个字母），字符串有大写的<span lang="EN-US">W</span>、&lt;span lang="EN-US">L</span>和&lt;span lang="EN-US">E</span>组成。其中&lt;span lang="EN-US">E</span>表示比赛信息结束，程序应该忽略&lt;span lang="EN-US">E</span>之后的所有内容。&lt;/p>\r\n<p class="a"><span lang="EN-US">&nbsp;</span></p>', '<p><!--[if gte mso 9]><xml>\r\n<w:WordDocument>\r\n<w:View>Normal</w:View>\r\n<w:Zoom>0</w:Zoom>\r\n<w:PunctuationKerning />\r\n<w:DrawingGridVerticalSpacing>7.8 磅&lt;/w:DrawingGridVerticalSpacing>\r\n<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>\r\n<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>\r\n<w:ValidateAgainstSchemas />\r\n<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>\r\n<w:IgnoreMixedContent>false</w:IgnoreMixedContent>\r\n<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>\r\n<w:Compatibility>\r\n<w:SpaceForUL />\r\n<w:BalanceSingleByteDoubleByteWidth />\r\n<w:DoNotLeaveBackslashAlone />\r\n<w:ULTrailSpace />\r\n<w:DoNotExpandShiftReturn />\r\n<w:AdjustLineHeightInTable />\r\n<w:BreakWrappedTables />\r\n<w:SnapToGridInCell />\r\n<w:WrapTextWithPunct />\r\n<w:UseAsianBreakRules />\r\n<w:DontGrowAutofit />\r\n<w:UseFELayout />\r\n</w:Compatibility>\r\n<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>\r\n</w:WordDocument>\r\n</xml><![endif]--><!--[if gte mso 9]><xml>\r\n<w:LatentStyles DefLockedState="false" LatentStyleCount="156">\r\n</w:LatentStyles>\r\n</xml><![endif]--><!--[if gte mso 10]>\r\n<style>\r\n/* Style Definitions */\r\ntable.MsoNormalTable\r\n{mso-style-name:普通表格;\r\nmso-tstyle-rowband-size:0;\r\nmso-tstyle-colband-size:0;\r\nmso-style-noshow:yes;\r\nmso-style-parent:"";\r\nmso-padding-alt:0cm 5.4pt 0cm 5.4pt;\r\nmso-para-margin:0cm;\r\nmso-para-margin-bottom:.0001pt;\r\nmso-pagination:widow-orphan;\r\nfont-size:10.0pt;\r\nfont-family:"Times New Roman";\r\nmso-fareast-font-family:"Times New Roman";\r\nmso-ansi-language:#0400;\r\nmso-fareast-language:#0400;\r\nmso-bidi-language:#0400;}\r\n</style>\r\n<![endif]--><span style="font-size: 10.5pt; font-family: 宋体;">输出由两部分组成，每部分有若干行，每一行对应一局比赛的比分（按比赛信息输入顺序）。其中第一部分是&lt;span lang="EN-US">11</span>分制下的结果，第二部分是<span lang="EN-US">21</span>分制下的结果，两部分之间由一个空行分隔。&lt;/span></p>', 'D:\\oj\\data\\1859', 'D:\\oj\\data\\1859', 'WWWWWWWWWWWWWWWWWWWW\r\nWWLWE', '11:0\r\n11:0\r\n1:1\r\n\r\n21:0\r\n2:1', '', 'NOIP2003', '', '2011-06-10 19:38:09', 1000, 131072, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 3, 'power721'),
(1860, '数字游戏', '<p><!--[if gte mso 9]><xml>\r\n<w:WordDocument>\r\n<w:View>Normal</w:View>\r\n<w:Zoom>0</w:Zoom>\r\n<w:PunctuationKerning />\r\n<w:DrawingGridVerticalSpacing>7.8 磅&lt;/w:DrawingGridVerticalSpacing>\r\n<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>\r\n<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>\r\n<w:ValidateAgainstSchemas />\r\n<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>\r\n<w:IgnoreMixedContent>false</w:IgnoreMixedContent>\r\n<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>\r\n<w:Compatibility>\r\n<w:SpaceForUL />\r\n<w:BalanceSingleByteDoubleByteWidth />\r\n<w:DoNotLeaveBackslashAlone />\r\n<w:ULTrailSpace />\r\n<w:DoNotExpandShiftReturn />\r\n<w:AdjustLineHeightInTable />\r\n<w:BreakWrappedTables />\r\n<w:SnapToGridInCell />\r\n<w:WrapTextWithPunct />\r\n<w:UseAsianBreakRules />\r\n<w:DontGrowAutofit />\r\n<w:UseFELayout />\r\n</w:Compatibility>\r\n<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>\r\n</w:WordDocument>\r\n</xml><![endif]--><!--[if gte mso 9]><xml>\r\n<w:LatentStyles DefLockedState="false" LatentStyleCount="156">\r\n</w:LatentStyles>\r\n</xml><![endif]--><!--[if gte mso 10]>\r\n<style>\r\n/* Style Definitions */\r\ntable.MsoNormalTable\r\n{mso-style-name:普通表格;\r\nmso-tstyle-rowband-size:0;\r\nmso-tstyle-colband-size:0;\r\nmso-style-noshow:yes;\r\nmso-style-parent:"";\r\nmso-padding-alt:0cm 5.4pt 0cm 5.4pt;\r\nmso-para-margin:0cm;\r\nmso-para-margin-bottom:.0001pt;\r\nmso-pagination:widow-orphan;\r\nfont-size:10.0pt;\r\nfont-family:"Times New Roman";\r\nmso-fareast-font-family:"Times New Roman";\r\nmso-ansi-language:#0400;\r\nmso-fareast-language:#0400;\r\nmso-bidi-language:#0400;}\r\n</style>\r\n<![endif]--></p>\r\n<p class="a">丁丁最近沉迷于一个数字游戏之中。这个游戏看似简单，但丁丁在研究了许多天之后却发觉原来在简单的规则下想要赢得这个游戏并不那么容易。游戏是这样的，在你面前有一圈整数（一共&lt;span lang="EN-US">n</span>个），你要按顺序将其分为<span lang="EN-US">m</span>个部分，各部分内的数字相加，相加所得的<span lang="EN-US">m</span>个结果对<span lang="EN-US">10</span>取模后再相乘，最终得到一个数<span lang="EN-US">k</span>。游戏的要求是使你所得的<span lang="EN-US">k</span>最大或者最小。&lt;/p>\r\n<p class="a">例如，对于下面这圈数字（<span lang="EN-US">n=4</span>，&lt;span lang="EN-US">m=2</span>）：</p>\r\n<p class="a"><img width="232" height="200" src="images/problem/pic1860_0" alt="" /></p>\r\n<p class="a"><!--[if gte mso 9]><xml>\r\n<w:WordDocument>\r\n<w:View>Normal</w:View>\r\n<w:Zoom>0</w:Zoom>\r\n<w:PunctuationKerning />\r\n<w:DrawingGridVerticalSpacing>7.8 磅&lt;/w:DrawingGridVerticalSpacing>\r\n<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>\r\n<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>\r\n<w:ValidateAgainstSchemas />\r\n<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>\r\n<w:IgnoreMixedContent>false</w:IgnoreMixedContent>\r\n<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>\r\n<w:Compatibility>\r\n<w:SpaceForUL />\r\n<w:BalanceSingleByteDoubleByteWidth />\r\n<w:DoNotLeaveBackslashAlone />\r\n<w:ULTrailSpace />\r\n<w:DoNotExpandShiftReturn />\r\n<w:AdjustLineHeightInTable />\r\n<w:BreakWrappedTables />\r\n<w:SnapToGridInCell />\r\n<w:WrapTextWithPunct />\r\n<w:UseAsianBreakRules />\r\n<w:DontGrowAutofit />\r\n<w:UseFELayout />\r\n</w:Compatibility>\r\n<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>\r\n</w:WordDocument>\r\n</xml><![endif]--><!--[if gte mso 9]><xml>\r\n<w:LatentStyles DefLockedState="false" LatentStyleCount="156">\r\n</w:LatentStyles>\r\n</xml><![endif]--><!--[if gte mso 10]>\r\n<style>\r\n/* Style Definitions */\r\ntable.MsoNormalTable\r\n{mso-style-name:普通表格;\r\nmso-tstyle-rowband-size:0;\r\nmso-tstyle-colband-size:0;\r\nmso-style-noshow:yes;\r\nmso-style-parent:"";\r\nmso-padding-alt:0cm 5.4pt 0cm 5.4pt;\r\nmso-para-margin:0cm;\r\nmso-para-margin-bottom:.0001pt;\r\nmso-pagination:widow-orphan;\r\nfont-size:10.0pt;\r\nfont-family:"Times New Roman";\r\nmso-fareast-font-family:"Times New Roman";\r\nmso-ansi-language:#0400;\r\nmso-fareast-language:#0400;\r\nmso-bidi-language:#0400;}\r\n</style>\r\n<![endif]--></p>\r\n<p class="a">当要求最小值时，&lt;span lang="EN-US">((2-1) mod 10)</span>&times;<span lang="EN-US">((4+3) mod 10)=1</span>&times;<span lang="EN-US">7=7</span>，要求最大值时，为<span lang="EN-US">((2+4+3) mod 10)</span>&times;<span lang="EN-US">(-1 mod 10)=9</span>&times;<span lang="EN-US">9=81</span>。特别值得注意的是，无论是负数还是正数，对<span lang="EN-US">10</span>取模的结果均为非负值。&lt;/p>\r\n<span style="font-size: 10.5pt; font-family: 宋体;">丁丁请你编写程序帮他赢得这个游戏</span>', '<p><!--[if gte mso 9]><xml>\r\n<w:WordDocument>\r\n<w:View>Normal</w:View>\r\n<w:Zoom>0</w:Zoom>\r\n<w:PunctuationKerning />\r\n<w:DrawingGridVerticalSpacing>7.8 磅&lt;/w:DrawingGridVerticalSpacing>\r\n<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>\r\n<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>\r\n<w:ValidateAgainstSchemas />\r\n<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>\r\n<w:IgnoreMixedContent>false</w:IgnoreMixedContent>\r\n<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>\r\n<w:Compatibility>\r\n<w:SpaceForUL />\r\n<w:BalanceSingleByteDoubleByteWidth />\r\n<w:DoNotLeaveBackslashAlone />\r\n<w:ULTrailSpace />\r\n<w:DoNotExpandShiftReturn />\r\n<w:AdjustLineHeightInTable />\r\n<w:BreakWrappedTables />\r\n<w:SnapToGridInCell />\r\n<w:WrapTextWithPunct />\r\n<w:UseAsianBreakRules />\r\n<w:DontGrowAutofit />\r\n<w:UseFELayout />\r\n</w:Compatibility>\r\n<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>\r\n</w:WordDocument>\r\n</xml><![endif]--><!--[if gte mso 9]><xml>\r\n<w:LatentStyles DefLockedState="false" LatentStyleCount="156">\r\n</w:LatentStyles>\r\n</xml><![endif]--><!--[if gte mso 10]>\r\n<style>\r\n/* Style Definitions */\r\ntable.MsoNormalTable\r\n{mso-style-name:普通表格;\r\nmso-tstyle-rowband-size:0;\r\nmso-tstyle-colband-size:0;\r\nmso-style-noshow:yes;\r\nmso-style-parent:"";\r\nmso-padding-alt:0cm 5.4pt 0cm 5.4pt;\r\nmso-para-margin:0cm;\r\nmso-para-margin-bottom:.0001pt;\r\nmso-pagination:widow-orphan;\r\nfont-size:10.0pt;\r\nfont-family:"Times New Roman";\r\nmso-fareast-font-family:"Times New Roman";\r\nmso-ansi-language:#0400;\r\nmso-fareast-language:#0400;\r\nmso-bidi-language:#0400;}\r\n</style>\r\n<![endif]--></p>\r\n<p class="a">输入文件第一行有两个整数，&lt;span lang="EN-US">n</span>（&lt;span lang="EN-US">1</span>&le;<span lang="EN-US">n</span>&le;<span lang="EN-US">50</span>）和<span lang="EN-US">m</span>（&lt;span lang="EN-US">1</span>&le;<span lang="EN-US">m</span>&le;<span lang="EN-US">9</span>）。以下&lt;span lang="EN-US">n</span>行每行有个整数，其绝对值不大于<span lang="EN-US">10<sup>4</sup></span>，按顺序给出圈中的数字，首尾相接。&lt;/p>', '<p><!--[if gte mso 9]><xml>\r\n<w:WordDocument>\r\n<w:View>Normal</w:View>\r\n<w:Zoom>0</w:Zoom>\r\n<w:PunctuationKerning />\r\n<w:DrawingGridVerticalSpacing>7.8 磅&lt;/w:DrawingGridVerticalSpacing>\r\n<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>\r\n<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>\r\n<w:ValidateAgainstSchemas />\r\n<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>\r\n<w:IgnoreMixedContent>false</w:IgnoreMixedContent>\r\n<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>\r\n<w:Compatibility>\r\n<w:SpaceForUL />\r\n<w:BalanceSingleByteDoubleByteWidth />\r\n<w:DoNotLeaveBackslashAlone />\r\n<w:ULTrailSpace />\r\n<w:DoNotExpandShiftReturn />\r\n<w:AdjustLineHeightInTable />\r\n<w:BreakWrappedTables />\r\n<w:SnapToGridInCell />\r\n<w:WrapTextWithPunct />\r\n<w:UseAsianBreakRules />\r\n<w:DontGrowAutofit />\r\n<w:UseFELayout />\r\n</w:Compatibility>\r\n<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>\r\n</w:WordDocument>\r\n</xml><![endif]--><!--[if gte mso 9]><xml>\r\n<w:LatentStyles DefLockedState="false" LatentStyleCount="156">\r\n</w:LatentStyles>\r\n</xml><![endif]--><!--[if gte mso 10]>\r\n<style>\r\n/* Style Definitions */\r\ntable.MsoNormalTable\r\n{mso-style-name:普通表格;\r\nmso-tstyle-rowband-size:0;\r\nmso-tstyle-colband-size:0;\r\nmso-style-noshow:yes;\r\nmso-style-parent:"";\r\nmso-padding-alt:0cm 5.4pt 0cm 5.4pt;\r\nmso-para-margin:0cm;\r\nmso-para-margin-bottom:.0001pt;\r\nmso-pagination:widow-orphan;\r\nfont-size:10.0pt;\r\nfont-family:"Times New Roman";\r\nmso-fareast-font-family:"Times New Roman";\r\nmso-ansi-language:#0400;\r\nmso-fareast-language:#0400;\r\nmso-bidi-language:#0400;}\r\n</style>\r\n<![endif]--><span style="font-size: 10.5pt; font-family: 宋体;">输出文件有两行，各包含一个非负整数。第一行是你程序得到的最小值，第二行是最大值。&lt;/span></p>', 'D:\\oj\\data\\1860', 'D:\\oj\\data\\1860', '4 2\r\n4\r\n3\r\n-1\r\n2', '7\r\n81', '', 'NOIP2003', '', '2011-06-10 19:38:09', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 43, 'power721');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1861, '栈', '<p><!--[if gte mso 9]><xml>\r\n<w:WordDocument>\r\n<w:View>Normal</w:View>\r\n<w:Zoom>0</w:Zoom>\r\n<w:PunctuationKerning />\r\n<w:DrawingGridVerticalSpacing>7.8 磅&lt;/w:DrawingGridVerticalSpacing>\r\n<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>\r\n<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>\r\n<w:ValidateAgainstSchemas />\r\n<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>\r\n<w:IgnoreMixedContent>false</w:IgnoreMixedContent>\r\n<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>\r\n<w:Compatibility>\r\n<w:SpaceForUL />\r\n<w:BalanceSingleByteDoubleByteWidth />\r\n<w:DoNotLeaveBackslashAlone />\r\n<w:ULTrailSpace />\r\n<w:DoNotExpandShiftReturn />\r\n<w:AdjustLineHeightInTable />\r\n<w:BreakWrappedTables />\r\n<w:SnapToGridInCell />\r\n<w:WrapTextWithPunct />\r\n<w:UseAsianBreakRules />\r\n<w:DontGrowAutofit />\r\n<w:UseFELayout />\r\n</w:Compatibility>\r\n<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>\r\n</w:WordDocument>\r\n</xml><![endif]--><!--[if gte mso 9]><xml>\r\n<w:LatentStyles DefLockedState="false" LatentStyleCount="156">\r\n</w:LatentStyles>\r\n</xml><![endif]--><!--[if gte mso 10]>\r\n<style>\r\n/* Style Definitions */\r\ntable.MsoNormalTable\r\n{mso-style-name:普通表格;\r\nmso-tstyle-rowband-size:0;\r\nmso-tstyle-colband-size:0;\r\nmso-style-noshow:yes;\r\nmso-style-parent:"";\r\nmso-padding-alt:0cm 5.4pt 0cm 5.4pt;\r\nmso-para-margin:0cm;\r\nmso-para-margin-bottom:.0001pt;\r\nmso-pagination:widow-orphan;\r\nfont-size:10.0pt;\r\nfont-family:"Times New Roman";\r\nmso-fareast-font-family:"Times New Roman";\r\nmso-ansi-language:#0400;\r\nmso-fareast-language:#0400;\r\nmso-bidi-language:#0400;}\r\n</style>\r\n<![endif]--></p>\r\n<p class="a">栈是计算机中经典的数据结构，简单的说，栈就是限制在一端进行插入删除操作的线性表。&lt;/p>\r\n<p class="a">栈有两种最重要的操作，即&lt;span lang="EN-US">pop</span>（从栈顶弹出一个元素）和&lt;span lang="EN-US">push</span>（将一个元素进栈）。&lt;/p>\r\n<p><span style="font-size: 10.5pt; font-family: 宋体;">栈的重要性不言自明，任何一门数据结构的课程都会介绍栈。宁宁同学在复习栈的基本概念时，想到了一个书上没有讲过的问题，而他自己无法给出答案，所以需要你的帮忙。&lt;/span></p>\r\n<p><img width="569" height="287" src="images/problem/pic1861_0" alt="" /></p>\r\n<p></p>\r\n<p><!--[if gte mso 9]><xml>\r\n<w:WordDocument>\r\n<w:View>Normal</w:View>\r\n<w:Zoom>0</w:Zoom>\r\n<w:PunctuationKerning />\r\n<w:DrawingGridVerticalSpacing>7.8 磅&lt;/w:DrawingGridVerticalSpacing>\r\n<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>\r\n<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>\r\n<w:ValidateAgainstSchemas />\r\n<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>\r\n<w:IgnoreMixedContent>false</w:IgnoreMixedContent>\r\n<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>\r\n<w:Compatibility>\r\n<w:SpaceForUL />\r\n<w:BalanceSingleByteDoubleByteWidth />\r\n<w:DoNotLeaveBackslashAlone />\r\n<w:ULTrailSpace />\r\n<w:DoNotExpandShiftReturn />\r\n<w:AdjustLineHeightInTable />\r\n<w:BreakWrappedTables />\r\n<w:SnapToGridInCell />\r\n<w:WrapTextWithPunct />\r\n<w:UseAsianBreakRules />\r\n<w:DontGrowAutofit />\r\n<w:UseFELayout />\r\n</w:Compatibility>\r\n<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>\r\n</w:WordDocument>\r\n</xml><![endif]--><!--[if gte mso 9]><xml>\r\n<w:LatentStyles DefLockedState="false" LatentStyleCount="156">\r\n</w:LatentStyles>\r\n</xml><![endif]--><!--[if gte mso 10]>\r\n<style>\r\n/* Style Definitions */\r\ntable.MsoNormalTable\r\n{mso-style-name:普通表格;\r\nmso-tstyle-rowband-size:0;\r\nmso-tstyle-colband-size:0;\r\nmso-style-noshow:yes;\r\nmso-style-parent:"";\r\nmso-padding-alt:0cm 5.4pt 0cm 5.4pt;\r\nmso-para-margin:0cm;\r\nmso-para-margin-bottom:.0001pt;\r\nmso-pagination:widow-orphan;\r\nfont-size:10.0pt;\r\nfont-family:"Times New Roman";\r\nmso-fareast-font-family:"Times New Roman";\r\nmso-ansi-language:#0400;\r\nmso-fareast-language:#0400;\r\nmso-bidi-language:#0400;}\r\n</style>\r\n<![endif]--></p>\r\n<p class="a">宁宁考虑的是这样一个问题：一个操作数序列，从<span lang="EN-US">1</span>，&lt;span lang="EN-US">2</span>，一直到<span lang="EN-US">n</span>（图示为<span lang="EN-US">1</span>到&lt;span lang="EN-US">3</span>的情况），栈<span lang="EN-US">A</span>的深度大于&lt;span lang="EN-US">n</span>。&lt;/p>\r\n<p><!--[if gte mso 9]><xml>\r\n<w:WordDocument>\r\n<w:View>Normal</w:View>\r\n<w:Zoom>0</w:Zoom>\r\n<w:PunctuationKerning />\r\n<w:DrawingGridVerticalSpacing>7.8 磅&lt;/w:DrawingGridVerticalSpacing>\r\n<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>\r\n<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>\r\n<w:ValidateAgainstSchemas />\r\n<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>\r\n<w:IgnoreMixedContent>false</w:IgnoreMixedContent>\r\n<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>\r\n<w:Compatibility>\r\n<w:SpaceForUL />\r\n<w:BalanceSingleByteDoubleByteWidth />\r\n<w:DoNotLeaveBackslashAlone />\r\n<w:ULTrailSpace />\r\n<w:DoNotExpandShiftReturn />\r\n<w:AdjustLineHeightInTable />\r\n<w:BreakWrappedTables />\r\n<w:SnapToGridInCell />\r\n<w:WrapTextWithPunct />\r\n<w:UseAsianBreakRules />\r\n<w:DontGrowAutofit />\r\n<w:UseFELayout />\r\n</w:Compatibility>\r\n<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>\r\n</w:WordDocument>\r\n</xml><![endif]--><!--[if gte mso 9]><xml>\r\n<w:LatentStyles DefLockedState="false" LatentStyleCount="156">\r\n</w:LatentStyles>\r\n</xml><![endif]--><!--[if gte mso 10]>\r\n<style>\r\n/* Style Definitions */\r\ntable.MsoNormalTable\r\n{mso-style-name:普通表格;\r\nmso-tstyle-rowband-size:0;\r\nmso-tstyle-colband-size:0;\r\nmso-style-noshow:yes;\r\nmso-style-parent:"";\r\nmso-padding-alt:0cm 5.4pt 0cm 5.4pt;\r\nmso-para-margin:0cm;\r\nmso-para-margin-bottom:.0001pt;\r\nmso-pagination:widow-orphan;\r\nfont-size:10.0pt;\r\nfont-family:"Times New Roman";\r\nmso-fareast-font-family:"Times New Roman";\r\nmso-ansi-language:#0400;\r\nmso-fareast-language:#0400;\r\nmso-bidi-language:#0400;}\r\n</style>\r\n<![endif]--></p>\r\n<p class="a">现在可以进行两种操作，&lt;/p>\r\n<p class="a"><span lang="EN-US">1.</span>将一个数，从操作数序列的头端移到栈的头端（对应数据结构栈的&lt;span lang="EN-US">push</span>操作）&lt;/p>\r\n<span lang="EN-US" style="font-size: 10.5pt; font-family: 宋体;">2. </span><span style="font-size: 10.5pt; font-family: 宋体;">将一个数，从栈的头端移到输出序列的尾端（对应数据结构栈的<span lang="EN-US">pop</span>操作）&lt;/span>\r\n<p><!--[if gte mso 9]><xml>\r\n<w:WordDocument>\r\n<w:View>Normal</w:View>\r\n<w:Zoom>0</w:Zoom>\r\n<w:PunctuationKerning />\r\n<w:DrawingGridVerticalSpacing>7.8 磅&lt;/w:DrawingGridVerticalSpacing>\r\n<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>\r\n<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>\r\n<w:ValidateAgainstSchemas />\r\n<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>\r\n<w:IgnoreMixedContent>false</w:IgnoreMixedContent>\r\n<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>\r\n<w:Compatibility>\r\n<w:SpaceForUL />\r\n<w:BalanceSingleByteDoubleByteWidth />\r\n<w:DoNotLeaveBackslashAlone />\r\n<w:ULTrailSpace />\r\n<w:DoNotExpandShiftReturn />\r\n<w:AdjustLineHeightInTable />\r\n<w:BreakWrappedTables />\r\n<w:SnapToGridInCell />\r\n<w:WrapTextWithPunct />\r\n<w:UseAsianBreakRules />\r\n<w:DontGrowAutofit />\r\n<w:UseFELayout />\r\n</w:Compatibility>\r\n<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>\r\n</w:WordDocument>\r\n</xml><![endif]--><!--[if gte mso 9]><xml>\r\n<w:LatentStyles DefLockedState="false" LatentStyleCount="156">\r\n</w:LatentStyles>\r\n</xml><![endif]--><!--[if gte mso 10]>\r\n<style>\r\n/* Style Definitions */\r\ntable.MsoNormalTable\r\n{mso-style-name:普通表格;\r\nmso-tstyle-rowband-size:0;\r\nmso-tstyle-colband-size:0;\r\nmso-style-noshow:yes;\r\nmso-style-parent:"";\r\nmso-padding-alt:0cm 5.4pt 0cm 5.4pt;\r\nmso-para-margin:0cm;\r\nmso-para-margin-bottom:.0001pt;\r\nmso-pagination:widow-orphan;\r\nfont-size:10.0pt;\r\nfont-family:"Times New Roman";\r\nmso-fareast-font-family:"Times New Roman";\r\nmso-ansi-language:#0400;\r\nmso-fareast-language:#0400;\r\nmso-bidi-language:#0400;}\r\n</style>\r\n<![endif]--><span style="font-size: 10.5pt; font-family: 宋体;">使用这两种操作，由一个操作数序列就可以得到一系列的输出序列，下图所示为由&lt;span lang="EN-US">1 2 3</span>生成序列<span lang="EN-US">2 3 1</span>的过程。（原始状态如上图所示)</span></p>\r\n<p><img width="697" height="226" src="images/problem/pic1861_1" alt="" /></p>\r\n<p><!--[if gte mso 9]><xml>\r\n<w:WordDocument>\r\n<w:View>Normal</w:View>\r\n<w:Zoom>0</w:Zoom>\r\n<w:PunctuationKerning />\r\n<w:DrawingGridVerticalSpacing>7.8 磅&lt;/w:DrawingGridVerticalSpacing>\r\n<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>\r\n<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>\r\n<w:ValidateAgainstSchemas />\r\n<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>\r\n<w:IgnoreMixedContent>false</w:IgnoreMixedContent>\r\n<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>\r\n<w:Compatibility>\r\n<w:SpaceForUL />\r\n<w:BalanceSingleByteDoubleByteWidth />\r\n<w:DoNotLeaveBackslashAlone />\r\n<w:ULTrailSpace />\r\n<w:DoNotExpandShiftReturn />\r\n<w:AdjustLineHeightInTable />\r\n<w:BreakWrappedTables />\r\n<w:SnapToGridInCell />\r\n<w:WrapTextWithPunct />\r\n<w:UseAsianBreakRules />\r\n<w:DontGrowAutofit />\r\n<w:UseFELayout />\r\n</w:Compatibility>\r\n<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>\r\n</w:WordDocument>\r\n</xml><![endif]--><!--[if gte mso 9]><xml>\r\n<w:LatentStyles DefLockedState="false" LatentStyleCount="156">\r\n</w:LatentStyles>\r\n</xml><![endif]--><!--[if gte mso 10]>\r\n<style>\r\n/* Style Definitions */\r\ntable.MsoNormalTable\r\n{mso-style-name:普通表格;\r\nmso-tstyle-rowband-size:0;\r\nmso-tstyle-colband-size:0;\r\nmso-style-noshow:yes;\r\nmso-style-parent:"";\r\nmso-padding-alt:0cm 5.4pt 0cm 5.4pt;\r\nmso-para-margin:0cm;\r\nmso-para-margin-bottom:.0001pt;\r\nmso-pagination:widow-orphan;\r\nfont-size:10.0pt;\r\nfont-family:"Times New Roman";\r\nmso-fareast-font-family:"Times New Roman";\r\nmso-ansi-language:#0400;\r\nmso-fareast-language:#0400;\r\nmso-bidi-language:#0400;}\r\n</style>\r\n<![endif]--></p>\r\n<p class="a">你的程序将对给定的&lt;span lang="EN-US">n</span>，计算并输出由操作数序列<span lang="EN-US">1</span>，&lt;span lang="EN-US">2</span>，&lt;span lang="EN-US">&hellip;</span>，&lt;span lang="EN-US">n</span>经过操作可能得到的输出序列的总数。&lt;/p>\r\n<p></p>', '<p><!--[if gte mso 9]><xml>\r\n<w:WordDocument>\r\n<w:View>Normal</w:View>\r\n<w:Zoom>0</w:Zoom>\r\n<w:PunctuationKerning />\r\n<w:DrawingGridVerticalSpacing>7.8 磅&lt;/w:DrawingGridVerticalSpacing>\r\n<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>\r\n<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>\r\n<w:ValidateAgainstSchemas />\r\n<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>\r\n<w:IgnoreMixedContent>false</w:IgnoreMixedContent>\r\n<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>\r\n<w:Compatibility>\r\n<w:SpaceForUL />\r\n<w:BalanceSingleByteDoubleByteWidth />\r\n<w:DoNotLeaveBackslashAlone />\r\n<w:ULTrailSpace />\r\n<w:DoNotExpandShiftReturn />\r\n<w:AdjustLineHeightInTable />\r\n<w:BreakWrappedTables />\r\n<w:SnapToGridInCell />\r\n<w:WrapTextWithPunct />\r\n<w:UseAsianBreakRules />\r\n<w:DontGrowAutofit />\r\n<w:UseFELayout />\r\n</w:Compatibility>\r\n<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>\r\n</w:WordDocument>\r\n</xml><![endif]--><!--[if gte mso 9]><xml>\r\n<w:LatentStyles DefLockedState="false" LatentStyleCount="156">\r\n</w:LatentStyles>\r\n</xml><![endif]--><!--[if gte mso 10]>\r\n<style>\r\n/* Style Definitions */\r\ntable.MsoNormalTable\r\n{mso-style-name:普通表格;\r\nmso-tstyle-rowband-size:0;\r\nmso-tstyle-colband-size:0;\r\nmso-style-noshow:yes;\r\nmso-style-parent:"";\r\nmso-padding-alt:0cm 5.4pt 0cm 5.4pt;\r\nmso-para-margin:0cm;\r\nmso-para-margin-bottom:.0001pt;\r\nmso-pagination:widow-orphan;\r\nfont-size:10.0pt;\r\nfont-family:"Times New Roman";\r\nmso-fareast-font-family:"Times New Roman";\r\nmso-ansi-language:#0400;\r\nmso-fareast-language:#0400;\r\nmso-bidi-language:#0400;}\r\n</style>\r\n<![endif]--></p>\r\n<p class="a">输入文件只含一个整数&lt;span lang="EN-US">n</span>（&lt;span lang="EN-US">1</span>&le;<span lang="EN-US">n</span>&le;<span lang="EN-US">18</span>）&lt;/p>', '<p><!--[if gte mso 9]><xml>\r\n<w:WordDocument>\r\n<w:View>Normal</w:View>\r\n<w:Zoom>0</w:Zoom>\r\n<w:PunctuationKerning />\r\n<w:DrawingGridVerticalSpacing>7.8 磅&lt;/w:DrawingGridVerticalSpacing>\r\n<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>\r\n<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>\r\n<w:ValidateAgainstSchemas />\r\n<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>\r\n<w:IgnoreMixedContent>false</w:IgnoreMixedContent>\r\n<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>\r\n<w:Compatibility>\r\n<w:SpaceForUL />\r\n<w:BalanceSingleByteDoubleByteWidth />\r\n<w:DoNotLeaveBackslashAlone />\r\n<w:ULTrailSpace />\r\n<w:DoNotExpandShiftReturn />\r\n<w:AdjustLineHeightInTable />\r\n<w:BreakWrappedTables />\r\n<w:SnapToGridInCell />\r\n<w:WrapTextWithPunct />\r\n<w:UseAsianBreakRules />\r\n<w:DontGrowAutofit />\r\n<w:UseFELayout />\r\n</w:Compatibility>\r\n<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>\r\n</w:WordDocument>\r\n</xml><![endif]--><!--[if gte mso 9]><xml>\r\n<w:LatentStyles DefLockedState="false" LatentStyleCount="156">\r\n</w:LatentStyles>\r\n</xml><![endif]--><!--[if gte mso 10]>\r\n<style>\r\n/* Style Definitions */\r\ntable.MsoNormalTable\r\n{mso-style-name:普通表格;\r\nmso-tstyle-rowband-size:0;\r\nmso-tstyle-colband-size:0;\r\nmso-style-noshow:yes;\r\nmso-style-parent:"";\r\nmso-padding-alt:0cm 5.4pt 0cm 5.4pt;\r\nmso-para-margin:0cm;\r\nmso-para-margin-bottom:.0001pt;\r\nmso-pagination:widow-orphan;\r\nfont-size:10.0pt;\r\nfont-family:"Times New Roman";\r\nmso-fareast-font-family:"Times New Roman";\r\nmso-ansi-language:#0400;\r\nmso-fareast-language:#0400;\r\nmso-bidi-language:#0400;}\r\n</style>\r\n<![endif]--></p>\r\n<p class="a">输出文件只有一行，即可能输出序列的总数目&lt;/p>', 'D:\\oj\\data\\1861', 'D:\\oj\\data\\1861', '3', '5', '', 'NOIP2003', '', '2011-06-10 19:38:09', 1000, 131072, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 6, 'power721'),
(1862, '麦森数', '<p><!--[if gte mso 9]><xml>\r\n<w:WordDocument>\r\n<w:View>Normal</w:View>\r\n<w:Zoom>0</w:Zoom>\r\n<w:PunctuationKerning />\r\n<w:DrawingGridVerticalSpacing>7.8 磅&lt;/w:DrawingGridVerticalSpacing>\r\n<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>\r\n<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>\r\n<w:ValidateAgainstSchemas />\r\n<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>\r\n<w:IgnoreMixedContent>false</w:IgnoreMixedContent>\r\n<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>\r\n<w:Compatibility>\r\n<w:SpaceForUL />\r\n<w:BalanceSingleByteDoubleByteWidth />\r\n<w:DoNotLeaveBackslashAlone />\r\n<w:ULTrailSpace />\r\n<w:DoNotExpandShiftReturn />\r\n<w:AdjustLineHeightInTable />\r\n<w:BreakWrappedTables />\r\n<w:SnapToGridInCell />\r\n<w:WrapTextWithPunct />\r\n<w:UseAsianBreakRules />\r\n<w:DontGrowAutofit />\r\n<w:UseFELayout />\r\n</w:Compatibility>\r\n<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>\r\n</w:WordDocument>\r\n</xml><![endif]--><!--[if gte mso 9]><xml>\r\n<w:LatentStyles DefLockedState="false" LatentStyleCount="156">\r\n</w:LatentStyles>\r\n</xml><![endif]--><!--[if gte mso 10]>\r\n<style>\r\n/* Style Definitions */\r\ntable.MsoNormalTable\r\n{mso-style-name:普通表格;\r\nmso-tstyle-rowband-size:0;\r\nmso-tstyle-colband-size:0;\r\nmso-style-noshow:yes;\r\nmso-style-parent:"";\r\nmso-padding-alt:0cm 5.4pt 0cm 5.4pt;\r\nmso-para-margin:0cm;\r\nmso-para-margin-bottom:.0001pt;\r\nmso-pagination:widow-orphan;\r\nfont-size:10.0pt;\r\nfont-family:"Times New Roman";\r\nmso-fareast-font-family:"Times New Roman";\r\nmso-ansi-language:#0400;\r\nmso-fareast-language:#0400;\r\nmso-bidi-language:#0400;}\r\n</style>\r\n<![endif]--></p>\r\n<p class="a">形如<span lang="EN-US">2<i style=""><sup>P</sup></i>-1</span>的素数称为麦森数，这时&lt;span lang="EN-US">P</span>一定也是个素数。但反过来不一定，即如果&lt;span lang="EN-US">P</span>是个素数，&lt;span lang="EN-US">2<i style=""><sup>P</sup></i>-1</span>不一定也是素数。到<span lang="EN-US">1998</span>年底，人们已找到了&lt;span lang="EN-US">37</span>个麦森数。最大的一个是<span lang="EN-US">P=3021377</span>，它有&lt;span lang="EN-US">909526</span>位。麦森数有许多重要应用，它与完全数密切相关。&lt;/p>\r\n<span style="font-size: 10.5pt; font-family: 宋体;">任务：从文件中输入&lt;span lang="EN-US">P</span>（&lt;span lang="EN-US">1000&lt;P&lt;3100000</span>），计算<span lang="EN-US">2<i style=""><sup>P</sup></i>-1</span>的位数和最后&lt;span lang="EN-US">500</span>位数字（用十进制高精度数表示）&lt;/span>', '<p><!--[if gte mso 9]><xml>\r\n<w:WordDocument>\r\n<w:View>Normal</w:View>\r\n<w:Zoom>0</w:Zoom>\r\n<w:PunctuationKerning />\r\n<w:DrawingGridVerticalSpacing>7.8 磅&lt;/w:DrawingGridVerticalSpacing>\r\n<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>\r\n<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>\r\n<w:ValidateAgainstSchemas />\r\n<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>\r\n<w:IgnoreMixedContent>false</w:IgnoreMixedContent>\r\n<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>\r\n<w:Compatibility>\r\n<w:SpaceForUL />\r\n<w:BalanceSingleByteDoubleByteWidth />\r\n<w:DoNotLeaveBackslashAlone />\r\n<w:ULTrailSpace />\r\n<w:DoNotExpandShiftReturn />\r\n<w:AdjustLineHeightInTable />\r\n<w:BreakWrappedTables />\r\n<w:SnapToGridInCell />\r\n<w:WrapTextWithPunct />\r\n<w:UseAsianBreakRules />\r\n<w:DontGrowAutofit />\r\n<w:UseFELayout />\r\n</w:Compatibility>\r\n<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>\r\n</w:WordDocument>\r\n</xml><![endif]--><!--[if gte mso 9]><xml>\r\n<w:LatentStyles DefLockedState="false" LatentStyleCount="156">\r\n</w:LatentStyles>\r\n</xml><![endif]--><!--[if gte mso 10]>\r\n<style>\r\n/* Style Definitions */\r\ntable.MsoNormalTable\r\n{mso-style-name:普通表格;\r\nmso-tstyle-rowband-size:0;\r\nmso-tstyle-colband-size:0;\r\nmso-style-noshow:yes;\r\nmso-style-parent:"";\r\nmso-padding-alt:0cm 5.4pt 0cm 5.4pt;\r\nmso-para-margin:0cm;\r\nmso-para-margin-bottom:.0001pt;\r\nmso-pagination:widow-orphan;\r\nfont-size:10.0pt;\r\nfont-family:"Times New Roman";\r\nmso-fareast-font-family:"Times New Roman";\r\nmso-ansi-language:#0400;\r\nmso-fareast-language:#0400;\r\nmso-bidi-language:#0400;}\r\n</style>\r\n<![endif]--></p>\r\n<p class="a">文件中只包含一个整数&lt;span lang="EN-US">P</span>（&lt;span lang="EN-US">1000&lt;P&lt;3100000</span>）&lt;/p>', '<p><!--[if gte mso 9]><xml>\r\n<w:WordDocument>\r\n<w:View>Normal</w:View>\r\n<w:Zoom>0</w:Zoom>\r\n<w:PunctuationKerning />\r\n<w:DrawingGridVerticalSpacing>7.8 磅&lt;/w:DrawingGridVerticalSpacing>\r\n<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>\r\n<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>\r\n<w:ValidateAgainstSchemas />\r\n<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>\r\n<w:IgnoreMixedContent>false</w:IgnoreMixedContent>\r\n<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>\r\n<w:Compatibility>\r\n<w:SpaceForUL />\r\n<w:BalanceSingleByteDoubleByteWidth />\r\n<w:DoNotLeaveBackslashAlone />\r\n<w:ULTrailSpace />\r\n<w:DoNotExpandShiftReturn />\r\n<w:AdjustLineHeightInTable />\r\n<w:BreakWrappedTables />\r\n<w:SnapToGridInCell />\r\n<w:WrapTextWithPunct />\r\n<w:UseAsianBreakRules />\r\n<w:DontGrowAutofit />\r\n<w:UseFELayout />\r\n</w:Compatibility>\r\n<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>\r\n</w:WordDocument>\r\n</xml><![endif]--><!--[if gte mso 9]><xml>\r\n<w:LatentStyles DefLockedState="false" LatentStyleCount="156">\r\n</w:LatentStyles>\r\n</xml><![endif]--><!--[if gte mso 10]>\r\n<style>\r\n/* Style Definitions */\r\ntable.MsoNormalTable\r\n{mso-style-name:普通表格;\r\nmso-tstyle-rowband-size:0;\r\nmso-tstyle-colband-size:0;\r\nmso-style-noshow:yes;\r\nmso-style-parent:"";\r\nmso-padding-alt:0cm 5.4pt 0cm 5.4pt;\r\nmso-para-margin:0cm;\r\nmso-para-margin-bottom:.0001pt;\r\nmso-pagination:widow-orphan;\r\nfont-size:10.0pt;\r\nfont-family:"Times New Roman";\r\nmso-fareast-font-family:"Times New Roman";\r\nmso-ansi-language:#0400;\r\nmso-fareast-language:#0400;\r\nmso-bidi-language:#0400;}\r\n</style>\r\n<![endif]--></p>\r\n<p class="a">第一行：十进制高精度数&lt;span lang="EN-US">2<i style=""><sup>P</sup></i>-1</span>的位数。&lt;/p>\r\n<p class="a">第&lt;span lang="EN-US">2-11</span>行：十进制高精度数&lt;span lang="EN-US">2<i style=""><sup>P</sup></i>-1</span>的最后&lt;span lang="EN-US">500</span>位数字。（每行输出<span lang="EN-US">50</span>位，共输出&lt;span lang="EN-US">10</span>行，不足<span lang="EN-US">500</span>位时高位补&lt;span lang="EN-US">0</span>）&lt;/p>\r\n<p class="a">不必验证<span lang="EN-US">2<i style=""><sup>P</sup></i>-1</span>与&lt;span lang="EN-US">P</span>是否为素数。&lt;/p>', 'D:\\oj\\data\\1862', 'D:\\oj\\data\\1862', '1279', '386\r\n00000000000000000000000000000000000000000000000000\r\n00000000000000000000000000000000000000000000000000\r\n00000000000000104079321946643990819252403273640855\r\n38615262247266704805319112350403608059673360298012\r\n23944173232418484242161395428100779138356624832346\r\n49081399066056773207629241295093892203457731833496\r\n61583550472959420547689811211693677147548478866962\r\n50138443826029173234888531116082853841658502825560\r\n46662248318909188018470682222031405210266984354887\r\n32958028878050869736186900714720710555703168729087', '', 'NOIP2003', '', '2011-06-10 19:38:09', 1000, 131072, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 2, 'power721'),
(1863, 'Dinner', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">Little A is one member of ACM team. He had just won the gold in World Final. To celebrate, he decided to invite all to have one meal. As bowl, knife and other tableware is not enough in the kitchen, Little A goes to take backup tableware in warehouse. 	There are many boxes in warehouse, one box contains only one thing, and each box is marked by the name of things inside it. For example, if "basketball" is written on the box, which means the box contains only basketball. With these marks, Little A wants to find out the tableware easily. So, the problem for you is to help him, find out all the tableware from all boxes in the warehouse.</font></p>\r\n</p>', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">There are many test cases. Each case contains one line, and one integer N at the first, N indicates that there are N boxes in the warehouse. Then N strings follow, each string is one name written on the box.</font></p>\r\n</p>', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">For each test of the input, output all the name of tableware.</font></p>\r\n</p>', 'D:\\oj\\data\\1863', 'D:\\oj\\data\\1863', '3 basketball fork chopsticks\r\n2 bowl letter', 'fork chopsticks\r\nbowl', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">The tableware only contains: bowl, knife, fork and chopsticks.</font></p>\r\n</p>', '辽宁省赛2010', '', '2012-03-31 17:30:58', 1000, 32768, 'N', NULL, 8, 10, 80, 2, 22, 7, 7, 1000, 120, 'power721'),
(1864, 'You are my brother', '<p><style type="text/css">h2 { margin-top: 0.05cm; margin-bottom: 0.05cm; color: rgb(0, 0, 0); line-height: 0.78cm; page-break-inside: avoid; }h2.western { font-family: "Times New Roman",serif; font-size: 14pt; }h2.cjk { font-family: "宋体","SimSun"; font-size: 14pt; font-style: normal; }h2.ctl { font-family: "Calibri",sans-serif; font-size: 16pt; }p { margin-bottom: 0.21cm; }</style>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">Little A gets to know a new friend, Little B, recently. One day, they realize that they are family 500 years ago. Now, Little A wants to know whether Little B is his elder, younger or brother.</font></p>\r\n<h2 lang="zh-CN" style="margin-top: 0.13cm; margin-bottom: 0.13cm;" class="cjk"></h2>\r\n</p>', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">There are multiple test cases.</font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">For each test case, the first line has a single integer, n (n&lt;=1000). The next n lines have two integers a and b (1&lt;=a,b&lt;=2000) each, indicating b is the father of a. One person has exactly one father, of course. Little A is numbered 1 and Little B is numbered 2.</font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">Proceed to the end of file.</font></p>\r\n</p>', '<p><style type="text/css">h2 { margin-top: 0.05cm; margin-bottom: 0.05cm; color: rgb(0, 0, 0); line-height: 0.78cm; page-break-inside: avoid; }h2.western { font-family: "Times New Roman",serif; font-size: 14pt; }h2.cjk { font-family: "宋体","SimSun"; font-size: 14pt; font-style: normal; }h2.ctl { font-family: "Calibri",sans-serif; font-size: 16pt; }p { margin-bottom: 0.21cm; }</style>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">For each test case, if Little B is Little A&rsquo;s younger, print &ldquo;You are my younger&rdquo;. Otherwise, if Little B is Little A&rsquo;s elder, print &ldquo;You are my elder&rdquo;. Otherwise, print &ldquo;You are my brother&rdquo;. The output for each test case occupied exactly one line.</font></p>\r\n<h2 lang="zh-CN" style="margin-top: 0.13cm; margin-bottom: 0.13cm;" class="cjk"></h2>\r\n</p>', 'D:\\oj\\data\\1864', 'D:\\oj\\data\\1864', '5\r\n1 3\r\n2 4\r\n3 5\r\n4 6\r\n5 6\r\n6\r\n1 3\r\n2 4\r\n3 5\r\n4 6\r\n5 7\r\n6 7', 'You are my elder\r\nYou are my brother', '', '辽宁省赛2010', '', '2011-07-27 17:03:04', 1000, 131072, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 1000, 30, 'power721'),
(1865, 'Time', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">Digital clock use 4 digits to express time, each digit is described by 3*3 characters (including&rdquo;|&rdquo;,&rdquo;_&rdquo;and&rdquo; &ldquo;).now given the current time, please tell us how can it be expressed by the digital clock.</font></p>\r\n<p></p>', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">There are several test cases.</font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">Each case contains 4 integers in a line, separated by space.</font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">Proceed to the end of file.</font></p>\r\n<p></p>', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">For each test case, output the time expressed by the digital clock such as Sample Output.</font></p>\r\n<p></p>', 'D:\\oj\\data\\1865', 'D:\\oj\\data\\1865', '1 2 5 6\r\n2 3 4 2', '_  _  _ \r\n  | _||_ |_ \r\n  ||_  _||_|\r\n _  _     _ \r\n _| _||_| _|\r\n|_  _|  ||_', '<pre>\r\nThe digits showed by the digital clock are as follows:\r\n   _  _     _  _  _  _  _  _ \r\n | _| _||_||_ |_   ||_||_|| |\r\n ||_  _|  | _||_|  ||_| _||_|\r\n</pre>', '辽宁省赛2010', '', '2012-05-18 16:52:01', 1000, 131072, 'N', NULL, 8, 23, 35, 15, 65, 9, 8, 1000, 119, 'power721'),
(1866, 'SPY', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif"><font color="#444444"><font size="3"><span style="font-weight: normal;"><font size="2" style="font-size: 10pt;">The National Intelligence Council of X Nation receives a piece of credible information that Nation Y will send spies to steal Nation X&rsquo;s </font></span></font></font>confidential paper. So the commander of <font color="#444444"><font size="3"><span style="font-weight: normal;"><font size="2" style="font-size: 10pt;">The National Intelligence Council take measures </font></span></font></font><font color="#000000">immediately, he will </font>investigate people who will come into NationX. At the same time, there are two List in the Commander&rsquo;s hand, one is full of spies that Nation Y will send to Nation X, and the other one is full of spies that Nation X has sent to Nation Y before. There may be some overlaps of the two list. Because the spy may act two roles at the same time, which means that he may be the one that is sent from Nation X to Nation Y, we just call this type a &ldquo;dual-spy&rdquo;. So Nation Y may send &ldquo;dual_spy&rdquo; back to Nation X, and it is obvious now that it is good for Nation X, because &ldquo;dual_spy&rdquo; may bring back NationY&rsquo;s confidential paper without worrying to be detention by NationY&rsquo;s frontier <font color="#000000">So the commander decides to seize those that are sent by NationY, and let the ordinary people and the &ldquo;dual_spy&rdquo; in at the same time .So can you decide a list that should be caught by the Commander?</font></font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font color="#000000"><font face="DejaVu Serif, serif">A:the list contains that will come to the NationX&rsquo;s frontier.</font></font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font color="#000000"><font face="DejaVu Serif, serif">B:the list contains spies that will be sent by Nation Y.</font></font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font color="#000000"><font face="DejaVu Serif, serif">C:the list contains spies that were sent to NationY before.</font></font></p>\r\n</p>', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">There are several test cases.</font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">Each test case contains four parts, the first part contains 3 positive integers A, B, C, and A is the number which will come into the frontier. B is the number that will be sent by Nation Y, and C is the number that NationX has sent to NationY before. </font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">The second part contains A strings, the name list of that will come into the frontier.</font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">The second part contains B strings, the name list of that are sent by NationY.</font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">The second part contains C strings, the name list of the &ldquo;dual_spy&rdquo;.</font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">There will be a blank line after each test case.</font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">There won&rsquo;t be any repetitive names in a single list, if repetitive names appear in two lists, they mean the same people.</font></p>\r\n</p>', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">Output the list that the commander should caught (in the appearance order of the lists B).if no one should be caught, then , you should output &ldquo;No enemy spy&rdquo;.</font></p>\r\n</p>', 'D:\\oj\\data\\1866', 'D:\\oj\\data\\1866', '8 4 3\r\nZhao Qian Sun Li Zhou Wu Zheng Wang\r\nZhao Qian Sun Li\r\nZhao Zhou Zheng\r\n2 2 2\r\nZhao Qian\r\nZhao Qian\r\nZhao Qian\r\nQian Sun Li', 'Qian Sun Li\r\nNo enemy spy', '', '辽宁省赛2010', '', '2011-06-10 19:38:11', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 28, 'power721'),
(1867, 'Intermediary', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">It is widely known that any two strangers can get to know each other through at most six other people. Now let&rsquo;s prove this.</font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">In the country Intermediary Conducts Personal Communications (ICPC), there are up to n (2&lt;=n&lt;=100) ordinary people conveniently numbered from 0 to n-1. They don&rsquo;t know each other, or, in other words, they are strangers. The only way they can communicate with each other is through the government, which, in fact, is an intermediary agency. The government consists of up to m (1&lt;=m&lt;=9) employees conveniently numbered from 0 to m-1. Suppose employee z can introduce person x to person y at a cost of d dollars. If this is the first time in a day that employee z introduce one person to another, he will only require d dollars. For the second time, he will require d dollars plus extra e dollars as his tip. For the third time and more, he will require d dollars plus extra f dollars. He is not dared to require any more than that since the strange country is somewhat democratic. And if person x is able to communicate with person t and person t is able to communicate with person y, then person t is always willing to transfer messages from person x to person y, at no charge. Of course, the intermediary fees are all paid by person x. Notice that employee z being able to introduce person x to person y doesn&rsquo;t mean he can introduce person y to person x.</font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">Now person 0 has to send a message to person n-1 in one day. If all employees have just started to work, what is the minimum cost for person 0?</font></p>\r\n</p>', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">For each test case, the first line contains three integers, n, m and q, where q is the number of intermediary relationships and q is at most 10,000. The second line has m integers, each indicating the value e of every employee, in the range [0, 100]. The third line has m integers too, each indicating the value f of every employee, in the range [e, 200]. The next q lines each contains four integers, x, y, z and d, indicating that employee z can introduce person x to person y requiring d dollars, where 1&lt;=d&lt;=200. There is a blank line after each test case.</font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">Proceed to the end of file.</font></p>\r\n</p>', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">For each test case, print one integer on a single line, giving the minimum cost. If it is impossible, print -1.</font></p>\r\n</p>', 'D:\\oj\\data\\1867', 'D:\\oj\\data\\1867', '3 2 2\r\n1 1\r\n2 2\r\n0 1 0 1\r\n1 2 1 2\r\n\r\n5 1 4\r\n1\r\n2\r\n0 1 0 1\r\n1 2 0 1\r\n2 3 0 1\r\n3 4 0 1', '3\r\n9', '', '辽宁省赛2010', '', '2011-06-10 19:38:11', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 24, 'power721'),
(1868, 'English Game', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">This English game is a simple English words connection game.</font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">The rules are as follows: there are N English words in a dictionary, and every word has its own weight v. There is a weight if the corresponding word is used. Now there is a target string X. You have to pick some words in the dictionary, and then connect them to form X. At the same time, the sum weight of the words you picked must be the biggest.</font></p>\r\n</p>', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">There are several test cases. For each test, N (1&lt;=n&lt;=1000) and X (the length of x is not bigger than 10000) are given at first. Then N rows follow. Each row contains a word wi (the length is not bigger than 30) and the weight of it. Every word is composed of lowercases. No two words in the dictionary are the same.  </font></p>\r\n</p>', '<p><style type="text/css">h2 { margin-top: 0.05cm; margin-bottom: 0.05cm; color: rgb(0, 0, 0); line-height: 0.78cm; page-break-inside: avoid; }h2.western { font-family: "Times New Roman",serif; font-size: 14pt; }h2.cjk { font-family: "宋体","SimSun"; font-size: 14pt; font-style: normal; }h2.ctl { font-family: "Calibri",sans-serif; font-size: 16pt; }p { margin-bottom: 0.21cm; }</style>\r\n<p align="LEFT" style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">For each test case, output the biggest sum weight, if you could not form the string X, output -1.</font></p>\r\n<h2 lang="zh-CN" style="margin-top: 0.13cm; margin-bottom: 0.13cm;" class="cjk"></h2>\r\n</p>', 'D:\\oj\\data\\1868', 'D:\\oj\\data\\1868', '1 aaaa\r\na 2\r\n3 aaa\r\na 2\r\naa 5\r\naaa 6\r\n4 abc\r\na 1\r\nbc 2\r\nab 4\r\nc 1\r\n3 abcd\r\nab 10\r\nbc 20\r\ncd 30\r\n3 abcd\r\ncd 100\r\nabc 1000\r\nbcd 10000', '8\r\n7\r\n5\r\n40\r\n-1', '', '辽宁省赛2010', '', '2012-04-05 13:29:34', 1000, 131072, 'N', NULL, 3, 6, 50, 1, 33, 2, 2, 1000, 72, 'power721'),
(1869, 'Friends number', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">Paula and Tai are couple. There are many stories between them. The day Paula left by airplane, Tai send one message to telephone 2200284, then, everything is changing&hellip; (The story in &ldquo;the snow queen&rdquo;).</font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">After a long time, Tai tells Paula, the number 220 and 284 is a couple of friends number, as they are special, all divisors of 220&rsquo;s sum is 284, and all divisors of 284&rsquo;s sum is 220. Can you find out there are how many couples of friends number less than 10,000. Then, how about 100,000, 200,000 and so on.</font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">The task for you is to find out there are how many couples of friends number in given closed interval [a,b]</font>。&lt;/p>\r\n</p>', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">There are several cases. </font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">Each test case contains two positive integers a, b(1&lt;= a &lt;= b &lt;=5,000,000).</font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">Proceed to the end of file.</font></p>\r\n</p>', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">For each test case, output the number of couples in the given range. The output of one test case occupied exactly one line.</font></p>\r\n</p>', 'D:\\oj\\data\\1869', 'D:\\oj\\data\\1869', '1 100\r\n1 1000', '0\r\n1', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">6 is a number whose sum of all divisors is 6. 6 is not a friend number, these number is called Perfect Number.</font></p>\r\n</p>', '辽宁省赛2010', '', '2011-06-10 19:38:12', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 31, 'power721'),
(1870, 'Happiness Hotel', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif"><font size="3"><span lang="en-US">The life of Little A is good, and, he managed to get enough money to run a hotel. The best for him is that he need not go to work outside, just wait for the money to go into his pocket. Little A wants everything to be perfect, he has a wonderful plan that he will keep one most beautiful reception whose size is 1()(which means the reception is 1 square meter). There are other k rooms that have the same area, and the area is x^2(), x is an integer; Little A wants his hotel to be a square. Little A is a good thinker, but not a good maker. As his poor performance on math, he cannot calculate the least area needed to build such a hotel of his will. Now, this task belongs to you, solve this problem to make Little A&rsquo;s dream of Happy Hotel come true. Please be careful, the whole area should only contain k rooms, and the reception, there should not be any vacant place.</span></font></font></p>\r\n</p>', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">There are several test cases.</font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">Each case contains only one integer k(1&lt;=k&lt;=1000) ,the number of rooms the hotel should have in one line.</font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">Proceed to the end of file.</font></p>\r\n</p>', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style>\r\n<p style="text-indent: 0.85cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif"><font size="3">Output one integer d, means the hotel&rsquo;s area is d^2(If there is no answer, output &ldquo;no solution&rdquo;)</font> .The output of one test case occupied exactly one line.</font></p>\r\n</p>', 'D:\\oj\\data\\1870', 'D:\\oj\\data\\1870', '1\r\n2\r\n3', 'no solution\r\n3\r\n2', '', '辽宁省赛2010', '', '2011-06-10 19:38:12', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 27, 'power721'),
(1871, 'NEW RDSP MODE I', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">Little A has became fascinated with the game Dota recently, but he is not a good player. In all the modes, the rdsp Mode is popular on online, in this mode, little A always loses games if he gets strange heroes, because, the heroes are distributed randomly. </font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">Little A wants to win the game, so he cracks the code of the rdsp mode with his talent on programming. The following description is about the rdsp mode:</font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">There are N heroes in the game, and they all have a unique number between 1 and N. At the beginning of game, all heroes will be sorted by the number in ascending order. So, all heroes form a sequence One.</font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">These heroes will be operated by the following stages M times:</font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">1.Get out the heroes in odd position of sequence One to form a new sequence Two;</font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">2.Let the remaining heroes in even position to form a new sequence Three;</font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">3.Add the sequence Two to the back of sequence Three to form a new sequence One.</font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">After M times'' operation, the X heroes in the front of new sequence One will be chosen to be Little A''s heroes. The problem for you is to tell little A the numbers of his heroes.</font></p>\r\n<p></p>', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">There are several test cases.</font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">Each case contains three integers N (1&lt;=N&lt;1,000,000), M (1&lt;=M&lt;100,000,000), X(1&lt;=X&lt;=20).</font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">Proceed to the end of file.</font></p>\r\n<p></p>', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">For each test case, output X integers indicate the number of heroes. There is a space between two numbers. The output of one test case occupied exactly one line.</font></p>\r\n<p></p>', 'D:\\oj\\data\\1871', 'D:\\oj\\data\\1871', '5 1 2\r\n5 2 2', '2 4\r\n4 3', '<p><style type="text/css">h2 { margin-top: 0.05cm; margin-bottom: 0.05cm; color: rgb(0, 0, 0); line-height: 0.78cm; page-break-inside: avoid; }h2.western { font-family: "Times New Roman",serif; font-size: 14pt; }h2.cjk { font-family: "宋体","SimSun"; font-size: 14pt; font-style: normal; }h2.ctl { font-family: "Calibri",sans-serif; font-size: 16pt; }p { margin-bottom: 0.21cm; }</style></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"><font face="DejaVu Serif, serif">In case two: N=5,M=2,X=2,the initial sequence One is 1,2,3,4,5.After the first operation, the sequence One is 2,4,1,3,5. After the second operation, the sequence One is 4,3,2,1,5.So,output 4 3.</font></p>\r\n<h2 lang="zh-CN" style="margin-top: 0.13cm; margin-bottom: 0.13cm;" class="cjk"></h2>\r\n<p></p>', '辽宁省赛2010', '', '2012-05-22 19:21:14', 1000, 131072, 'N', NULL, 0, 9, 0, 9, 100, 1, 0, 1000, 45, 'power721'),
(1872, 'Satellite Photographs', '<p>Farmer John purchased satellite photos of W x H pixels of his farm (1  &lt;= W &lt;= 80, 1 &lt;= H &lt;= 1000) and wishes to determine the  largest ''contiguous'' (connected) pasture. Pastures are contiguous when  any pair of pixels in a pasture can be connected by traversing adjacent  vertical or horizontal pixels that are part of the pasture.  (It is easy  to create pastures with very strange shapes, even circles that surround  other circles.) <br />\r\n<br />\r\nEach photo has been digitally enhanced to show pasture area as an  asterisk (''*'') and non-pasture area as a period (''.'').  Here is a 10 x 5  sample satellite photo: <br />\r\n<br />\r\n<tt>..*.....** <br />\r\n.**..***** <br />\r\n.*...*.... <br />\r\n..****.*** <br />\r\n..****.***</tt> <br />\r\n<br />\r\nThis photo shows three contiguous pastures of 4, 16, and 6 pixels.  Help FJ find the largest contiguous pasture in each of his satellite  photos.</p>', '<p>* Line 1: Two space-separated integers: W and H <br />\r\n* Lines 2..H+1: Each line contains W "*" or "." characters  representing one raster line of a satellite photograph.</p>\r\n<p>&nbsp;</p>', '<p>* Line 1: The size of the largest contiguous field in the satellite  photo.</p>', 'D:\\oj\\data\\1872', 'D:\\oj\\data\\1872', '10 5\r\n..*.....**\r\n.**..*****\r\n.*...*....\r\n..****.***\r\n..****.***', '16', '', '', '', '2011-06-10 19:38:12', 1000, 131072, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 3, 'power721');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1873, 'Prime Path', '<p>The ministers of the cabinet were quite upset by the message from the  Chief of Security stating that they would all have to change the  four-digit room numbers on their offices. <br />\r\n&mdash; It is a matter of security to change such things every now and  then, to keep the enemy in the dark. <br />\r\n&mdash; But look, I have chosen my number 1033 for good reasons. I am the  Prime minister, you know! <br />\r\n&mdash; I know, so therefore your new number 8179 is also a prime. You  will just have to paste four new digits over the four old ones on your  office door. <br />\r\n&mdash; No, it&rsquo;s not that simple. Suppose that I change the first digit to  an 8, then the number will read 8033 which is not a prime! <br />\r\n&mdash; I see, being the prime minister you cannot stand having a  non-prime number on your door even for a few seconds. <br />\r\n&mdash; Correct! So I must invent a scheme for going from 1033 to 8179 by a  path of prime numbers where only one digit is changed from one prime to  the next prime. <br />\r\n<br />\r\nNow, the minister of finance, who had been eavesdropping,  intervened. <br />\r\n&mdash; No unnecessary expenditure, please! I happen to know that the  price of a digit is one pound. <br />\r\n&mdash; Hmm, in that case I need a computer program to minimize the cost.  You don''t know some very cheap software gurus, do you? <br />\r\n&mdash; In fact, I do. You see, there is this programming contest going  on... Help the prime minister to find the cheapest prime path between  any two given four-digit primes! The first digit must be nonzero, of  course. Here is a solution in the case above. </p>\r\n<blockquote>1033<br />\r\n1733<br />\r\n3733<br />\r\n3739<br />\r\n3779<br />\r\n8779<br />\r\n8179</blockquote>\r\n<p>The  cost of this solution is 6 pounds. Note that the digit 1 which got  pasted over in step 2 can not be reused in the last step &ndash; a new 1 must  be purchased.</p>', '<p>One line with a positive number: the number of test cases (at most 100).  Then for each test case, one line with two numbers separated by a  blank. Both numbers are four-digit primes (without leading zeros).</p>', '<p>One line for each case, either with a number stating the minimal cost or containing the word Impossible.</p>', 'D:\\oj\\data\\1873', 'D:\\oj\\data\\1873', '3\r\n1033 8179\r\n1373 8017\r\n1033 1033', '6\r\n7\r\n0', '', '', '', '2011-06-30 13:24:10', 1000, 131072, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 1000, 35, 'power721'),
(1874, 'Maze Problem', '<p>Given a maze, find a shortest path from start to goal.</p>', '<p>Input consists serveral test cases. </p>\r\n<p>First line of the input contains number of test case T.</p>\r\n<p>For each test case the first line contains two integers N , M ( 1 &lt;= N, M &lt;= 100 ).</p>\r\n<p>Each of the following N lines contain M characters. Each character means a cell of the map.</p>\r\n<p>Here is the definition for chracter.</p>\r\n<p>&nbsp;</p>\r\n<p>Constraint:</p>\r\n<ul>\r\n    <li>For a character in the map:\r\n    <ul>\r\n        <li>''S'' : start cell</li>\r\n        <li>''E'' : goal cell</li>\r\n        <li>''-'' : empty cell</li>\r\n        <li>''#'' :  obstacle cell</li>\r\n    </ul>\r\n    </li>\r\n    <li>no two start cell exists.</li>\r\n    <li>no two goal cell exists.</li>\r\n</ul>', '<p>For each test case print one line containing shortest path. If there exists no path from start to goal, print -1.</p>', 'D:\\oj\\data\\1874', 'D:\\oj\\data\\1874', '1\r\n5 5\r\nS-###\r\n-----\r\n##---\r\nE#---\r\n---##', '9', '', '', '', '2011-06-10 19:38:12', 1000, 131072, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 1, 'power721'),
(1875, 'Fiber Communications', '<div class="ptx" lang="en-US">Farmer John wants to connect his N (1 &lt;= N &lt;= 1,000) barns (numbered 1..N) with a new fiber-optic network.  However, the barns are located in a circle around the edge of a large pond, so he can only connect pairs of adjacent barns. The circular configuration means that barn N is adjacent to barn 1. <br />\r\n<br />\r\nFJ doesn''t need to connect all the barns, though, since only certain pairs of cows wish to communicate with each other.  He wants to construct as few  <br />\r\nconnections as possible while still enabling all of these pairs to communicate through the network.  Given the list of barns that wish to communicate with each other, determine the minimum number of lines that must be laid.  To communicate from barn 1 to barn 3, lines must be laid from barn 1 to barn 2 and also from barn 2 to barn 3(or just from barn 3 to 1,if n=3).</div>', '<div class="ptx" lang="en-US">* Line 1: Two integers, N and P (the number of communication pairs, 1 &lt;= P  &lt;= 10,000) <br />\r\n<br />\r\n* Lines 2..P+1: two integers describing a pair of barns between which   communication is desired.  No pair is duplicated in the list.</div>', '<div class="ptx" lang="en-US">One line with a single integer which is the minimum number of direct connections FJ needs to make.</div>', 'D:\\oj\\data\\1875', 'D:\\oj\\data\\1875', '5 2\r\n1 3\r\n4 5', '3', '', 'USACO 2002 February', '', '2011-06-10 19:38:13', 1000, 30720, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 1, 'power721'),
(1876, 'Power Hungry Cows', '<div class="ptx" lang="en-US">FJ''s cows would like to be able to compute integer powers P (1 &lt;= P &lt;= 20,000) of numbers very quickly, but need your help.  Because they''re going to be computing powers of very large numbers, they can only keep around two work variables for intermediate results. <br />\r\n<br />\r\nThe first of those work variables is initialized to the number (denoted x) for which they are calculating the power; the other is initialized to 1. The cows can both multiply and divide any pair of the work variables and store the result in any work variable, but all results are stored as integers. <br />\r\n<br />\r\nFor example, if they want to compute x^31, one way to perform the calculation is: <br />\r\n<pre>\r\n                                              WV1  WV2\r\n<br />                                      Start:   x    1\r\n<br />   Multiply first by first, store in second:   x   x^2\r\n<br />                  Multiply second by second:   x   x^4\r\n<br />                  Multiply second by second:   x   x^8\r\n<br />                  Multiply second by second:   x   x^16\r\n<br />                  Multiply second by second:   x   x^32\r\n<br />                     Divide second by first:   x   x^31</pre>\r\n<br />\r\nThus, x^31 can computed in six operations.  Given the power to be computed and the the number of work variables, find the minimum number of operations to calculate the power. <br />\r\n</div>', '<div class="ptx" lang="en-US">A single line with one integer: P. </div>', '<div class="ptx" lang="en-US">A single line with a single integer that is the minimum number of operations it requires to compute the power. </div>', 'D:\\oj\\data\\1876', 'D:\\oj\\data\\1876', '31', '6', '', 'USACO 2002 February', '', '2011-06-10 19:38:13', 1000, 30720, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 1, 'power721'),
(1877, 'Cow Cycling', '<div class="ptx" lang="en-US">The cow bicycling team consists of N (1 &lt;= N &lt;= 20) cyclists.  They wish to determine a race strategy which will get one of them across the finish line as fast as possible. <br />\r\n<br />\r\nLike everyone else, cows race bicycles in packs because that''s the most efficient way to beat the wind.  While travelling at x laps/minute (x is always an integer), the head of the pack expends x*x energy/minute while the rest of pack drafts behind him using only x energy/minute.  Switching leaders requires no time though can only happen after an integer number of minutes.  Of course, cows can drop out of the race at any time. <br />\r\n<br />\r\nThe cows have entered a race D (1 &lt;= D &lt;= 100) laps long.  Each cow has the same initial energy, E (1 &lt;= E &lt;= 100). <br />\r\n<br />\r\nWhat is the fastest possible finishing time?  Only one cow has to cross the line. The finish time is an integer.  Overshooting the line during some minute is no different than barely reaching it at the beginning of the next minute (though the cow must have the energy left to cycle the entire minute).  N, D, and E are integers.</div>', '<div class="ptx" lang="en-US">A single line with three integers: N, E, and D </div>', '<div class="ptx" lang="en-US">A single line with the integer that is the fastest possible finishing time for the fastest possible cow.  Output 0 if the cows are not strong enough to finish the race. </div>', 'D:\\oj\\data\\1877', 'D:\\oj\\data\\1877', '3 30 20', '7', '<p>\r\n<meta http-equiv="content-type" content="text/html; charset=utf-8">\r\n<pre>\r\n[as shown in this chart:\r\n<br />	                            leader E\r\n<br />	               pack  total used this\r\n<br />	time  leader  speed   dist   minute\r\n<br />	  1      1      5       5      25\r\n<br />	  2      1      2       7       4\r\n<br />	  3      2*     4      11      16\r\n<br />	  4      2      2      13       4\r\n<br />	  5      3*     3      16       9\r\n<br />	  6      3      2      18       4\r\n<br />	  7      3      2      20       4\r\n<br />	* = leader switch</pre>\r\n</meta>\r\n</p>\r\n<p></p>', 'USACO 2002 February', '', '2011-06-10 19:38:13', 1000, 30720, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 1, 'power721'),
(1878, 'Rebuilding Roads', '<div class="ptx" lang="en-US">The cows have reconstructed Farmer John''s farm, with its N barns (1 &lt;= N &lt;= 150, number 1..N) after the terrible earthquake last May. The cows didn''t have time to rebuild any extra roads, so now there is exactly one way to get from any given barn to any other barn.  Thus, the farm transportation system can be represented as a tree. <br />\r\n<br />\r\nFarmer John wants to know how much damage another earthquake could do.  He wants to know the minimum number of roads whose destruction would isolate a subtree of exactly P (1 &lt;= P &lt;= N) barns from the rest of the barns.</div>', '<div class="ptx" lang="en-US">* Line 1: Two integers, N and P <br />\r\n<br />\r\n* Lines 2..N: N-1 lines, each with two integers I and J.  Node I is node J''s parent in the tree of roads. </div>', '<div class="ptx" lang="en-US">A single line containing the integer that is the minimum number of roads that need to be destroyed for a subtree of P nodes to be isolated. </div>', 'D:\\oj\\data\\1878', 'D:\\oj\\data\\1878', '11 6\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n2 6\r\n2 7\r\n2 8\r\n4 9\r\n4 10\r\n4 11', '2', '<p>\r\n<meta http-equiv="content-type" content="text/html; charset=utf-8">[A subtree with nodes (1, 2, 3, 6, 7, 8) will become isolated if roads 1-4 and 1-5 are destroyed.]&nbsp;</meta>\r\n</p>\r\n<p></p>', 'USACO 2002 February', '', '2011-06-10 19:38:13', 1000, 30720, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 1, 'power721'),
(1879, 'Triangular Pastures', '<div class="ptx" lang="en-US">Like everyone, cows enjoy variety.  Their current fancy is new shapes for pastures.  The old rectangular shapes are out of favor; new geometries are the favorite. <br />\r\n<br />\r\nI. M. Hei, the lead cow pasture architect, is in charge of creating a triangular pasture surrounded by nice white fence rails.  She is supplied with N (3 &lt;= N &lt;= 40) fence segments (each of integer length Li (1 &lt;= Li &lt;= 40) and must arrange them into a triangular pasture with the largest grazing area.  Ms. Hei must use all the rails to create three sides of non-zero length. <br />\r\n<br />\r\nHelp Ms. Hei convince the rest of the herd that plenty of grazing land will be available.Calculate the largest area that may be enclosed with a supplied set of fence segments.</div>', '<div class="ptx" lang="en-US">* Line 1: A single integer N <br />\r\n<br />\r\n* Lines 2..N+1: N lines, each with a single integer representing one fence segment''s length.  The lengths are not necessarily unique.</div>', '<div class="ptx" lang="en-US">A single line with the integer that is the truncated integer representation of the largest possible enclosed area multiplied by 100.  Output -1 if no triangle of positive area may be constructed.</div>', 'D:\\oj\\data\\1879', 'D:\\oj\\data\\1879', '5\r\n1\r\n1\r\n3\r\n3\r\n4', '692', '<p>\r\n<meta http-equiv="content-type" content="text/html; charset=utf-8">[which is 100x the area of an equilateral triangle with side length 4]&nbsp; </meta>\r\n</p>\r\n<p></p>', 'USACO 2002 February', '', '2011-06-10 19:38:13', 1000, 131072, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 1, 'power721'),
(1880, 'Chores', '<div class="ptx" lang="en-US">Farmer John''s family pitches in with the chores during milking, doing all the chores as quickly as possible. At FJ''s house, some chores cannot be started until others have been completed, e.g., it is impossible to wash the cows until they are in the stalls. <br />\r\n<br />\r\nFarmer John has a list of N (3 &lt;= N &lt;= 10,000) chores that must be completed. Each chore requires an integer time (1 &lt;= length of time &lt;= 100) to complete and there may be other chores that must be completed before this chore is started. We will call these prerequisite chores. At least one chore has no prerequisite: the very first one, number 1. Farmer John''s list of chores is nicely ordered, and chore K (K &gt; 1) can have only chores 1,.K-1 as prerequisites. Write a program that reads a list of chores from 1 to N with associated times and all perquisite chores. Now calculate the shortest time it will take to complete all N chores. Of course, chores that do not depend on each other can be performed simultaneously.</div>', '<div class="ptx" lang="en-US">* Line 1: One integer, N <br />\r\n<br />\r\n* Lines 2..N+1: N lines, each with several space-separated integers. Line 2 contains chore 1; line 3 contains chore 2, and so on.  Each line contains the length of time to complete the chore, the number of the prerequisites, Pi,  (0 &lt;= Pi &lt;= 100), and the Pi prerequisites (range 1..N, of course). </div>', '<div class="ptx" lang="en-US">A single line with an integer which is the least amount of time required to perform all the chores. </div>', 'D:\\oj\\data\\1880', 'D:\\oj\\data\\1880', '7\r\n5 0\r\n1 1 1\r\n3 1 2\r\n6 1 1\r\n1 2 2 4\r\n8 2 2 4\r\n4 3 3 5 6', '23', '<p>\r\n<meta http-equiv="content-type" content="text/html; charset=utf-8">\r\n<pre>\r\n[Here is one task schedule:\r\n<br />        Chore 1 starts at time 0, ends at time 5.\r\n<br />        Chore 2 starts at time 5, ends at time 6.\r\n<br />        Chore 3 starts at time 6, ends at time 9.\r\n<br />        Chore 4 starts at time 5, ends at time 11.\r\n<br />        Chore 5 starts at time 11, ends at time 12.\r\n<br />        Chore 6 starts at time 11, ends at time 19.\r\n<br />        Chore 7 starts at time 19, ends at time 23.\r\n<br />]</pre>\r\n</meta>\r\n</p>\r\n<p></p>', 'USACO 2002 February', '', '2011-06-10 19:38:13', 3000, 30720, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 3000, 1, 'power721'),
(1881, 'Dessert', '<div class="ptx" lang="en-US">FJ has a new rule about the cows lining up for dinner.  Not only must the N (3 &lt;= N &lt;= 15) cows line up for dinner in order, but they must place a napkin between each pair of cows with a "+", "-", or "." on it.  In order to earn their dessert, the cow numbers and the napkins must form a numerical expression that evaluates to 0.  The napkin with a "." enables the cows to build bigger numbers.  Consider this equation for seven cows: <br />\r\n<pre>\r\n      1 - 2 . 3 - 4 . 5 + 6 . 7</pre>\r\n<br />\r\nThis means 1-23-45+67, which evaluates to 0.  You job is to assist the cows in getting dessert. (Note: "... 10 . 11 ...") will use the number 1011 in its calculation.) </div>', '<div class="ptx" lang="en-US">One line with a single integer, N </div>', '<div class="ptx" lang="en-US">One line of output for each of the first 20 possible expressions -- then a line with a single integer that is the total number of possible answers. Each expression line has the general format of number, space, napkin, space, number, space, napkin, etc. etc.  The output order is lexicographic, with "+" coming before "-" coming before ".".  If fewer than 20 expressions can be formed, print all of the expressions. </div>', 'D:\\oj\\data\\1881', 'D:\\oj\\data\\1881', '7', '1 + 2 - 3 + 4 - 5 - 6 + 7\r\n1 + 2 - 3 - 4 + 5 + 6 - 7\r\n1 - 2 + 3 + 4 - 5 + 6 - 7\r\n1 - 2 - 3 - 4 - 5 + 6 + 7\r\n1 - 2 . 3 + 4 + 5 + 6 + 7\r\n1 - 2 . 3 - 4 . 5 + 6 . 7\r\n6', '', 'USACO 2002 February', '', '2011-06-10 19:38:14', 1000, 30720, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 1, 'power721'),
(1882, 'Extra Krunch', '<div class="ptx" lang="en-US">A krunched word has no vowels ("A", "E", "I", "O", and "U") and no repeated letters.  Removing vowels and letters that appear twice or more from MISSISSIPPI yields MSP.  In a krunched word, a letter appears only once, the first time it would appear in the unkrunched word.  Vowels never appear. <br />\r\n<br />\r\nKrunched phrases similarly have no vowels and no repeated letters. Consider this phrase: <br />\r\n<pre>\r\n        RAILROAD CROSSING</pre>\r\n<br />\r\nand its krunched version: <br />\r\n<pre>\r\n        RLD CSNG</pre>\r\n<br />\r\nBlanks are krunched differently. Blanks are removed so that a krunched phrase has no blanks on its beginning or end, never has two blanks in a row, and has no blanks before punctuation.  Otherwise, blanks not removed. If we represent blanks by "_", <br />\r\n<pre>\r\n        MADAM_I_SAY_I_AM_ADAM__</pre>\r\n<br />\r\nkrunches to: <br />\r\n<pre>\r\n        MD_SY</pre>\r\n<br />\r\nwhere the single remaining blank is shown by "_". <br />\r\n<br />\r\nWrite a program that reads a line of input (whose length ranges from 2 to 70 characters), and krunches it.  Put the krunched word or phrase in the output file.  The input line has only capital letters, blanks, and the standard punctuation marks: period, comma, and question mark.</div>', '<div class="ptx" lang="en-US">A single line to be krunched. </div>', '<div class="ptx" lang="en-US">A single krunched line that follows the rules above. </div>', 'D:\\oj\\data\\1882', 'D:\\oj\\data\\1882', 'NOW IS THE TIME FOR ALL GOOD MEN TO COME TO THE AID OF THEIR COUNTRY.', 'NW S TH M FR L GD C Y.', '', 'USACO 2002 February', '', '2011-06-10 19:38:15', 1000, 30720, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 1, 'power721'),
(1883, 'BUY LOW, BUY LOWER', '<div class="ptx" lang="en-US">The advice to "buy low" is half the formula to success in the bovine stock market.To be considered a great investor you must also follow this problems'' advice: <br />\r\n<pre>\r\n                    "Buy low; buy lower"</pre>\r\n<br />\r\nEach time you buy a stock, you must purchase it at a lower price than the previous time you bought it. The more times you buy at a lower price than before, the better! Your goal is to see how many times you can continue purchasing at ever lower prices. <br />\r\n<br />\r\nYou will be given the daily selling prices of a stock (positive 16-bit integers) over a period of time.  You can choose to buy stock on any of the days. Each time you choose to buy, the price must be strictly lower than the previous time you bought stock.  Write a program which identifies which days you should buy stock in order to maximize the number of times you buy. <br />\r\n<br />\r\nHere is a list of stock prices: <br />\r\n<pre>\r\n Day   1  2  3  4  5  6  7  8  9 10 11 12\r\n<br />Price 68 69 54 64 68 64 70 67 78 62 98 87</pre>\r\n<br />\r\n<br />\r\nThe best investor (by this problem, anyway) can buy at most four times if each purchase is lower then the previous purchase. One four day sequence (there might be others) of acceptable buys is: <br />\r\n<pre>\r\nDay    2  5  6 10\r\n<br />Price 69 68 64 62</pre>\r\n</div>', '<div class="ptx" lang="en-US">* Line 1: N (1 &lt;= N &lt;= 5000), the number of days for which stock prices are given <br />\r\n<br />\r\n* Lines 2..etc: A series of N space-separated integers, ten per line except the final line which might have fewer integers. </div>', '<div class="ptx" lang="en-US">Two integers on a single line: <br />\r\n* The length of the longest sequence of decreasing prices <br />\r\n* The number of sequences that have this length (guaranteed to fit in 31 bits) <br />\r\n<br />\r\nIn counting the number of solutions, two potential solutions are considered the same (and would only count as one solution) if they repeat the same string of decreasing prices, that is, if they "look the same" when the successive prices are compared. Thus, two different sequence of "buy" days could produce the same string of decreasing prices and be counted as only a single solution. </div>', 'D:\\oj\\data\\1883', 'D:\\oj\\data\\1883', '12\r\n68 69 54 64 68 64 70 67 78 62\r\n98 87', '4 2', '', 'USACO 2002 February', '', '2011-06-10 19:51:20', 1000, 30720, 'Y', NULL, 1, 1, 100, 0, 0, 1, 1, 1000, 7, 'power721'),
(1884, '奖学金', '<pre>\r\n    某校的惯例是在每学期的期末考试之后发放奖学金。发放的奖学金共有五种，获取的条件各自不同：\r\n\r\n    1)  院士奖学金，每人8000元，期末平均成绩高于80分（&gt;80），并且在本学期内发表1篇或1篇以上\r\n        论文的学生均可获得；\r\n\r\n    2)  五四奖学金，每人4000元，期末平均成绩高于85分（&gt;85），并且班级评议成绩高于80分（&gt;80）\r\n        的学生均可获得；\r\n\r\n    3)  成绩优秀奖，每人2000元，期末平均成绩高于90分（&gt;90）的学生均可获得；\r\n\r\n    4)  西部奖学金，每人1000元，期末平均成绩高于85分（&gt;85）的西部省份学生均可获得；\r\n\r\n    5)  班级贡献奖，每人850元，班级评议成绩高于80分（&gt;80）的学生干部均可获得；\r\n\r\n    只要符合条件就可以得奖，每项奖学金的获奖人数没有限制，每名学生也可以同时获得多项奖学金。\r\n    例如姚林的期末平均成绩是87分，班级评议成绩82分，同时他还是一位学生干部，\r\n    那么他可以同时获得五四奖学金和班级贡献奖，奖金总数是4850元。\r\n\r\n    现在给出若干学生的相关数据，请计算哪些同学获得的奖金总数最高\r\n    （假设总有同学能满足获得奖学金的条件）。\r\n</pre>', '<pre>\r\n    输入的第一行是一个整数N（1 &lt;= N &lt;= 100），表示学生的总数。\r\n    接下来的N行每行是一位学生的数据，从左向右依次是姓名，期末平均成绩，\r\n    班级评议成绩，是否是学生干部，是否是西部省份学生，以及发表的论文数。\r\n    姓名是由大小写英文字母组成的长度不超过20的字符串（不含空格）；\r\n    期末平均成绩和班级评议成绩都是0到100之间的整数（包括0和100）；\r\n    是否是学生干部和是否是西部省份学生分别用一个字符表示，Y表示是，N表示不是；\r\n    发表的论文数是0到10的整数（包括0和10）。每两个相邻数据项之间用一个空格分隔。\r\n</pre>', '<p>输出包括三行，&lt;/p>\r\n<p>第一行是获得最多奖金的学生的姓名，</p>\r\n<p>第二行是这名学生获得的奖金总数。如果有两位或两位以上的学生获得的奖金最多，输出他们之中在输入文件中出现最早的学生的姓名。&lt;/p>\r\n<p>第三行是这N个学生获得的奖学金的总数。&lt;/p>', 'D:\\oj\\data\\1884', 'D:\\oj\\data\\1884', '4\r\nYaoLin 87 82 Y N 0\r\nChenRuiyi 88 78 N Y 1\r\nLiXin 92 88 N N 0\r\nZhangQin 83 87 Y N 1', 'ChenRuiyi\r\n9000\r\n28700', '', 'NOIp2005', '', '2011-06-10 19:38:17', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 3, 'power721'),
(1885, '独木桥', '<p>在河上有一座独木桥，一只青蛙想沿着独木桥从河的一侧跳到另一侧。在桥上有一些石子，青蛙很讨厌踩在这些石子上。由于桥的长度和青蛙一次跳过的距离都是正整数，我们可以把独木桥上青蛙可能到达的点看成数轴上的一串整点：0，1，&amp;hellip;&hellip;，L（其中L是桥的长度）。坐标为0的点表示桥的起点，坐标为L的点表示桥的终点。青蛙从桥的起点开始，不停的向终点方向跳跃。一次跳跃的距离是S到T之间的任意正整数（包括S,T）。当青蛙跳到或跳过坐标为L的点时，就算青蛙已经跳出了独木桥。&lt;/p>\r\n<p>题目给出独木桥的长度L，青蛙跳跃的距离范围S,T，桥上石子的位置。你的任务是确定青蛙要想过河，最少需要踩到的石子数。&lt;/p>\r\n<p>对于30%的数据，L &lt;= 10000；     对于全部的数据，L &lt;= 10^9。&lt;/p>\r\n<p></p>', '<p>输入的第一行有一个正整数L（1 &lt;= L &lt;= 10^9），表示独木桥的长度。第二行有三个正整数S，T，M，分别表示青蛙一次跳跃的最小距离，最大距离，及桥上石子的个数，其中1 &lt;= S &lt;= T &lt;= 10，1 &lt;= M &lt;= 100。第三行有M个不同的正整数分别表示这M个石子在数轴上的位置（数据保证桥的起点和终点处没有石子）。所有相邻的整数之间用一个空格隔开。&lt;/p>\r\n<p></p>', '<pre>\r\n    输出只包括一个整数，表示青蛙过河最少需要踩到的石子数。\r\n</pre>', 'D:\\oj\\data\\1885', 'D:\\oj\\data\\1885', '10\r\n2 3 5\r\n2 3 5 6 7', '2', '', 'NOIp2005', '', '2011-06-10 19:38:17', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 4, 'power721'),
(1886, '表达式', '<p>\r\n    明明进了中学之后，学到了代数表达式。有一天，他碰到一个很麻烦的选择题。这个题目的题干中首先给出了一个代数表达式，然后列出了若干选项，每个选项也是一个代数表达式，题目的要求是判断选项中哪些代数表达式是和题干中的表达式等价的。\r\n<p>\r\n    这个题目手算很麻烦，因为明明对计算机编程很感兴趣，所以他想是不是可以用计算机来解决这个问题。假设你是明明，能完成这个任务吗？\r\n<p>\r\n \r\n<p>\r\n    这个选择题中的每个表达式都满足下面的性质：\r\n<p>\r\n    1．  表达式只可能包含一个变量&amp;lsquo;a&rsquo;。\r\n<p>\r\n    2．  表达式中出现的数都是正整数，而且都小于10000。\r\n<p>\r\n    3．  表达式中可以包括四种运算&lsquo;+&rsquo;（加），&lsquo;-&rsquo;（减），&lsquo;*&rsquo;（乘），&lsquo;^&rsquo;（乘幂），以及小括号&lsquo;(&rsquo;，&amp;lsquo;)&rsquo;。小括号的优先级最高，其次是&amp;lsquo;^&rsquo;，然后是&lsquo;*&rsquo;，最后是&lsquo;+&rsquo;和&amp;lsquo;-&rsquo;。&amp;lsquo;+&rsquo;和&amp;lsquo;-&rsquo;的优先级是相同的。相同优先级的运算从左到右进行。（注意：运算符&lsquo;+&rsquo;，&amp;lsquo;-&rsquo;，&amp;lsquo;*&rsquo;，&amp;lsquo;^&rsquo;以及小括号&amp;lsquo;(&rsquo;，&amp;lsquo;)&rsquo;都是英文字符）\r\n<p>\r\n    4．  幂指数只可能是1到10之间的正整数（包括1和10）。\r\n<p>\r\n    5．  表达式内部，头部或者尾部都可能有一些多余的空格。\r\n<p>\r\n    下面是一些合理的表达式的例子：\r\n<p>\r\n((a^1) ^ 2)^3，a*a+a-a，((a+a))，9999+(a-a)*a，1 + (a -1)^3，1^10^9&hellip;&hellip;\r\n<p>\r\n\r\n对于30%的数据，表达式中只可能出现两种运算符&lsquo;+&rsquo;和&amp;lsquo;-&rsquo;；\r\n<p>\r\n对于其它的数据，四种运算符&amp;lsquo;+&rsquo;，&amp;lsquo;-&rsquo;，&amp;lsquo;*&rsquo;，&amp;lsquo;^&rsquo;在表达式中都可能出现。\r\n<p>\r\n对于全部的数据，表达式中都可能出现小括号&lsquo;(&rsquo;和&amp;lsquo;)&rsquo;。\r\n<p>', '<p>\r\n    输入的第一行给出的是题干中的表达式。第二行是一个整数n（2 &lt;= n &lt;= 26），表示选项的个数。后面n行，每行包括一个选项中的表达式。这n个选项的标号分别是A，B，C，D&hellip;&hellip;\r\n<p>\r\n    输入中的表达式的长度都不超过50个字符，而且保证选项中总有表达式和题干中的表达式是等价的。\r\n<p>', '<p>\r\n    输出包括一行，这一行包括一系列选项的标号，表示哪些选项是和题干中的表达式等价的。选项的标号按照字母顺序排列，而且之间没有空格。\r\n<p>', 'D:\\oj\\data\\1886', 'D:\\oj\\data\\1886', '( a + 1) ^2\r\n3\r\n(a-1)^2+4*a\r\na  + 1+ a\r\na^2 + 2 * a * 1 + 1^2 + 10 -10 +a -a', 'AC', '', 'NOIp2005', '', '2011-06-10 19:38:17', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 3, 'power721'),
(1887, '小教官', '<p>\r\n    佳佳刚进高中，在军训的时候，由于佳佳吃苦耐劳，很快得到了教官的赏识，成为了&amp;ldquo;小教官&amp;rdquo;。在军训结束的那天晚上，佳佳被命令组织同学们进行篝火晚会。一共有n个同学，编号从1到n。一开始，同学们按照1，2，&amp;hellip;&hellip;，n的顺序坐成一圈，而实际上每个人都有两个最希望相邻的同学。如何下命令调整同学的次序，形成新的一个圈，使之符合同学们的意愿，成为摆在佳佳面前的一大难题。\r\n<p>\r\n    佳佳可向同学们下达命令，每一个命令的形式如下：\r\n<p>\r\n    (b1, b2,... bm -1, bm)\r\n<p>\r\n    这里m的值是由佳佳决定的，每次命令m的值都可以不同。这个命令的作用是移动编号是b1，b2，&amp;hellip;&hellip; bm &ndash;1，bm的这m个同学的位置。要求b1换到b2的位置上，b2换到b3的位置上，&amp;hellip;&hellip;，要求bm换到b1的位置上。\r\n<p>\r\n    执行每个命令都需要一些代价。我们假定如果一个命令要移动m个人的位置，那么这个命令的代价就是m。我们需要佳佳用最少的总代价实现同学们的意愿，你能帮助佳佳吗?\r\n<p>\r\n    对于30%的数据，n &lt;= 1000；\r\n<p>\r\n    对于全部的数据，n &lt;= 50000。\r\n<p>', '<p>\r\n    输入的第一行是一个整数n（3 &lt;= n &lt;= 50000），表示一共有n个同学。其后n行每行包括两个不同的正整数，以一个空格隔开，分别表示编号是1的同学最希望相邻的两个同学的编号，编号是2的同学最希望相邻的两个同学的编号，&amp;hellip;&hellip;，编号是n的同学最希望相邻的两个同学的编号。\r\n<p>', '<p>\r\n    输出包括一行，这一行只包含一个整数，为最小的总代价。如果无论怎么调整都不能符合每个同学的愿望，则输出-1。\r\n<p>', 'D:\\oj\\data\\1887', 'D:\\oj\\data\\1887', '4\r\n3 4\r\n4 3\r\n1 2\r\n1 2', '2', '', 'NOIp2005', '', '2011-06-10 19:38:17', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 5, 'power721'),
(1888, '循环数', '<pre>\r\n    乐乐是一个聪明而又勤奋好学的孩子。他总喜欢探求事物的规律。\r\n    一天，他突然对数的正整数次幂产生了兴趣。\r\n    众所周知，2的正整数次幂最后一位数总是不断的在重复2，4，8，6，2，4，8，6&hellip;&hellip;\r\n    我们说2的正整数次幂最后一位的循环长度是4（实际上4的倍数都可以说是循环长度，\r\n    但我们只考虑最小的循环长度）。类似的，其余的数字的正整数次幂最后一位数也有类似的循环现象。\r\n    这时乐乐的问题就出来了：是不是只有最后一位才有这样的循环呢？对于一个整数n的正整数次幂来说，\r\n    它的后k位是否会发生循环？如果循环的话，循环长度是多少呢？\r\n注意：\r\n    1.如果n的某个正整数次幂的位数不足k，那么不足的高位看做是0。\r\n    2.如果循环长度是L，那么说明对于任意的正整数a，n的a次幂和a + L次幂的最后k位都相同。\r\n</pre>', '<p>\r\n输入只有一行，包含两个整数n（1 &lt;= n &lt; 10^100）和k（1 &lt;= k &lt;= 100），n和k之间用一个空格隔开，表示要求n的正整数次幂的最后k位的循环长度。\r\n<p>', '<pre>\r\n输出包括一行，这一行只包含一个整数，表示循环长度。如果循环不存在，输出-1。\r\n</pre>', 'D:\\oj\\data\\1888', 'D:\\oj\\data\\1888', '32 2', '4', '', 'NOIp2005', '', '2011-06-10 19:38:18', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 6, 'power721'),
(1889, 'Problem A - Y2K Accounting Bug', '<p></p>\r\n<p>\r\n<title></title>\r\n</p>\r\n<h2>Problem A - Y2K Accounting Bug</h2>\r\n<p>Accounting for Computer Machinists (ACM) has sufferred from the Y2K bug and lost some vital data for preparing annual report for MS Inc.</p>\r\n<p>All what they remember is that MS Inc. posted a surplus or a deficit each month of 1999 and each month when MS Inc. posted surplus, the amount of surplus was <em>s</em> and each month when MS Inc. posted deficit, the deficit was <em>d</em>.  They do not remember which or how many months posted surplus or deficit.  MS Inc., unlike other companies, posts their earnings for each consecutive 5 months during a year.  ACM knows that each of these 8 postings reported a deficit but they do not know how much.  The chief accountant is almost sure that MS Inc. was about to post surplus for the entire year of 1999.  Almost but not quite.</p>\r\n<p>Write a program, which decides whether MS Inc. suffered a deficit during 1999, or if a surplus for 1999 was possible, what is the maximum amount of surplus that they can post.</p>\r\n<p>Input is a sequence of lines, each containing two positive integers <em>s</em> and <em>d</em>.  For each line of input, output one line containing either a single integer giving the amount of surplus for the entire year, or output <tt>Deficit</tt> if it is impossible.</p>', '', '', 'D:\\oj\\data\\1889', 'D:\\oj\\data\\1889', '59 237\r\n375 743\r\n200000 849694\r\n2500000 8000000', '116\r\n28\r\n300612\r\nDeficit', '', '', '', '2011-06-10 19:38:18', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 32, 'power721'),
(1890, 'Problem B - Airline Hub', '<p></p>\r\n<h2>Problem B - Airline Hub</h2>\r\n<p>World Wide Flyer has landing rights at several airports throughout the world.  They wish to place their central hub at the airport that minimizes the maximum direct flying distance from the hub to any other  airport in the world.</p>\r\n<p>Input consists of a line containing n &lt;= 1000, the number of airports.  n lines follow, each giving the latitude (between -90 and +90 degrees) and longitude (between -180 and +180 degrees) of an airport.</p>\r\n<p>To two decimal places, give the latitude and longitude of the airport that best serves as a hub.  If there are several any one will do.</p>', '', '', 'D:\\oj\\data\\1890', 'D:\\oj\\data\\1890', '3\r\n3.2 -15.0\r\n20.1 -175\r\n-30.2 10', '3.20 -15.00', '', '', '', '2011-06-10 19:38:18', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 21, 'power721'),
(1891, 'Problem C - Snakes', '<p></p>\r\n<h2>Problem C - Snakes</h2>\r\n<p>Buffalo Bill wishes to cross a 1000x1000 square field.  A number of snakes are on the field at various positions, and each snake can  strike a particular distance in any direction.  Can Bill make the trip without being bitten?</p>\r\n<p>Assume that the southwest corner of the field is at (0,0) and the northwest corner at (0,1000).  The input consists of a line containing n &lt;= 1000, the number of snakes.  A line follows for each snake, containing three real numbers:  the (x,y) location of the snake and its strike distance.  The snake will bite anything that passes closer than this distance from its location.</p>\r\n<p>Bill must enter the field somewhere between the southwest and northwest corner and must leave somewhere between the southeast and northeast corners.</p>\r\n<p>If Bill can complete the trip, give coordinates at which he may enter and leave the field.  If Bill may enter and leave at several places, give the most northerly.  If there is no such pair of positions, print "Bill will be bitten."</p>', '', '', 'D:\\oj\\data\\1891', 'D:\\oj\\data\\1891', '3\r\n500 500 499\r\n0 0 999\r\n1000 1000 200', 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).', '', '', '', '2011-06-10 19:38:18', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 21, 'power721'),
(1892, 'Problem D - Snap', '<p></p>\r\n<h3>Problem D - Snap</h3>\r\n<p><em>Snap</em> is a 2-player card game.  The deck of cards contains several of each type of card.  Initially each player has one half of the deck, in some random sequence, face down in a pile, and plays them in sequence from top to bottom, placing each card face-up in another pile. When the face-down pile is exhausted, the face-up pile is turned over to become the face-down pile and play continues.</p>\r\n<p>The two players play their cards concurrently and synchronously.  That is, each places a card face up at exactly the same time.  If two cards turned up at the same time are the same type, each player calls "Snap!" and the player who calls first takes the other''s face-up pile and places it on top of his or her own.</p>\r\n<p>Play proceeds until one player has all the cards. This player is the winner.</p>\r\n<p>Your job is to simulate a game of snap to determine whether it will end within 1000 turns and, if so, to determine the winner.</p>\r\n<p>Each type of card is denoted by a single letter or digit.  The first line of input Jane''s initial pile of cards, from top to bottom. The second line of input is John''s initial pile. Jane and John start with the same number of cards; not more than 50 each.</p>\r\n<p>During play, whenever it comes time to call "Snap!" the builtin function "random" is used to determine who calls first: if the expression</p>\r\n<pre>\r\n   random()/141%2           {in C or C++}\r\n\r\n   random div 141 mod 2     {in Pascal; see note below}\r\n</pre>\r\n<p>yields 0, Jane calls first; otherwise John calls first.  Whenever Jane calls first, print "Snap! for Jane: " followed by  Jane''s face-up pile, from top to bottom.  Whenever John calls first, print "Snap! for John: " followed by John''s face-up pile. If the game ends, print "John wins." or "Jane wins.", whichever is appropriate. If the game does not end when each player has turned over 1000 cards, print "Keeps going and going ..."</p>', '', '', 'D:\\oj\\data\\1892', 'D:\\oj\\data\\1892', 'ABCDA\r\nCBADC', 'Snap! for Jane: BCBA\r\nSnap! for Jane: DADCBCBA\r\nSnap! for John: CBAC\r\nSnap! for John: ADADCBAC\r\nJohn wins.', '', '', '', '2011-06-10 19:38:18', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 15, 'power721'),
(1893, 'Problem E - Steps', '<p></p>\r\n<h2>Problem E - Steps</h2>\r\n<p>One steps through integer points of the straight line.  The length of         a step must be nonnegative and can be by one bigger than, equal to, or          by one smaller than the length of the previous step.</p>\r\n<p>What is the minimum number of steps in order to get from x to y?         The length of the first and the last step must be 1.</p>\r\n<p>Input consists of a line containing n, the number of test cases.  For each test case, a line follows with two integers:  0 &lt;= x &lt;= y &lt; 2^31. For each test case, print a line giving the minimum number of steps to get from x to y.</p>', '', '', 'D:\\oj\\data\\1893', 'D:\\oj\\data\\1893', '3\r\n45 48\r\n45 49\r\n45 50', '3\r\n3\r\n4', '', '', '', '2011-06-11 12:45:31', 1000, 131072, 'N', NULL, 2, 2, 100, 0, 0, 1, 1, 1000, 35, 'power721'),
(1894, 'Problem A: Freckles', '<p></p>\r\n<h2>Problem A: Freckles</h2>\r\n<p>In an episode of the Dick Van Dyke show, little Richie connects the freckles on his Dad''s back to form a picture of the Liberty Bell.  Alas, one of the freckles turns out to be a scar, so his Ripley''s engagement falls through.</p>\r\n<p>Consider Dick''s back to be a plane with freckles at various (x,y) locations. Your job is to tell Richie how to connect the dots so as to minimize the amount of ink used.  Richie connects the dots by drawing straight lines between pairs, possibly lifting the pen between lines. When Richie is done there must be a sequence of connected lines from any freckle to any other freckle.</p>\r\n<p>The first line contains 0 &lt; <i>n</i> &lt;= 100, the number of freckles on Dick''s back.  For each freckle, a line follows; each following line contains two real numbers indicating the (x,y) coordinates of the freckle.</p>\r\n<p>Your program prints a single real number to two decimal places:  the minimum total length of ink lines that can connect all the freckles.</p>', '', '', 'D:\\oj\\data\\1894', 'D:\\oj\\data\\1894', '3\r\n1.0 1.0\r\n2.0 2.0\r\n2.0 4.0', '3.41', '', '', '', '2011-06-10 19:38:18', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721'),
(1895, 'Problem B: Language Cardinality', '<p></p>\r\n<h2>Problem B: Language Cardinality</h2>\r\n<p>A (formal) language is a set of strings.  One way to define a particular langauge is using ordinary set notation.  Alternatively, some form of grammar may be more convenient for representing large sets.  The UW grammar in which we are interested has two parts:</p>\r\n<ul>\r\n    <li>An initial string</li>\r\n    <li>A set of replacement rules of the form <i>s<sub>1</sub></i> -&gt; <i>s<sub>2</sub></i> where <i>s<sub>1</sub></i> and <i>s<sub>2</sub></i> are strings</li>\r\n</ul>\r\n<p>The language defined by this grammar is the set of all strings that can be generated by repeatedly replacing  <i>s<sub>1</sub></i> by <i>s<sub>2</sub></i> within the initial string. For example, consider the grammar G consisting of the initial string</p>\r\n<p></p>\r\n<pre>\r\n"AyB"\r\n</pre>\r\n<p>and the replacement rules</p>\r\n<pre>\r\n{"A"-&gt;"ab", "Ay"-&gt;"cdy", "B"-&gt;"w", "B"-&gt;"x"} .\r\n</pre>\r\n<p>G generates the language</p>\r\n<p></p>\r\n<pre>\r\nL = {"AyB", "Ayw", "Ayx", "abyB", "abyw", "abyx", "cdyB", "cdyw", "cdyx"}\r\n</pre>\r\n<p>Given a UW grammar G, compute how many different strings there are in the language generated by G.</p>\r\n<p>The first line of input contains the initial string. The second and subsequent lines contain the replacement rules, one per line, terminated by end-of-file.    There are at most 100 replacement rules.  Each input string contains between 0 and 10 upper and lower case  letters, and is enclosed in quotes.  There are no spaces in the input.</p>\r\n<p>Output consists of a single integer, the number of distinct strings in the language generated by G.  If there are more than 1000 distinct strings, print "Too many." instead.</p>', '', '', 'D:\\oj\\data\\1895', 'D:\\oj\\data\\1895', '"AyB"\r\n"A"->"ab"\r\n"Ay"->"cdy"\r\n"B"->"w"\r\n"B"->"x"', '9', '', '', '', '2011-06-10 19:38:18', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 17, 'power721'),
(1896, 'Problem C:  Primary Arithmetic', '<p></p>\r\n<h2>Problem C:  Primary Arithmetic</h2>\r\n<p>Children are taught to add multi-digit numbers from right-to-left one digit at a time.  Many find the "carry" operation - in which a 1 is carried from one digit position to be added to the next - to be a significant challenge.  Your job is to count the number of  carry operations for each of a set of addition problems so that educators may assess their difficulty.</p>\r\n<p>Each line of input contains two unsigned integers less than 10 digits.   The last line of input contains 0 0.  For each line of input except the  last you should compute and print the number of carry operations that would result from adding the two numbers, in the format shown below.</p>', '', '', 'D:\\oj\\data\\1896', 'D:\\oj\\data\\1896', '123 456\r\n555 555\r\n123 594\r\n0 0', 'No carry operation.\r\n3 carry operations.\r\n1 carry operation.', '', '', '', '2011-06-10 19:38:18', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 20, 'power721'),
(1897, 'Problem D:  Demerit Points', '<p></p>\r\n<h2>Problem D:  Demerit Points</h2>\r\n<p>A province to our west, which shall remain nameless, but whose name does not start with A, B, or S, has a unique system for driver''s license demerit and merit points.  The system works (more or less) as follows.</p>\r\n<p>A new driver starts with no merit or demerit points.  When the driver is convicted of a driving offense, he or she is given between 2 and 15 demerit points, depending on the severity of the offense.</p>\r\n<p>A merit point is given, to a maximum of five, for each interval of two years in which a driver has no offenses and no demerit points. Each merit point cancels up to two demerit points.  If a subsequent offense occurs and the number of demerit points exceeds double the number of merit points, the number of demerit points is reduced by double the number of merit points, and the number of merit points is set to 0. If a subsequent offense occurs and the number of demerit points is less than or equal to double the number of merit points, the number of demerit points is reduced to 0, and the number of merit points is reduced by half the number of demerit points.  Any fractional merit points are discarded.</p>\r\n<p>Demerit points are reduced whenever a driver has one year free of any driving offense.  This reduction decreases the number of demerits by half or by 2, whichever is more.   Any fractional or negative demerit points are discarded.  This reduction takes place on each anniversary of the most recent offense until no points remain.</p>\r\n<p>If a new offense occurs on the same day as a demerit point reduction or merit point award, the reduction/award is done before the new demerit points are given.</p>\r\n<p>Your job is to read a set of information records for a driver, and to print the number of merit or demerit points at any given time.</p>\r\n<p>The first line of input contains the date of issue of the license (yyyymmdd) Subsequent lines contain information on offenses, in chronological order.  Each such line contains the offense date (yyyymmdd) and the number of points applied  (an integer between 2 and 15).   On the day the license is issued, and on every occasion that the number  of merit or demerit points changes, output a line giving the date and the number of points, in the format below. Output terminates when 5 merit points are accumulated following the last offense.</p>', '', '', 'D:\\oj\\data\\1897', 'D:\\oj\\data\\1897', '19820508\r\n19830606 2\r\n19830607 2\r\n19891212 15', '1982-05-08 No merit or demerit points.\r\n1983-06-06 2 demerit point(s).\r\n1983-06-07 4 demerit point(s).\r\n1984-06-07 2 demerit point(s).\r\n1985-06-07 No merit or demerit points.\r\n1987-06-07 1 merit point(s).\r\n1989-06-07 2 merit point(s).\r\n1989-12-12 11 demerit point(s).\r\n1990-12-12 5 demerit point(s).\r\n1991-12-12 2 demerit point(s).\r\n1992-12-12 No merit or demerit points.\r\n1994-12-12 1 merit point(s).\r\n1996-12-12 2 merit point(s).\r\n1998-12-12 3 merit point(s).\r\n2000-12-12 4 merit point(s).\r\n2002-12-12 5 merit point(s).', '', '', '', '2011-06-10 19:38:18', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721'),
(1898, 'Problem E:  Edit Step Ladders', '<p></p>\r\n<h2>Problem E:  Edit Step Ladders</h2>\r\n<p>An <i>edit step</i> is a transformation from one word <i>x</i> to another word <i>y</i> such that <i>x</i> and <i>y</i> are words in the dictionary, and <i>x</i> can be transformed to <i>y</i> by adding, deleting, or changing one letter. So the transformation from <i>dig</i> to <i>dog</i> or from <i>dog</i> to <i>do</i> are both edit steps.  An <i>edit step ladder</i> is a lexicographically ordered sequence of words  <i>w<sub>1</sub>, w<sub>2</sub>, ... w<sub>n</sub></i> such that the transformation from <i>w<sub>i</sub></i> to <i>w<sub>i+1</sub></i> is an edit step for all <i>i</i> from 1 to <i>n-1</i>.</p>\r\n<p>For a given dictionary, you are to compute the length of the longest edit step ladder.  The input to your program consists of the dictionary - a set of lower case words in lexicographic order - one per line.  No word exceeds 16 letters and there are no more than 25000 words in the dictionary. The output consists of a single integer, the number of words in the  longest edit step ladder.</p>', '', '', 'D:\\oj\\data\\1898', 'D:\\oj\\data\\1898', 'cat\r\ndig\r\ndog\r\nfig\r\nfin\r\nfine\r\nfog\r\nlog\r\nwine', '5', '', '', '', '2011-06-10 19:38:18', 10000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 10000, 21, 'power721');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1899, 'Problem A:  Bridge<font color=black>(need SPJ)</font>', '<p></p>\r\n<h2>Problem A:  Bridge</h2>\r\n<p><i>n</i> people wish to cross a bridge at night.  A group of at most two people may cross at any time, and each group must have a flashlight. Only one flashlight is available among the <i>n</i> people, so some sort of shuttle arrangement must be arranged in order to return the flashlight so that more people may cross.</p>\r\n<p>Each person has a different crossing speed; the speed of a group is determined by the speed of the slower member.  Your job is to determine a strategy that gets all <i>n</i> people across the bridge in the minimum time.</p>\r\n<p>The first line of input contains <i>n</i>, followed by <i>n</i> lines giving the crossing times for each of the people. There are not more than 1000 people and nobody takes more than 100 seconds  to cross the bridge.</p>\r\n<p>The first line of output must contain the total number of seconds required for all <i>n</i> people to cross the bridge.   The following lines give a strategy for achieving this time.  Each line contains either one or two integers, indicating which person or people form the next group to cross.  (Each person is indicated by the crossing time specified in the input.  Although many people may have the same crossing time the ambiguity is of no consequence.) Note that the crossings alternate directions, as it is necessary to return the flashlight so that more may cross.  If more than one strategy yields the minimal time, any one will do.</p>', '', '', 'D:\\oj\\data\\1899', 'D:\\oj\\data\\1899', '4\r\n1\r\n2\r\n5\r\n10', '17\r\n1 2\r\n1\r\n5 10\r\n2\r\n1 2', '暂时没有SPJ.', '', '', '2011-06-10 19:38:18', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 25, 'power721'),
(1900, 'Problem B: Saskatchewan', '<p></p>\r\n<h3>Problem B:  Saskatchewan</h3>\r\n<p>The province of Saskatchewan is surveyed in <i>sections</i>.   A section is a square mile of land.  Grid roads delimit sections; there is one north-south and one east-west road exactly every mile.  (Complications arise because of the curvature of the earth but you can disregard these and assume that the province is a plane.)  The provincial border is a polygon whose vertices correspond to the intersections of grid roads. However, the edges do not necessarily follow grid roads; some sections are cut by the border.  Your job is to compute how many sections are completely within a province like Saskatchewan.</p>\r\n<p>Standard input contains a series of no more than 100 coordinate pairs, one pair per line.  These coordinates give the vertices of the perimeter of the province; the border is formed by connecting them in order.  All coordinates are in the first quadrant; they range from 0 to 100,000.</p>\r\n<p>Your output should be a single integer:  the number of sections  (i.e. unit squares with corners at integer coordinates)  fully contained within the province.</p>\r\n<p></p>', '', '', 'D:\\oj\\data\\1900', 'D:\\oj\\data\\1900', '0 0\r\n0 100000\r\n99999 100000\r\n100000 0', '9999900000', '', '', '', '2011-06-10 19:38:18', 10000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 10000, 18, 'power721'),
(1901, 'Problem C:  Jolly Jumpers', '<p></p>\r\n<h2>Problem C:  Jolly Jumpers</h2>\r\n<p>A sequence of <i>n &gt; 0</i> integers is called a <i>jolly jumper</i> if the absolute values of the difference between successive elements take on all the values 1 through <i>n-1</i>.  For instance,</p>\r\n<p></p>\r\n<pre>\r\n1 4 2 3\r\n</pre>\r\n<p>is a jolly jumper, because the absolutes differences are 3, 2, and 1 respectively.  The definition implies that any sequence of a single integer is a jolly jumper.  You are to write a program to determine whether or not each of a number of sequences is a jolly jumper.</p>\r\n<p>Each line of input contains an integer <i>n</i> &lt; 3000 followed by <i>n</i> integers representing the sequence.  For each line of input, generate a line of output saying "Jolly" or "Not jolly".</p>', '', '', 'D:\\oj\\data\\1901', 'D:\\oj\\data\\1901', '4 1 4 2 3\r\n5 1 4 2 -1 6', 'Jolly\r\nNot jolly', '', '', '', '2011-12-24 21:09:29', 1000, 131072, 'N', NULL, 0, 3, 0, 3, 100, 1, 0, 1000, 41, 'power721'),
(1902, 'Problem D:  Tug of War', '<p></p>\r\n<h2>Problem D:  Tug of War</h2>\r\n<p>A tug of war is to be arranged at the local office picnic.  For the tug of war, the picnickers must be divided into two teams.  Each person must be on one team or the other; the number of people on the two teams must not differ by more than 1; the total weight of the people on each team should be as nearly equal as possible.</p>\r\n<p>The first line of input contains <i>n</i> the number of people at the picnic.  <i>n</i> lines follow.  The first line gives the weight of person 1; the second the weight of person 2; and so on.  Each weight is an integer between 1 and 450.  There are at most 100 people at the picnic.</p>\r\n<p>Your output will be a single line containing 2 numbers:  the total weight of the people on one team, and the total weight of the people on the other team.  If these numbers differ, give the lesser first.</p>', '', '', 'D:\\oj\\data\\1902', 'D:\\oj\\data\\1902', '3\r\n100\r\n90\r\n200', '190 200', '', '', '', '2011-12-12 10:00:56', 10000, 131072, 'N', NULL, 6, 20, 30, 8, 89, 1, 1, 10000, 64, 'power721'),
(1903, 'Problem E:  Interpreter', '<p></p>\r\n<h2>Problem E:  Interpreter</h2>\r\n<p>A certain computer has 10 registers and 1000 words of RAM.  Each register or RAM location holds a 3-digit integer between 0 and 999.  Instructions are encoded as 3-digit integers and stored in RAM.   The encodings are as follows:</p>\r\n<ul>\r\n    <li>100 means <i>halt</i></li>\r\n    <li>2dn means <i>set register d to n (between 0 and 9)</i></li>\r\n    <li>3dn means <i>add n to register d</i></li>\r\n    <li>4dn means <i>multiply register d by n</i></li>\r\n    <li>5ds means <i>set register d to the value of register s</i></li>\r\n    <li>6ds means <i>add the value of register s to register d</i></li>\r\n    <li>7ds means <i>multiply register d by the value of register s</i></li>\r\n    <li>8da means <i>set register d to the value in RAM whose address is in register a</i></li>\r\n    <li>9sa means <i>set the value in RAM whose address is in register a to the value of register s</i></li>\r\n    <li>0ds means <i>goto the location in register d unless register s contains 0</i></li>\r\n</ul>\r\n<p>All registers initially contain 000.  The initial content of the RAM is read from standard input.  The first instruction to be executed is at RAM address 0.  All results are reduced modulo 1000.</p>\r\n<p>The input to your program consists of up to 1000 3-digit unsigned integers, representing the contents of consecutive RAM locations starting at 0. Unspecified RAM locations are initialized to 000.</p>\r\n<p>The output from your program is a single integer:  the number of  instructions executed up to and including the <i>halt</i> instruction. You may assume that the program does halt.</p>', '', '', 'D:\\oj\\data\\1903', 'D:\\oj\\data\\1903', '299\r\n492\r\n495\r\n399\r\n492\r\n495\r\n399\r\n283\r\n279\r\n689\r\n078\r\n100\r\n000\r\n000\r\n000', '16', '', '', '', '2011-06-10 19:38:18', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 13, 'power721'),
(1904, 'Problem A:  Gopher II', '<p></p>\r\n<h2>Problem A:  Gopher II</h2>\r\n<p><img alt="" src="images/problem/pic1904_0" /></p>\r\n<p>The gopher family, having averted the canine threat, must face a new  predator.</p>\r\n<p>The are <i>n</i> gophers and <i>m</i> gopher holes, each at distinct (x, y) coordinates.  A hawk arrives and if a gopher does not reach a hole in <i>s</i> seconds it is vulnerable to being eaten.  A hole can save at most one gopher.  All the gophers run at the same velocity <i>v</i>. The gopher family needs an escape strategy that minimizes the number of  vulnerable gophers.</p>\r\n<p>The input contains several cases. The first line of each case contains four positive integers less than 100: <i>n</i>, <i>m</i>, <i>s</i>, and <i>v</i>.  The next <i>n</i> lines give the coordinates of the gophers; the following <i>m</i> lines give the coordinates of the gopher holes.  All distances are in metres; all times are in seconds; all velocities are in metres per second.</p>\r\n<p>Output consists of a single line for each case, giving the number of vulnerable  gophers.</p>', '', '', 'D:\\oj\\data\\1904', 'D:\\oj\\data\\1904', '2 2 5 10\r\n1.0 1.0\r\n2.0 2.0\r\n100.0 100.0\r\n20.0 20.0', '1', '', '', '', '2011-06-10 19:38:18', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 18, 'power721'),
(1905, 'Problem B: Tight words', '<p></p>\r\n<p>\r\n<title></title>\r\n</p>\r\n<h2>Problem B: Tight words</h2>\r\n<p>Given is an alphabet <em>{0, 1, ... , k}</em>, <em>0 &lt;= k &lt;= 9 </em>. We say that a word of length <em>n</em> over this alphabet is <em>tight</em> if any two neighbour digits in the word do not differ by more than 1.</p>\r\n<p>Input is a sequence of lines, each line contains two integer numbers <em>k</em> and <em>n</em>, <em>1 &lt;= n &lt;= 100</em>.  For each line of input, output the percentage of tight words of length <em>n</em> over the alphabet <em>{0, 1, ... , k}</em> with 5 fractional digits.</p>', '', '', 'D:\\oj\\data\\1905', 'D:\\oj\\data\\1905', '4 1\r\n2 5\r\n3 5\r\n8 7', '100.00000\r\n40.74074\r\n17.38281\r\n0.10130', '', '', '', '2011-06-10 19:38:18', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 16, 'power721'),
(1906, 'Problem C:  WERTYU', '<p></p>\r\n<h2>Problem C:  WERTYU</h2>\r\n<p><img align="center" alt="" src="images/problem/pic1906_0" /></p>\r\n<p>A common typing error is to place the hands on the keyboard one row to the right of the correct position.  So "Q" is typed as "W" and "J" is typed as "K" and so on.  You are to decode a message typed in this manner.</p>\r\n<p>Input consists of several lines of text.  Each line may contain digits,  spaces, upper case letters (except Q, A, Z), or punctuation shown above [except back-quote (`)].  Keys labelled with words [<i>Tab, BackSp, Control,</i> etc.] are not represented in the input. You are to replace each letter or punctuation symbol by the one  immediately to its left on the QWERTY keyboard shown above.   Spaces in the input should be echoed in the output.</p>', '', '', 'D:\\oj\\data\\1906', 'D:\\oj\\data\\1906', 'O S, GOMR YPFSU/', 'I AM FINE TODAY.', '', '', '', '2011-06-10 19:38:18', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 34, 'power721'),
(1907, 'Problem D:  Division', '<p></p>\r\n<h2>Problem D:  Division</h2>\r\n<p>Given t, a, b positive integers not bigger than 2147483647, establish whether (t^a - 1)/(t^b -1) is an integer with less than 100 digits.  Each line of input contains t, a, b.  For each line of input  print the formula followed by its value, or followed by "is not an integer with less than 100 digits.", whichever is appropriate.</p>', '', '', 'D:\\oj\\data\\1907', 'D:\\oj\\data\\1907', '2 9 3\r\n2 3 2\r\n21 42 7\r\n123 911 1', '(2^9-1)/(2^3-1) 73\r\n(2^3-1)/(2^2-1) is not an integer with less than 100 digits.\r\n(21^42-1)/(21^7-1) 18952884496956715554550978627384117011154680106\r\n(123^911-1)/(123^1-1) is not an integer with less than 100 digits.', '', '', '', '2011-06-10 19:38:18', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 18, 'power721'),
(1908, 'Problem E:  Hotter Colder', '<p></p>\r\n<h2>Problem E:  Hotter Colder</h2>\r\n<p>The children''s game <i>Hotter Colder</i> is played as follows.  Player A leaves the room while player B hides an object somewhere in the room.   Player A re-enters at position (0,0) and then visits various other positions about the room.  When player A visits a new position, player B announces "Hotter" if this position is closer to the object than the previous position; player B announces "Colder" if it is farther and "Same" if it is the same distance.</p>\r\n<p>Input consists of up to 50 lines, each containing an x,y coordinate pair followed by "Hotter", "Colder", or "Same".  Each pair represents a position within the room, which may be assumed to be a square with opposite corners at (0,0) and (10,10).  For each line of input print a line giving the total area of the region in which the object may have been placed, to 2 decimal places.  If there is no such region, output 0.00.</p>', '', '', 'D:\\oj\\data\\1908', 'D:\\oj\\data\\1908', '10.0 10.0 Colder\r\n10.0 0.0 Hotter\r\n0.0 0.0 Colder\r\n10.0 10.0 Hotter', '50.00\r\n37.50\r\n12.50\r\n0.00', '', '', '', '2011-06-10 19:38:18', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 21, 'power721'),
(1909, 'Problem A - No Tipping<font color=black>(need SPJ)</font>', '<p></p>\r\n<p></p>\r\n<h2>Problem A - No Tipping</h2>\r\n<p>As Archimedes famously observed, if you put an object on a lever arm, it will exert a twisting force around the lever''s fulcrum. This twisting is called torque and is equal to the object''s weight multiplied by its distance from the fulcrum (the angle of the lever also comes in, but that does not concern us here). If the object is to the left of the fulcrum, the direction of the torque is counterclockwise; if the object is to the right, the direction is clockwise. To compute the torque around a support, simply sum all the torques of the individual objects on the lever.</p>\r\n<p>The challenge is to keep the lever balanced while adjusting the objects on it. Assume you have a straight, evenly weighted board, 20 meters long and weighing three kilograms. The middle of the board is the center of mass, and we will call that position 0. So the possible positions on the board range from -10 (the left end) to +10 (the right end). The board is supported at positions -1.5 and +1.5 by two equal fulcrums, both two meters tall and standing on a flat floor. On the board are six packages, at positions -8, -4, -3, 2, 5 and 8, having weights of 4, 10, 10, 4, 7 and 8 kilograms, respectively as in the picture below.</p>\r\n<center>\r\n<p><img align="center" alt="" src="images/problem/pic1909_0" /></p>\r\n<p></p>\r\n</center>\r\n<p>Your job is to remove the packages one at a time in such a way that the board rests on both supports without tipping. The board would tip if the net torque around the left fulcrum (resulting from the weights of the packages and the board itself) were counterclockwise or if the net torque around the right fulcrum were clockwise.  A possible solution to this problem is: first remove the package at position -4, then the package at 8, then -8, then 5, then -3 and finally 2.</p>\r\n<p>You are to write a program which solves problems like the one described above.  The input contains multiple cases.  Each case starts with three integers: the length of the board (in meters, at least 3), the weight of the board (in kilograms) and <em>n</em> the number of packages on the board (<em>n</em> &lt;= 20). The board is supported at positions -1.5 and +1.5 by two equal fulcrums, both two meters tall and standing on a flat floor. The following <em>n</em> lines contain two integers each: the position of a package on board (in meters measured from the center, negative means to the left) and the weight of the package (in kilograms).  A line containing three 0''s ends the input.  For each case you are to output the number of the case in the format shown below and then <em>n</em> lines each containing 2 integers, the position of a package and its weight, in an order in which the packages can be removed without causing the board to tip.  If there is no solution for a case, output a single line <tt>Impossible</tt>.  There is no solution if in the initial configuration the board is not balanced.</p>\r\n<p>Sample input</p>\r\n<p></p>\r\n<p>20 3 6</p>\r\n<p>-8 4</p>\r\n<p>-4 10</p>\r\n<p>-3 10</p>\r\n<p>2 4</p>\r\n<p>5 7</p>\r\n<p>8 8</p>\r\n<p>20 3 15</p>\r\n<p>1 10&nbsp;</p>\r\n<p>8 5</p>\r\n<p>-6 8</p>\r\n<p>5 9</p>\r\n<p>-8 4</p>\r\n<p>8 10</p>\r\n<p>-3 10</p>\r\n<p>-4 5</p>\r\n<p>2 9</p>\r\n<p>-2 2</p>\r\n<p>3 3</p>\r\n<p>-3 2</p>\r\n<p>5 1</p>\r\n<p>-6 1</p>\r\n<p>2 5</p>\r\n<p>30 10 2</p>\r\n<p>-8 100</p>\r\n<p>9 91</p>\r\n<p>0 0 0&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>Possible Output for sample input</p>\r\n<p></p>\r\n<p></p>\r\n<p>Case 1:</p>\r\n<p>-4 10</p>\r\n<p>8 8</p>\r\n<p>-8 4</p>\r\n<p>5 7</p>\r\n<p>-3 10</p>\r\n<p>2 4</p>\r\n<p>Case 2:</p>\r\n<p>1 10&nbsp;</p>\r\n<p>8 5</p>\r\n<p>-6 8</p>\r\n<p>5 9</p>\r\n<p>-8 4</p>\r\n<p>8 10</p>\r\n<p>-3 10</p>\r\n<p>-4 5</p>\r\n<p>2 9</p>\r\n<p>-2 2</p>\r\n<p>3 3</p>\r\n<p>-3 2</p>\r\n<p>5 1</p>\r\n<p>-6 1</p>\r\n<p>2 5</p>\r\n<p>Case 3:</p>\r\n<p>Impossible</p>\r\n<p>\r\n<meta http-equiv="content-type" content="text/html; charset=utf-8" /></p>', '', '', 'D:\\oj\\data\\1909', 'D:\\oj\\data\\1909', '', '', '暂时没有SPJ.', '', '', '2011-06-10 19:38:19', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 29, 'power721'),
(1910, 'Problem B - Subway', '<p></p>\r\n<p><img align="right" alt="" src="images/problem/pic1910_0" /></p>\r\n<h2>Problem B - Subway</h2>\r\n<p>Subway trains are meant to move people as quickly, safely, and comfortably as possible from station to station.  Although the train drivers'' unions may not agree, computer operated trains accomplish these goals more effectively than human operated trains.  You are to determine the optimal control strategy to move the train from one station to another within the constraints imposed by safety and comfort considerations, as well as the physical limitations of the train itself.</p>\r\n<p>The parameters to the problem are all positive integers not greater than 1000.</p>\r\n<ul>\r\n    <li><i>d</i> - the distance between stations, in metres</li>\r\n    <li><i>m</i> - the maximum allowable speed of the train, in metres/sec</li>\r\n    <li><i>a</i> - the maximum absolute acceleration of the train, in metres/sec<sup>2</sup></li>\r\n    <li><i>j</i> - the maximum absolute <i>jerk</i>, in metres/sec<sup>3</sup></li>\r\n</ul>\r\n<p>The train must be completely stopped at each station and must move in one direction at speeds not exceeding <i>m</i>.   Acceleration can be positive (forward) or negative (backwards) but its absolute value must not exceed <i>a</i>. The last parameter, <i>jerk</i>, is the rate of change of acceleration in either  direction.  That is, acceleration cannot increase or decrease at greater than this rate.  This parameter prevents toppling the standing passengers.</p>\r\n<p>There are several test cases.  For each test case, standard input has a single line with <i>d, m, a, j</i>.  For each test case, standard output should contain a single line giving the minimum time in seconds, to the nearest 0.1 second, required to move between the stations.</p>', '', '', 'D:\\oj\\data\\1910', 'D:\\oj\\data\\1910', '1000 70 20 1', '31.7', '', '', '', '2011-06-10 19:38:19', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721'),
(1911, 'Problem C - Sumsets', '<p></p>\r\n<p><img align="right" alt="" src="images/problem/pic1911_0" /></p>\r\n<h2>Problem C - Sumsets</h2>\r\n<p>Given S, a set of integers, find the largest d such that  a + b + c = d where a, b, c, and d are distinct elements of S.</p>', '<p>Several S, each consisting of a line containing an integer 1 &lt;= n &lt;= 1000 indicating the number of elements in S, followed by the elements of S, one per line. Each element of S is a distinct integer between -536870912 and +536870911 inclusive. The last line of input contains 0.</p>\r\n<p></p>', '<p>For each S, a single line containing d, or a single line containing "no solution".</p>\r\n<p></p>', 'D:\\oj\\data\\1911', 'D:\\oj\\data\\1911', '5\r\n2 \r\n3 \r\n5 \r\n7 \r\n12\r\n5\r\n2 \r\n16 \r\n64 \r\n256 \r\n1024\r\n0', '12\r\nno solution', '', '', '', '2011-06-10 19:38:19', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 16, 'power721'),
(1912, 'Problem D - Zipf''s Law', '<p></p>\r\n<p></p>\r\n<p>\r\n<meta http-equiv="content-type" content="text/html; charset=utf-8" /></p>\r\n<h3 style="font-family: ''AR PL UKai CN''; font-size: medium; ">Problem D - Zipf''s Law</h3>\r\n<p><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">Harvard linguistics professor George Kingsley Zipf (1902-1950) observed that the frequency of the</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">&nbsp;</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; "><i>k</i></span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">th most common word in a text is roughly proportional to 1/</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; "><i>k</i></span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">. He justified his observations in a book titled</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">&nbsp;</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; "><i>Human behavior and the principle of least effort</i></span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">&nbsp;</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">published in 1949. While Zipf''s rationale has largely been discredited, the principle still holds, and others have afforded it a more sound mathematical basis.</span></p>\r\n<p><img align="right" alt="" src="images/problem/pic1912_0" /></p>', '<p>\r\n<meta http-equiv="content-type" content="text/html; charset=utf-8">Input consists of several test cases. The first line of each case contains a single positive integer&nbsp;<em>n</em>. Several lines of text follow which will contain no more than 10000 words. The text for each case is terminated by a single line containing EndOfText. EndOfText does not appear elsewhere in the input and is not considered a word.</meta>\r\n</p>\r\n<p></p>', '<p>\r\n<meta http-equiv="content-type" content="text/html; charset=utf-8">For each test case, output the words which occur&nbsp;<em>n</em>&nbsp;times in the input text, one word per line, lower case, in alphabetical order. If there are no such words in input, output the following line:\r\n<pre>\r\nThere is no such word.\r\n</pre>\r\nLeave a blank line between cases.</meta>\r\n</p>\r\n<p></p>', 'D:\\oj\\data\\1912', 'D:\\oj\\data\\1912', '2\r\n\r\nIn practice, the difference between theory and practice is always\r\ngreater than the difference between theory and practice in theory.\r\n	- Anonymous\r\n\r\nMan will occasionally stumble over the truth, but most of the\r\ntime he will pick himself up and continue on.\r\n        - W. S. L. Churchill\r\nEndOfText', 'between\r\ndifference\r\nin\r\nwill', '', '', '', '2011-06-10 19:38:19', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 16, 'power721'),
(1913, 'Problem A:  Average Speed', '<p></p>\r\n<h2>Problem A:  Average Speed</h2>\r\n<p>You have bought a car in order to drive from Waterloo to a big city. The odometer on their car is broken, so you cannot measure distance.   But the speedometer and cruise control both work, so the car can maintain a constant speed which can be adjusted from time to time in response to speed limits, traffic jams, and border queues.  You have a stopwatch and note the elapsed time every time the speed changes.  From time to time you wonder, "how far  have I come?".  To solve this problem you must write a program to run on your laptop computer in the passenger seat.</p>\r\n<p>Standard input contains several lines of input:  Each speed change is indicated by a line specifying the elapsed time since the beginning of the trip (hh:mm:ss),  followed by the new speed in km/h.  Each query is indicated by a line containing the elapsed time.   At the outset of the trip the car is stationary.   Elapsed times are given in non-decreasing order and there is at most one speed change at any given time.</p>\r\n<p>For each query in standard input, you should print a line giving the time and the distance travelled, in the format below.</p>', '', '', 'D:\\oj\\data\\1913', 'D:\\oj\\data\\1913', '00:00:01 100\r\n00:15:01\r\n00:30:01\r\n01:00:01 50\r\n03:00:01\r\n03:00:05 140', '00:15:01 25.00 km\r\n00:30:01 50.00 km\r\n03:00:01 200.00 km', '', '', '', '2011-06-10 19:38:21', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 18, 'power721'),
(1914, 'Problem B:  Subway', '<p></p>\r\n<h2>Problem B:  Subway</h2>\r\n<p>You have just moved from a quiet Waterloo neighbourhood to a big, noisy city. Instead of getting to ride your bike to school every day, you now get to walk and take the subway. Because you don''t want to be late for class, you want to know how long it will take you to get to school.</p>\r\n<p>You walk at a speed of 10 km/h. The subway travels at 40 km/h. Assume that you are lucky, and whenever you arrive at a subway station, a train is there that you can board immediately. You may get on and off the subway any number of times, and you may switch  between different subway lines if you wish. All subway lines go in  both directions.</p>\r\n<p>Input consists of the x,y coordinates of your home and your school, followed by specifications of several subway lines. Each subway line consists of the non-negative integer x,y coordinates of each stop on the line,  in order.  You may assume the subway runs in a straight line between adjacent stops, and the coordinates represent an integral number of metres.  Each line has at least two stops.  The end of each subway line is followed by the dummy  coordinate pair -1,-1.  In total there are at most 200 subway stops in the city.</p>\r\n<p>Output is the number of minutes it will take you to get to school, rounded to the nearest minute, taking the fastest route.</p>', '', '', 'D:\\oj\\data\\1914', 'D:\\oj\\data\\1914', '0 0 10000 1000\r\n0 200 5000 200 7000 200 -1 -1 \r\n2000 600 5000 600 10000 600 -1 -1', '21', '', '', '', '2011-06-10 19:38:21', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 22, 'power721'),
(1915, 'Problem C: Babelfish', '<p></p>\r\n<h2>Problem C: Babelfish</h2>\r\n<p>You have just moved from Waterloo to a big city. The people here speak an incomprehensible dialect of a foreign language. Fortunately, you have a dictionary to help you understand them.</p>\r\n<p>Input consists of up to 100,000 dictionary entries, followed by a blank line, followed by a message of up to 100,000 words. Each dictionary entry is a line containing an English word, followed by a space and a foreign language word. No foreign word appears more than once in the dictionary. The message is a sequence of words in the foreign language, one word on each line. Each word in the input is a sequence of at most 10 lowercase letters.  Output is the message translated to English, one word per line.  Foreign words not in the dictionary should be translated as "eh".</p>', '', '', 'D:\\oj\\data\\1915', 'D:\\oj\\data\\1915', 'dog ogday\r\ncat atcay\r\npig igpay\r\nfroot ootfray\r\nloops oopslay\r\n\r\natcay\r\nittenkay\r\noopslay', 'cat\r\neh\r\nloops', '', '', '', '2011-09-28 18:20:33', 1000, 131072, 'N', NULL, 3, 5, 60, 2, 50, 2, 2, 1000, 53, 'power721'),
(1916, 'Problem D: Bounding box', '<p></p>\r\n<p>\r\n<title></title>\r\n</p>\r\n<h2>Problem D: Bounding box</h2>\r\n<p>The Archeologists of the Current Millenium (ACM) now and then discover ancient artifacts located at vertices of regular polygons.  The moving sand dunes of the desert render the excavations difficult and thus once three vertices of a polygon are discovered there is a need to cover the entire polygon with protective fabric.</p>\r\n<p>Input contains multiple cases. Each case describes one polygon. It starts with an integer <em>n</em> &lt;= 50, the number of vertices in the polygon, followed by three pairs of real numbers giving the <em>x</em> and <em>y</em> coordinates of three vertices of the polygon.  The numbers are separated by whitespace.  The input ends with a <em>n</em> equal 0, this case should not be processed.</p>\r\n<p>For each line of input, output one line in the format shown below, giving the smallest area of a rectangle which can cover all the vertices of the polygon and whose sides are parallel to the <em>x</em> and <em>y</em> axes.</p>', '', '', 'D:\\oj\\data\\1916', 'D:\\oj\\data\\1916', '4\r\n10.00000 0.00000\r\n0.00000 -10.00000\r\n-10.00000 0.00000\r\n6\r\n22.23086 0.42320\r\n-4.87328 11.92822\r\n1.76914 27.57680\r\n23\r\n156.71567 -13.63236\r\n139.03195 -22.04236\r\n137.96925 -11.70517\r\n0', 'Polygon 1: 400.000\r\nPolygon 2: 1056.172\r\nPolygon 3: 397.673', '', '', '', '2011-06-10 19:38:23', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 17, 'power721'),
(1917, 'Problem E: A multiplication game', '<p></p>\r\n<p>\r\n<title></title>\r\n</p>\r\n<h2>Problem E: A multiplication game</h2>\r\n<p>Stan and Ollie play the game of multiplication by multiplying an integer <em>p</em> by one of the numbers 2 to 9.  Stan always starts with <em>p</em> = 1, does his multiplication, then Ollie multiplies the number, then Stan and so on.  Before a game starts, they draw an integer 1 &lt; <em>n</em> &lt; 4294967295 and the winner is who first reaches <em>p</em> &gt;= <em>n</em>.  Each line of input contains one integer number <em>n</em>.  For each line of input output one line either</p>\r\n<pre>\r\nStan wins.\r\n</pre>\r\n<p>or</p>\r\n<pre>\r\nOllie wins.\r\n</pre>\r\n<p>assuming that both of them play perfectly.</p>', '', '', 'D:\\oj\\data\\1917', 'D:\\oj\\data\\1917', '162\r\n17\r\n34012226', 'Stan wins.\r\nOllie wins.\r\nStan wins.', '', '', '', '2011-06-10 19:38:23', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 21, 'power721'),
(1918, 'Problem A: Adventures in Moving - Part IV', '<p><img align="right" alt="" src="images/problem/pic1918_0" /></p>\r\n<h2>Problem A: Adventures in Moving - Part IV</h2>\r\n<p>To help you move from Waterloo to the big city, you are considering renting a moving truck. Gas prices being so high these days, you want to know how much the gas for such a beast will set you back.</p>\r\n<p>The truck consumes a full litre of gas for each kilometre it travels. It has a 200 litre gas tank. When you rent the truck in Waterloo, the tank is half full. When you return it in the big city, the tank must be at least half full, or you''ll get gouged even more for gas by the rental company. You would like to spend as little as possible on gas, but you don''t want to run out along the way.</p>\r\n<p>Input is all integers. The first integer is the distance in kilometres from Waterloo to the big city, at most 10000. Next comes a set of up to 100 gas station specifications, describing all the gas stations along your route, in non-decreasing order by distance.  Each specification  consists of the distance in kilometres of the gas station from Waterloo, and the price of a litre of gas at the gas station, in tenths of a cent, at most 2000.</p>\r\n<p>Output is the minimum amount of money that you can spend on gas to get you from Waterloo to the big city. If it is not possible to get from Waterloo to the big city without running out of gas along the way, output "Impossible".</p>', '', '', 'D:\\oj\\data\\1918', 'D:\\oj\\data\\1918', '500\r\n100 999\r\n150 888\r\n200 777\r\n300 999\r\n400 1009\r\n450 1019\r\n500 1399', '450550', '', '', '', '2011-06-10 19:38:23', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 16, 'power721'),
(1919, 'Problem B: Pairsumonious Numbers', '<p></p>\r\n<p>\r\n<title></title>\r\n<img align="right" alt="" src="images/problem/pic1919_0" /></p>\r\n<h2>Problem B: Pairsumonious Numbers</h2>\r\n<p>For 10 &gt; N &gt; 2 numbers we form N*(N-1)/2 sums by adding every pair of the numbers.  Your task is to find the N numbers given the sums.  Each line of input contains N followed by N*(N-1)/2 integer numbers separated  by a space. For each line of input, output one line containing N integers in non-descending order such that the input numbers are pairwise sums of  the N numbers.  If there is more than one solution, any one will do; if there is no solution, print "Impossible".</p>', '', '', 'D:\\oj\\data\\1919', 'D:\\oj\\data\\1919', '3 1269 1160 1663\r\n3 1 1 1\r\n5 226 223 225 224 227 229 228 226 225 227\r\n5 216 210 204 212 220 214 222 208 216 210\r\n5 -1 0 -1 -2 1 0 -1 1 0 -1\r\n5 79950 79936 79942 79962 79954 79972 79960 79968 79924 79932', '383 777 886\r\nImpossible\r\n111 112 113 114 115\r\n101 103 107 109 113\r\n-1 -1 0 0 1\r\n39953 39971 39979 39983 39989', '', '', '', '2011-06-10 19:38:23', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 17, 'power721'),
(1920, 'Problem C:  Snow Clearing', '<p></p>\r\n<p><img align="right" alt="" src="images/problem/pic1920_0" /></p>\r\n<h2>Problem C:  Snow Clearing</h2>\r\n<p>As the days become shorter and the nights become longer we turn our thoughts to snow clearing.  Due to budget cuts, the Big Noisy City has exactly one snow plow.  The plow can clear exactly one lane of a road in a single pass.  Whenever there is snow on the ground, the plow departs from its hangar and tours the city, plowing as it goes.  What is the minimum time that the plow needs to clear every lane of every road?</p>\r\n<p>The first line of input contains two integers:  the x,y coordinates of the hangar (in metres).  Up to 100 lines follow.  Each gives the coordinates (in metres) of the beginning and end of a street.  All roads are perfectly straight, with one lane in each direction.  The plow can turn any direction (including a U-turn) at any intersection,  and can turn around at the end of any street.  The plow travels at 20 km/h if it is plowing, and 50 km/h if the lane it is driving on has already been plowed.  It is possible to reach all streets from the hangar.</p>\r\n<p>Your output should be the time, in hours and minutes, required to clear the streets and return to the hangar.  Round to the nearest minute.</p>', '', '', 'D:\\oj\\data\\1920', 'D:\\oj\\data\\1920', '0 0\r\n0 0 10000 10000\r\n5000 -10000 5000 10000\r\n5000 10000 10000 10000', '3:55', '', '', '', '2011-06-10 19:38:23', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 14, 'power721'),
(1921, 'Problem D:  Adventures in Moving - Part V', '<p></p>\r\n<h2>Problem D:  Adventures in Moving - Part V</h2>\r\n<p><img align="right" alt="" src="images/problem/pic1921_0" /> To save money you are considering renting a small cube van to transport your belongings to the Big City.  The interior of the van is a rectangular box with width <i>w</i>, height <i>h</i>, and length <i>l</i>.   The box has a sliding door that lifts but only to height <i>H</i>.  That is, there is an immovable overhang of height <i>H-h</i> at the top of the door.</p>\r\n<p>You have a large rectangular box that you wish to load on the truck. Can you get it on the truck subject to the following constraints:</p>\r\n<ul>\r\n    <li>The box must fit through the door, tilting it forward or sideways (but not both) as necessary (see figure below).</li>\r\n    <li>The box must be placed with one side flat against the floor.</li>\r\n    <li>The box must be placed with one side flat against the front wall.</li>\r\n    <li>The door must close once the box is in place.</li>\r\n</ul>\r\n<p>You may assume there are no obstructions (such as a ceiling or the ground) outside the truck that might interfere with loading.</p>\r\n<p><img align="right" alt="" src="images/problem/pic1921_1" /></p>\r\n<p>There are several test cases, each represented by two lines of input. The first line of each contains 4 integers:  <i>w, h, l, H</i>.  The next line contains 3 integers - the dimensions of the box. For each test case, print "The box goes on the truck." if it is possible to load the box on the truck; otherwise print "The box will not go on the truck."  You may assume that you start with an empty truck for each test case.</p>', '', '', 'D:\\oj\\data\\1921', 'D:\\oj\\data\\1921', '8 8 12 7\r\n8 12 8\r\n8 8 12 7\r\n7 12 8\r\n8 8 12 7\r\n1 7 13\r\n100 200 99 190\r\n100 195 30', 'The box will not go on the truck.\r\nThe box goes on the truck.\r\nThe box will not go on the truck.\r\nThe box goes on the truck.', '', '', '', '2011-06-10 19:38:23', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721'),
(1922, 'Problem A:  Return of the Jedi', '<p><img align="right" src="http://plg1.cs.uwaterloo.ca/~acm00/020126/jedi.jpg" alt="" /></p>\r\n<h2>Problem A:  Return of the Jedi</h2>\r\n<p>Luke Skywalker races through the forest on a speeder bike, trying to outrun a patrol of Imperial scouts on Endor. A small moon near a new Death Star, Endor is covered by dense foliage and a thick forest of ancient towering trees. The speeder bike , which Luke stole from an Imperial scout, is an antigravity vehicle capable of speeds of 200 miles an hour.  How quickly can Luke reach Princess Leia in the Ewok village?</p>\r\n<p>The forest is a plane with T trees.  Luke''s position is specified by a pair of coordinates ( x<sub>luke</sub> , y<sub>luke</sub> ) within the plane.  The Ewok village has coordinates ( x<sub>ewok</sub> , y<sub>ewok</sub> ). You are to find the shortest travel time from Luke''s position to the Ewok village.</p>\r\n<p>The first line of input contains T,  x<sub>luke</sub> , y<sub>luke</sub>  x<sub>ewok</sub> , y<sub>ewok</sub> . T lines follow; each gives the coordinates and diameter of a tree: x<sub>tree<sub>i</sub></sub> , y<sub>tree<sub>i</sub></sub> , d<sub>tree<sub>i</sub></sub> .  T is an integer not exceeding 10; coordinates and diameters are real numbers in miles.  Trees do not intersect or touch one another.</p>\r\n<p>Output is a single real number, to two decimal places, giving the minimum travel time in seconds.</p>', '', '', 'D:\\oj\\data\\1922', 'D:\\oj\\data\\1922', '2 0.0 0.0 10.0 0.0\r\n4.0 0.0 1.0\r\n6.0 0.0 1.0', '181.13', '', '', '', '2011-06-10 19:38:30', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 14, 'power721'),
(1923, 'Problem B:  Discrete Logging', '<p><img align="right" src="http://plg1.cs.uwaterloo.ca/~acm00/020126/woodchop.jpg" alt="" /></p>\r\n<h2>Problem B:  Discrete Logging</h2>\r\n<p>Given a prime P, 2 &lt;= P &lt; 2<sup>31</sup>, an integer B, 2 &lt;= B &lt; P, and an integer N, 2 &lt;= N &lt; P, compute the discrete logarithm of N, base B, modulo P. That is, find an integer L such that</p>\r\n<pre>\r\n    B<sup>L</sup> == N (mod P)\r\n</pre>\r\n<p>Read several lines of input, each containing P,B,N separated by a space, and for each line print the logarithm on a separate line.  If there are several, print the smallest; if there is none, print "no solution".</p>\r\n<p>The solution to this problem requires a well known result in number theory  that is probably expected of you for Putnam but not ACM competitions.  It is Fermat''s theorem  that states</p>\r\n<pre>\r\n   B<sup>(P-1)</sup> == 1 (mod P)\r\n</pre>\r\n<p>for any prime P and some other (fairly rare) numbers known as base-B pseudoprimes.  A rarer subset of the base-B pseudoprimes, known as Carmichael numbers, are pseudoprimes for every base between 2 and P-1. A corollary to Fermat''s theorem is that for any m</p>\r\n<pre>\r\n   B<sup>(-m)</sup> == B<sup>(P-1-m)</sup> (mod P) .\r\n</pre>', '', '', 'D:\\oj\\data\\1923', 'D:\\oj\\data\\1923', '5 2 1\r\n5 2 2\r\n5 2 3\r\n5 2 4\r\n5 3 1\r\n5 3 2\r\n5 3 3\r\n5 3 4\r\n5 4 1\r\n5 4 2\r\n5 4 3\r\n5 4 4\r\n12345701 2 1111111\r\n1111111121 65537 1111111111', '0\r\n1\r\n3\r\n2\r\n0\r\n3\r\n1\r\n2\r\n0\r\nno solution\r\nno solution\r\n1\r\n9584351\r\n462803587', '', '', '', '2011-06-10 19:38:30', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 16, 'power721'),
(1924, 'Problem C:  Hardwood Species', '<p><img align="right" src="http://plg1.cs.uwaterloo.ca/~acm00/020126/pitchpine.gif" alt="" /></p>\r\n<h2>Problem C:  Hardwood Species</h2>\r\n<p>Hardwoods are the botanical group of trees that have broad leaves, produce a fruit or nut, and generally go dormant in the winter.</p>\r\n<p>America''s temperate climates produce forests with hundreds of hardwood species -- trees that share certain biological characteristics. Although oak, maple and cherry all are types of hardwood trees, for example, they are different species. Together, all the hardwood species represent 40 percent of the trees in the United States.</p>\r\n<p>On the other hand, softwoods, or conifers, from the Latin word meaning "cone-bearing," have needles. Widely available US softwoods include cedar, fir, hemlock, pine, redwood, spruce and cypress. In a home, the softwoods are used primarily as structural lumber such as 2x4s and 2x6s, with some limited decorative applications.</p>\r\n<p>Using satellite imaging technology, the Department of Natural Resources has compiled an inventory of every tree standing on a particular day. You are to compute the total fraction of the tree population represented by each species.</p>\r\n<p>Input to your program consists of a list of the species of every tree observed by the satellite; one tree per line.  No species name exceeds 30 characters.  There are no more than 10,000 species and no more than 1,000,000 trees.</p>\r\n<p>Print the name of each species represented in the population, in alphabetical order, followed by the percentage of the population it represents, to 4 decimal places.</p>', '', '', 'D:\\oj\\data\\1924', 'D:\\oj\\data\\1924', 'Red Alder\r\nAsh\r\nAspen\r\nBasswood\r\nAsh\r\nBeech\r\nYellow Birch\r\nAsh\r\nCherry\r\nCottonwood\r\nAsh\r\nCypress\r\nRed Elm\r\nGum\r\nHackberry\r\nWhite Oak\r\nHickory\r\nPecan\r\nHard Maple\r\nWhite Oak\r\nSoft Maple\r\nRed Oak\r\nRed Oak\r\nWhite Oak\r\nPoplan\r\nSassafras\r\nSycamore\r\nBlack Walnut\r\nWillow', 'Ash 13.7931\r\nAspen 3.4483\r\nBasswood 3.4483\r\nBeech 3.4483\r\nBlack Walnut 3.4483\r\nCherry 3.4483\r\nCottonwood 3.4483\r\nCypress 3.4483\r\nGum 3.4483\r\nHackberry 3.4483\r\nHard Maple 3.4483\r\nHickory 3.4483\r\nPecan 3.4483\r\nPoplan 3.4483\r\nRed Alder 3.4483\r\nRed Elm 3.4483\r\nRed Oak 6.8966\r\nSassafras 3.4483\r\nSoft Maple 3.4483\r\nSycamore 3.4483\r\nWhite Oak 10.3448\r\nWillow 3.4483\r\nYellow Birch 3.4483', '', '', '', '2011-06-10 19:38:30', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 22, 'power721'),
(1925, 'Problem D:  Forests', '<p><img align="right" src="http://plg1.cs.uwaterloo.ca/~acm00/020126/treefall.jpg" alt="" /></p>\r\n<h2>Problem D:  Forests</h2>\r\n<p>If a tree falls in the forest, and there''s nobody there to hear, does it make a sound?  This classic conundrum was coined by George Berkeley (1685-1753), the Bishop and influential Irish philosopher whose primary philosophical achievement is the advancement of what has come to be called <i>subjective idealism</i>.  He wrote a number of works, of which the most widely-read are <i>Treatise Concerning the Principles of Human Knowledge</i> (1710) and <i>Three Dialogues between Hylas and Philonous</i> (1713) (Philonous, the "lover of the mind," representing Berkeley himself).</p>\r\n<p>A forest contains <i>T</i> trees numbered from 1 to <i>T</i> and <i>P</i>  people numbered from 1 to <i>P</i>.  Standard input consists of a line containing <i>T</i> and <i>P</i> followed by several lines,  containing a pair of integers <i>i</i> and <i>j</i>,  indicating that person <i>i</i> has heard tree <i>j</i> fall.   People may have different opinions as to which trees, according to Berkeley, have made a sound.  How many different opinions are  represented in the input?  Two people hold the same opinion only if they hear exactly the same set of trees. You may assume that <i>P &lt; 100</i> and <i>T &lt; 100</i>.</p>', '', '', 'D:\\oj\\data\\1925', 'D:\\oj\\data\\1925', '3 4\r\n1 2\r\n3 3\r\n1 3\r\n2 2\r\n3 2\r\n2 4', '2', '', '', '', '2011-06-10 19:38:36', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 14, 'power721'),
(1926, 'Problem E:  A Star not a Tree?', '<p><img align="right" src="http://plg1.cs.uwaterloo.ca/~acm00/020126/cables.jpg" alt="" /></p>\r\n<h2>Problem E:  A Star not a Tree?</h2>\r\n<p>Luke wants to upgrade his home computer network from 10mbs to 100mbs. His existing network uses 10base2 (coaxial) cables that allow you to connect any number of computers together in a linear arrangement. Luke is particulary proud that he solved a nasty NP-complete problem in order to minimize the total cable length.</p>\r\n<p>Unfortunately, Luke cannot use his existing cabling. The 100mbs system uses 100baseT (twisted pair) cables.  Each 100baseT cable connects only two devices:  either two network cards or a network card and a hub.  (A hub is an electronic device that  interconnects several cables.)  Luke has a choice:  He can buy 2N-2 network cards and connect his N computers together by inserting one or more cards into each computer and connecting them all together. Or he can buy N network cards and a hub and connect each of his N computers to the hub.  The first approach would require that Luke configure his operating system to forward network traffic.  However, with the installation of Winux 2007.2, Luke discovered that network forwarding no longer worked. He couldn''t figure out how to re-enable forwarding, and he had never heard of Prim or Kruskal, so he settled on the second approach:   N network cards and a hub.</p>\r\n<p>Luke lives in a loft and so is prepared to run the cables and place the  hub anywhere.  But he won''t move his computers.  He wants to minimize the total length of cable he must buy.</p>\r\n<p>The first line of input contains a positive integer N &lt;= 100, the number  of computers.  N lines follow; each gives the (x,y) coordinates (in mm.) of a computer within the room.  All coordinates are integers between  0 and 10,000.  Output consists of one number, the total length of the cable segments, rounded to the nearest mm.</p>', '', '', 'D:\\oj\\data\\1926', 'D:\\oj\\data\\1926', '4\r\n0 0\r\n0 10000\r\n10000 10000\r\n10000 0', '28284', '', '', '', '2011-06-10 19:38:36', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 16, 'power721'),
(1927, 'Problem A:  Hay Points', '<p><img align="right" src="images/problem/pic1927_0" alt="" /></p>\r\n<h2>Problem A:  Hay Points</h2>\r\n<p>Each employee of a bureaucracy has a <i>job description</i> - a few paragraphs that describe the responsibilities of the job.  The employee''s job description, combined with other factors, such as seniority, is used to determine his or her salary.</p>\r\n<p>The <i>Hay Point</i> system frees the Human Resources department from having to make an intelligent judgement as to the value of the employee; the job description is merely scanned for words and phrases that indicate responsibility.  In particular, job descriptions that indicate control over a large budget or management over a large number of people yield high Hay Point scores.</p>\r\n<p>You are to implement a simplified Hay Point system.  You will be given a Hay Point dictionary and a number of job descriptions.  For each job description you are to compute the salary associated with the job,  according to the system.</p>\r\n<p>The first line of input contains 2 positive integers:  <i>m &lt;= 1000</i>, the number of words in the Hay Point dictionary, and <i>n &lt;= 100</i>, the number of job descriptions.  <i>m</i> lines follow; each contains a word (a string of up to 16 lower-case letters) and a dollar value (a real number between 0 and 1,000,000).  Following the dictionary are the <i>n</i> job descriptions.  Each job description consists of one or more lines of text; for your convenience the text has been converted to lower case and has no characters other than letters, numbers, and spaces.  Each job description is terminated by a line containing a period.</p>\r\n<p>For each job description, output the corresponding salary computed as the sum of the Hay Point values for all words that appear in the description. Words that do not appear in the dictionary have a value of 0.</p>', '', '', 'D:\\oj\\data\\1927', 'D:\\oj\\data\\1927', '7 2\r\nadminister 100000\r\nspending 200000\r\nmanage 50000\r\nresponsibility 25000\r\nexpertise 100\r\nskill 50\r\nmoney 75000\r\nthe incumbent will administer the spending of kindergarden milk money\r\nand exercise responsibility for making change he or she will share\r\nresponsibility for the task of managing the money with the assistant\r\nwhose skill and expertise shall ensure the successful spending exercise\r\n.\r\nthis individual must have the skill to perform a heart transplant and\r\nexpertise in rocket science\r\n.', '700150\r\n150', '', '', '', '2011-06-10 19:38:39', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 52, 'power721');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1928, 'Problem B:  Jogging Trails', '<p><img align="right" src="images/problem/pic1928_0" alt="" /></p>\r\n<h2>Problem B:  Jogging Trails</h2>\r\n<p>Gord is training for a marathon.  Behind his house is a park with a large network of jogging trails connecting water stations.  Gord wants to find the shortest jogging route that travels along every trail at least once.</p>\r\n<p>Input consists of several test cases. The first line of input for each case contains two positive integers: <i>n &lt;= 15</i>, the number of water stations, and <i>m &lt; 1000</i>, the  number of trails.  For each trail, there is one subsequent line of input containing three positive integers:  the first two, between  1 and <i>n</i>, indicating the water stations at the end points of the trail;  the third indicates the length of the trail, in cubits.  There may be more than one trail between any two stations; each different trail is given only  once in the input; each trail can be travelled in either direction. It is possible to reach any trail from any other trail by visiting a sequence of water stations connected by trails.  Gord''s route may start  at any water station, and must end at the same station.  A single line containing 0 follows the last test  case.</p>\r\n<p>For each case, there should be one line of output giving the length of Gord''s jogging route.</p>', '', '', 'D:\\oj\\data\\1928', 'D:\\oj\\data\\1928', '4 5\r\n1 2 3\r\n2 3 4\r\n3 4 5\r\n1 4 10\r\n1 3 12\r\n0', '41', '', '', '', '2011-06-10 19:38:39', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 20, 'power721'),
(1929, 'Problem C: Beavergnaw', '<p>\r\n<title></title>\r\n</p>\r\n<h2>Problem C: Beavergnaw</h2>\r\n<p>When chomping a tree the beaver cuts a very specific shape out of the tree trunk.  What is left in the tree trunk looks like two frustums of a cone joined by a cylinder with the diameter the same as its height.  A very curious beaver tries not to demolish a tree but rather sort out what should be the diameter of the cylinder joining the frustums such that he chomped out certain amount of wood.  You are to help him to do the calculations.</p>\r\n<p><img hspace="10" align="right" vspace="10" src="images/problem/pic1929_0" alt="" /> <img hspace="10" align="left" vspace="10" src="images/problem/pic1929_1" alt="" /> We will consider an idealized beaver chomping an idealized tree.  Let us assume that the tree trunk is a cylinder of diameter <b>D</b> and that the beaver chomps on a segment of the trunk also of height <b>D</b>.  What should be the diameter <b>d</b> of the inner cylinder such that the beaver chmped out <b>V</b> cubic units of wood?</p>\r\n<p>Input contains multiple cases each presented on a separate line.  Each line contains two integer numbers <b>D</b> and <b>V</b> separated by whitespace. <b>D</b> is the linear units and <b>V</b> is in cubic units. <b>V</b> will not exceed the maximum volume of wood that the beaver can chomp.  A line with <b>D</b>=0 and <b>V</b>=0 follows the last case.</p>\r\n<p>For each case, one line of output should be produced containing one number rounded to three fractional digits giving the value of <b>d</b> measured in linear units.</p>', '', '', 'D:\\oj\\data\\1929', 'D:\\oj\\data\\1929', '10 250\r\n20 2500\r\n25 7000\r\n50 50000\r\n0 0', '8.054\r\n14.775\r\n13.115\r\n30.901', '', '', '', '2011-06-10 19:38:39', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 17, 'power721'),
(1930, 'Problem D: Power Strings', '<p><img align="right" src="images/problem/pic1930_0" alt="" /></p>\r\n<h2>Problem D: Power Strings</h2>\r\n<p>Given two strings <i>a</i> and <i>b</i> we define <i>a*b</i> to be their concatenation.  For example, if <i>a = "abc"</i> and <i>b = "def"</i> then <i>a*b = "abcdef"</i>.  If we think of concatenation as multiplication, exponentiation by a non-negative integer is defined in the normal way: <i>a^0 = ""</i> (the empty string) and <i>a^(n+1) = a*(a^n)</i>.</p>\r\n<p>Each test case is a line of input representing <i>s</i>, a string of printable characters. For each <i>s</i> you should print the largest <i>n</i> such that <i>s = a^n</i> for some string <i>a</i>.  The length of <i>s</i> will be at least 1 and will not exceed 1 million characters.  A line containing a period follows the last test case.</p>', '', '', 'D:\\oj\\data\\1930', 'D:\\oj\\data\\1930', 'abcd\r\naaaa\r\nababab\r\n.', '1\r\n4\r\n3', '', '', '', '2011-09-02 20:40:58', 1000, 131072, 'N', NULL, 4, 4, 100, 0, 0, 2, 2, 1000, 47, 'power721'),
(1931, 'Problem E:  Relatives', '<p><img align="right" src="images/problem/pic1931_0" alt="" /></p>\r\n<h2>Problem E:  Relatives</h2>\r\n<p>Given <i>n</i>, a positive integer, how many positive integers less than <i>n</i> are relatively prime to <i>n</i>?  Two integers <i>a</i> and <i>b</i> are relatively prime if there are no integers <i>x &gt; 1, y &gt; 0, z &gt; 0</i> such that <i>a = xy</i> and <i>b = xz</i>.</p>\r\n<p>There are several test cases.  For each test case, standard input contains a line with <i>n &lt;= 1,000,000,000</i>.  A line containing 0 follows the last case.</p>\r\n<p>For each test case there should be single line of output answering the question posed above.</p>', '', '', 'D:\\oj\\data\\1931', 'D:\\oj\\data\\1931', '7\r\n12\r\n0', '6\r\n4', '', '', '', '2011-06-10 19:38:41', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 18, 'power721'),
(1932, 'Problem A: Trains', '<p><img align="right" src="images/problem/pic1932_0" alt="" /></p>\r\n<h2>Problem A: Trains</h2>\r\n<p>Trains are cool. You can get pretty much anywhere in Europe on a train, including little towns.  In Canada, train service is not quite as good.  Sometimes you have to change trains many times, and it''s often hard to know the quickest route and where to switch. Depending on the time of day, the route may even pass through completely different cities. Fortunately, you can write a program to help you.  Given the schedules of trains running between different places, your task is to find all the shortest connections between two places. A shortest connection is one for which there is no other connection that would allow you to leave later and arrive at the same time or earlier, or leave at the same time and arrive earlier. Time to change trains need not be considered, as it is already built into the schedule.</p>\r\n<p>The first line of input contains a positive integer N, the number of test cases.  The first line of each test case contains T &lt;= 20, the number of train routes.  Each train route is described by one or more lines containing:</p>\r\n<ul>\r\n    <li>S &lt;= 20  The number of stations on the route including origin and terminus.</li>\r\n    <li>hh:mm  The starting time of the route (in 24-hour clock notation; that is, in the range 00:00 to 23:59).  You may assume that a train leaves the origin every day at this time.  A station name is a string of no more than 40 alphabetic characters.</li>\r\n    <li>A list of the names of the S stations, separated by the travel time between adjacent stations.  Travel time is given in hours and minutes.</li>\r\n</ul>\r\n<p>Finally, each test case gives the name of an origin and destination for which a schedule is to be generated.  You may assume there is at least one route from the specified origin to the specified destination.  The output consists of a list of shortest connection departure and travel times from the origin to the destination, ordered by departure time. Each combination of departure and travel time should be listed only once, even if there are multiple routings yielding the same connection times. The departure time should be given as hh:mm (that is, exactly 2 digits each).  Travel time on the other hand should be given as h:mm, hh:mm, hhh:mm, etc., as appropriate to avoid unnecessary leading 0''s.  Leave an empty line between the output for successive test cases.</p>\r\n<p>For example, the first route in the sample input begins in Windsor at 08:00 a.m., arrives in London at 09:55, in Kitchener at 11:30, Guelph at 12:25, Toronto at 13:30 and Montreal at 18:20. To get from Waterloo to Toronto we can leave at 07:00 and travel direct for a total time of 1:45.  Or we can leave at 08:00 and travel to Kitchener, then to Guelph and Toronto, arriving at 13:30 for a travel time of 5:30.  Or we can depart Waterloo at 09:00 for Hamilton, Niagara, and Toronto, arriving at 14:00.  Finally, we can depart Waterloo at 23:00 and arrive in Toronto at 07:05 the next morning, for a travel time of 8:05.</p>\r\n<p></p>', '', '', 'D:\\oj\\data\\1932', 'D:\\oj\\data\\1932', '1\r\n7\r\n6 08:00 Windsor 1:55 London 1:35 Kitchener 0:55 Guelph 1:05 Toronto 4:50 Montreal\r\n2 08:00 Waterloo 0:45 Kitchener\r\n3 09:00 Waterloo 1:45 Hamilton 1:05 Niagara\r\n2 12:00 Niagara 2:00 Toronto\r\n2 07:00 Waterloo 1:45 Toronto\r\n2 23:00 Waterloo 0:55 Guelph\r\n2 06:00 Guelph 1:05 Toronto\r\nWaterloo Toronto', '07:00 1:45\r\n08:00 5:30\r\n09:00 5:00\r\n23:00 8:05', '', '', '', '2011-06-10 19:38:41', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 26, 'power721'),
(1933, 'Problem B:  Tic Tac Toe', '<p><img align="right" src="images/problem/pic1933_0" alt="" /></p>\r\n<h2>Problem B:  Tic Tac Toe</h2>\r\n<p>Tic Tac Toe is a child''s game played on a 3 by 3 grid.  One player, X,  starts by placing an X at an unoccupied grid position.  Then the other player, O, places an O at an unoccupied grid position.  Play alternates between X and O  until the grid is filled or one player''s symbols occupy an entire line (vertical, horizontal, or diagonal) in the grid.</p>\r\n<p>We will denote the initial empty Tic Tac Toe grid with nine dots.  Whenever X or O plays we fill in an X or an O in the appropriate position.  The example below illustrates each grid configuration from the beginning to the end of a game in which X wins.</p>\r\n<pre>\r\n...  X..  X.O  X.O  X.O  X.O  X.O  X.O\r\n...  ...  ...  ...  .O.  .O.  OO.  OO.\r\n...  ...  ...  ..X  ..X  X.X  X.X  XXX\r\n</pre>\r\n<p>Your job is to read a grid and to determine whether or not it could possibly be part of a valid Tic Tac Toe game.  That is, is there a series of plays that can yield this grid somewhere between the start and end of the game?</p>\r\n<p>The first line of input contains N, the number of test cases.  4N-1 lines follow, specifying N grid configurations separated by empty lines.  For each  case print "yes" or "no" on a line by itself, indicating whether or not the configuration could be part of a Tic Tac Toe game.</p>', '', '', 'D:\\oj\\data\\1933', 'D:\\oj\\data\\1933', '2\r\nX.O\r\nOO.\r\nXXX\r\n\r\nO.X\r\nXX.\r\nOOO', 'yes\r\nno', '', '', '', '2011-06-10 19:38:41', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 13, 'power721'),
(1934, 'Problem C:  Square', '<p><img align="right" src="images/problem/pic1934_0" alt="" /></p>\r\n<h2>Problem C:  Square</h2>\r\n<p>Given a set of sticks of various lengths, is it possible to join them end-to-end to form a square?</p>\r\n<p>The first line of input contains N, the number of test cases.  Each test case begins with an integer 4 &lt;= M &lt;= 20, the number of sticks.  M integers follow; each gives the length of a stick - an integer between 1 and 10,000.</p>\r\n<p>For each case, output a line containing "yes" if is is possible to form a square; otherwise output "no".</p>', '', '', 'D:\\oj\\data\\1934', 'D:\\oj\\data\\1934', '3\r\n4 1 1 1 1\r\n5 10 20 30 40 50\r\n8 1 7 2 6 4 4 3 5', 'yes\r\nno\r\nyes', '', '', '', '2011-06-10 19:38:41', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 18, 'power721'),
(1935, 'Problem D: Blocks', '<p><img align="right" src="images/problem/pic1935_0" alt="" /></p>\r\n<h2>Problem D: Blocks</h2>\r\n<p>Donald wishes to send a gift to his new nephew, Fooey.  Donald is a bit of a traditionalist, so he has chosen to send a set of N classic baby blocks.  Each block is a cube, 1 inch by 1 inch by 1 inch.  Donald wants to stack the blocks together into a rectangular solid and wrap them all up in brown paper for shipping.  How much brown paper does  Donald need?</p>\r\n<p>The first line of input contains C, the number of test cases.  For each case there is an additional line containing N, the number of blocks to be shipped.  N does not exceed 1000. Your program should produce one line of output per case, giving the minimal area of paper (in square inches) needed to wrap the blocks when they are stacked together.</p>', '', '', 'D:\\oj\\data\\1935', 'D:\\oj\\data\\1935', '5\r\n9\r\n10\r\n26\r\n27\r\n100', '30\r\n34\r\n82\r\n54\r\n130', '', '', '', '2011-06-10 19:38:41', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 14, 'power721'),
(1936, 'Problem E: Faucet Flow', '<p><img align="right" alt="" src="images/problem/pic1936_0" /></p>\r\n<h2>Problem E: Faucet Flow</h2>\r\n<p>A faucet is pouring water into a long, thin aquarium with various vertical dividers (walls) in it.  The aquarium is initially empty, and its bottom is perfectly level.  How long will it take for water to spill over its  left- or right-most divider?  The faucet is above location x=0, and the dividers are located at x=-1, -3,  -5, ..., <i>leftx</i> and 1, 3, 5, ..., <i>rightx</i>.  The dividers are  attached perpendicular to the floor and sides of the aquarium, and have various heights.  The aquarium''s length is greater than <i>rightx</i>-<i>leftx</i>, its walls are higher than the highest divider, and its width is 1 unit everywhere.   Water pours from the faucet at a rate of 1 cubic unit per second. [You may assume that water is an ideal liquid: it always flows downhill and if it cannot flow downhill it spreads at an equal rate in all horizontal directions.]</p>', '<p>Each test case consists of two integers <i>leftx</i> (an odd number &lt;= -1) and  <i>rightx</i> (an odd number &gt;= 1).  Subsequent lines contain the  height (a positive integer) of each divider from left to right.   There will be no more than 1000 dividers in any test case. Input is terminated with a line containing two zeros.</p>', '<p>For each case, output an integer on a single line, indicating how long it  will take, in seconds, before water starts spilling over either the left  or right divider.</p>', 'D:\\oj\\data\\1936', 'D:\\oj\\data\\1936', '-1 1\r\n3 5\r\n-3 3\r\n4 3 2 1\r\n-3 5\r\n1 2 2 1 1\r\n0 0', '6\r\n6\r\n8', '', '', '', '2011-06-10 19:38:41', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 14, 'power721'),
(1937, 'Equations', '<p>Given 2 equations on the variables</p>\r\n<i>x</i>\r\n<p>and</p>\r\n<i>y</i>\r\n<p>, solve for</p>\r\n<i>x</i>\r\n<p>and</p>\r\n<i>y</i>\r\n<p>.</p>\r\n<p>The first line of input contains N, the number of test cases.  Each test case consists of two equations, each on a separate line.  An empty line separates cases.  An equation consists of two or more terms separated by addition,  subtraction, or equality operators.  A term is an integer, or a variable name (<i>x</i> or <i>y</i>) optionally preceded by a minus sign or an integer coefficient.  There is exactly one equality operator.  All operators are surrounded by spaces, and there are no spaces within terms.  For each case, print two lines, giving the values of <i>x</i> and <i>y</i> as rationals in simplest terms.  If <i>x</i> or <i>y</i> has no unique rational value such that both equations hold, print "don''t know" for its value.  Print an empty line between cases.</p>', '', '', 'D:\\oj\\data\\1937', 'D:\\oj\\data\\1937', '7\r\n2x + 3y = x\r\n5 = x + y + 3\r\n\r\n2x + 3y = 0\r\n10x = -15y\r\n\r\n2x + 3y = 0\r\n10x = -15y + 1\r\n\r\nx = 1\r\n3x = 6y\r\n\r\n2x = 3x + -x + y\r\nx + y = x + y\r\n\r\n2x = -3\r\n-2y = 3\r\n\r\n1 = 2\r\nx = 3', '3\r\n-1\r\n\r\ndon''t know\r\ndon''t know\r\n\r\ndon''t know\r\ndon''t know\r\n\r\n1\r\n1/2\r\n\r\ndon''t know\r\n0\r\n\r\n-3/2\r\n-3/2\r\n\r\ndon''t know\r\ndon''t know', '', 'http://plg1.cs.uwaterloo.ca/~acm00/020928/A.html', '', '2011-06-10 19:38:41', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 22, 'power721'),
(1938, 'Euclid''s Game', '<p>Two players, Stan and Ollie, play, starting with two natural numbers. Stan, the first player, subtracts any positive multiple of the lesser of the two numbers from the greater of the two numbers, provided that the resulting number must be nonnegative. Then Ollie, the second player, does the same with the two resulting numbers, then Stan, etc., alternately, until one player is able to subtract a multiple of the lesser number from the greater to reach 0, and thereby wins. For example, the players may start with (25,7):</p>\r\n<pre>\r\n         25 7\r\n         11 7\r\n          4 7\r\n          4 3\r\n          1 3\r\n          1 0\r\n</pre>\r\n<p>an Stan wins.</p>\r\n<p>The input consists of a number of lines.  Each line contains two positive integers giving the starting two numbers of the game. Stan always starts.</p>\r\n<p>For each line of input, output one line saying either <tt>Stan wins</tt> or <tt>Ollie wins</tt> assuming that both of them play perfectly. The last line of input contains two zeroes and should not be processed.</p>', '', '', 'D:\\oj\\data\\1938', 'D:\\oj\\data\\1938', '34 12\r\n15 24\r\n0 0', 'Stan wins\r\nOllie wins', '', '', '', '2011-06-10 19:38:41', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 26, 'power721'),
(1939, 'Arctic Network', '<p>The Department of National Defence (DND) wishes to connect several northern outposts by a wireless network.  Two different communication technologies are to be used in establishing the network:  every outpost will have a  radio transceiver and some outposts will in addition have a satellite  channel.</p>\r\n<p>Any two outposts with a satellite channel can communicate via the satellite, regardless of their location.  Otherwise, two  outposts can communicate by radio only if the distance between them does not exceed D, which depends of the power of the transceivers.   Higher power yields higher D but costs more.   Due to purchasing and maintenance considerations, the transceivers at the outposts must be identical; that is, the value of D is the same for every pair of outposts.</p>\r\n<p>Your job is to determine the minimum D required for the transceivers.  There must be at least one communication path (direct or indirect) between every pair of outposts.</p>\r\n<p>The first line of input contains N, the number of test cases.  The first line of each test case contains 1 &lt;= S &lt;= 100, the number of satellite channels,  and S &lt; P &lt;= 500, the number of outposts.  P lines follow, giving the (x,y) coordinates of each outpost in km (coordinates are integers between 0 and 10,000).   For each case, output should consist of a single line giving the minimum D required to connect the network. Output should be specified to 2 decimal points.</p>', '', '', 'D:\\oj\\data\\1939', 'D:\\oj\\data\\1939', '1\r\n2 4\r\n0 100\r\n0 300\r\n0 600\r\n150 750', '212.13', '', '', '', '2011-06-10 19:38:41', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 11, 'power721'),
(1940, 'Above Average', '<p>It is said that 90% of frosh expect to be above average in their class.  You are to provide a reality check.</p>\r\n<p>The first line of standard input contains an integer C, the number of test cases.  C data sets follow.  Each data set begins with an integer, N, the number of people in the class (1 &lt;= N &lt;= 1000). N integers follow, separated by spaces or newlines, each giving the final grade (an integer between 0 and 100)  of a student in the class.  For each case you are to output a line giving the percentage of students whose grade is above average, rounded to 3 decimal places.</p>', '', '', 'D:\\oj\\data\\1940', 'D:\\oj\\data\\1940', '5\r\n5 50 50 70 80 100\r\n7 100 95 90 80 70 60 50\r\n3 70 90 80\r\n3 70 90 81\r\n9 100 99 98 97 96 95 94 93 91', '40.000%\r\n57.143%\r\n33.333%\r\n66.667%\r\n55.556%', '', '', '', '2011-06-10 19:38:41', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 14, 'power721'),
(1941, 'Time Zones', '<img align="right" src="images/problem/pic1941_0" alt="" />\r\n<p>Prior to the late nineteenth century, time keeping was a purely local phenomenon. Each town would set their clocks to noon when the sun reached its zenith each day. A clockmaker or town clock would be the "official" time and the citizens would set their pocket watches and clocks to the time of the town - enterprising citizens would offer their services as mobile clock setters, carrying a watch with the accurate time to adjust the clocks in customer''s homes on a weekly basis. Travel between cities meant having to change one''s pocket watch upon arrival.</p>\r\n<p>However, once railroads began to operate and move people rapidly across great distances, time became much more critical. In the early years of the railroads, the schedules were very confusing because each stop was based on a different local time.  The standardization of time was essential to efficient operation of railroads.</p>\r\n<p>In 1878, Canadian Sir Sanford Fleming proposed the system of worldwide time zones that we use today. He recommended that the world be divided into twenty-four time zones, each spaced 15 degrees of longitude apart. Since the earth rotates once every 24 hours and there are 360 degrees of longitude, each hour the earth rotates one-twenty-fourth of a circle or 15? of longitude. Sir Fleming''s time zones were heralded as a brilliant solution to a chaotic problem worldwide.</p>\r\n<p>United States railroad companies began utilizing Fleming''s standard time zones on November 18, 1883. In 1884 an International Prime Meridian Conference was held in Washington D.C. to standardize time and select the Prime Meridian. The conference selected the longitude of Greenwich, England as zero degrees longitude and established the 24 time zones based on the Prime Meridian. Although the time zones had been established, not all countries switched immediately. Though most U.S. states began to adhere to the Pacific, Mountain, Central, and Eastern time zones by 1895, Congress didn''t make the use of these time zones mandatory until the Standard Time Act of 1918.</p>\r\n<p>Today, many countries operate on variations of the time zones proposed by Sir Fleming. All of China (which should span five time zones) uses a single time zone - eight hours ahead of Coordinated Universal Time (known by the abbreviation UTC - based on the time zone running through Greenwich at 0? longitude). Russia adheres to its designated time zones although the entire country is on permanent Daylight Saving Time and is an hour ahead of their actual zones. Australia uses three time zones - its central time zone is a half-hour ahead of its designated time zone. Several countries in the Middle East and South Asia also utilize half-hour time zones.</p>\r\n<p>Since time zones are based on segments of longitude and lines of longitude narrow at the poles, scientists working at the North and South Poles simply use UTC time. Otherwise, Antarctica would be divided into 24 very thin time zones!</p>\r\n<p>Time zones have recently been given standard capital-letter abbreviations as follows:</p>\r\n<pre>\r\nUTC Coordinated Universal Time\r\nGMT Greenwich Mean Time, defined as UTC\r\nBST British Summer Time, defined as UTC+1 hour\r\nIST Irish Summer Time, defined as UTC+1 hour\r\nWET Western Europe Time, defined as UTC\r\nWEST Western Europe Summer Time, defined as UTC+1 hour\r\nCET Central Europe Time, defined as UTC+1\r\nCEST Central Europe Summer Time, defined as UTC+2\r\nEET Eastern Europe Time, defined as UTC+2\r\nEEST Eastern Europe Summer Time, defined as UTC+3\r\nMSK Moscow Time, defined as UTC+3\r\nMSD Moscow Summer Time, defined as UTC+4\r\nAST Atlantic Standard Time, defined as UTC-4 hours\r\nADT Atlantic Daylight Time, defined as UTC-3 hours\r\nNST Newfoundland Standard Time, defined as UTC-3.5 hours\r\nNDT Newfoundland Daylight Time, defined as UTC-2.5 hours\r\nEST Eastern Standard Time, defined as UTC-5 hours\r\nEDT Eastern Daylight Saving Time, defined as UTC-4 hours\r\nCST Central Standard Time, defined as UTC-6 hours\r\nCDT Central Daylight Saving Time, defined as UTC-5 hours\r\nMST Mountain Standard Time, defined as UTC-7 hours\r\nMDT Mountain Daylight Saving Time, defined as UTC-6 hours\r\nPST Pacific Standard Time, defined as UTC-8 hours\r\nPDT Pacific Daylight Saving Time, defined as UTC-7 hours\r\nHST Hawaiian Standard Time, defined as UTC-10 hours\r\nAKST Alaska Standard Time, defined as UTC-9 hours\r\nAKDT Alaska Standard Daylight Saving Time, defined as UTC-8 hours\r\nAEST Australian Eastern Standard Time, defined as UTC+10 hours \r\nAEDT Australian Eastern Daylight Time, defined as UTC+11 hours \r\nACST Australian Central Standard Time, defined as UTC+9.5 hours \r\nACDT Australian Central Daylight Time, defined as UTC+10.5 hours \r\nAWST Australian Western Standard Time, defined as UTC+8 hours \r\n</pre>\r\n<p>Given the current time in one time zone, you are to compute what time it is in another time zone.  The first line of input contains N, the number of test cases. For each case a line is given with a time, and 2 time zone abbreviations.   Time is given in standard a.m./p.m. format with midnight denoted "midnight"  and noon denoted "noon" (12:00 a.m. and 12:00 p.m. are oxymorons). Assuming the given time is the current time in the first time zone, give the current time in the second time zone.</p>', '', '', 'D:\\oj\\data\\1941', 'D:\\oj\\data\\1941', '4\r\nnoon HST CEST \r\n11:29 a.m. EST GMT\r\n6:01 p.m. CST UTC\r\n12:40 p.m. ADT MSK', 'midnight\r\n4:29 p.m.\r\n12:01 a.m.\r\n6:40 p.m.', '', '', '', '2011-06-10 19:38:41', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 17, 'power721'),
(1942, 'Temple of Dune', '<p>The Archaeologists of the Current Millenium (ACM) now and then discover ancient artifacts located at the vertices of regular polygons.  In general it is necessary to move one sand dune to uncover each artifact.  After discovering three artifacts, the archaeologists wish to compute the minimum number of dunes that must be moved to uncover all of them.</p>\r\n<p>The first line of input contains a positive integer <i>n</i>, the number of test cases.  Each test case consists of three pairs of real numbers giving the <i>x</i> and <i>y</i> coordinates of three vertices from a regular polygon.  For each line of input, output a single integer stating the fewest vertices that such a polygon might have.</p>\r\n<p>You may assume that each input case gives three distinct vertices of a regular polygon with at most 200 vertices.</p>', '', '', 'D:\\oj\\data\\1942', 'D:\\oj\\data\\1942', '4\r\n10.00000 0.00000 0.00000 -10.00000 -10.00000 0.00000\r\n22.23086 0.42320 -4.87328 11.92822 1.76914 27.57680\r\n156.71567 -13.63236 139.03195 -22.04236 137.96925 -11.70517\r\n129.400249 -44.695226 122.278798 -53.696996 44.828427 -83.507917', '4\r\n6\r\n23\r\n100', '', '', '', '2011-06-10 19:38:41', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 17, 'power721'),
(1943, 'Ferry Loading II', '<p>Before bridges were common, ferries were used to transport cars across rivers. River ferries, unlike their larger cousins, run on a guide line and are powered by the river''s current. Cars drive onto the ferry from one end, the ferry crosses the river, and the cars exit from the other end of the ferry.</p>\r\n<p>There is a ferry across the river that can take <em>n</em> cars across the river in <em>t</em> minutes and return in <em>t</em> minutes.   <i>m</i> cars arrive at the ferry terminal by a given schedule.  What is the  earliest time that all the cars can be transported across the river?   What is the minimum number of trips that the operator must make to deliver all cars by that time?</p>\r\n<p>The first line of input contains <i>c</i>, the number of test cases. Each test case begins with <i>n, t, m</i>. <i>m</i> lines follow, each giving the arrival time for a car (in minutes since the beginning of the day). The operator can run the ferry whenever he or she wishes, but can take only the cars that have arrived up to that time.  For each test case, output a single line with two integers: the time, in minutes since the beginning of the day, when the last car is delivered to the other side of the river, and the minimum number of trips made by the ferry to carry the cars within that time.</p>\r\n<p>You may assume that 0 &lt; n, t, m &lt; 1440.  The arrival times for each test case are in non-decreasing order.</p>', '', '', 'D:\\oj\\data\\1943', 'D:\\oj\\data\\1943', '2\r\n2 10 10\r\n0\r\n10\r\n20\r\n30\r\n40\r\n50\r\n60\r\n70\r\n80\r\n90\r\n2 10 3\r\n10\r\n30\r\n40', '100 5\r\n50 2', '', '', '', '2011-06-10 19:38:41', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 34, 'power721'),
(1944, 'Catenyms', '<p>A catenym is a pair of words separated by a period such that the last letter of the first word is the same as the last letter of the second.  For example, the following are catenyms:</p>\r\n<pre>\r\ndog.gopher\r\ngopher.rat\r\nrat.tiger\r\naloha.aloha\r\narachnid.dog\r\n</pre>\r\n<p>A compound catenym is a sequence of three or more words separated by periods such that each adjacent pair of words forms a catenym.  For example,</p>\r\n<pre>\r\naloha.aloha.arachnid.dog.gopher.rat.tiger\r\n</pre>\r\nGiven a dictionary of lower case words, you are to find a compound catenym that contains each of the words exactly once.', 'The first line of standard input contains<i>t</i>, the number of test cases.  Each test case begins with  3 &lt;=<i>n</i>&lt;= 1000 - the number of words in the dictionary.\r\n<i>n</i>distinct dictionary words follow; each word is a string of between 1 and 20  lowercase letters on a line by itself.', 'For each test case, output a line giving the lexicographically least compound catenym that contains each dictionary word exactly once.  Output "***" if there is no solution.', 'D:\\oj\\data\\1944', 'D:\\oj\\data\\1944', '2\r\n6\r\naloha\r\narachnid\r\ndog\r\ngopher\r\nrat\r\ntiger\r\n3\r\noak\r\nmaple\r\nelm', 'aloha.arachnid.dog.gopher.rat.tiger\r\n***', '', '', '', '2011-06-12 17:22:10', 1000, 131072, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 1000, 36, 'power721'),
(1945, 'Basic', '<p>The programming language Ada has integer constants that look like this: 123, 8#123#, 16#abc#.  These constants represent the integers 123, 83 (123 base 8) and 2739 (abc base 16).  More precisely, an integer may be a decimal integer given as a sequence of one or more digits less than 10, or it may be an integer to some specific base, given as the base followed by a sequence of one or more digits less than the base enclosed by # symbols. Lower case letters from a through f are used as the digits representing 10 through 15. In Ada, the base, if specified, must be a sequence of decimal digits. For this problem, however, the base may be of any form described above so long as it represents an integer between 2 and 16 inclusive.</p>\r\n<p>The first line of input contains a positive integer <i>n</i>.  <i>n</i> lines follow.  For each line of input, output a line "yes" if it is a valid integer constant according to the above rules; otherwise output a line containing "no".  Input lines contain no spaces and are between 1 and 80 characters in length.</p>', '', '', 'D:\\oj\\data\\1945', 'D:\\oj\\data\\1945', '5\r\n2#101#\r\n2#101##123#\r\n17#abc#\r\n16#123456789abcdef#\r\n16#123456789abcdef#123456789abcdef#', 'yes\r\nyes\r\nno\r\nyes\r\nno', '', '', '', '2011-06-10 19:38:41', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 20, 'power721'),
(1946, 'Rock, Scissors, Paper', '<p>Bart''s sister Lisa has created a new civilization on a two-dimensional grid. At the outset each grid location may be occupied by one of three life forms: <i>Rocks</i>, <i>Scissors</i>, or <i>Papers</i>.  Each day, differing life forms occupying horizontally or vertically adjacent grid locations wage war.   In each war, Rocks always defeat Scissors, Scissors always defeat Papers,  and Papers always defeat Rocks.  At the end of the day, the victor expands its  territory to include the loser''s grid position.  The loser vacates the position.</p>\r\n<p>Your job is to determine the territory occupied by each life form after <i>n</i> days. The first line of input contains <i>t</i>, the number of test cases.  Each test case begins with three integers not greater than 100: <i>r</i> and <i>c</i>, the number of rows and columns in the grid, and <i>n</i>.  The grid is represented by the <i>r</i> lines that follow,  each with <i>c</i> characters. Each character in the grid is R, S, or P, indicating that it is occupied by Rocks, Scissors, or Papers respectively.</p>\r\n<p>For each test case, print the grid as it appears at the end of the <i>n</i>th day. Leave an empty line between the output for successive test cases.</p>', '', '', 'D:\\oj\\data\\1946', 'D:\\oj\\data\\1946', '2\r\n3 3 1\r\nRRR\r\nRSR\r\nRRR\r\n3 4 2\r\nRSPR\r\nSPRS\r\nPRSP', 'RRR\r\nRRR\r\nRRR\r\n\r\nRRRS\r\nRRSP\r\nRSPR', '', '', '', '2011-06-10 19:38:41', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 18, 'power721'),
(1947, 'Intellectual Property', '<p>TDP Inc. has decided to sue JCN Inc. for copyright infringement.  To this end, TDP wishes to find</p>\r\n<i>infringing segments</i>\r\n<p>within JCN''s code base, to show to selected media representatives.  Since TDP has fired all its technical staff, it is looking to hire a consultant to be paid on a contingency basis should the lawsuit be successful. To demonstrate your qualifications for this position, you are  to solve the problem on a number of test cases.</p>\r\n<p>Each test case begins with a positive integer <i>k</i>, the number of infringing segments to be found.  Following this line are two code bases.  The first code base is preceded by the line "BEGIN TDP CODEBASE" and contains a number of lines followed by the line "END TDP CODEBASE".  The second code base is preceded by "BEGIN JCN CODEBASE" and followed by "END JCN CODEBASE".  The line "END TDP CODEBASE" does not appear in the first code base and the line "END JCN CODEBASE" does not appear in the second. A line containing 0 follows the last test case.</p>\r\n<p>For each test case you should output: (1) a line containing "CASE <i>n</i>" where <i>n</i> is the number of the test case; (2) up to <i>k</i> infringing segments.  Each segment should be printed exactly as it appears in the JCN code base (including newlines and whitespace) and should be preceded by a line containing  "INFRINGING SEGMENT <i>m</i> LENGTH <i>l</i> POSITION <i>p</i>" where  <i>m</i> is the number of the segment within the test case,  <i>l</i> is the length of the segment (in characters) and <i>p</i> is the position of the segment (in characters from the start of the JCN codebase).  Output an empty line between test cases.</p>\r\n<p>A code base is simply a string of characters. An infringing segment is a non-empty contiguous sequence of characters in the JCN code base that is textually identical to some contiguous sequence   of characters in the TDP code base, and is not contained in a larger infringing segment.  You should consider all characters in the code base, including spaces and the <i>newline</i> character at the end of each line.</p>\r\n<p>If there are <i>k</i> or fewer common segments, print them all in decreasing order by length; if several segments have the same length, print them in the order they occur in JCN''s code base. If there are more than <i>k</i> segments, print the first <i>k</i>  according to the given order.</p>\r\n<p>You may assume that no code base contains more than 50,000 characters.</p>', '', '', 'D:\\oj\\data\\1947', 'D:\\oj\\data\\1947', '6\r\nBEGIN TDP CODEBASE\r\nthe quick brown fox\r\njumps over the lazy dog.\r\nso there!\r\nEND TDP CODEBASE\r\nBEGIN JCN CODEBASE\r\nnow is the time for all\r\ngood men to come to the aid\r\nof the party.\r\nso there!\r\nEND JCN CODEBASE\r\n100\r\nBEGIN TDP CODEBASE\r\nxyzzy\r\nEND TDP CODEBASE\r\nBEGIN JCN CODEBASE\r\nxyzzabczzyy\r\nEND JCN CODEBASE\r\n0', 'CASE 1\r\nINFRINGING SEGMENT 1 LENGTH 12 POSITION 64\r\n.\r\nso there!\r\n\r\nINFRINGING SEGMENT 2 LENGTH 5 POSITION 6\r\n the \r\nINFRINGING SEGMENT 3 LENGTH 5 POSITION 42\r\no the\r\nINFRINGING SEGMENT 4 LENGTH 5 POSITION 43\r\n the \r\nINFRINGING SEGMENT 5 LENGTH 5 POSITION 54\r\n the \r\nINFRINGING SEGMENT 6 LENGTH 3 POSITION 15\r\n fo\r\n\r\nCASE 2\r\nINFRINGING SEGMENT 1 LENGTH 4 POSITION 0\r\nxyzz\r\nINFRINGING SEGMENT 2 LENGTH 3 POSITION 7\r\nzzy\r\nINFRINGING SEGMENT 3 LENGTH 2 POSITION 10\r\ny', '', '', '', '2011-06-10 19:38:41', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 15, 'power721'),
(1948, 'Persistent Numbers', '<table align="right" frame="void" width="300" vspace="20" hspace="20" rules="none" ncellpadding="3">\r\n    <tbody>\r\n        <tr bgcolor="#ffff00">\r\n            <td></td>\r\n            <td><small><b>1</b></small></td>\r\n            <td><small><b>2</b></small></td>\r\n            <td><small><b>3</b></small></td>\r\n            <td><small><b>4</b></small></td>\r\n            <td><small><b>5</b></small></td>\r\n            <td><small><b>6</b></small></td>\r\n            <td><small><b>7</b></small></td>\r\n            <td><small><b>8</b></small></td>\r\n            <td><small><b>9</b></small></td>\r\n        </tr>\r\n        <tr>\r\n            <td bgcolor="#ffff00"><small><b>1</b></small></td>\r\n            <td><small>&nbsp;1  </small></td>\r\n            <td><small>&nbsp;2 </small></td>\r\n            <td><small>&nbsp;3 </small></td>\r\n            <td><small>&nbsp;4 </small></td>\r\n            <td><small>&nbsp;5 </small></td>\r\n            <td><small>&nbsp;6 </small></td>\r\n            <td><small>&nbsp;7 </small></td>\r\n            <td><small>&nbsp;8 </small></td>\r\n            <td><small>&nbsp;9  </small></td>\r\n        </tr>\r\n        <tr>\r\n            <td bgcolor="#ffff00"><small><b>2 </b></small></td>\r\n            <td><small>&nbsp;2  </small></td>\r\n            <td><small>&nbsp;4 </small></td>\r\n            <td><small>&nbsp;6 </small></td>\r\n            <td><small>&nbsp;8 </small></td>\r\n            <td><small>10</small></td>\r\n            <td><small>12</small></td>\r\n            <td><small>14</small></td>\r\n            <td><small>16</small></td>\r\n            <td><small>18 </small></td>\r\n        </tr>\r\n        <tr>\r\n            <td bgcolor="#ffff00"><small><b>3 </b></small></td>\r\n            <td><small>&nbsp;3  </small></td>\r\n            <td><small>&nbsp;6 </small></td>\r\n            <td><small>&nbsp;9 </small></td>\r\n            <td><small>12</small></td>\r\n            <td><small>15</small></td>\r\n            <td><small>18</small></td>\r\n            <td><small>21</small></td>\r\n            <td><small>24</small></td>\r\n            <td><small>27 </small></td>\r\n        </tr>\r\n        <tr>\r\n            <td bgcolor="#ffff00"><small><b>4 </b></small></td>\r\n            <td><small>&nbsp;4  </small></td>\r\n            <td><small>&nbsp;8 </small></td>\r\n            <td><small>12</small></td>\r\n            <td><small>16</small></td>\r\n            <td><small>20</small></td>\r\n            <td><small>24</small></td>\r\n            <td><small>28</small></td>\r\n            <td><small>32</small></td>\r\n            <td><small>36 </small></td>\r\n        </tr>\r\n        <tr>\r\n            <td bgcolor="#ffff00"><small><b>5 </b></small></td>\r\n            <td><small>&nbsp;5  </small></td>\r\n            <td><small>10</small></td>\r\n            <td><small>15</small></td>\r\n            <td><small>20</small></td>\r\n            <td><small>25</small></td>\r\n            <td><small>30</small></td>\r\n            <td><small>35</small></td>\r\n            <td><small>40</small></td>\r\n            <td><small>45 </small></td>\r\n        </tr>\r\n        <tr>\r\n            <td bgcolor="#ffff00"><small><b>6 </b></small></td>\r\n            <td><small>&nbsp;6  </small></td>\r\n            <td><small>12</small></td>\r\n            <td><small>18</small></td>\r\n            <td><small>24</small></td>\r\n            <td><small>30</small></td>\r\n            <td><small>36</small></td>\r\n            <td><small>42</small></td>\r\n            <td><small>48</small></td>\r\n            <td><small>54 </small></td>\r\n        </tr>\r\n        <tr>\r\n            <td bgcolor="#ffff00"><small><b>7 </b></small></td>\r\n            <td><small>&nbsp;7  </small></td>\r\n            <td><small>14</small></td>\r\n            <td><small>21</small></td>\r\n            <td><small>28</small></td>\r\n            <td><small>35</small></td>\r\n            <td><small>42</small></td>\r\n            <td><small>49</small></td>\r\n            <td><small>56</small></td>\r\n            <td><small>63 </small></td>\r\n        </tr>\r\n        <tr>\r\n            <td bgcolor="#ffff00"><small><b>8 </b></small></td>\r\n            <td><small>&nbsp;8  </small></td>\r\n            <td><small>16</small></td>\r\n            <td><small>24</small></td>\r\n            <td><small>32</small></td>\r\n            <td><small>40</small></td>\r\n            <td><small>48</small></td>\r\n            <td><small>56</small></td>\r\n            <td><small>64</small></td>\r\n            <td><small>72 </small></td>\r\n        </tr>\r\n        <tr>\r\n            <td bgcolor="#ffff00"><small><b>9 </b></small></td>\r\n            <td><small>&nbsp;9  </small></td>\r\n            <td><small>18</small></td>\r\n            <td><small>27</small></td>\r\n            <td><small>36</small></td>\r\n            <td><small>45</small></td>\r\n            <td><small>54</small></td>\r\n            <td><small>63</small></td>\r\n            <td><small>72</small></td>\r\n            <td><small>81 </small></td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<p>The multiplicative persistence of a number is defined by Neil Sloane (Neil J.A. Sloane in</p>\r\n<em> The Persistence of a Number </em>\r\n<p>published in Journal of Recreational Mathematics 6, 1973, pp. 97-98., 1973) as the number of steps to reach a one-digit number when repeatedly multiplying the digits. Example:</p>\r\n<center>\r\n<pre><b>679</b> -&gt; <b>378</b> -&gt; <b>168</b> -&gt; <b>48</b> -&gt; <b>32</b> -&gt; <b>6</b>.\r\n</pre>\r\n</center>\r\n<p>That is, the persistence of 679 is 5.  The persistence of a single digit number is 0.    At the time of this writing it is known that there are numbers with  the persistence of 11.  It is not known whether there are numbers with the persistence of 12 but it is known that if they exists then the smallest of them would have more than 3000 digits.</p>\r\n<p>The problem that you are to solve here is: what is the smallest number such that the first step of computing its persistence results in the given number?</p>\r\n<p>For each test case there is a single line of input containing a decimal  number with up to 1000 digits.  A line containing -1 follows the last test case. For each test case you are to output one line containing one integer number satisfying the condition stated above or a statement saying that there is no such number in the format shown below.</p>', '', '', 'D:\\oj\\data\\1948', 'D:\\oj\\data\\1948', '0\r\n1\r\n4\r\n7\r\n18\r\n49\r\n51\r\n768\r\n-1', '10\r\n11\r\n14\r\n17\r\n29\r\n77\r\nThere is no such number.\r\n2688', '', '', '', '2011-06-10 19:38:41', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 15, 'power721'),
(1949, 'Major Scales', '<p>In music, the range of audible frequencies is divided into octaves, where each octave spans frequencies within factor of 2 of one another. For example, the note called <i>middle C</i> corresponds to an  audio frequency of 263 Hz.  The octave below middle C spans the frequency range from 131.5 Hz to 263 Hz while the octave above middle C spans the range from 263 Hz to 526 Hz.</p>\r\n<p>An octave contains 13 <i>chromatic notes</i> whose frequencies differ by a common  ratio.  The separation between two adjacent  chromatic notes is called a <i>half-step</i> or <i>semi-tone</i>. Note that there are 12 semi-tones in an octave and therefore the frequency ratio represented by a semi-tone is 1.0593 (since 1.0593<sup>12</sup> = 2).  A <i>tone</i> is two semi-tones.</p>\r\n<p>While it might be convenient to use frequencies to describe musical notes, historical tradition demands that we name the notes of the chromatic scale, in order:  C, C#, D, D#, E, F, F#, G, G#, A, A#, B, C, and so on, repeating the same names for each new octave.</p>\r\n<p>Western music rarely uses all the notes in the chromatic scale. Instead, 8 of the 13 chromatic notes are commonly used a composition. The most common such set of 8 notes is the <i>major scale</i>.   The 8 notes of a major scale, in order, are separated by:   <i>tone, tone, semi-tone, tone, tone, tone, semi-tone</i>.  A major scale can begin with any of the chromatic notes; this note defines the <i>key</i> of the scale. Coincidentally, in the key of C, the major scale consists of the notes: C, D, E, F, G, A, B, C.  On the other hand, in the key of F, the major scale is:  F, G, A, A#, C, D, E, F.</p>\r\n<p>There are other scales, notably the <i>minor scale</i>, and music composed in a particular scale sometimes uses notes that are not within the scale, caled <i>accidentals</i>.  We shall concern ourselves only with music composed in a major scale with no accidentals.</p>\r\n<p>Your job is to read a sequence of notes and to identify all the keys that the music might have been composed in.  Your program need not have any musical ear:  report a particular key if and only if all the notes come from the major scale in that key.</p>\r\n<p>Input contains several test cases.  Each test case consists of a single line of input, containing a sequence of chromatic notes separated by white space.  No input line exceeds 1000 characters.  The last line of  input contains the word "END".</p>\r\n<p>For each test case, output a line giving the possible keys, in the order given above.</p>', '', '', 'D:\\oj\\data\\1949', 'D:\\oj\\data\\1949', 'C C D F E G A A F G B\r\nA B C D E F G C#\r\nC C D F E G A A F G\r\nC C C C C\r\nEND', 'C\r\n\r\nC F\r\nC C# D# F G G# A#', '', '', '', '2011-06-10 19:38:41', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721'),
(1950, 'Dumb Bones', '<p>You are trying to set up a straight line of dominos, standing on end, to be pushed over later for your entertainment.  (Sure, it seems pointless to set something up only to knock it down again, but you have some strange hobbies) The tricky thing about setting dominos, however, is that if you make a mistake and knock one over as you place it, it will knock down any adjacent line of consecutive dominos on one side of it, partially ruining your work.</p>\r\n<p>For instance, if you''ve already placed dominos in the pattern DD__DxDDD_D, and you try placing a domino at position x, there is a chance it will fall and knock over the domino to the left or the three dominos to its right, forcing you to place them again.</p>\r\n<p>This human error is somewhat unavoidable, but you <i>can</i> make the odds somewhat more favourable by using a domino-placing technique that leads to dominos falling in one direction more often than in the other.</p>\r\n<p>Given the number of dominos you are trying to set up, and the probability that you''ll knock over any individual domino either to the left or to the right while placing it, determine the average number of dominos you''ll need to place before you finish.  Assume that you''re using an optimal placement strategy.</p>\r\n<p>Input will consist of up to 100 cases.  Each case consists of one line of input.  It will contain the number of dominos to place, n, 1 &lt;= n &lt;= 1000, followed by nonnegative values Pl and Pr, indicating the probability of any domino falling to the left or to the right when placed.  You may assume 0 &lt; Pl + Pr &lt;= 0.5.</p>\r\n<p>The last test case is followed by a line containing a single 0.</p>\r\n<p>For each case, output the expected number of dominos that will need to be placed before you finish, accurate to two digits after the decimal.</p>', '', '', 'D:\\oj\\data\\1950', 'D:\\oj\\data\\1950', '10 0.25 0.25\r\n10 0.1 0.4\r\n10 0.0 0.5\r\n0', '46.25\r\n37.28\r\n20.00', '', '', '', '2011-06-10 19:38:42', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 17, 'power721'),
(1951, 'Guessing Game', '<p>Stan and Ollie are playing a guessing game.  Stan thinks of a number between 1 and 10 and Ollie guesses what the number might be.  After each guess, Stan indicates whether Ollie''s guess is too high, too low, or right on.</p>\r\n<p>After playing several rounds, Ollie has become suspicious that Stan cheats; that is, that he changes the number between Ollie''s guesses.  To prepare his case against Stan, Ollie has recorded a transcript of several games. You are to determine whether or not each transcript proves that Stan is cheating.</p>\r\n<p>Standard input consists of several transcripts.  Each  transcript consists of a number of paired guesses and responses.  A guess is a line containing single integer between 1 and 10, and a response is a line containing "too high", "too low", or "right on". Each game ends with "right on".  A line containing 0 follows the last transcript.</p>\r\n<p>For each game, output a line "Stan is dishonest" if Stan''s responses are inconsistent with the final guess and  response.  Otherwise, print "Stan may be honest".</p>', '', '', 'D:\\oj\\data\\1951', 'D:\\oj\\data\\1951', '10\r\ntoo high\r\n3\r\ntoo low\r\n4\r\ntoo high\r\n2\r\nright on\r\n5\r\ntoo low\r\n7\r\ntoo high\r\n6\r\nright on\r\n0', 'Stan is dishonest\r\nStan may be honest', '', '', '', '2011-06-10 19:38:42', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1952, 'Russian Dolls<font color=black>(need SPJ)</font>', '<p>Russian nesting dolls are brightly painted hollow wooden figures.  The dolls in a set have roughly  the same shape, typically humanoid, but different sizes. When the set is assembled, the biggest doll contains the second-biggest doll, the second-biggest contains the third-biggest, and so on.</p>\r\n<p>We can approximate the shape of a doll as a cylinder  of height <i>h</i>, diameter <i>d</i>, and wall  thickness <i>w</i>.  Such a doll would have a hollow of height <i>h-2w</i> and diameter <i>d-2w</i>.</p>\r\n<p>Boris and Natasha each has a set of dolls. The sets are nearly identical; each has the same number of dolls, which look the same but differ in their dimensions. Last night Boris and Natasha were playing with their dolls and left them in the living room.  Their mother tidied them away, dumping them all in one box.  Can you help Boris and Natasha separate their sets of dolls?</p>\r\n<p>Standard Input will consist of several test cases.  The first line of each test case will contain <i>n</i>, the number of dolls in each set (1 &lt; n &lt;= 100).  2n lines follow; each gives the dimensions, <i>h</i>, <i>d</i>, <i>w</i> of a different doll (h,d &gt;= 2w &gt; 0).   A line containing 0 follows the last test case.</p>\r\n<p>For each test case, separate the dolls into two sets of nesting dolls such that, within each set, the dolls fit within each other, standing straight up, as described  above.  The first <i>n</i> lines of output should give the dimensions of the dolls in one set, in decreasing order by height.  The next line should contain a single hyphen, "-". The next <i>n</i> lines should give the dimensions of the dolls in the second set, also in decreasing order by height.   There will always be a solution.  If there are many solutions, any will do.  Output an empty line between test cases.</p>', '', '', 'D:\\oj\\data\\1952', 'D:\\oj\\data\\1952', '3\r\n100 100 3\r\n97 97 3\r\n94 94 3\r\n91 91 3\r\n88 88 3\r\n85 85 3\r\n5\r\n100 100 1\r\n97 97 3\r\n98 98 1\r\n96 96 1\r\n94 94 1\r\n92 92 1\r\n90 90 1\r\n88 88 1\r\n86 86 1\r\n84 84 1\r\n0', '100 100 3\r\n94 94 3\r\n88 88 3\r\n-\r\n97 97 3\r\n91 91 3\r\n85 85 3\r\n\r\n100 100 1\r\n98 98 1\r\n96 96 1\r\n94 94 1\r\n92 92 1\r\n-\r\n97 97 3\r\n90 90 1\r\n88 88 1\r\n86 86 1\r\n84 84 1', '暂时没有SPJ.', '', '', '2011-06-10 19:38:42', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 16, 'power721'),
(1953, 'Combination Lock', '<p>Now that you''re back to school for another term, you need to remember how to work the combination lock on your locker.  A common design is that of the Master Brand, shown at right.  The lock has a dial with 40 calibration marks numbered 0 to 39.  A combination consists of 3 of these numbers; for example:  15-25-8.  To open the lock, the following steps are taken:</p>\r\n<ul>\r\n    <li>turn the dial clockwise 2 full turns</li>\r\n    <li>stop at the first number of the combination</li>\r\n    <li>turn the dial counter-clockwise 1 full turn</li>\r\n    <li>continue turning counter-clockwise until the 2nd number is reached</li>\r\n    <li>turn the dial clockwise again until the 3rd number is reached</li>\r\n    <li>pull the shank and the lock will open.</li>\r\n</ul>\r\n<p>Given the initial position of the dial and the combination for the lock, how many degrees is the dial rotated in total (clockwise plus counter-clockwise) in opening the lock?</p>\r\n<p>Input consists of several test cases.  For each case there is a line of input containing 4 numbers between 0 and 39.  The first number is the position of the dial.  The next three numbers are the combination.   Consecutive numbers in the combination will be distinct.  A line  containing 0 0 0 0 follows the last case.</p>\r\n<p>For each case, print a line with a single integer:  the number of  degrees that the dial must be turned to open the lock.</p>', '', '', 'D:\\oj\\data\\1953', 'D:\\oj\\data\\1953', '0 30 0 30\r\n5 35 5 35\r\n0 20 0 20\r\n7 27 7 27\r\n0 10 0 10\r\n9 19 9 19\r\n0 0 0 0', '1350\r\n1350\r\n1620\r\n1620\r\n1890\r\n1890', '', '', '', '2011-06-10 19:38:42', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 15, 'power721'),
(1954, 'Basic remains', '<p>Given a base b and two non-negative base b integers p and m, compute p mod m and print the result as a base b integer. p mod m is defined as the smallest non-negative integer k such that p = a*m + k for some integer a.</p>\r\n<br />\r\n<br />\r\n<p>Input consists of a number of cases. Each case is represented by a line containing three unsigned integers. The first, b, is a decimal number between 2 and 10. The second, p, contains up to 1000 digits between 0 and b-1. The third, m, contains up to 9 digits between 0 and b-1. The last case is followed by a line containing 0.</p>\r\n<br />\r\n<br />\r\n<p>For each test case, print a line giving p mod m as a base-b integer.</p>\r\n<br />', '', '', 'D:\\oj\\data\\1954', 'D:\\oj\\data\\1954', '2 1100 101\r\n10 123456789123456789123456789 1000\r\n0', '10\r\n789', '', '', '', '2011-06-10 19:38:42', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 18, 'power721'),
(1955, 'Genealogical Research', '<p>These days, everyone seems to be exploring their ancestry.  This effort is supported by family history software, now marketed by a number of vendors.  Unfortunately this software is expensive and runs only on the McDoze X operating system.  You are to write an open-source equivalent.</p>\r\n<p>Your program accepts a series of commands, one per line.  The commands are described by the following syntax:</p>\r\n<pre>\r\n   <i>command</i> ::= <i>birth</i>\r\n           ::= <i>death</i>\r\n           ::= <i>ancestors</i>\r\n           ::= <i>descendants</i> \r\n           ::= QUIT\r\n   \r\n   <i>birth</i> ::= BIRTH <i>child</i>: <i>date</i>: <i>mother</i>: <i>father</i>\r\n\r\n   <i>death</i> ::= DEATH <i>person</i>: <i>date</i>\r\n\r\n   <i>ancestors</i> ::= ANCESTORS <i>person</i>\r\n\r\n   <i>descendants</i> ::= DESCENDANTS <i>person</i>\r\n   \r\n   <i>child</i> ::= <i>name</i>\r\n\r\n   <i>mother</i> ::= <i>name</i>\r\n\r\n   <i>father</i> ::= <i>name</i>\r\n\r\n   <i>person</i> ::= <i>name</i>\r\n\r\n   <i>date</i> ::= <i>name</i>\r\n\r\n   <i>name</i> ::= <i>&lt;&lt;any sequence of characters not beginning or ending<br />                       with a space or containing a colon&gt;&gt;</i>\r\n</pre>\r\n<p>Spaces in the input are ignored except where they appear within</p>\r\n<i>name</i>\r\n<p>. The BIRTH and DEATH commands record the birth and death of an individual. You may assume that each individual has a unique name.  The ANCESTORS and DESCENDANTS commands are queries:  they print a family tree or a reverse family tree for the named person, using the BIRTH and DEATH information entered by previous commands.  The QUIT command indicates the end of input.</p>\r\n<p>The BIRTH, DEATH, and QUIT commands have no output.  For each ANCESTORS (DESCENDANTS) command, print the following information:</p>\r\n<ul>\r\n    <li>1. Print a line containing "ANCESTORS of" ("DESCENDANTS of") followed by the person''s name</li>\r\n    <li>2. Indented 2 spaces from the previous line, print the person''s first parent (child) in alphabetical order, followed by the parent''s (child''s) birth date, followed by a space, followed by a hyphen, and, if the parent (child) has died, another space and the date of death.  If there is no birth record for the parent (child), print the name alone.</li>\r\n    <li>3. Print the ancestry (descendant) information for the parent (child), indented another 2 spaces, using these same steps (i.e. steps 2-4).</li>\r\n    <li>4. Repeat steps 2-4 for the remaining parent (children).  Indentation should be the same as for the previous parent (child).</li>\r\n</ul>\r\n<p>Leave an empty line between the output sequences for successive commands.</p>\r\n<p>You may assume that no input line exceeds 100 characters, and that there are not more than 250 lines of input.  You may assume that DEATH, ANCESTORS, and DESCENDANTS commands refer to a name for which a BIRTH command has previously been given.  QUIT appears only as the last line of input.</p>', '', '', 'D:\\oj\\data\\1955', 'D:\\oj\\data\\1955', 'BIRTH John Doe : January 7, 1599 : Jane Doe : Adam Doe\r\nBIRTH Mary Worth : May 18, 1666 : Jane Doe : Adam Doe\r\nBIRTH Casper Ghost : Jan 2, 1959 : Mary Worth : John Doe\r\nDEATH Mary Worth : Jan 3, 1959\r\nANCESTORS Casper Ghost\r\nDESCENDANTS John Doe\r\nQUIT', 'ANCESTORS of Casper Ghost\r\n  John Doe January 7, 1599 -\r\n    Adam Doe\r\n    Jane Doe\r\n  Mary Worth May 18, 1666 - Jan 3, 1959\r\n    Adam Doe\r\n    Jane Doe\r\n\r\nDESCENDANTS of John Doe\r\n  Casper Ghost Jan 2, 1959 -', '', '', '', '2011-06-10 19:38:42', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 17, 'power721'),
(1956, 'Treasure Map', '<p>You have come into possession of a pirate map that gives a series of  steps to get from your landing place on a desert isle to</p>\r\n<i>the spot  marked <b>X</b></i>\r\n<p>where the treasure is located.  Each step consists  of a compass heading and a number of paces.</p>\r\n<p>After spending most of your savings chartering a boat, you arrive at the island and, with the help of your portable GPS receiver, duly execute  the instructions on the map.  Alas, no treasure!  On your return home you are astonished to learn that the pirates had no knowledge of GPS and used a magnetic compass to create the map. The pirates were unaware that their compass pointed to <i>magnetic north</i> rather than true north.  The relative angle between magnetic north and true north varies depending where you are on the planet, but you are able to determine that on this particular desert isle, magnetic north is <i>d</i> degrees from true north.  How close were you to <i>the spot marked <b>X</b></i> at any moment while following the map?</p>\r\n<p>There are several test cases.  Each test case begins with <i>n &lt;= 1000</i>, the number of steps in the map.  <i>n</i> lines follow;  each consists of  one of the 32 named compass points shown at right followed by a number  of paces.  The last line is a number giving the angle between magnetic north and true north, in degrees.  A positive number indicates that magnetic north is to the east of true north; a negative indicates that it is to the west.  The magnitude of this angle will not exceed 90 degrees. A line containing 0 follows the input for the last case.</p>\r\n<p>For each test case, output a single number, rounded to two decimal places,  giving the least distance (in paces) that separated you from the treasure at any point while you were following the map.</p>\r\n<p><i>Note:</i> We use combinations of the letters <b>N,E,S,W,b</b> to abbreviate the names of the compass points.  For example, <b>NEbE</b> stands for <i>north-east by east</i>.  The 32 points are equally spaced about the compass.  Clockwise, they are: <b> N NbE NNE NEbN NE NEbE ENE EbN E EbS ESE SEbE SE SEbS SSE SbE S SbW SSW SWbS SW SWbW WSW WbS W WbN WNW NWbW NW NWbN NNW NbW.</b></p>', '', '', 'D:\\oj\\data\\1956', 'D:\\oj\\data\\1956', '2\r\nNbE 10\r\nEbS 10\r\n90.00\r\n2\r\nNbE 10\r\nEbS 10\r\n-90.00\r\n0', '14.14\r\n10.00', '', '', '', '2011-06-10 19:38:42', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 16, 'power721'),
(1957, 'Calories from Fat', '<p>Fat contains about 9 Calories/g of food energy.  Protein, sugar, and starch contain about 4 Calories/g, while alcohol contains about 7 Calories/g.   Although many people consume more than 50% of their total Calories as fat, most dieticians recommend that this proportion should be 30% or less.  For example, in the <i>Nutrition Facts</i> label to the right, we see that 3g of fat is 5% of the recommended daily intake based on a 2,000 calorie diet.  A quick calculation reveals that the recommended daily intake of fat is therefore 60g; that is, 540 Calories or 27% Calories from fat.</p>\r\n<p>Others recommend radically different amounts of fat.  Dean Ornish, for example, suggests that less than 10% of total caloric intake should be fat.  On the other hand, Robert Atkins recommends the elimination of all carbohydrate with no restriction on fat.  It has been estimated that the average Atkins dieter consumes 61% of Calories from fat.</p>\r\n<p>From a record of food eaten in one day, you are to compute the percent  Calories from fat.  The record consists of one line of input per food item, giving the quantity of fat, protein, sugar, starch and alcohol in each. Each quantity is an integer followed by a unit, which  will be one of: g (grams), C (Calories), or % (percent Calories).  Percentages will be between 0 and 99.   At least one of the ingredients will be given as a non-zero quantity of grams or Calories (not percent Calories).</p>\r\n<p>Input will consist of several test cases.  Each test case will have one or more lines as described above.  Each test case will be terminated by a line containing ''-''.  An additional line containing ''-'' will follow the last test case.</p>\r\n<p>For each test case, print percent Calories from fat, rounded to the  nearest integer.</p>', '', '', 'D:\\oj\\data\\1957', 'D:\\oj\\data\\1957', '3g 10g 10% 0g 0g\r\n55% 100C 0% 0g 30g\r\n-\r\n25g 0g 0g 0g 0g\r\n-\r\n1g 15% 20% 30% 1C\r\n-\r\n-', '53%\r\n100%\r\n32%', '', '', '', '2011-06-10 19:38:42', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 16, 'power721'),
(1958, 'Dead Fraction', '<p>Mike is frantically scrambling to finish his thesis at the last minute.  He needs to assemble all his research notes into vaguely coherent form in the next 3 days.  Unfortunately, he notices that he had been extremely sloppy in his calculations.  Whenever he needed to perform arithmetic, he just plugged  it into a calculator and scribbled down as much of the answer as he felt was relevant.  Whenever a repeating fraction was displayed, Mike simply reccorded the first few digits followed by "...".  For instance, instead of "1/3" he might have written down "0.3333...". Unfortunately, his results require exact fractions!  He doesn''t have time to redo every calculation, so he needs you to write a program (and FAST!) to automatically deduce the original fractions.</p>\r\n<p>To make this tenable, he assumes that the original fraction is always the simplest one that produces the given sequence of digits; by <i>simplest</i>, he means the the one with smallest denominator.  Also, he assumes that he did not neglect to write down important digits; no digit from the repeating portion of the decimal expansion was left unrecorded (even if this repeating portion was all zeroes).</p>\r\n<p>There are several test cases.  For each test case there is one line of input of the form "0.<i>dddd</i>..." where <i>dddd</i> is a string of 1 to 9 digits, not all zero. A line containing 0 follows the last case.  For each case, output the original  fraction.</p>\r\n<p><!--with least possible denominator such that\r\n0.<i>dddd</i> is a prefix of its infinite decimal expansion and such that\r\n<i>dddd</i> contains the entire repeating part. --></p>\r\n<p>Note that an exact decimal fraction has two repeating expansions (e.g.  1/5 = 0.2000... = 0.19999...).</p>', '', '', 'D:\\oj\\data\\1958', 'D:\\oj\\data\\1958', '0.2...\r\n0.20...\r\n0.474612399...\r\n0', '2/9\r\n1/5\r\n1186531/2500000', '', '', '', '2011-06-10 19:38:42', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 11, 'power721'),
(1959, 'Biometrics', '<p>Recently, the term Biometrics been used to refer to the emerging field of technology devoted to identification of individuals using biological traits, such as those based on retinal or iris scanning, fingerprints, or face recognition.</p>\r\n<br />\r\n<br />\r\n<p>A simple biometric system translates a human image into a polygon by considering certain features (eyes, nose, ears, etc.) to be vertices and connecting them with line segments. The polygon has distinct vertices but may be degenerate in that the line segments could intersect. Because these polygons are generally created from remote images, there is some uncertainty as to their scale and rotation. Your job is to determine whether or not two polygons are similar; that is, can they be made equal by repositioning, rotating and magnifying them?</p>\r\n<br />\r\n<br />\r\n<p>Input consists of several test cases. Each test case consists of three lines containing:</p>\r\n<br />\r\n<br />\r\n<p>&nbsp;&nbsp;&nbsp; * f, the number of features</p>\r\n<br />\r\n<p>&nbsp;&nbsp;&nbsp; * f coordinate pairs giving the vertices of the first polygon</p>\r\n<br />\r\n<p>&nbsp;&nbsp;&nbsp; * f coordinate pairs giving the vertices of the second polygon</p>\r\n<br />\r\n<br />\r\n<p>The vertices for both polygons correspond to the same set of features in the same order; for example, right ear tip, chin cleft, right eye, nose, left eye, left ear tip, space between front teeth. Each polygon has f distinct vertices; each vertex is given as an x and y coordinate pair. There are at least three and no more than ten features. Coordinates are integers between -1000 and 1000. A line containing 0 follows the last test case.</p>\r\n<br />\r\n<br />\r\n<p>For each case, output a line "similar" or "dissimilar" as appropriate. The two polygons are similar if, after some combination of translation, rotation, and scaling (but not reflection) both vertices corresponding to each feature are in the same position.</p>\r\n<br />', '', '', 'D:\\oj\\data\\1959', 'D:\\oj\\data\\1959', '4\r\n0 0 0 1 1 1 1 0\r\n0 1 1 0 0 -1 -1 0\r\n3\r\n0 0 10 0 10 10\r\n0 0 -10 0 -10 10\r\n3\r\n0 0 10 10 20 20\r\n0 0 11 11 22 22\r\n3\r\n0 0 10 10 20 20\r\n0 0 11 11 20 20\r\n0', 'similar\r\ndissimilar\r\nsimilar\r\ndissimilar', '', '', '', '2011-06-10 19:38:43', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 12, 'power721'),
(1960, 'XYZZY', '<hr />\r\n<pre>\r\nADVENT: /ad?ent/, n.\r\n</pre>\r\n<i>    The prototypical computer adventure game, first designed by Will Crowther    on the PDP-10 in the mid-1970s as an attempt at computer-refereed fantasy    gaming, and expanded into a puzzle-oriented game by Don Woods at Stanford    in 1976. (Woods had been one of the authors of INTERCAL.) Now better    known as Adventure or Colossal Cave Adventure, but the TOPS-10 operating    system permitted only six-letter filenames in uppercase. See also vadding,    Zork, and Infocom. </i> <hr />\r\n<p>It has recently been discovered how to run open-source software on the Y-Crate gaming device.  A number of enterprising designers have developed <i>Advent</i>-style games for deployment on the Y-Crate.  Your job is to test a number of these designs to see which are winnable.</p>\r\n<p>Each game consists of a set of up to 100 rooms.  One of the rooms is the <i>start</i> and one of the rooms is the <i>finish</i>. Each room has an <i>energy value</i> between -100 and +100. One-way doorways interconnect pairs of rooms.</p>\r\n<p>The player begins in the start room with 100 <i>energy points</i>.  She may pass through any doorway that connects the room she is in to another room, thus entering the other room.  The energy value of this room is added to the player''s energy.  This process continues until she wins by entering the finish room or dies by running out of energy (or quits in frustration).   During her adventure the player may enter the same room several times, receiving its energy each time.</p>\r\n<p>The input consists of several test cases.  Each test case begins with <i>n</i>, the number of rooms.  The rooms are numbered from 1 (the start  room) to <i>n</i> (the finish room).  Input for the <i>n</i> rooms follows.   The input for each room consists of one or more lines containing:</p>\r\n<ul>\r\n    <li>the energy value for room <i>i</i></li>\r\n    <li>the number of doorways leaving room <i>i</i></li>\r\n    <li>a list of the rooms that are reachable by the doorways leaving room <i>i</i></li>\r\n</ul>\r\n<p>The start and finish rooms will always have enery level 0.   <!-- Given enough energy, it is possible to get from any room to the finish.  --> A line containing -1 follows the last test case.</p>\r\n<p>In one line for each case, output "winnable" if it is possible for the player to win, otherwise output "hopeless".</p>', '', '', 'D:\\oj\\data\\1960', 'D:\\oj\\data\\1960', '5\r\n0 1 2\r\n-60 1 3\r\n-60 1 4\r\n20 1 5\r\n0 0\r\n5\r\n0 1 2\r\n20 1 3\r\n-60 1 4\r\n-60 1 5\r\n0 0\r\n5\r\n0 1 2\r\n21 1 3\r\n-60 1 4\r\n-60 1 5\r\n0 0\r\n5\r\n0 1 2\r\n20 2 1 3\r\n-60 1 4\r\n-60 1 5\r\n0 0\r\n-1', 'hopeless\r\nhopeless\r\nwinnable\r\nwinnable', '', '', '', '2011-06-10 19:38:43', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 16, 'power721'),
(1961, 'A Brief Gerrymander<font color=black>(need SPJ)</font>', '<p>The evil ruling party, the Liberatives, are redistributing the  electoral regions (ridings) in your city, and are nefariously attempting to pack certain  opposition-friendly neighborhoods into as few ridings as possible.  If this plan succeeds, it will be the end of democracy as we know it!  As a card-carrying member of the noble, compassionate Conservals (the main opposition party),  you must foil their devious plot and safeguard the future of our country.</p>\r\n<p>Under the new plan, the city will be divided up into a grid of rectangles by selecting certain major streets and avenues as boundaries.  All streets and avenues stretch straight across the city, and are numbered starting from the southwest corner of the city.  The city is bounded by four roads: 1st Street (west edge), 100th Street (east edge), 1st Avenue (south edge), 100th Avenue (north edge).  Clearly these four roads must represent district boundaries; however, only a subset of the streets and avenues in between will divide districts.  The Liberatives have already been able to fix the North-South (street) boundaries; however, they have been forced to allow the Conservals  to select the East-West (avenue) boundaries.</p>\r\n<p>You know the location of all the opposition-friendly neighborhoods, which vote strongly Conserval. A neighborhood is exactly one block between adjacent streets and avenues.  For instance, one neighborhood might lie between 47th and 48th Street and 67th and 68th Avenue.   Place the avenue boundaries  so that as many ridings as possible contain at least one opposition-friendly  neighborhood.</p>\r\n<p>Input consists of multiple cases, each describing a city.  The first line  will give N, the number of Conserval neighborhoods in the city; the following N lines will contain the street and avenue number of the southwest corner of each neighborhood.  The next line will contain S, the number of street boundaries, and the S street numbers that they lie on, in increasing order. The final line will consist of A (at least 2), the number of avenue  boundaries you must place.  Input will be terminated by a line containing -1.</p>\r\n<p>For each case, output a single line giving A followed by <i>A</i> distinct avenue numbers for the optimal redistriubution, in increasing order.   If there are multiple such solutions, any one will do.</p>\r\n<h3>&nbsp;</h3>', '', '', 'D:\\oj\\data\\1961', 'D:\\oj\\data\\1961', '2\r\n49 49 \r\n50 50\r\n2 1 100\r\n3\r\n-1', '3 1 50 100', '暂时没有SPJ.', '', '', '2011-06-10 19:38:43', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 20, 'power721'),
(1962, 'Tango Tango Insurrection<font color=black>(need SPJ)</font>', '<p><img align="left" alt="" src="images/problem/pic1962_0" /></p>\r\n<p>You are attempting to learn to play a simple arcade dancing game. The game has 4 arrows set into a pad: Up, Left, Down, Right.  While a song plays, you watch arrows rise on a screen, and when they hit the top, you have to hit the corresponding arrows on the pad.  There is no penalty for stepping on an arrow without need, but note that merely standing on an arrow does not activate it; you must actually tap it with your foot. Many sequences in the game are very fast-paced, and require proper footwork if you don''t want to tire yourself out.  Write a program to determine the easiest way to execute a certain sequence of arrows.</p>\r\n<p>We will work with a basic time unit of an eighth-note.  At any given time, your left foot and right foot will each be on distinct arrows. Only one foot may perform an action (changing arrows and/or tapping) during any time unit; jumping is not allowed.  Also, you must remain facing forward in order to see the screen.  This puts limitations on which feet you can use to hit which arrows.  Finally, hitting two arrows in a row with the same foot ("double-tapping") is exhausting, because you can''t shift your weight onto that foot.  Ideally, you want to alternate feet all the way through a string of consecutive arrows.</p>\r\n<p>Performing an action with a foot costs 1 unit of energy if it did NOT perform an action in the previous time unit.  If it did, then it costs 3 units if it doesn''t change arrows, 5 units if it moves to an adjacent arrow, and 7 units if it moves directly across the pad (between Up and Down, or Left and Right).</p>\r\n<p>Under normal circumstances, you can''t put your left foot on Right, or your right foot on Left.  However, you CAN do a temporary "crossover": if your left foot is on Up or Down, you can twist your hips and put your right foot on Left - but until your right foot moves away, you can''t move your left to a different arrow.  (Imagine the tangle your legs would get into if you tried!)  Similarly, you can cross your left foot over/behind your right.</p>', '<p>You will be given multiple arrow sequences to provide foot guides for. Every sequence consists of a line containing from 1 to 70 characters, representing the arrow that must be hit at each time unit.  The possible characters are U, L, D, and R, signifying the four arrows, or a period, indicating that no arrow need be hit.  Assume that your left and right feet start on the Left and Right arrows for the first time unit of a sequence.</p>\r\n<p>There are at most 100 sequences.  Input is terminated by a line consisting of a single #.</p>', '<p>For each input sequence, output a string of the same length, indicating which foot should perform an action at each time step, or ''.'' if neither does.  If there are multiple solutions that require minimal energy, any will do.</p>', 'D:\\oj\\data\\1962', 'D:\\oj\\data\\1962', 'LRLRLLLLRLRLRRRRLLRRLRLDU...D...UUUUDDDD\r\n#', 'LRLRLLLLRLRLRRRRLLRRLRLRL...R...LLLLRRRR', '暂时没有SPJ.', 'http://plg1.cs.uwaterloo.ca/~acm00/040131/A.html', '', '2011-06-10 19:38:45', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 15, 'power721'),
(1963, 'Advanced Causal Measurements (ACM)', '<p>Causality is a very important concept in theoretical physics.  The basic elements in a discussion of causality are <em>events</em>.  An event <em>e</em> is described by its time of occurrence <em>t</em>, and its location, <b><em>x</em></b>, and we write <em>e</em> = (<em>t</em>,<b><em>x</em></b>).  For our concerns, all events happen in the one dimensional geometric space and thus locations are given by a single real number <em>x</em> as a coordinate on <em>x</em>-axis. Usually, theoretical physicists like to define the speed of light to be 1, so that time and space have the same units (actual physical units frighten and confuse theorists).</p>\r\n<p>One event <em>e<sub>1</sub></em> = (<em>t<sub>1</sub></em>,<em>x<sub>1</sub></em>) is a <em>possible cause</em> for a second event <em>e<sub>2</sub></em> = (<em>t<sub>2</sub></em>,<em>x<sub>2</sub></em>) if a signal emitted at <em>e<sub>1</sub></em> could arrive at <em>e<sub>2</sub></em>.  Signals can''t travel faster than the speed of light, so this condition can be stated as:</p>\r\n<center> <em>e<sub>1</sub></em> is a <em>possible cause</em> for <em>e<sub>2</sub></em> <spacer size="10" type="horizontal"></spacer><b>iff</b><spacer size="10" type="horizontal"></spacer> <em>t<sub>2</sub></em> &gt;= <em>t<sub>1</sub></em>+|<em>x<sub>2</sub></em>-<em>x<sub>1</sub></em>| </center>\r\n<p>Thus an event at (-1,1) could cause events at (0,0), (1,2), and (1,3), for example, but could not have caused events at (1,4) or (-2,1). Note that one event can cause several others.</p>\r\n<p><img align="right" vspace="20" hspace="20" src="images/problem/pic1963_0" alt="" /> Recently, scientists have observed several unusual events in the geometrically one dimensional universe, and using current theories, they know how many causes were responsible for these observations, but they know nothing about the time and space coordinates of the causes. You asked to write a program to determine the latest time at which the earliest cause could have occurred (i.e. the time such that at least one cause must have occurred on or before this time).  Somewhat surprisingly, all the observed events have both space and time coordinates expressed by integer numbers in the range  -1000000&nbsp;&le;&nbsp;<em>t</em>,&nbsp;<em>x</em>&nbsp;&le;&nbsp;1000000.</p>\r\n<p>The figure on the right illustrates the first case from input: the earliest single event as a possible cause of all four events.</p>\r\n<p>The first line of input is the number of cases which follow.  Each case begins with a line containing the number <em>n</em> of events and the number <em>m</em> of causes, 1&nbsp;&le;&nbsp;<em>n,&nbsp;m</em>&nbsp;&le;&nbsp;100000.  Next follows <em>n</em> lines containing the <em>t</em> and <em>x</em> coordinates for each event.</p>\r\n<p>Output consists of a single line for each case in the format as in the sample output, giving the latest time at which the earliest cause could have occurred, this will be an integer as our time units are not divisible.</p>', '', '', 'D:\\oj\\data\\1963', 'D:\\oj\\data\\1963', '4\r\n4 1\r\n1 -1\r\n1 3\r\n1 4\r\n2 6\r\n4 2\r\n1 -1\r\n1 3\r\n1 4\r\n2 6\r\n4 3\r\n1 -1\r\n1 3\r\n1 4\r\n2 6\r\n4 4\r\n1 -1\r\n1 3\r\n1 4\r\n2 6', 'Case 1: -2\r\nCase 2: 0\r\nCase 3: 0\r\nCase 4: 1', '', 'http://plg1.cs.uwaterloo.ca/~acm00/040131/B.html', '', '2011-06-10 19:38:45', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 13, 'power721'),
(1964, 'A flea on a chessboard', 'An infinite chessboard is obtained by extending a finite chessboard to\r\nthe right and up infinitely.  Each square of the chessboard is either\r\nblack or white with the side of <em>S</em> milimiters,\r\n0&nbsp;<&nbsp;<em>S</em>&nbsp;<=&nbsp;1000.  The leftmost bottom square\r\nof the chessboard is black.  A flea is positioned on the chessboard at\r\nthe point (<em>x</em>,&nbsp;<em>y</em>) (given in milimeters) and\r\nmakes jumps by jumping <em>dx</em> milimeters to the right and\r\n\r\n<em>dy</em> milimiters up,\r\n0&nbsp;<&nbsp;<em>dx</em>,&nbsp;<em>dy</em>, that is, a flea at\r\nposition (<em>x</em>,&nbsp;<em>y</em>) after one jump lands at position\r\n(<em>x+dx</em>,&nbsp;<em>y+dy</em>).\r\n<p>\r\n\r\nGiven the starting position of the flea on the board your task is to\r\nfind out after how many jumps the flea will reach a white square.  If\r\nthe flea lands on a boundary between two squares then it does not\r\ncount as landing on the white square.  Note that it is possible that\r\nthe flea never reaches a white square.', '<p>Each test case consists of one line of input containing five non-negative numbers separated by white space and giving integers <em>S</em>, <em>x</em>, <em>y</em>, <em>dx</em>, and <em>dy</em>.  An input line containing five zeroes follows the last test case.  For test case print one line of output in the format shown in the sample.</p>', '', 'D:\\oj\\data\\1964', 'D:\\oj\\data\\1964', '10 2 3 3 2\r\n100 49 73 214 38\r\n25 0 0 5 25\r\n407 1270 1323 1 1\r\n18 72 6 18 6\r\n407 1270 1170 100 114\r\n0 0 0 0 0', 'After 3 jumps the flea lands at (11, 9).\r\nAfter 1 jumps the flea lands at (263, 111).\r\nThe flea cannot escape from black squares.\r\nAfter 306 jumps the flea lands at (1576, 1629).\r\nThe flea cannot escape from black squares.\r\nAfter 0 jumps the flea lands at (1270, 1170).', '', 'http://plg1.cs.uwaterloo.ca/~acm00/040131/C.html', '', '2011-06-10 19:38:47', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 18, 'power721'),
(1965, 'Jack and Jill<font color=black>(need SPJ)</font>', '<p>Ever since the incident on the hill, Jack and Jill dislike each other and wish to remain as distant as possible.  Jack and Jill must attend school each day; Jack attends a boys'' school while Jill attends a girls''  school.  Both schools start at the same time.  You have been retained by their lawyers to arrange routes and a schedule that Jack and Jill will adhere to so as to maximize the closest straight-line distance between  them at any time during their trip to school.</p>\r\n<p>Jack and Jill live in a town laid out as an <i>n</i> by <i>n</i> square grid (<i>n</i> &lt;= <i>30</i>).  It takes 1 minute to walk from one location to an adjacent location.  In maximizing the distance between Jack and Jill you need consider only the distance between the locations they visit (i.e. you need not consider any intermediate points on the path they take from grid location to grid location).  Some locations are impassable due to being occupied by rivers, buildings, etc.   Jack must start at his house and walk continuously until he gets to school.  Jill must start at her house at the same time as Jack  and walk continuously until she arrives at her school. Jack''s house and school are impassable to Jill while Jill''s house and school are impassable to Jack.  Other grid locations that are impassable to both Jack and Jill are given in the input.</p>\r\n<p>Input will consist of several test cases.  Each test case will consist of <i>n</i>, followed by <i>n</i> lines with <i>n</i> characters representing a map of the town.  In the map, Jack''s house is represented by ''H'', Jack''s school is represented by ''S'', Jill''s house is represented by ''h'', Jill''s school is represented by ''s'', impassable locations  are represented by ''*'', and all other locations are represented by ''.'' You may assume the normal cartographic convention that North is at the top of the page and West is to the left.  A line containing 0 follows the last case.</p>\r\n<p>For each input case you should give three lines of output containing:</p>\r\n<ul>\r\n    <li>the closest that Jack and Jill come during the schedule (to 2 decimal places)</li>\r\n    <li>Jack''s route</li>\r\n    <li>Jill''s route.</li>\r\n</ul>\r\n<p>Each route is a sequence of directions that Jack or Jill  should follow for  each minute from the start time until arriving at school. Each direction is one of ''N'', ''S'', ''E'', or ''W''.  If several pairs of routes are possible, any one will do.  You may assume there is at least one solution. Leave a blank line between the output for successive cases.</p>\r\n<h3>&nbsp;</h3>', '', '', 'D:\\oj\\data\\1965', 'D:\\oj\\data\\1965', '10\r\n..........\r\n...H......\r\n.**...s...\r\n.**.......\r\n.**.......\r\n.**.......\r\n.**.......\r\n.**.......\r\n...S..h..*\r\n..........\r\n0', '6.71\r\nWWWSSSSSSSEEE\r\nNEEENNNNNWWW', '暂时没有SPJ.', 'http://plg1.cs.uwaterloo.ca/~acm00/040131/D.html', '', '2011-06-10 19:38:47', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 18, 'power721'),
(1966, 'Perfect Pth Powers', '<p>We say that <i>x</i> is a perfect square if, for some integer <i>b</i>, <i>x = b<sup>2</sup></i>.  Similarly, <i>x</i> is a perfect cube if, for some integer <i>b</i>, <i>x = b<sup>3</sup></i>.  More generally, <i>x</i> is a perfect p<i>th</i> power if, for some integer <i>b</i>, <i>x = b<sup>p</sup></i>.  Given an integer <i>x</i> you are to determine the largest <i>p</i> such that <i>x</i> is a perfect p<i>th</i> power.</p>\r\n<p>Each test case is given by a line of input containing <i>x</i>. The value of <i>x</i> will have magnitude at least 2 and be within the range of a (32-bit) <i>int</i> in C, C++, and Java.  A line containing 0 follows the last test case.</p>\r\n<p>For each test case, output a line giving the largest integer <i>p</i> such that <i>x</i> is a perfect p<i>th</i> power.</p>', '', '', 'D:\\oj\\data\\1966', 'D:\\oj\\data\\1966', '17\r\n1073741824\r\n25\r\n0', '1\r\n30\r\n2', '', 'http://plg1.cs.uwaterloo.ca/~acm00/040131/E.html', '', '2011-06-10 19:38:47', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 11, 'power721'),
(1967, 'Expanding Rods', '<img align="right" vspace="20" hspace="20" src="images/problem/pic1967_0" alt="" />\r\n<p>When a thin rod of length</p>\r\n<em>L</em>\r\n<p>is heated</p>\r\n<em>n</em>\r\n<p>degrees, it expands to a new length</p>\r\n<em>L''=(1+n*C)*L</em>\r\n<p>, where</p>\r\n<em>C</em>\r\n<p>is the coefficient of heat expansion.</p>\r\n<p>When a thin rod is mounted on two solid walls  and then heated, it expands and takes the shape of a circular segment, the original rod being the chord of the segment.</p>\r\n<p>Your task is to compute the distance by which the center of the rod is displaced.</p>\r\n<p>The input contains multiple lines.  Each line of input contains three non-negative numbers: the initial lenth of the rod in millimeters, the  temperature change in degrees and the coefficient of heat expansion of the material.  Input data guarantee that no rod expands by more than one half of its original length.  The last line of input contains three negative numbers and it should not be processed.</p>\r\n<p>For each line of input, output one line with the displacement of the center of the rod in millimeters with 3 digits of precision.</p>', '', '', 'D:\\oj\\data\\1967', 'D:\\oj\\data\\1967', '1000 100 0.0001\r\n15000 10 0.00006\r\n10 0 0.001\r\n-1 -1 -1', '61.329\r\n225.020\r\n0.000', '', '', '', '2011-06-10 19:38:47', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 20, 'power721'),
(1968, 'Three powers', '<img align="right" vspace="0" hspace="10" src="images/problem/pic1968_0" alt="" />\r\n<p>Consider the set of all non-negative integer powers of 3.</p>\r\n<p>&nbsp;</p>\r\n<center> <em>S</em> = { 1, 3, 9, 27, 81, ... } </center>\r\n<p>Consider the sequence of all subsets of <em>S</em> ordered by the value of the sum of their elements.  The question is simple: find the set at the <em>n</em>-th position in the sequence and print it in increasing order of its elements.</p>\r\n<p>Each line of input contains a number <em>n</em>, which is a positive integer with no more than 19 digits.  The last line of input contains 0 and it should not be processed.</p>\r\n<p>For each line of input, output a single line displaying the <em>n</em>-th set as described above, in the format used in the sample output.</p>\r\n<h3>&nbsp;</h3>', '', '', 'D:\\oj\\data\\1968', 'D:\\oj\\data\\1968', '1\r\n7\r\n14\r\n783\r\n1125900981634049\r\n0', '{ }\r\n{ 3, 9 }\r\n{ 1, 9, 27 }\r\n{ 3, 9, 27, 6561, 19683 }\r\n{ 59049, 3486784401, 205891132094649, 717897987691852588770249 }', '', '', '', '2011-06-10 19:38:47', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 11, 'power721'),
(1969, 'Work Reduction', '<img align="right" width="250" src="images/problem/pic1969_0" alt="" />\r\n<p>Paperwork is beginning to pile up on your desk, and tensions at the workplace are starting to mount.  Your boss has threatened to fire you if you don''t make any progress by the end of the day.  You currently have</p>\r\n<b>N</b>\r\n<p>units of paperwork on your desk, and your boss demands that you have exactly</p>\r\n<b>M</b>\r\n<p>units of paperwork left by the end of the day.</p>\r\n<p>The only hope for you now is to hire help.  There are various agencies which offer paperwork reduction plans:</p>\r\n<p>For <b>$A</b> they will reduce your paperwork by one unit.<br />\r\nFor <b>$B</b> they will reduce your entire paperwork by half (rounding down when necessary).</p>\r\n<p>Note that work can never be reduced to less than 0.</p>\r\n<p>Your task now is to produce a sorted table of agency names and their respective minimum costs to solve your workload problem.</p>\r\n<p>The first line of input consists of a single positive integer representing the number of cases to follow.  Each case begins with three positive integers separated by spaces: <b>N</b> - your starting workload, <b>M</b> - your target workload, and <b>L</b> - the number of work reduction agencies available to you, (1 &lt;= M &lt;= N &lt;= 100000, 1 &lt;= L &lt;= 100).  The next <b>L</b> lines have the format "[<em>agency name</em>]<b>:A</b>,<b>B</b>", where <b>A</b> and <b>B</b> are the rates as described above for the given agency. (0 &lt;= A,B &lt;= 10000) The length of the agency name will be between 1 and 16, and will consist only of capital letters.  Agency names will be unique.</p>\r\n<p>For each test case, print "Case X", with X being the case number, on a single line, followed by the table of agency names and their respective minimum costs, sorted in non-decreasing order of minimum costs.  Sort job agencies with identical minimum costs in alphabetical order by agency name.  For each line of the table, print out the agency name, followed by a space, followed by the minimum required cost for that agency to solve your problem.</p>', '', '', 'D:\\oj\\data\\1969', 'D:\\oj\\data\\1969', '2\r\n100 5 3\r\nA:1,10\r\nB:2,5\r\nC:3,1\r\n1123 1122 5\r\nB:50,300\r\nA:1,1000\r\nC:10,10\r\nD:1,50\r\nE:0,0', 'Case 1\r\nC 7\r\nB 22\r\nA 37\r\nCase 2\r\nE 0\r\nA 1\r\nD 1\r\nC 10\r\nB 50', '', '', '', '2011-06-10 19:38:47', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 33, 'power721'),
(1970, 'Grid Speed', '<p>Consider a grid in which north-south streets, separated by gaps of 10 miles each, are elevated above east-west streets laid out in a similar fashion (see illustration for the case of a 6 by 6 grid).  All streets are two-way. Entrance and exit ramps connect the streets at every intersection.  Because there are no traffic lights, switching from a north-south street to an east-west street, and vice versa, takes essentially no time.  The grid has very little traffic, but the local police patrol so carefully for speeding that there are virtually no speeders.</p>\r\n<p><img align="center" vspace="20" hspace="20" alt="" src="images/problem/pic1970_0" /></p>\r\n<p>The speed limits follow an unusual pattern.  The speed limits are separately posted for each street and are the same for the entire street in both directions.  In the illustration above, let us label the intersections using their column and row numbers: the southwestern corner of the grid is (1,&nbsp;1), the southeastern corner is (6,&nbsp;1), and so on.  Part of your task is to determine the shortest time in which we can get from (1,&nbsp;1) to (6,&nbsp;3) while obeying speed limits.</p>\r\n<p>However, after the Kyoto disagreement, just being fast is not good enough, one also has to be fuel efficient.  Fuel consumption of a car is given in miles-per-gallon (mpg) and depends on speed of the car. Speed of a car is given in miles-per-hour (mph) and, in this digital age, the speed of a car is always a positive integer multiple of 5. The formula relating mpg to mph is a very simple one: a car travelling at <em>v</em> mph makes 80-0.03*<em>v</em><sup>2</sup> mpg. In a given grid of streets we would like to travel from intersection (<em>x<sub>s</sub></em>, <em>y<sub>s</sub></em>) to intersection (<em>x<sub>t</sub></em>, <em>y<sub>t</sub></em>).  You are to determine the fastest and the most fuel efficient way of making the trip such that:</p>\r\n<ul>\r\n    <li>the car does not change speed between intersections,</li>\r\n    <li>the car obeys all speed limits,</li>\r\n    <li>the car travels the shortest possible distance between the start and finish,     and</li>\r\n    <li>the car arrives at the destination in the given time interval.</li>\r\n</ul>', '<p>The first line of input contains an integer <em>t</em>, the number of scenarios to be processed.  The data for each scenario occupy 5 lines. The first line contains an integer <em>n</em>&lt;=10 which is the number of horizontal and vertical streets.  The second line contains an integer which is the grid unit size in miles, smaller than 100. The third and fourth lines contain <em>n</em> integers each, specifying the speed limits on the horizontal and vertical streets, respectively. The largest speed limit is 50.  The last line of data for a scenario contains 6 integers.  The first four are <em>x<sub>s</sub></em>, <em>y<sub>s</sub></em>, <em>x<sub>t</sub></em>, and <em>y<sub>t</sub></em>.  The last two integers give the shortest and the longest allowed time to travel in minutes, inclusive, both not bigger than 1000.</p>', '<p>For each scenario, output two or three lines in the format given in the sample output.  If the travel is possible then, on the second line of output, report the earliest possible arrival time (but within the imposed limits) and fuel consumed (least possible for this travel time) and, on the third line, report the earliest arrival time (but within the imposed limits) that consumes the minimum amount of fuel. The time is to be reported in minutes (integer), rounded up.</p>', 'D:\\oj\\data\\1970', 'D:\\oj\\data\\1970', '3\r\n8\r\n20\r\n10 20 30 40 50 50 50 50\r\n50 50 50 50 50 50 40 50\r\n2 3 7 8 300 320\r\n8\r\n2\r\n10 20 20 30 10 20 10 10 \r\n10 20 20 30 10 20 10 20 \r\n6 8 2 4 10 39\r\n10\r\n10\r\n30 20 20 10 10 20 10 10 20 20\r\n40 20 10 20 10 20 20 10 10 20\r\n1 1 10 10 100 500', 'Scenario 1:\r\nThe earliest  arrival: 300 minutes, fuel 6.25 gallons\r\nThe economical travel: 318 minutes, fuel 5.60 gallons\r\nScenario 2:\r\nIMPOSSIBLE\r\nScenario 3:\r\nThe earliest  arrival: 405 minutes, fuel 4.14 gallons\r\nThe economical travel: 498 minutes, fuel 2.76 gallons', '', '', '', '2011-06-10 19:38:47', 10000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 10000, 22, 'power721'),
(1971, 'Marbles on a tree', '<img align="right" vspace="20" hspace="20" src="images/problem/pic1971_0" alt="" />  <em>n</em>\r\n<p>boxes are placed on the vertices of a rooted tree, which are numbered from 1 to</p>\r\n<em>n</em>\r\n<p>, 1&nbsp;&le;&nbsp;</p>\r\n<em>n</em>\r\n<p>&nbsp;&le;&nbsp;10000.  Each box is either empty or contains a number of marbles; the total number of marbles is</p>\r\n<em>n</em>\r\n<p>.</p>\r\n<p>The task is to move the marbles such that each box contains exactly one marble.  This is to be accomplished be a sequence of moves; each move consists of moving one marble to a box at an adjacent vertex. What is the minimum number of moves required to achieve the goal?</p>\r\n<p>The input contains a number of cases.  Each case starts with the number <em>n</em> followed by <em>n</em> lines.  Each line contains at least three numbers which are: <em>v</em> the number of a vertex, followed by the number of marbles originally placed at vertex <em>v</em> followed by a number <em>d</em> which is the number of children of <em>v</em>, followed by <em>d</em> numbers giving the identities of the children of <em>v</em>.</p>\r\n<p>The input is terminated by a case where <em>n</em>&nbsp;=&nbsp;0 and this case should not be processed.</p>\r\n<p>For each case in the input, output the smallest number of moves of marbles resulting in one marble at each vertex of the tree.</p>', '', '', 'D:\\oj\\data\\1971', 'D:\\oj\\data\\1971', '9\r\n1 2 3 2 3 4\r\n2 1 0\r\n3 0 2 5 6\r\n4 1 3 7 8 9\r\n5 3 0\r\n6 0 0\r\n7 0 0\r\n8 2 0\r\n9 0 0\r\n9\r\n1 0 3 2 3 4\r\n2 0 0\r\n3 0 2 5 6\r\n4 9 3 7 8 9\r\n5 0 0\r\n6 0 0\r\n7 0 0\r\n8 0 0\r\n9 0 0\r\n9\r\n1 0 3 2 3 4\r\n2 9 0\r\n3 0 2 5 6\r\n4 0 3 7 8 9\r\n5 0 0\r\n6 0 0\r\n7 0 0\r\n8 0 0\r\n9 0 0\r\n0', '7\r\n14\r\n20', '', '', '', '2011-06-10 19:38:47', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 16, 'power721');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1972, 'Map<font color=black>(need SPJ)</font>', '<img algin=right src=images/problem/pic1972_0>\r\n<p>A pirate''s treasure map typically contains a series of instructions which, if followed, lead you from the landing place on a desert isle to <i>the spot marked X</i> where the treasure is buried.  You are to construct such a series of instructions for a particular desert isle.</p>\r\n<p>The island is a circle with radius <i>r</i> paces whose  centre is at (0,0).  Relative to the centre, the point (0,1) is north, (0,-1) is south, (1,0) is east, and (-1,0) is west.  Also, (1,1) is northeast, (1,-1) is southeast, (-1,1) is northwest, and (-1,-1) is southwest.</p>\r\n<p>The landing place, on the circumference, is specified by its coordinates.  The spot marked X, on the surface of the island is also specified by its coordinates.</p>\r\n<p>Each instruction in the sequence should have the form</p>\r\n<pre>\r\n   <i>direction distance</i>\r\n</pre>\r\n<p>where</p>\r\n<i>direction</i>\r\n<p>is one of  { north, south, east, west, northeast, northwest, southeast, southwest } and</p>\r\n<i>distance</i>\r\n<p>is a non-negative real number indicating the number of paces to be travelled in the given direction.  When executed as a sequence the instructions should lead from the landing place to the spot marked X without leaving the island.  The total distance (that is, the sum of the distances in your sequence) should be minimized.  From the possible sequences that minimize total distance, choose one with the minimum number of instructions.</p>\r\n<p>Input will consist of a number of test cases, followed by a line containing -1. Each test case consists of a single line containing five real numbers: <i>r, x, y, X, Y</i>. <i>r</i> is the radius of the island; <i>x,y</i> are the coordinates of the landing place; <i>X,Y</i> are the coordinates of the spot marked X.  The landing place and the spot marked X are distinct.</p>\r\n<p>For each test case, output the sequence, one instruction per line. Distances should be accurate to ten places after the decimal, as shown.  Output an empty line between test cases.</p>', '<p>Please Input Input Here</p>', '<p>Please Input Output Here</p>', 'D:\\oj\\data\\1972', 'D:\\oj\\data\\1972', '100.0 0.0 100.0 25.0 50.0\r\n-1', 'south 25.0000000000\r\nsoutheast 35.3553390593', '暂时没有SPJ.', '', '', '2011-06-10 19:38:48', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 22, 'power721'),
(1973, 'Ants', '<p>An army of ants walk on a horizontal pole of length <em>l</em> cm, each with a constant speed of 1 cm/s.  When a walking ant reaches an end of the pole, it immediatelly falls off it.  When two ants meet they turn back and start walking in opposite directions.  We know the original positions of ants on the pole, unfortunately, we do not know the directions in which the ants are walking.  Your task is to compute the earliest and the latest possible times needed for all ants to fall off the pole.</p>\r\n<p>The first line of input contains one integer giving the number of cases that follow.  The data for each case start with two integer numbers: the length of the pole (in cm) and <em>n</em>, the number of ants residing on the pole. These two numbers are followed by <em>n</em> integers giving the position of each ant on the pole as the distance measured from the left end of the pole, in no particular order.  All input integers are not bigger than 1000000 and they are separated by whitespace.</p>\r\n<p>For each case of input, output two numbers separated by a single space.  The first number is the earliest possible time when all ants fall off the pole (if the directions of their walks are chosen appropriately) and the second number is the latest possible such time.</p><img algin=right src=images/problem/pic1973_0>', '<p>Please Input Input Here</p>', '<p>Please Input Output Here</p>', 'D:\\oj\\data\\1973', 'D:\\oj\\data\\1973', '2\r\n10 3\r\n2 6 7\r\n214 7\r\n11 12 7 13 176 23 191', '4 8\r\n38 207', '', '', '', '2011-06-10 19:38:48', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 17, 'power721'),
(1974, 'Cat<font color=black>(need SPJ)</font>', '<img align="right" src="images/problem/pic1974_0" alt="" /></p><p>In strong winds, sailboats tend to heel leeward (tilt away from the wind) like the one in the picture.  Heeling is undesirable for at least two reasons.  First, the effective sail area is reduced, as the effective height of the sail is multiplied by the cosine of the angle.  Reduced sail area implies reduced speed.  Second, the boat may heel to the point that its centre of gravity ceases to be above the hull, causing the boat to capsize.</p>\r\n<p>To mitigate these problems, catamarans like the one shown split the hull into two pieces (the port and starboard hulls).  This design increases the effective width of the boat.  Increased width decreases the vertical mechanical advantage of the sail, thus reducing heeling.  Increased width also increases the angle of heeling that can be tolerated before the boat capsizes.</p>\r\n<p>Heeling can also be mitigated by having the crew sit or stand on, or even hike out beyond, the windward hull.  If you look carefully at the picture you can see the two person crew hiking to windward.</p>\r\n<p>At some wind velocity, even these measures are insufficient to keep the boat upright.  A skipper''s only choice (other than to capsize) is to let out the sail, which reduces its effective horizontal dimension much as heeling reduces its vertical dimension.  As with heeling, this action causes loss of speed.  If the boat heels sufficiently, it may not even be possible to let out the sail, as its outer corner may be obstructed by the surface of the water!</p>\r\n<p>Reefing is a mechanism for reducing the sail''s area.  Roller reefing involves wrapping the sail around the boom (much like a window blind) so as to reduce its height.  With sufficient reefing, the heeling can be controlled in almost any wind.</p>\r\n<p>But reefing involves reduced speed, so our skipper has elected yet another approach.  She has decided to beach the boat and pick up some rocks to use as ballast.  Ballast is just dead weight added to hull, which tends to counteract heeling.  It slows the boat a bit (as it rides lower in the water) but not nearly so much as reducing  sail area.</p>\r\n<p>Given <i>n</i> rocks, you are to compute how to divide them between the port and starboard hulls so that the weight of rocks in each hull is nearly equal.</p>\r\n<p>Input contains several test cases.  Each test case begins with 1 &lt;  <i>n</i> &le; 100; the number of rocks to be added as ballast.   Consider the rocks to be numbered 1 through <i>n</i>.  <i>n</i> lines follow; the <i>i</i>th line gives the weight in kg of the <i>i</i>th rock - a positive real number not greater than 100.  A line containing 0 follows the last test case.</p>\r\n<p>For each test case, output a single line giving the numbers of the rocks that should be loaded as ballast into the starboard hull.  Assume that the other rocks will be loaded into the port hull.  The total weight of ballast in the port hull should not differ from that in the starboard hull by more than 2%.  If there are many solutions, any one will do. There will always be a solution; indeed, there will always be a solution that balances within 1%, but you aren''t required to find it.</p>\r\n<p>', '<p>Please Input Input Here</p>', '<p>Please Input Output Here</p>', 'D:\\oj\\data\\1974', 'D:\\oj\\data\\1974', '5\r\n10.0\r\n50.0\r\n90.0\r\n38.0\r\n7.1\r\n0', '3 5', '暂时没有SPJ.', '', '', '2011-06-10 19:38:49', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 20, 'power721'),
(1975, 'Evil Straw Warts Live', '<p>A palindrome is a string of symbols that is equal to itself when reversed. Given an input string, not necessarily a palindrome, compute the number of swaps necessary to transform the string into a palindrome.  By <i>swap</i> we mean reversing the order of two adjacent symbols. For example, the string "mamad" may be transformed into the palindrome "madam" with 3 swaps:</p>\r\n<ul>\r\n    <li>swap "ad" to yield "mamda"</li>\r\n    <li>swap "md" to yield "madma"</li>\r\n    <li>swap "ma" to yield "madam"</li>\r\n</ul>\r\n<p>The first line of input gives <i>n</i>, the number of test cases. For each test case, one line of input follows, containing a string of up to 100 lowercase letters.  Output consists of one line per test case.  This line will contain the number of swaps, or "Impossible" if it is not possible to transform the input to a palindrome.</p>', '<p>Please Input Input Here</p>', '<p>Please Input Output Here</p>', 'D:\\oj\\data\\1975', 'D:\\oj\\data\\1975', '3\r\nmamad\r\nasflkj\r\naabb', '3\r\nImpossible\r\n2', '', '', '', '2011-06-10 19:38:49', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721'),
(1976, 'Mint', '<p>The Royal Canadian Mint has commissioned a new series of designer coffee tables, with legs that are constructed from stacks of coins.  Each table has four legs, each of which uses a different type of coin.  For example, one leg might be a stack of quarters, another nickels, another loonies,  and another twonies.  Each leg must be exactly the same length.</p>\r\n<p>Many coins are available for these tables, including foreign and  special commemorative coins.  Given an inventory of available coins and a desired table height, compute the lengths nearest to the desired height for which four legs of equal length may be constructed using a different coin for each leg.</p>\r\n<p>Input consists of several test cases.  Each case begins with two integers: 4 &le; <i>n</i> &le; 50 giving the number of types of coins available, and 1 &le; <i>t</i> &le; 10 giving the number of tables to be designed.   <i>n</i> lines follow; each gives the thickness of a coin in hundredths  of millimetres.  <i>t</i> lines follow; each gives the height of a table to be designed (also in hundredths of millimetres).  A line containing 0 0  follows the last test case.</p>\r\n<p>For each table, output a line with two integers: the greatest leg length not exceeding the desired length, and the smallest leg length not less than the desired length.</p>', '<p>Please Input Input Here</p>', '<p>Please Input Output Here</p>', 'D:\\oj\\data\\1976', 'D:\\oj\\data\\1976', '4 2\r\n50\r\n100\r\n200\r\n400\r\n1000\r\n2000\r\n0 0', '800 1200\r\n2000 2000', '', '', '', '2011-06-10 19:38:49', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 17, 'power721'),
(1977, 'Practice', '<p>How much does winning ACM depend on practice?</p>\r\n<p>We assume that <i>p</i>, the probability that a given team will win a given contest, is related  to <i>n</i>, the number of practice problems solved by the team prior to the contest.  This relationship is  modelled by the <i>logistic</i> formula</p>\r\n<pre>\r\n   <i>log</i>(p/(1-p)) = <i>a</i> + <i>b</i> n ,\r\n</pre>\r\n<p>for some</p>\r\n<i>a</i>\r\n<p>and</p>\r\n<i>b</i>\r\n<p>.  Your job is to find</p>\r\n<i>a</i>\r\n<p>and</p>\r\n<i>b</i>\r\n<p>such that the formula most accurately reflects a set of observed results.</p>\r\n<p>Each observation consists of <i>n</i>  and <i>w</i>.  <i>n</i> is the number of practice problems solved by some team prior to a contest, and <i>w</i> is 1 if the team wins the contest, 0 if it does not.</p>\r\n<p>Given <i>a</i>, <i>b</i>, and <i>n</i> the formula above may be used to compute <i>p</i>, the  estimated probability that <i>w</i> = 1. The <i>likelihood</i> of a particular observation is <i>p</i> if <i>w</i> = 1 and <i>1-p</i> if <i>w</i> = 0; The likelihood of a set of observations is the product of the likelihoods of the individual observations.</p>\r\n<p>You are to compute the <i>maximum likelihood estimate</i> for  <i>a</i> and <i>b</i>.  That is, the values of <i>a</i> and <i>b</i> for which the likelihood of a given set of observations is maximized.</p>\r\n<p>The input contains several test cases followed by a line contatining 0. Each test case begins with 1 &lt; <i>k</i> &le; 100, the number  of observations that follow.  Each observation consists of integers 0 &le; <i>n</i> &le; 100 and 0 &le; w &le; 1. The input will contain at least two distinct values of <i>n</i> and of <i>w</i>. For each test case, output a single line containing <i>a</i> and <i>b</i>, rounded to four digits to the right of the decimal.</p>', '', '', 'D:\\oj\\data\\1977', 'D:\\oj\\data\\1977', '20\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n1 0\r\n1 0\r\n1 0\r\n1 1\r\n2 0\r\n2 0\r\n2 1\r\n2 1\r\n3 0\r\n3 1\r\n3 1\r\n3 1\r\n4 1\r\n4 1\r\n4 1\r\n4 1\r\n0', '-3.1748 1.5874', '', '', '', '2011-06-10 19:38:49', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 17, 'power721'),
(1978, 'Help!<font color=black>(need SPJ)</font>', '<p>MegaFirm Inc. has created a set of patterns to aid its telephone help-desk operators in responding to customers.  A pattern is a phrase consisting of words and placeholders.  A word is simply a  string of letters.  A placeholder is a word enclosed in angle  brackets (that is &lt; ... &gt;). A phrase <i>matches</i> a pattern if each placeholder in the pattern can be systematically replaced by a word so as to make the pattern and phrase equal.  By "systematically replaced" we mean that all placeholders enclosing the same word are replaced by the same word.</p>\r\n<p>For example, the phrase</p>\r\n<pre>\r\n   to be or not to be\r\n</pre>\r\n<p>matches the pattern</p>\r\n<pre>\r\n   &lt;foo&gt; be &lt;bar&gt; not &lt;foo&gt; &lt;baf&gt;\r\n</pre>\r\n<p>because we can replace &lt;foo&gt; by to, &lt;bar&gt; by or, and &lt;baf&gt; by be.</p>\r\n<p>Given two patterns, you are to find a phrase that matches both.</p>\r\n<p>The first line of input contains <i>n</i>, the number of test cases.  Each test case consists of two lines of input; each a pattern.  Patterns consist of lowercase words, and placeholders containing lowercase words.  No pattern exceeds 100 characters.  Words contain at most 16 characters.  A single space separates adjacent words and placeholders.</p>\r\n<p>For each test case, output a phrase that matches both patterns.  If several phrases match, any will do.  If no phrase matches, output a line containing "-" (a single minus sign).</p>', '', '', 'D:\\oj\\data\\1978', 'D:\\oj\\data\\1978', '3\r\nhow now brown <animal>\r\n<foo> now <color> cow\r\nwho are you\r\n<a> <b> <a>\r\n<a> b\r\nc <a>', 'how now brown cow\r\n-\r\nc b', '暂时没有SPJ.', '', '', '2011-06-10 19:38:49', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 28, 'power721'),
(1979, 'Treequivalence', '<h2>Treequivalence</h2>\r\n<p>The following grammar describes a textual notation for a tree  with (not necessarily unique) vertex labels:</p>\r\n<pre>\r\n   <i>tree</i> ::= <i>label</i>\r\n   <i>tree</i> ::= <i>label</i> ( <i>subtrees</i> )\r\n   <i>subtrees</i> ::= <i>tree</i>\r\n   <i>subtrees</i> ::= <i>subtrees</i> , <i>tree</i>\r\n   <i>label</i> ::= A | B | C | ... | Z\r\n</pre>\r\n<p>That is, the representation of a tree consists of a label  (which is an uppercase letter) or a label followed by a bracketed ordered list of trees separated by commas.</p>\r\n<p>In order to draw such a tree on paper, we must write each label on the page, such that the labels for the subtrees of a vertex are positioned counter-clockwise about the  vertex.  The labels must be positioned such that  non-intersecting line segments connect each vertex to each of its subtrees.  That is to say, we draw the normal planar representation of the tree, preserving the order of subtrees.  Beyond these constraints, the position, shape, and size of the representation is arbitrary.</p>\r\n<p>For example, a possible graphical representation for A(B(C,D),E) is  <img align="center" src="images/problem/pic1979_0" alt="" /> .</p>\r\n<p>Given the textual representation for two trees, you are to determine whether or not they are equivalent.  That is, do they share a common paper representation?</p>\r\n<p>The first line of input contains <i>t</i>, the number of test cases.  Each test case consists of two lines, each specifying a tree in the notation described above.  Each line will contain at most 200 characters, and no white space. For each test case, output a line containing "same" or "different" as appropriate.</p>', '<p>Please Input Input Here</p>', '<p>Please Input Output Here</p>', 'D:\\oj\\data\\1979', 'D:\\oj\\data\\1979', '2\r\nA(B(C,D),E)\r\nE(A,B(C,D))\r\nA(B(C,D),E)\r\nE(A(B(C,D)))', 'different\r\nsame', '', '', '', '2011-06-10 19:38:49', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721'),
(1980, 'Antiarithmetic?', '<p>A permutation of <em>n</em> is a bijective function of the initial <em>n</em> natural numbers: 0, 1, ... <em>n</em>-1.  A permutation <em>p</em> is called antiarithmetic if there is no subsequence of it forming an arithmetic progression of length bigger than 2, i.e. there are no three indices 0&nbsp;&le;&nbsp;<em>i</em>&nbsp;&lt;&nbsp;<em>j</em>&nbsp;&lt;&nbsp;<em>k</em>&nbsp;&lt;&nbsp;<em>n</em> such that (<em>p<sub>i</sub></em>&nbsp;,&nbsp;<em>p<sub>j</sub></em>&nbsp;,&nbsp;<em>p<sub>k</sub></em>) forms an arithmetic progression.</p>\r\n<p>&nbsp;</p>\r\n<p>For example, the sequence (2, 0, 1, 4, 3) is an antiarithmetic permutation of 5.  The sequence (0, 5, 4, 3, 1, 2) is not an antiarithmetic permutation as its first, fifth and sixth term (0, 1, 2) form an arithmetic progression; and so do its second, forth and fifth term (5, 3, 1).</p>\r\n<p>Your task is to check whether a given permutation of <em>n</em> is antiarithmetic.</p>\r\n<p>There are several test cases, followed by a line containing 0. Each test case is a line of the input file containing a natural number 3&nbsp;&le;&nbsp;<em>n</em>&nbsp;&le;&nbsp;10000 followed by a colon and then followed by <em>n</em> distinct numbers separated by whitespace. All <em>n</em> numbers are natural numbers smaller than <em>n</em>.</p>\r\n<p>For each test case output one line with <tt>yes</tt> or <tt>no</tt> stating whether the permutation is antiarithmetic or not.</p>', '<p>Please Input Input Here</p>', '<p>Please Input Output Here</p>', 'D:\\oj\\data\\1980', 'D:\\oj\\data\\1980', '3: 0 2 1 \r\n5: 2 0 1 3 4\r\n6: 2 4 3 5 0 1\r\n0', 'yes\r\nno\r\nyes', '', '', '', '2011-06-10 19:38:49', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 20, 'power721'),
(1981, 'Test', '<p>A vocational preference test, unlike an aptitude test, seeks to identify careers that the candidate might find satisfying. Based on the answers to a slew of seemingly inane multiple-choice questions like the one below, the test determines  which occupations suit the candidate''s personality.</p><img align=right src=images/problem/pic1981_0 >\r\n<pre>\r\n   Which would you rather spend an afternoon doing?\r\n\r\n   (a) feeding chickens\r\n   (b) driving a race car\r\n   (c) watching The Simpsons on TV\r\n   (d) suntanning\r\n   (e) building a dog house\r\n</pre>\r\n<p>Each question asks the candidate to express a preference from among  five activities, selected from a common larger set.  That is, activities like</p>\r\n<i>feeding chickens</i>\r\n<p>or</p>\r\n<i>suntanning</i>\r\n<p>are likely to appear in several different questions.</p>\r\n<p>If a candidate answers A in a question containing A, B, C, D, E as alternatives, this choice indicates a preference for A over each of B, C, D, E.  Also, if one answer indicates a preference for X over Y and one or more other answers indicate a preference for Y over Z, the combined set of answers indicates a preference for X over Z.</p>\r\n<p>The candidate may provide contradictory answers; that is, the answers may indicate a preference for X over Y and also for Y over X.  These contradictions indicate inconsistency, a personalitiy attribute that may suggest a career in politics or used auto sales.</p>\r\n<p>Given a set of answers to a vocational preference test, you are to partition the activities into the minimal number of sets such that, for each pair within a given set, the answers indicate a contradictory preference.</p>\r\n<p>The input contains several test cases followed by a line containing 0.  Each case begins with <i>n</i>, the number of questions in the test.  <i>n</i> lines follow, each containing the names of five distinct activities, followed by the candidate''s answer - one of the five alternatives.  Each activity is named by a single upper case letter.</p>\r\n<p>For each test case, output the sets, one per line.  Output the elements of each set in alphabetical order, and output the sets in alphabetical order by their least element.  The sets should together contain exactly the set of activities that appear in the input.  Leave an empty line between test cases.</p>', '<p>Please Input Input Here</p>', '<p>Please Input Output Here</p>', 'D:\\oj\\data\\1981', 'D:\\oj\\data\\1981', '4\r\nA B C D E C\r\nF C H I J J\r\nK B H I F I\r\nK C E B J K\r\n0', 'A\r\nB\r\nC\r\nD\r\nE\r\nF\r\nH\r\nI J K', '', '', '', '2011-06-10 19:38:49', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 21, 'power721'),
(1982, 'Great Circle', '<img src=http://plg1.cs.uwaterloo.ca/~acm00/050205/circle.gif align=right>\r\n<p>Airplanes fly close to the Great Circle Route between two cities. The Great Circle Route is the shortest arc concentric with the earth that joins the two cities; that is, the shortest distance between the two cities following the surface of the earth.</p>\r\n<p>Given the latitude and longitude of two cities, find the most northerly latitude reached on the Great Circle Route between the cities.  Print "undefined" if there is no unique answer.</p>\r\n<p>The first line of input contains N, the number of test cases.  N lines follow, one for each case, containing the latitude and longitude of the two cities, in degrees, minutes, and direction.  [A minute is 1/60 degree; Points on the equator have latitude denoted 0,0N (not 0,0S); points on the poles have longitude denoted 0,0W; points with 180 degrees longitude are denoted 180,0W  (not 180,0E).]</p>\r\n<p>For each case your program should produce one line of output giving the most northerly latitude reached, in the given format. Round your answer to the nearest minute.</p>', '', '', 'D:\\oj\\data\\1982', 'D:\\oj\\data\\1982', '3\r\n50,13N 45,10W 75,0N 44,50E\r\n50,13N 90,10W 75,0N 89,50E\r\n10,0N 129,30E 10,0S 50,30W', '75,41N\r\n90,0N\r\nundefined', '', '', '', '2011-06-10 19:38:51', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 14, 'power721'),
(1983, 'Ultra-QuickSort', '<img align=right src=http://plg1.cs.uwaterloo.ca/~acm00/050205/bubble.jpg>\r\n<p>In this problem, you have to analyze a particular sorting algorithm. 		The algorithm processes a sequence of <i>n</i> distinct integers by swapping 		two adjacent sequence elements until the sequence is sorted in ascending order. 		For the input sequence</p>\r\n<blockquote> 			<tt>9 1 0 5 4</tt>&nbsp;, 		</blockquote>\r\n<p>Ultra-QuickSort produces the output</p>\r\n<blockquote> 			<tt>0 1 4 5 9</tt>&nbsp;. 		</blockquote>\r\n<p>Your task is to determine how many swap operations Ultra-QuickSort needs to 		perform in order to sort a given input sequence.</p>\r\n<p>The input contains several test cases. Every test case begins with a line 		that contains a single integer <i>n &lt; 500,000</i> -- the length of the input sequence. 		Each of the the following <i>n</i> lines contains a single integer 		<i>0 &le; a[i] &le; 999,999,999</i>, the <i>i</i>-th input sequence element. Input is terminated 		by a sequence of length <i>n = 0</i>. This sequence must not be processed.</p>\r\n<p>For every input sequence, your program prints a single line containing an 		integer number <i>op</i>, the minimum number of swap operations necessary 		to sort the given input sequence.</p>', '', '', 'D:\\oj\\data\\1983', 'D:\\oj\\data\\1983', '5\r\n9\r\n1\r\n0\r\n5\r\n4\r\n3\r\n1\r\n2\r\n3\r\n0', '6\r\n0', '', '', '', '2011-06-10 19:38:51', 1000, 131072, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 1, 'power721'),
(1984, 'Up the Ante', '<img src=http://plg1.cs.uwaterloo.ca/~acm00/050205/crown.jpg align=right>\r\n<p>Every summer, Stan and Ollie attend the Ex together.  Stan likes to play <i>Crown &amp; Anchor</i>, a gambling game in which one bets on one of:  <i>Crown, Anchor, Club, Diamond, Heart, Spade.</i> A wheel is spun and stops in a position marked by three of the above symbols (not necessarily distinct).  If Stan has bet on one of the three symbols indicated, he receives his bet back plus <i>n</i> times his bet, where <i>n</i> is the number of times that his symbol appears.</p>\r\n<p>Every year, Stan loses money and Ollie ridicules him for it.  This year, Stan has made a side bet with Ollie:  that he can make money playing Crown &amp; Anchor.  Ollie is not stupid and realizes that Stan might be lucky and win the first few rounds,  so he insists that, to win the bet, Stan must be ahead after at  least <i>k</i> rounds.  Also, so that the issue may be resolved  before the Ex closes, to win Stan must show a profit within at most  <i>m</i> rounds.</p>\r\n<p>Stan has a trick up his sleeve.  He has recently learned of the <i>Monte Carlo</i> strategy for betting.  The idea is that he first places the minimum bet.  If he wins, he collects his winnings and once again places the minimum bet.  If he loses, he doubles his bet so that if he wins the next round, he will win enough to recoup his previous losses and make a profit.  This doubling continues until he wins.  Whenever he wins, he pockets the profit and  starts over with the minimum bet.</p>\r\n<p>Stan thinks this is a great strategy but the establishment thought of it first and implemented a <i>house limit</i> - the maximum bet that Stan can place in any given round.  (Even without a house limit there''s a de facto <i>Stan limit</i> - the amount of money he has with him.  But we''ll assume he has enough money that this limit  isn''t an issue.)  Stan modifies his strategy so that if doubling his bet would exceed the house limit, he starts over at the minimum bet, hoping to recover his loss.</p>\r\n<p>Stan wins the bet if, following this strategy, his net winnings are positive at any time after playing <i>k</i> and before playing the  <i>m+1st</i> round.  What''s the probability that Stan will win the bet?</p>\r\n<p>The first line of input contains <i>n</i>, the number of test cases. Each test case is represented by a line containing integers  <i>k</i>, <i>m</i>, and <i>l</i>, the minimum number of rounds, the maximum number of rounds, and the house limit.  <i>0 &lt; k &lt; m &le; 30</i>; <i>2 &le; l &le; 1000</i>. The minimum bet is 1.</p>\r\n<p>For each test case, print the probability that Stan will win the bet, rounded to 4 decimal places.</p>\r\n<p>The design of the wheel can be seen in the illustration.  It has 28 possible stopping positions, only 14 different combinations of symbols, each of which appears twice.  The 14 combinations include: 6 that contain three identical symbols; 6 that contain two identical symbols, and 2 that contain three distinct symbols.  The patterns are designed so that each symbol appears once, twice, and three times in an equal number of wheel positions.</p>', '', '', 'D:\\oj\\data\\1984', 'D:\\oj\\data\\1984', '1\r\n3 4 10', '0.5835', '', '', '', '2011-06-10 19:38:52', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 13, 'power721'),
(1985, 'Beat the Spread!', '<p>Superbowl Sunday is nearly here.  In order to pass the time waiting for the half-time commercials and wardrobe malfunctions, the local hackers have organized a betting pool on the game.  Members place their bets on the sum of the two final scores, or on the absolute difference between the  two scores.</p>\r\n<p>Given the winning numbers for each type of bet, can you deduce the final scores?</p>\r\n<p>The first line of input contains <i>n</i>, the number of test cases. <i>n</i> lines follow, each representing a test case.  Each test case gives <i>s</i> and <i>d</i>, non-negative integers representing the sum and (absolute) difference between the two final scores.  For each test case, output a line giving  the two final scores, largest first.  If there are no such scores, output a line containing "impossible".  Recall that football scores are always non-negative integers.</p>\r\n<img src=http://plg1.cs.uwaterloo.ca/~acm00/050205/football.jpg align=right>', '', '', 'D:\\oj\\data\\1985', 'D:\\oj\\data\\1985', '2\r\n40 20\r\n20 40', '30 10\r\nimpossible', '', '', '', '2011-06-10 19:38:52', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 11, 'power721'),
(1986, 'Traditional BINGO', '<p>Traditional BINGO is played in person in a large hall. Players meet at the hall, pay a fee to get in, then the games begin. A night of BINGO consists of many BINGO games played continuously, one after another.</p>\r\n<p>A single BINGO game proceeds like this: Each player has a number of BINGO cards (players can usually play any number of cards). Each BINGO card has 5 rows and 5 columns thus providing 25 spaces.</p>\r\n<p>The columns are labeled from left to right with the letters: ''B'', ''I'', ''N'', ''G'', ''O''. With one exception (the center space is "free") the spaces in the card are assigned values as follows:</p>\r\n<ul>\r\n    <li>Each space in the ''B'' column contains a number from 1 - 15.</li>\r\n    <li>Each space in the ''I'' column contains a number from 16 - 30.</li>\r\n    <li>Each space in the ''N'' column contains a number from 31 - 45.</li>\r\n    <li>Each space in the ''G'' column contains a number from 46 - 60.</li>\r\n    <li>Each space in the ''O'' column contains a number from 61 - 75.</li>\r\n</ul>\r\n<p>Furthermore, a number can appear only once on a single card.</p>\r\n<p>Here''s a sample BINGO card:</p>\r\n<p>\r\n<table border="1" cellpadding="5">\r\n    <tbody>\r\n        <tr align="center">\r\n            <td><font size="5">B</font></td>\r\n            <td><font size="5">I</font></td>\r\n            <td><font size="5">N</font></td>\r\n            <td><font size="5">G</font></td>\r\n            <td><font size="5">O</font></td>\r\n        </tr>\r\n        <tr align="center">\r\n            <td>10</td>\r\n            <td>17</td>\r\n            <td>39</td>\r\n            <td>49</td>\r\n            <td>64</td>\r\n        </tr>\r\n        <tr align="center">\r\n            <td>12</td>\r\n            <td>21</td>\r\n            <td>36</td>\r\n            <td>55</td>\r\n            <td>62</td>\r\n        </tr>\r\n        <tr align="center">\r\n            <td>14</td>\r\n            <td>25</td>\r\n            <td><font size="1">FREE<br />\r\n            SPACE</font></td>\r\n            <td>52</td>\r\n            <td>70</td>\r\n        </tr>\r\n        <tr align="center">\r\n            <td>7</td>\r\n            <td>19</td>\r\n            <td>32</td>\r\n            <td>56</td>\r\n            <td>68</td>\r\n        </tr>\r\n        <tr align="center">\r\n            <td>5</td>\r\n            <td>24</td>\r\n            <td>34</td>\r\n            <td>54</td>\r\n            <td>71</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n</p>\r\n<p>The number of unique BINGO cards is very large and can be calculated with this equation:</p>\r\n<pre>\r\n// the B, I, G, and O columns * the N column\r\n(15 * 14 * 13 * 12 * 11) ^ 4 * (15 * 14 * 13 * 12)\r\n</pre>\r\n<p>While perhaps interesting to a statistician, the number of possible BINGO cards has nothing to do with player''s</p>\r\n<a href="http://plg1.cs.uwaterloo.ca/%7Eacm00/050205/E.html#CHANCES">chances of winning</a>\r\n<p>.</p>\r\n<p>You will note that there are 75 possible BINGO numbers:</p>\r\n<blockquote>\r\n<pre>\r\nB1, B2, B3, ... B15, I16, I17, I18, ... I30, N31, N32, ... O74, O75.\r\n</pre>\r\n</blockquote>\r\n<p>Each of these numbers is represented by a ball in a large rotating bin. Each ball is painted with its unique BINGO number. An announcer spins the bin, reaches in a selects a ball, and a announces it to the room. The players check all of their cards to see if that number appears on their card. If it is, they mark it.  A player may mark the centre FREE SPACE at any time.</p>\r\n<p>When a player has a BINGO (5 marks in a row, column, or diagonal), he or she calls out BINGO. The game pauses while the card is verified. If indeed a winner, the game stops and a new game begins. If the card wasn''t a winner, the game proceeds where it left off. Each BINGO game proceeds until someone wins (there''s always a winner).</p>\r\n<p>The first line of input contains <i>n</i>, the number of BINGO games that you will analyze.  <i>n</i> game descriptions follow.  Each game description specifies a card to be played followed by a sequence of BINGO numbers.  You are to determine, when the holder of the card will win the game, assuming the player has just this one card and there are no other players.</p>\r\n<p>Each card description consists of five lines, giving the numbers on the card row by row.  All but the 3rd row contain 5 numbers; the 3rd contains 4 because of the free space.  One or more lines follow that represent some ordering of all 75 bingo numbers.  All bingo numbers are simply integers between 1 and 75 - the one-letter prefix is redundant.  For each game, ouput the line "BINGO after <i>n</i> numbers announced" as appropriate. <a name="CHANCES">\r\n<h4>Chances of Winning</h4>\r\n</a></p>\r\n<p>Every BINGO game has a winning card, so a player''s chances of winning depend on the number of cards in the game and how many cards s/he is playing. For example, if a player has 12 cards in a game with 1200 cards,  the chances of winning for that player is 1 in 100.</p>', '', '', 'D:\\oj\\data\\1986', 'D:\\oj\\data\\1986', '1\r\n10 17 39 49 64\r\n12 21 36 55 62\r\n14 25 52 70\r\n7 19 32 56 68\r\n5 24 34 54 71\r\n1 2 3 4 5 6 7 8 9 10\r\n11 12 13 14 15 16 17 18 19 20\r\n21 22 23 24 25 26 27 28 29 30\r\n31 32 33 34 35 36 37 38 39 40\r\n41 42 43 44 45 46 47 48 49 50\r\n51 52 53 54 55 56 57 58 59 60\r\n61 62 63 64 65 66 67 68 69 70\r\n71 72 73 74 75', 'BINGO after 14 numbers announced', '', '', '', '2011-06-10 19:38:52', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 26, 'power721'),
(1987, 'Brownie Points I', '<img align="right" vspace="20" hspace="20" src="http://plg1.cs.uwaterloo.ca/%7Eacm00/050611/A.jpg" alt="" />\r\n<p>Stan and Ollie play the game of Odd Brownie Points.  Some brownie points are located in the plane, at integer coordinates. Stan plays first and places a vertical line in the plane.  The line must go through a brownie point and may cross many (with the same x-coordinate).  Then Ollie places a horizontal line that must cross a brownie point already crossed by the vertical line.</p>\r\n<p>Those lines divide the plane into four quadrants. The quadrant containing points with arbitrarily large positive coordinates is the top-right quadrant.</p>\r\n<p>The players score according to the number of brownie points in the quadrants. If a brownie point is crossed by a line, it doesn''t count. Stan gets a point for each (uncrossed) brownie point in the top-right and bottom-left quadrants. Ollie gets a point for each (uncrossed) brownie point in the top-left and bottom-right quadrants.</p>\r\n<p>Your task is to compute the scores of Stan and Ollie given the point through which they draw their lines.</p>\r\n<p>Input contains a number of test cases.  The data of each test case appear on a sequence of input lines.  The first line of each test case contains a positive odd integer 1&nbsp;&lt;&nbsp;<em>n</em>&nbsp;&lt;&nbsp;200000 which is the number of brownie points.  Each of the following <em>n</em> lines contains two integers, the horizontal (<em>x</em>) and vertical (<em>y</em>) coordinates of a brownie point.  No two brownie points occupy the same place.  The input ends with a line containing 0 (instead of the <em>n</em> of a test).</p>\r\n<p>For each test case of input, print a line with two numbers separated by a single space.  The first number is Stan''s score, the second is  the score of Ollie when their lines cross the point whose coordinates are given at the center of the input sequence of points for this case.</p>\r\n<h3>&nbsp;</h3>', '', '', 'D:\\oj\\data\\1987', 'D:\\oj\\data\\1987', '11\r\n3 2\r\n3 3\r\n3 4\r\n3 6\r\n2 -2\r\n1 -3\r\n0 0\r\n-3 -3\r\n-3 -2\r\n-3 -4\r\n3 -7\r\n0', '6 3', '', '', '', '2011-06-10 19:38:53', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 10, 'power721'),
(1988, 'Magic Bitstrings', '<p>A bitstring, whose length is one less than a prime, might be <b>magic</b>.  <tt>1001</tt> is one such string.  In order to see the <b>magic</b> in the string let us append a non-bit <tt>x</tt> to it, regard the new <em>thingy</em> as a cyclic string, and make this square matrix of bits</p>\r\n<p>&nbsp;</p>\r\n<center>\r\n<table border="1" cellspacing="0" cellpadding="3">\r\n    <tbody>\r\n        <tr height="30">\r\n            <td align="center" width="100">each bit</td>\r\n            <td>&nbsp;&nbsp;<tt>1001</tt>&nbsp;&nbsp;</td>\r\n        </tr>\r\n        <tr height="30">\r\n            <td align="center" width="100">every 2<sup>nd</sup> bit</td>\r\n            <td>&nbsp;&nbsp;<tt>0110</tt>&nbsp;&nbsp;</td>\r\n        </tr>\r\n        <tr height="30">\r\n            <td align="center" width="100">every 3<sup>rd</sup> bit</td>\r\n            <td>&nbsp;&nbsp;<tt>0110</tt>&nbsp;&nbsp;</td>\r\n        </tr>\r\n        <tr height="30">\r\n            <td align="center" width="100">every 4<sup>th</sup> bit</td>\r\n            <td>&nbsp;&nbsp;<tt>1001</tt>&nbsp;&nbsp;</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n</center>\r\n<p>This matrix has the same number of rows as the length of the original bitstring.  The <em>m</em>-th row of the matrix has every <em>m</em>-th bit of the original string starting with the <em>m</em>-th bit.  Because the enlarged <em>thingy</em> has prime length, the appended <tt>x</tt> never gets used.</p>\r\n<p>If each row of the matrix is either the original bitstring or its complement, the original bitstring is <b>magic</b>.</p>\r\n<p>Each line of input (except last) contains a prime number <em>p</em>&nbsp;&le;&nbsp;100000.  The last line contains 0 and this line should not be processed.  For each prime number from the input produce one line of output containing the lexicographically smallest, non-constant <b>magic</b> bitstring of length <em>p-1</em>, if such a string exists, otherwise output <tt>Impossible</tt>.</p>', '', '', 'D:\\oj\\data\\1988', 'D:\\oj\\data\\1988', '5\r\n3\r\n17\r\n47\r\n2\r\n79\r\n0', '0110\r\n01\r\n0010111001110100\r\n0000100001101010001101100100111010100111101111\r\nImpossible\r\n001001100001011010000001001111001110101010100011000011011111101001011110011011', '', '', '', '2011-06-10 19:38:53', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 23, 'power721'),
(1989, 'Cutting a polygon', '<p>Given is a simple but not necessarily convex polygon.  Given is also a line in the plane.  If the polygon is cut along the line then we may get several smaller polygons.  Your task is to find the length of the cut, that is the total length of the segments in the intersection of the line and the polygon.</p>\r\n<p>Input consists of a number of cases. The data of each case appears on a number of input lines, the first of which contains two non negative integers <em>n</em> and <em>m</em> giving the number of the vertices of the polygon and the number of cutting lines to consider, 3&nbsp;&le;&nbsp;<em>n</em>&nbsp;&le;&nbsp;1000.  The following <em>n</em> lines contain coordinates of the vertices of the polygon; each line contains the <em>x</em> and <em>y</em> coordinates of a vertex.  The vertices are given either in clockwise or counterclockwise order.  Each of the following <em>m</em> lines of input contains four numbers; these are <em>x</em> and <em>y</em> coordinates of the two points defining the cutting line.  If a vertex of the polygon is closer than 10e<sup>-8</sup> to the cutting line then we consider that the vertex lies on the cutting line.</p>\r\n<p>Input is terminated by a line with <em>n</em> and <em>m</em> equal to 0.</p>\r\n<p><img align="center" vspace="20" hspace="100" src="http://plg1.cs.uwaterloo.ca/%7Eacm00/050611/C.jpg" alt="" /></p>\r\n<p>For each cutting line, print the total length of the segments in the intersection of the line and the polygon defined for this test case, with 3 digits after the decimal point. Note: the perimiter of a polygon belongs the polygon.</p>\r\n<p>The picture above illustrates the first cutting line for the polygon from the sample.</p>', '', '', 'D:\\oj\\data\\1989', 'D:\\oj\\data\\1989', '9 5\r\n0 0\r\n0 2\r\n1 1\r\n2 2\r\n3 1\r\n4 2\r\n5 1\r\n6 2\r\n6 0\r\n-1 2 7.5 1\r\n0 1 6 1\r\n0 1.5 6 1.5\r\n0 2 6 1\r\n0 0 0 2\r\n0 0', '2.798\r\n6.000\r\n3.000\r\n2.954\r\n2.000', '', '', '', '2011-06-10 19:38:53', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 18, 'power721'),
(1990, 'Bungee Jumping', '<p><img align="right" vspace="20" hspace="20" alt="" src="http://plg1.cs.uwaterloo.ca/%7Eacm00/050611/D.jpg" /></p>\r\n<p>Once again, James Bond is fleeing from some evil people who want to see 		him dead. Fortunately, he has left a 		bungee rope on a nearby highway bridge which he can use to escape from his 		enemies. His plan is to attach one end of the rope to the bridge, the other end of  		the rope to his body and jump off the 		bridge. At the moment he reaches the ground, he will cut the rope, jump 		into his car and be gone.</p>\r\n<p>&nbsp;</p>\r\n<p>Unfortunately, he had not had enough time to calculate whether the bungee 		rope has the right length, so it is not clear at all what is going to 		happen when he jumps off the bridge. There are three possible scenarios:</p>\r\n<ul>\r\n    <li style="margin: 5px;">The rope is too short 				(or too strong), and James Bond will 				never reach the ground.</li>\r\n    <li style="margin: 5px;">The rope is too long 				(or too weak), and James Bond will be 				going too fast when he touches the 				ground. Even for a special agent, this 				can be very dangerous.  You may assume 				that if he collides at a speed of more 				than 10 m/s, he will not survive the 				impact.</li>\r\n    <li style="margin: 5px;">The rope''s length and 				strength are good. James Bond touches 				the ground at a comfortable speed and 				can escape.</li>\r\n</ul>\r\n<p>As his employer, you would like to know whether James Bond survives 		or whether you should place a job ad for the soon-to-be vacant position 		in the local newspaper. Your physicists claim that:</p>\r\n<ul>\r\n    <li style="margin: 5px;">The force with which 				James is pulled towards the earth is 				<blockquote> 					<i>9.81 * w,</i> 				</blockquote>  				where <i>w</i> is his weight in 				kilograms and 9.81 is the Earth 				acceleration in meters over squared 				seconds.</li>\r\n    <li style="margin: 5px;">Mr. Bond falls freely 				until the rope tautens.  Then the 				force with which the bungee rope pulls 				him back into the sky depends on the 				current length of the rope and is 				<blockquote> 					<i>k * &Delta;l</i>, 				</blockquote>  				where <i>&Delta;l</i> is the 				difference between the rope''s current 				length and its nominal, unexpanded 				length, and <i>k</i> is a 				rope-specific constant.</li>\r\n</ul>\r\n<p>Given the rope''s strength</p>\r\n<p><i>k</i></p>\r\n<p>, the nominal length 		of the rope</p>\r\n<p><i>l</i></p>\r\n<p>in meters, the height of the 		bridge</p>\r\n<p><i>s</i></p>\r\n<p>in meters, and James Bond''s body 		weight</p>\r\n<p><i>w</i></p>\r\n<p>, you have to determine what is going 		to happen to our hero. For all your calculations, you 		may assume that James Bond is a point at the end of 		the rope and the rope has no mass. You may further 		assume that</p>\r\n<p><i>k</i></p>\r\n<p>,</p>\r\n<p><i>l</i></p>\r\n<p>,</p>\r\n<p><i>s</i></p>\r\n<p>, and</p>\r\n<p><i>w</i></p>\r\n<p>are non-negative and that</p>\r\n<p><i>s &lt; 200</i></p>\r\n<p>.</p>\r\n<p>The input contains several test cases, one test case per line. Each test 		case consists of four floating-point numbers (<i>k</i>, <i>l</i>, <i>s</i>, 		and <i>w</i>) that describe the situation. Depending on what is going to 		happen, your program must print "<tt>Stuck in the air.</tt>", 		"<tt>Killed by the impact.</tt>", or 		"<tt>James Bond survives.</tt>". 		Input is terminated by a line containing four 0s, this line 		should not be processed.</p>', '', '', 'D:\\oj\\data\\1990', 'D:\\oj\\data\\1990', '350 20 30 75\r\n375 20 30 75\r\n400 20 30 75\r\n425 20 30 75\r\n450 20 30 75\r\n400 20 30 50\r\n400 20 30 80\r\n400 20 30 85\r\n0 0 0 0', 'Killed by the impact.\r\nJames Bond survives.\r\nJames Bond survives.\r\nJames Bond survives.\r\nStuck in the air.\r\nStuck in the air.\r\nJames Bond survives.\r\nKilled by the impact.', '', '', '', '2011-06-10 19:38:53', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 15, 'power721'),
(1991, 'Brownie Points II', '<p><img align="right" vspace="20" hspace="20" alt="" src="http://plg1.cs.uwaterloo.ca/%7Eacm00/050611/E.jpg" /></p>\r\n<p>Stan and Ollie play the game of Odd Brownie Points.  Some brownie points are located in the plane, at integer coordinates. Stan plays first and places a vertical line in the plane.  The line must go through a brownie point and may cross many (with the same x-coordinate).  Then Ollie places a horizontal line that must cross a brownie point already crossed by the vertical line.</p>\r\n<p>Those lines divide the plane into four quadrants. The quadrant containing points with arbitrarily large positive coordinates is the top-right quadrant.</p>\r\n<p>The players score according to the number of brownie points in the quadrants. If a brownie point is crossed by a line, it doesn''t count. Stan gets a point for each (uncrossed) brownie point in the top-right and bottom-left quadrants. Ollie gets a point for each (uncrossed) brownie point in the top-left and bottom-right quadrants.</p>\r\n<p>Stan and Ollie each try to maximize his own score. When Stan plays, he considers the responses, and chooses a line which maximizes his smallest-possible score.</p>\r\n<p>Input contains a number of test cases.  The data of each test case appear on a sequence of input lines.  The first line of each test case contains a positive odd integer 1&nbsp;&lt;&nbsp;<em>n</em>&nbsp;&lt;&nbsp;200000 which is the number of brownie points.  Each of the following <em>n</em> lines contains two integers, the horizontal (<em>x</em>) and vertical (<em>y</em>) coordinates of a brownie point.  No two brownie points occupy the same place.  The input ends with a line containing 0 (instead of the <em>n</em> of a test).</p>\r\n<p>For each input test, print a line of output in the format shown below. The first number is the largest score which Stan can assure for himself.  The remaining numbers are the possible (high) scores of Ollie, in increasing order.</p>', '', '', 'D:\\oj\\data\\1991', 'D:\\oj\\data\\1991', '11\r\n3 2\r\n3 3\r\n3 4\r\n3 6\r\n2 -2\r\n1 -3\r\n0 0\r\n-3 -3\r\n-3 -2\r\n-3 -4\r\n3 -7\r\n0', 'Stan: 7; Ollie: 2 3;', '', '', '', '2011-06-10 19:38:53', 10000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 10000, 17, 'power721'),
(1992, 'So you want to be a 2n-aire', '<h2>So you want to be a 2<sup>n</sup>-aire<img align="right" src="http://plg1.cs.uwaterloo.ca/~acm00/050917/abregis.gif" alt="" /></h2>\r\n<p>The player starts with a prize of $1, and is asked a sequence of <em>n</em> questions. For each question, he may</p>\r\n<ul>\r\n    <li>quit and keep his prize.</li>\r\n    <li>answer the question.     If wrong, he quits with nothing.     If correct, the prize is doubled, and he continues with the next     question.</li>\r\n</ul>\r\n<p>After the last question, he quits with his prize. The player wants to maximize his expected prize.</p>\r\n<p>Once each question is asked, the player is able to assess the probability <i>p</i> that he will be able to answer it. For each question, we assume that <i>p</i> is a random variable uniformly distributed over the range <em>t .. 1</em>.</p>\r\n<p>Input is a number of lines, each with two numbers: an integer <em>1 &le; n &le; 30</em>, and a real <em>0 &le; t &le; 1</em>. Input is terminated by a line containing <tt>0 0</tt>.  This line should not be processed.</p>\r\n<p>For each input <em>n</em> and <em>t</em>, print the player''s expected prize, if he plays the best strategy.  Output should be rounded to  three fractional digits.</p>', '<p>Please Input Input Here</p>', '<p>Please Input Output Here</p>', 'D:\\oj\\data\\1992', 'D:\\oj\\data\\1992', '1 0.5\r\n1 0.3\r\n2 0.6\r\n24 0.25\r\n0 0', '1.500\r\n1.357\r\n2.560\r\n230.138', '', '', '', '2011-06-10 19:38:58', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(1993, 'Ferry Loading III', '<p>Before bridges were common, ferries were used to transport cars across rivers. River ferries, unlike their larger cousins, run on a guide line and are powered by the river''s current. Cars drive onto the ferry from one end, the ferry crosses the river, and the cars exit from the other end of the ferry. <img align="right" src="http://plg1.cs.uwaterloo.ca/~acm00/050917/800px-Small_Mannum_Ferry.jpg" style="width: 214px; height: 142px;" alt="" /></p>\r\n<p>There is a ferry across the river that can take <em>n</em> cars across the river in <em>t</em> minutes and return in <em>t</em> minutes.   A car may arrive at either river bank to be transported by the ferry to the opposite bank.  The ferry travels continuously back and forth between the banks so long it is carrying a car or there is at  least one car waiting at either bank.  Whenever the ferry arrives at one of the banks, it unloads its cargo and loads up to <em>n</em> cars that are waiting to cross. If there are more than <em>n</em>, those that have been waiting the longest are loaded.  If there are no cars waiting on either bank, the ferry waits until one arrives, loads it (if it arrives on the same bank of the ferry), and crosses the river. At what time does each car reach the other side of the river?</p>\r\n<p>The first line of input contains <i>c</i>, the number of test cases. Each test case begins with <i>n, t, m</i>. <i>m</i> lines follow, each giving the arrival time for a car (in minutes since the beginning of the day), and the  bank at which the car arrives ("left" or "right"). For each test case, output one line per car, in the same order as the input, giving the time at which that car is unloaded at the opposite bank. Output an empty line between cases.</p>\r\n<p>You may assume that 0 &lt; n, t, m &le; 10000.  The arrival times for each test case are strictly increasing.  The ferry is initially on the left bank. Loading and unloading time may be considered to be 0.</p>', '<p>Please Input Input Here</p>', '<p>Please Input Output Here</p>', 'D:\\oj\\data\\1993', 'D:\\oj\\data\\1993', '2\r\n2 10 10\r\n0 left\r\n10 left\r\n20 left\r\n30 left\r\n40 left\r\n50 left\r\n60 left\r\n70 left\r\n80 left\r\n90 left\r\n2 10 3\r\n10 right\r\n25 left\r\n40 left', '10\r\n30\r\n30\r\n50\r\n50\r\n70\r\n70\r\n90\r\n90\r\n110\r\n\r\n30\r\n40\r\n60', '', '', '', '2011-06-10 19:38:58', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 20, 'power721'),
(1994, 'Pick-up sticks', '<p>Stan has <em>n</em> sticks of various length.  He throws them one at a time on the floor in a random way.  After finishing throwing, Stan tries to find the top sticks, that is these sticks such that there is no stick on top of them.  Stan has noticed that the last thrown stick is always on top but he wants to know all the sticks that are on top. Stan sticks are very, very thin such that their thickness can be neglected. <img align="right" src="http://plg1.cs.uwaterloo.ca/~acm00/050917/pickup.jpg" style="width: 127px; height: 210px;" alt="" /></p>\r\n<p>Input consists of a number of cases.  The data for each case start with <em>1 &le; n &le; 100000</em>, the number of sticks for this case.  The following <em>n</em> lines contain four numbers each, these numbers are the planar coordinates of the endpoints of one stick. The sticks are listed in the order in which Stan has thrown them.   You may assume that there are no more than 1000 top sticks.  The input is ended by the case with <em>n=0</em>. This case should not be processed.</p>\r\n<p>For each input case, print one line of output listing the top sticks in the format given in the sample.  The top sticks should be listed in order in which they were thrown.</p>\r\n<p>The picture to the right below illustrates the first case from input.</p>\r\n<p><img align="middle" src="http://plg1.cs.uwaterloo.ca/~acm00/050917/C.jpg" alt="" /></p>', '<p>Please Input Input Here</p>', '<p>Please Input Output Here</p>', 'D:\\oj\\data\\1994', 'D:\\oj\\data\\1994', '5\r\n1 1 4 2\r\n2 3 3 1\r\n1 -2.0 8 4\r\n1 4 8 2\r\n3 3 6 -2.0\r\n3\r\n0 0 1 1\r\n1 0 2 1\r\n2 0 3 1\r\n0', 'Top sticks: 2, 4, 5.\r\nTop sticks: 1, 2, 3.', '', '', '', '2011-06-10 19:38:58', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 18, 'power721'),
(1995, 'Rock-Paper-Scissors Tournament', '<p>Rock-Paper-Scissors is game for two players, A and B, who each choose, independently of the other, one of <i>rock, paper,</i> or <i>scissors</i>.  A player chosing <i>paper</i> wins over a player chosing <i>rock</i>; a player chosing <i>scissors</i> wins over a player chosing <i>paper</i>; a player chosing <i>rock</i> wins over a player chosing <i>scissors</i>.  A player chosing the same thing as the other player neither wins nor loses.</p>\r\n<p>A tournament has been organized in which each of <i>n</i> players plays <i>k</i> rock-scissors-paper games with each of the other players - <i>k*n*(n-1)/2</i> games in total. Your job is to compute the <i>win average</i> for each player, defined as <i>w / (w + l)</i> where <i>w</i> is the number of games won, and <i>l</i> is the number of games lost, by the player.</p>\r\n<p>Input consists of several test cases. The first line of input for each case contains <i>1 &le; n &le; 100</i> <i>1 &le; k &le; 100</i> as defined above.  For each game, a line follows containing p<sub>1</sub>, m<sub>1</sub>, p<sub>2</sub>, m<sub>2</sub>. 1 &le; p<sub>1</sub> &le; <i>n</i> and 1 &le; p<sub>2</sub> &le; <i>n</i> are distinct integers identifying two players; m<sub>1</sub> and m<sub>2</sub> are their respective moves ("rock", "scissors", or "paper").  A line containing 0 follows the last test case.</p>\r\n<p>Output one line each for player 1, player 2, and so on, through player <i>n</i>, giving the player''s win average rounded to three decimal places.  If the win average is undefined, output "-".  Output an empty line between cases. <img align="right" src="http://plg1.cs.uwaterloo.ca/~acm00/050917/ChampsBanner.jpg" style="width: 309px; height: 109px;" alt="" /></p>', '<p>Please Input Input Here</p>', '<p>Please Input Output Here</p>', 'D:\\oj\\data\\1995', 'D:\\oj\\data\\1995', '2 4\r\n1 rock 2 paper\r\n1 scissors 2 paper\r\n1 rock 2 rock\r\n2 rock 1 scissors\r\n2 1\r\n1 rock 2 paper\r\n0', '0.333\r\n0.667\r\n\r\n0.000\r\n1.000', '', '', '', '2011-06-10 19:38:59', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 12, 'power721'),
(1996, 'Structural Equivalence', '<p>In programming language design circles, there has been much debate about the merits of "structural equivalence" vs. "name equivalence" for type matching.  Pascal purports to have "name equivalence", but it doesn''t; C purports to have structural equivalence, but it doesn''t.  Algol 68, the <i>Latin</i> of programming languages, has pure structural equivalence. <img align="right" alt="" style="width: 139px; height: 102px;" src="http://plg1.cs.uwaterloo.ca/~acm00/050917/dolls.jpg" /></p>\r\n<p>A simplified syntax for an Algol 68 type definition is as follows:</p>\r\n<pre>\r\n   <i>type_def</i> -&gt; type <i>T</i> = <i>type_expr</i>\r\n   <i>type_expr</i> -&gt; <i>T</i> | int | real | char | struct ( <i>field_defs</i> )\r\n   <i>field_defs</i> -&gt; T | <i>field_defs</i> T\r\n</pre>\r\n<p>In this syntax, <i>T</i> is a programmer-defined type name (in this problem, for simplicity, a single upper case letter).  Plain text symbols appear literally in the input, and zero or more spaces may appear where there are spaces in the syntax.</p>\r\n<p>Algol 68 type equivalence say that two types are equivalent if they are the same primitive type or they are both structures containing equivalent types in the same order.</p>\r\n<p>Input consists of several test cases. Each test case is a sequence of Algol 68 definitions, as described above, one per line.  A line containing "-" separates test cases. A line containing "--" follows the last test case.  The output for each case will consist of several lines; each line should contain a list of type names, all of which represent equivalent types.  Each type name should appear on exactly one line of output, and the number of output lines should be minimized.  The names in each list should be in alphabetical order; the lines of output should also be in alphabetical order.  Output an empty line between test cases.</p>', '<p>Please Input Input Here</p>', '<p>Please Input Output Here</p>', 'D:\\oj\\data\\1996', 'D:\\oj\\data\\1996', 'type A = int\r\ntype B = A\r\ntype C = int\r\ntype X = struct(A B)\r\ntype Y = struct(B A)\r\ntype Z = struct(A Z)\r\ntype S = struct(A S)\r\ntype W = struct(B R)\r\ntype R = struct(C W)\r\n--', 'A B C\r\nR S W Z\r\nX Y', '', '', '', '2011-06-10 19:39:03', 30000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 25, 'power721'),
(1997, 'War on Weather', '<p>After an unprovoked hurricane attack on the south shore, Glorious Warrior has declared war on weather.  The first salvo in this campaign will be a coordinated pre-emptive attack on as many tropical depressions as possible.  GW reckons that the attack will neutralize the tropical depressions before they become storms, and dissuade  others from forming.</p>\r\n<p>GW has at his disposal <i>k</i> space-to-earth killer satellites at various locations in space.  <i>m</i>  tropical depressions are known to exist at various locations on the earth''s surface.  Each satellite can attack any number of targets on the earth provided there is <i>line of sight</i> between the satellite and each target.  How many different targets can be hit?</p>\r\n<p>The input consists of several test cases.  Each case begins with a line containing integers <i>0 &lt; k, m &le; 100</i> as defined above.  <i>k</i> lines follow, each giving <i>x,y,z</i> - the location in space of a satellite at the scheduled time of attack.  <i>m</i> lines then  follow,  each giving <i>x,y,z</i> - the location of a target tropical depression. Assume the earth is a sphere centred at (0,0,0) with circumference 40,000 km.  All targets will be on the surface of the earth (within 10<sup>-9</sup> km) and all satellites will be at least 50 km above the surface. A line containing 0 0 follows the last test case.</p>\r\n<p>For each test case, output a line giving the total number of targets that can be hit.  If a particular target falls within 10<sup>-8</sup> km of the boundary between being within line-of-sight and not, it may be counted either way.  (That is, you need not consider  rounding error so long as it does not exceed 10<sup>-8</sup> km.)</p>\r\n<p>&nbsp;</p>\r\n<img src=http://plg1.cs.uwaterloo.ca/~acm00/050924/laser.jpg>', '', '', 'D:\\oj\\data\\1997', 'D:\\oj\\data\\1997', '3 2\r\n-10.82404031 -1594.10929753 -6239.77925152\r\n692.58497298 -5291.64700245 4116.92402298\r\n3006.49210582 2844.61925179 5274.03201053\r\n2151.03635167 2255.29684503 5551.13972186\r\n-1000.08700886 -4770.25497971 4095.48127333\r\n3 4\r\n0 0 6466.197723676\r\n0 6466.197723676 0\r\n6466.197723676 0 0\r\n6366.197723676 0 0\r\n6365.197723676 112.833485488 0\r\n0 0 6366.197723676\r\n0 -6366.197723676 0\r\n0 0', '2\r\n3', '', '', '', '2011-06-10 19:39:03', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 26, 'power721'),
(1998, 'Factstone Benchmark', '<p>Amtel has announced that it will release a 128-bit computer chip by  2010, a 256-bit computer by 2020, and so on, continuing its strategy of doubling the word-size every ten years.  (Amtel released a 64-bit computer in 2000, a 32-bit computer in 1990, a 16-bit computer in 1980, an 8-bit computer in 1970, and a 4-bit computer, its first, in 1960.)</p>\r\n<p>Amtel will use a new benchmark - the <i>Factstone</i> - to advertise the vastly improved capacity of its new chips.  The <i>Factstone</i>  rating is defined to be the largest integer <i>n</i> such that <i>n!</i> can be represented as an unsigned integer in a computer word.</p>\r\n<p>Given a year <i>1960 &le; y &le; 2160</i>, what will be the  <i>Factstone</i> rating of Amtel''s most recently released chip?</p>\r\n<p>There are several test cases.  For each test case, there is one line of input containing <i>y</i>.  A line containing 0 follows the last test case.  For each test case, output a line giving the Factstone rating.</p>\r\n<p>&nbsp;</p>\r\n<img src=http://plg1.cs.uwaterloo.ca/~acm00/050924/benchmark.jpg>', '', '', 'D:\\oj\\data\\1998', 'D:\\oj\\data\\1998', '1960\r\n1981\r\n0', '3\r\n8', '', '', '', '2011-06-10 19:39:03', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 23, 'power721'),
(1999, 'A Walk Through the Forest', '<img src=http://plg1.cs.uwaterloo.ca/~acm00/050924/red-wood-forest.jpg>\r\n<p>Jimmy experiences a lot of stress at work these days, especially since his accident made working difficult. To relax after a hard day, he likes to walk home. To make things even nicer, his office is on one side of a forest, and his house is on the other. A nice walk through the forest, seeing the birds and chipmunks is quite enjoyable.</p>\r\n<p>The forest is beautiful, and Jimmy wants to take a different route everyday. He also wants to get home before dark, so he always takes a path to make progress towards his house.  He considers taking a path from <i>A</i> to <i>B</i> to be progress if there exists a route from <i>B</i> to his home that is shorter than any possible route from <i>A</i>. Calculate how many different routes through the forest  Jimmy might take.</p>', '<p>Input contains several test cases followed by a line containing 0. Jimmy has numbered each intersection or joining of paths starting with  1. His office is numbered 1, and his house is numbered 2. The first line of each test case gives the number of intersections <em>N</em>, 1 &lt; <em>N</em> &le; 1000, and the number of paths <em>M</em>. The following <em>M</em> lines each contain a pair of intersections <em>a</em>&nbsp;<em>b</em> and an integer distance <em>1 &le; d &le; 1000000</em> indicating a path of length <em>d</em> between intersection <em>a</em> and a different intersection <em>b</em>. Jimmy may walk a path any direction he chooses. There is at most one path between any pair of intersections.</p>', '<p>For each test case, output a single integer indicating the number of  different routes through the forest.  You may assume that this number does not exceed 2147483647.</p>', 'D:\\oj\\data\\1999', 'D:\\oj\\data\\1999', '5 6\r\n1 3 2\r\n1 4 2\r\n3 4 3\r\n1 5 12\r\n4 2 34\r\n5 2 24\r\n7 8\r\n1 3 1\r\n1 4 1\r\n3 7 1\r\n7 4 1\r\n7 5 1\r\n6 7 1\r\n5 2 1\r\n6 2 1\r\n0', '2\r\n4', '', '', '', '2011-06-10 19:39:03', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 26, 'power721'),
(2000, 'Tri Tiling', '<img src=http://plg1.cs.uwaterloo.ca/~acm00/050924/domino.jpg>\r\n<p>In how many ways can you tile a 3x<em>n</em> rectangle with 2x1  dominoes?</p>\r\n<p>Here is a sample tiling of a 3x12 rectangle.</p>\r\n<p>&nbsp;</p>\r\n<center> <img src="http://plg1.cs.uwaterloo.ca/%7Eacm00/050924/D.gif" alt="" /> </center>\r\n<p>Input consists of several test cases followed by a line containing <i>-1</i>. Each test case is a line containing an integer <em>0 &le; n &le; 30</em>.   For each test case, output one integer number giving the number of possible tilings.</p>', '', '', 'D:\\oj\\data\\2000', 'D:\\oj\\data\\2000', '2\r\n8\r\n12\r\n-1', '3\r\n153\r\n2131', '', '', '', '2011-06-30 17:53:15', 1000, 131072, 'N', NULL, 2, 2, 100, 0, 0, 2, 2, 1000, 54, 'power721'),
(2001, 'Prerequisites?', '<p>Freddie the frosh has chosen to take <i>k</i> courses. To meet the degree requirements, he must take courses from each of several categories.  Can you assure Freddie that he will graduate, based on his course selection?</p>\r\n<p>Input consists of several test cases.  For each case, the first line of input contains <i>1 &le; k &le; 100</i>, the number of courses Freddie has chosen, and <i>0 &le; m &le; 100</i>, the number of categories.  One or more lines follow containing <i>k</i>  4-digit integers follow; each is the number of a course selected by Freddie.  Each category is represented by a line containing <i>1 &le; c &le; 100</i>, the number of courses in the category, <i>0 &le; r &le; c</i>, the minimum number of courses from the category that must be taken, and the <i>c</i> course numbers in  the category. Each course number is a 4-digit integer.  The same course may fulfil several category requirements.  Freddie''s selections, and the course numbers in any particular category, are distinct.  A line containing 0 follows the last test case.</p>\r\n<p>For each test case, output a line containing "yes" if Freddie''s course selection meets the degree requirements; otherwise output "no."</p>\r\n<p>&nbsp;</p>\r\n<img src=http://plg1.cs.uwaterloo.ca/~acm00/050924/pre.gif>', '', '', 'D:\\oj\\data\\2001', 'D:\\oj\\data\\2001', '3 2\r\n0123 9876 2222\r\n2 1 8888 2222\r\n3 2 9876 2222 7654 \r\n3 2\r\n0123 9876 2222\r\n2 2 8888 2222\r\n3 2 7654 9876 2222\r\n0', 'yes\r\nno', '', '', '', '2011-06-10 19:39:03', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 30, 'power721'),
(2002, 'Educational journey', '<p>The University of Calgary team qualified for the 28th ACM International Collegiate Programming Contest World Finals in Prague, Czech Republic.  Just by using the initials of team members they got a very cunning team name: <b>ACM</b> (<b>A</b>lecs, <b>C</b>elly and <b>M</b>onny).  In order to prepare for the contest, they have decided to travel to Edmonton to learn the tricks of trade from <b>D</b>ilbert, Alberta-wide famous top-coder.</p>\r\n<p>Due to a horrible miscommunication which is as welcome as a plague among such teams, <b>A</b>, <b>C</b> and <b>M</b> drive from Calgary to Edmonton in separate cars.  To make things worse, there was also a miscommunication with <b>D</b>, who being always so helpful, decides to go to Calgary in order to save the team a trip to the far, freezing North.  All this happens on the same day and each car travels at a constant (but not necessarily the same) speed on the famous Alberta #2.</p>\r\n<p><b>A</b> passed <b>C</b> and <b>M</b> at time <em>t1</em> and <em>t2</em>, respectively, and met D at time <em>t3</em>. <b>D</b> met <b>C</b> and <b>M</b> at times <em>t4</em> and <em>t5</em>, respectively.  The question is: at what time time did <b>C</b> pass <b>M</b>?</p>\r\n<p>The input is a sequence of lines, each containing times <em>t1</em>, <em>t2</em>, <em>t3</em>, <em>t4</em> and <em>t5</em>, separated by white space. All times are distinct and given in increasing order. Each time is given in the hh:mm:ss format on the 24-hour clock. A line containing -1 terminates the input.</p>\r\n<p>For each line of input produce one line of output giving the time when  <b>C</b> passed <b>M</b> in the same format as input, rounding the seconds in the standard way.</p>\r\n<p>&nbsp;</p>\r\n<h3>&nbsp;</h3>', '', '', 'D:\\oj\\data\\2002', 'D:\\oj\\data\\2002', '10:00:00 11:00:00 12:00:00 13:00:00 14:00:00\r\n10:20:00 10:58:00 14:32:00 14:59:00 16:00:00\r\n10:20:00 12:58:00 14:32:00 14:59:00 16:00:00\r\n08:00:00 09:00:00 10:00:00 12:00:00 14:00:00\r\n-1', '12:00:00\r\n11:16:54\r\n13:37:32\r\n10:40:00', '', '', '', '2011-06-10 19:39:04', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721'),
(2003, 'Go', '<p>Go is played on a square board with an odd number of vertical and horizontal lines.  The usual board sizes are 9x9, 13x13 and 19x19.  But we''ll assume the size in <i>n</i>x<i>n</i> for 3 &le; n &le; 19.</p>\r\n<p>Black and White alternately play stones on the  intersection between two lines.  Black starts.  At any time one player may pass - not play a stone - but if both players pass the game ends.  We''ll denote playing a stone by P(x,y) where P is either B (for Black) or W (for White) and (1-n)/2 &le; x,y &le; (n-1)/2 gives the grid position of the stone to be played. The centre intersection of the board has coordinates (0,0).</p>\r\n<p>The rules of Go are reasonably straightforward, but the nuances of strategy make it an extremely challenging game. You are to use the following rules.</p>\r\n<ul>\r\n    <li>Black plays first.</li>\r\n    <li>Black and White alternate; at each turn a player may place a stone or may pass.  The game ends when Black and White pass consecutively.</li>\r\n    <li>A stone may be played only on an unoccupied intersection.</li>\r\n    <li>If one player P places a stone so that his or her stones (along with the edge of the board) completely surround a connected area occupied by stones belonging to the other player, Q, Q''s stones are said to be captured and removed from the board.  More precisely, two intersections are connected if they are horizontally or vertically (but not diagonally) adjacent.  Stones in an area are completely surrounded if no stone is connected with a vacant intersection.</li>\r\n    <li>If P places a stone that causes Q''s stones to be captured, P''s stone is not captured.</li>\r\n    <li>A connected area surrounded by P''s stones which contains none of Q''s stones is said to be <i>owned</i> by P.</li>\r\n    <li>The score for player P is the number of vacant intersections owned by P in the final board configuration plus the number of Q''s stones captured by P at any time during the game.</li>\r\n</ul>\r\n<p>The input consists of several test cases.  Each test case begins with a line containing</p>\r\n<i>n</i>\r\n<p>- the size of the board - and</p>\r\n<i>m</i>\r\n<p>- the number of stones placed in the game.</p>\r\n<i>m</i>\r\n<p>lines follow, each giving a placement in the format above. Note that</p>\r\n<i>m</i>\r\n<p>counts only stone placements - passes may result in two consecutive placements by the same player. You may assume that each move is legal.  A line containing 0 0 follows the last test case.</p>\r\n<p>For each test case, output a line with two numbers:  Black''s score followed by White''s score.</p>', '', '', 'D:\\oj\\data\\2003', 'D:\\oj\\data\\2003', '7 6\r\nB(-2,-2)\r\nW(2,2)\r\nB(-2,-3)\r\nW(2,3)\r\nB(-3,-2)\r\nW(3,2)\r\n7 6\r\nB(-2,-3)\r\nW(-3,-3)\r\nB(-2,-2)\r\nW(3,2)\r\nB(-3,-2)\r\nW(2,3)\r\n0 0', '1 1\r\n2 1', '', '', '', '2011-06-10 19:39:04', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 24, 'power721'),
(2004, 'Medals', '<p>At the Olympic Games, countries are ranked according to the number of medals 		their athletes won. However, there is more than one possible way of ranking 		countries by their medals. In Europe, for example, countries are first ranked 		by the number of gold medals their athletes won. Ties are broken by looking 		at silver medals, and then at bronze medals. In Canada, however, because 		Canadian athletes do not win very many gold medals, countries are ranked by 		the overall number of medals won, giving the same weight to gold, silver, and 		bronze medals. 		<br />\r\n<br />\r\nIn general, a ranking scheme can be thought of as a vector of positive weights. 		This vector is multiplied with the vector of medals won by each country, and 		the scalar product of the two vectors defines the score of the respective country, 		which is then used to produce the ranking. In this general scheme, the European 		ranking technique corresponds to the weight vector <i>(10<sup>20</sup>, 10<sup>10</sup>, 1)</i>, 		whereas the Canadian method corresponds to the vector <i>(1, 1, 1)</i>. 		<br />\r\n<br />\r\nIn this problem, you will only need to consider weight vectors of the form 		<i>(1/n<sup>j</sup>, 1/n<sup>k</sup>, 1/n<sup>l</sup>)</i>, where <i>n</i> is the 		total number of medals won by all athletes in the Olympic Games, and 		<i>j</i>, <i>k</i>, and <i>l</i> are integers. 		<br />\r\n<br />\r\nGiven a list of countries and the number of gold, silver, and bronze medals won by each 		country, print the line</p>\r\n<blockquote> 			<tt>Canada wins!</tt> 		</blockquote>\r\n<p>if there is a weight vector of the above form such that Canada ranks first according to 		the ranking scheme defined by that vector. Print the line</p>\r\n<blockquote> 			<tt>Canada cannot win.</tt> 		</blockquote>\r\n<p>if no such vector exists.</p>\r\n<br />\r\n<br />\r\n<p>The input contains multiple test cases. Each test case starts with an integer</p>\r\n<i>c</i>\r\n<p>, 		the number of countries to follow. Each of the following</p>\r\n<i>c</i>\r\n<p>lines contains the name 		of a country and three integers</p>\r\n<i>g</i>\r\n<p>,</p>\r\n<i>s</i>\r\n<p>, and</p>\r\n<i>b</i>\r\n<p>&ndash; the number of 		gold, silver, and bronze medals won by the country. The last test case has</p>\r\n<i>c = 0</i>\r\n<p>and must not be processed. It is guaranteed that each test case contains at most 20 		different countries and that the total number of medals smaller than 100. Country names 		do not contain whitespace characters.</p>', '', '', 'D:\\oj\\data\\2004', 'D:\\oj\\data\\2004', '2\r\nCanada 3 2 1\r\nUSA 1 2 3\r\n2\r\nUSA 2 2 2\r\nCanada 1 1 1\r\n0', 'Canada wins!\r\nCanada cannot win.', '', '', '', '2011-06-10 19:39:04', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 13, 'power721'),
(2005, 'Flipping colors', '<p>A rectangle with sides parallel to the x-y axes and its left-lower corner at (0,&nbsp;0) is being painted.  The rectangle may be thought of as a flat-screen display with almost infinite resolution; initially the entire rectangle is black.  Two numbers are given 0 &lt; <b>h</b>, <b>v</b> &lt; 1 and then</p>\r\n<ul>\r\n    <li>A vertical line is drawn dividing the horizontal sides of the rectangle in proportion <b>h</b>:1-<b>h</b> from the left.</li>\r\n    <li>A horizontal line is drawn dividing the vertical sides of the rectangles in proportion <b>v</b>:1-<b>v</b> from the bottom up.</li>\r\n    <li>These two lines divide the rectangle into four smaller rectangles.</li>\r\n    <li>The upper left and the lower right sub-rectangles remain intact.</li>\r\n    <li>The color of the other two rectangles is flipped (from black to white or from white to black) and now each of them is subject to the operation just performed on the bigger rectangle.</li>\r\n    <li>This process continues (in principle) forever.</li>\r\n</ul>\r\n<p>Given a point in the original rectangle but not on the boundary of any rectangle that turns up in the process of painting, determine the color of the point.</p>\r\n<p>Input contains multiple cases.  The first line of each case  contains 4 numbers, the length of the rectangle <b>H</b>, the height of the rectangle <b>V</b> and then the numbers <b>h</b> and <b>v</b>.  The next line contains one integer number <b>n</b>, the number of points to consider. The following <b>n</b> lines contain two numbers each, the <b>x</b> and the <b>y</b> coordinate of a point.</p>\r\n<p>Organize your output as shown in the sample.  For each point from input print the color of the point.</p>', '', '', 'D:\\oj\\data\\2005', 'D:\\oj\\data\\2005', '81 32 0.333333333333 0.5\r\n6\r\n16 30\r\n16 25\r\n16 12.0001\r\n16 11.9999\r\n16 7.987654321\r\n16 7.0123456789\r\n10 10 0.123456789 0.987654321\r\n2\r\n0.432 0.9876\r\n9.432 0.9876\r\n0 0 0 0', 'Case 1:\r\nblack\r\nblack\r\nwhite\r\nblack\r\nwhite\r\nwhite\r\nCase 2:\r\nwhite\r\nblack', '', '', '', '2011-06-10 19:39:04', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 16, 'power721'),
(2006, 'Crabbles', '<p>Jennifer is practicing for a Crabbles tournament. She pulls out a handful of Crabbles tiles out of a bag, and tries to form the word with the highest possible score. Each tile contains a letter (used to form the word) and a number (its score value). She can use each tile at most once in her word, and she is not required to use every tile. The word that she forms must appear in her dictionary. Her score is the sum of the values of the tiles used in the word.</p>\r\n<p>Note that in Crabbles, different tiles with the same letter may have different score values.</p>\r\n<p>To check her work, Jennifer would like a program to tell her the maximum score possible for the set of tiles. Your task is to write this program.</p>', '<p>The first line contains an integer 1 &le; N &le; 100,000 indicating the number of words in the dictionary. N lines follow, with one dictionary word on each line. Each dictionary word consists of only lowercase letters. The following line contains an integer 1 &le; M &le; 1000 indicating the number of Crabbles hands Jennifer wants to play. M hands follow. Each hand begins with a line containing an integer 1 &le; P &le; 10 indicating the number of tiles in the hand. This is followed by P lines, one for each tile. Each of these lines consists of a lowercase letter (the letter on the tile), a space, and an integer 0 &le; V &le; 10 (the value of the tile).</p>', '<p>For each hand in the input, output a line containing the maximum score possible with that hand.</p>', 'D:\\oj\\data\\2006', 'D:\\oj\\data\\2006', '2\r\nabcd\r\nhgfe\r\n1\r\n10\r\na 1\r\nb 2\r\nc 3\r\nd 4\r\ne 5\r\nf 6\r\ng 7\r\nh 8\r\ni 9\r\nj 10', '26', '', '', '', '2011-06-10 19:39:04', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721'),
(2007, 'Ferry Loading IV', '<p>Before bridges were common, ferries were used to transport cars across rivers. River ferries, unlike their larger cousins, run on a guide line and are powered by the river''s current. Cars drive onto the ferry from one end, the ferry crosses the river, and the cars exit from the other end of the ferry.</p>\r\n<p>There is an <i>l</i>-meter-long ferry that crosses the river. A car may arrive at either river bank to be transported by the ferry to the opposite bank.  The ferry travels continuously back and forth between the banks so long as it is carrying a car or there is at least one car waiting at either bank.  Whenever the ferry arrives at one of the banks, it unloads its cargo and loads up cars that are waiting to cross as long as they fit on its deck.  The cars are loaded in the order of their arrival; ferry''s deck accommodates only one lane of cars. The ferry is initially on the left bank where it broke and it took quite some time to fix it.  In the meantime, lines of cars formed on both banks that await to cross the river.</p>\r\n<p>The first line of input contains <i>c</i>, the number of test cases. Each test case begins with <i>l, m</i>. <i>m</i> lines follow describing the cars that arrive in this order to be transported.  Each line gives the length of a car (in centimeters), and the bank at which the car arrives ("left" or "right").</p>\r\n<p>For each test case, output one line giving the number of times the ferry has to cross the river in order to serve all waiting cars.</p>', '', '', 'D:\\oj\\data\\2007', 'D:\\oj\\data\\2007', '4\r\n20 4\r\n380 left\r\n720 left\r\n1340 right\r\n1040 left\r\n15 4 \r\n380 left\r\n720 left\r\n1340 right\r\n1040 left\r\n15 4 \r\n380 left\r\n720 left\r\n1340 left\r\n1040 left\r\n15 4 \r\n380 right\r\n720 right\r\n1340 right\r\n1040 right', '3\r\n3\r\n5\r\n6', '', 'http://plg1.cs.uwaterloo.ca/~acm00/060527/A.html', '', '2011-06-10 19:39:05', 10000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 10000, 20, 'power721'),
(2008, 'Card Hands', '<p>Jim is writing a program for statistically analyzing card games. He needs to store many different card hands in memory efficiently.  Each card has one of four <i>suits</i> and one of thirteen  <i>values</i>. In his implementation, each hand is stored as a linked list of cards in a canonical order:  the cards are first ordered by suit: all the clubs come first,  followed by all the diamonds, then all the hearts, and finally the spades. Within each suit, the cards are ordered by value: A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K. Each hand contains at most one of any given card.</p>\r\n<p>The card hands are using lots of memory. Jim therefore decides to try a more efficient representation. Whenever any two lists share a common tail, they can be updated to share one copy of the tail, and the other copy can be discarded. This process can be repeated until no two lists share a common tail.</p>\r\n<p>Your job is to tell Jim how many linked list nodes he needs to store all the card hands.</p>', '<p>The input contains several test cases followed by a line containing 0. The first line of each case contains the number of card hands. Each subsequent line describes a card hand. It starts with a number indicating the number of cards in the hand. The cards follow, separated by spaces, in the canonical order defined above. For each card, the value is given first, followed by the suit (C, D, H, or S). There are at most 100,000 cards in all hands.</p>', '<p>For each test case, output a line containing the number of linked list  nodes needed to store all the lists.</p>', 'D:\\oj\\data\\2008', 'D:\\oj\\data\\2008', '3\r\n3 7D AH 5S\r\n4 9C 3D 4D 5S\r\n2 AH 5S\r\n0', '6', '', 'http://plg1.cs.uwaterloo.ca/~acm00/060527/B.html', '', '2011-06-10 19:39:05', 1000, 262144, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 17, 'power721'),
(2009, 'Eventually periodic sequence', '<img align="right" vspace="10" hspace="10" src="http://plg1.cs.uwaterloo.ca/%7Eacm00/060527/period.jpg" alt="" />\r\n<p>Given is a function</p>\r\n<em>f: 0..N --&gt; 0..N</em>\r\n<p>for a non-negative</p>\r\n<em>N</em>\r\n<p>and a non-negative integer</p>\r\n<em>n</em>\r\n<p>&le;</p>\r\n<em>N</em>\r\n<p>.  One can construct an infinite sequence</p>\r\n<em>F = f<sup>&nbsp;1</sup>(n), f<sup>&nbsp;2</sup>(n), ... f<sup>&nbsp;k</sup>(n) ... </em>\r\n<p>, where</p>\r\n<em>f<sup>&nbsp;k</sup>(n)</em>\r\n<p>is defined recursively as follows:</p>\r\n<em>f<sup>&nbsp;1</sup>(n) = f(n)</em>\r\n<p>and</p>\r\n<em>f<sup>&nbsp;k+1</sup>(n)</em>\r\n<p>=</p>\r\n<em>f(f<sup>&nbsp;k</sup>(n))</em>\r\n<p>.</p>\r\n<p>It is easy to see that each such sequence <em>F</em> is eventually periodic, that is periodic from some point onwards, e.g 1, 2, 7, 5, 4, 6, 5, 4, 6, 5, 4, 6 ... . Given non-negative integer <em>N &le; 11000000 </em>, <em>n &le; N</em> and <em>f</em>, you are to compute the period of sequence <em>F</em>.</p>\r\n<p>Each line of input contains <em>N</em>, <em>n</em> and the a description of <em>f</em> in postfix notation, also known as Reverse Polish Notation (RPN).  The operands are either unsigned integer constants or <em>N</em> or the variable <em>x</em>.  Only binary operands are allowed: + (addition), * (multiplication) and % (modulo, i.e. remainder of integer division). Operands and operators are separated by whitespace.  The operand % occurs exactly once in a function and it is the last (rightmost, or topmost if you wish) operator and its second operand is always <em>N</em> whose value is read from input. The following function:</p>\r\n<pre>\r\n \r\n            2 x * 7 + N % \r\n</pre>\r\n<p>is the RPN rendition of the more familiar infix</p>\r\n<tt>(2*x+7)%N</tt>\r\n<p>.  All input lines are shorter than 100 characters. The last line of input has</p>\r\n<em>N</em>\r\n<p>equal 0 and should not be processed.</p>\r\n<p>For each line of input, output one line with one integer number, the period of <em>F</em> corresponding to the data given in the input line.</p>', '', '', 'D:\\oj\\data\\2009', 'D:\\oj\\data\\2009', '10 1 x N %\r\n11 1 x x 1 + * N %\r\n1728 1 x x 1 + * x 2 + * N %\r\n1728 1 x x 1 + x 2 + * * N %\r\n100003 1 x x 123 + * x 12345 + * N %\r\n0 0 0 N %', '1\r\n3\r\n6\r\n6\r\n369', '', 'http://plg1.cs.uwaterloo.ca/~acm00/060527/C.html', '', '2011-06-10 19:39:05', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 17, 'power721'),
(2010, 'Point of view in Flatland', '<p><img align="right" vspace="20" hspace="20" alt="" src="http://plg1.cs.uwaterloo.ca/%7Eacm00/060527/flat-world.jpg" /></p>\r\n<p>Everything is flat in Flatland.  The planets are round but they are flat, that is, they are discs in a plane.</p>\r\n<p>The centers of three planets in Flatland are given and their radii. Find the point in Flatland from which all three planets are visible at the same angle, that is, they appear to have the same size measured as angular diameter.  Let''s call such a point an <em> isoobservation</em> point.  There can be at most two such points and we are interested in finding the one that gives the largest angular diameter of the planets.</p>\r\n<p>Input consists of several cases, each case is presented at a single line.  Each line has nine numbers, three for each disc.  Each triple has <b>x</b> and <b>y</b> coordinates of the disc center and the radius <b>r</b> of that disc.  The input is terminated by a line  with nine zeros and this line should not be processed.</p>\r\n<p>For each case of input, print the <b>x</b> and <b>y</b> coordinates of the isoobservation point as described above in the format shown in the sample; but if there is no such point, print&nbsp;&nbsp; <tt>No solution</tt></p>\r\n<p>To simplify the problem you may assume that:</p>\r\n<ul>\r\n    <li>The discs centers are not all collinear.</li>\r\n    <li>The discs are totally disjoint.</li>\r\n    <li>The discs are transparent and non-refractive. That is, a disc is   visible and has the same apparent shape and size, whether or not   there''s another disc in front of it.</li>\r\n    <li>The input data are such that the existence or non-existence of such   a point is computable, even with slight rounding error. But use   double-precision, eh?</li>\r\n</ul>', '', '', 'D:\\oj\\data\\2010', 'D:\\oj\\data\\2010', '10 10 1 30 30 1 50 10 1\r\n0 30 1.0 30 0 1.0 40 40 1.0\r\n10 30 1.0 31 0 1.0 42 43 1.0\r\n10 42 1 62.8 62.8 1 52.5 -25.3 1\r\n10 42 1.1 62.8 62.8 1.2 52.5 25.3 25\r\n0 0 0 0 0 0 0 0 0', '30.00 10.00\r\n23.00 23.00\r\n31.58 22.76\r\n49.27 19.73\r\nNo solution', '', 'http://plg1.cs.uwaterloo.ca/~acm00/060527/D.html', '', '2011-06-10 19:39:05', 5000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 5000, 19, 'power721'),
(2011, 'How many 0', '<p>A Benedict monk No. 16 writes down the decimal representations of all natural numbers between and including</p>\r\n<p><b>m and</b> <b>n , m<b>&le;</b>  n</b></p>\r\n<p>. How many 0''s will he write down?</p>\r\n<p>Input consists of a sequence of lines.  Each line contains two unsigned 32-bit integers <b>m</b> and <b>n</b>, <b>m</b> &le; <b>n</b>.  The last line of input has the value of <b>m</b> negative and this line should not be processed.</p>\r\n<p>For each line of input print one line of output with one integer number giving the number of 0''s written down by the monk.</p>\r\n<h3>&nbsp;<img align="right" vspace="10" hspace="10" src="http://plg1.cs.uwaterloo.ca/%7Eacm00/060527/zeros.jpg" alt="" /></h3>', '', '', 'D:\\oj\\data\\2011', 'D:\\oj\\data\\2011', '10 11\r\n100 200\r\n0 500\r\n1234567890 2345678901\r\n0 4294967295\r\n-1 -1', '1\r\n22\r\n92\r\n987654304\r\n3825876150', '', 'http://plg1.cs.uwaterloo.ca/~acm00/060527/E.html', '', '2011-06-10 19:39:05', 10000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 10000, 23, 'power721'),
(2012, 'The Trip, 2007<font color=black>(need SPJ)</font>', '<p>A number of students are members of a club that travels annually to exotic locations. Their destinations in the past have included Indianapolis, Phoenix, Nashville, Philadelphia, San Jose, Atlanta, Eindhoven, Orlando, Vancouver, Honolulu, Beverly Hills, Prague, Shanghai, and San Antonio. This spring they are hoping to make a similar trip but aren''t quite sure where or when.</p>\r\n<p>An issue with the trip is that their very generous sponsors always give them various knapsacks and other carrying bags that they must pack for their trip home.  As the airline allows only so many pieces of luggage, they decide to pool their gifts and to pack one bag within another so as to minimize the total number of pieces they must carry.</p>\r\n<p>The bags are all exactly the same shape and differ only in their linear dimension which is a positive integer not exceeding 1000000.  A bag with smaller dimension will fit in one with larger dimension.  You are to compute which bags to pack within which others so as to minimize the overall number of pieces of luggage (i.e. the number of outermost bags).  While maintaining the minimal number of pieces you are also to minimize the total number of bags in any one piece that must be carried.</p>\r\n<p>Standard input contains several test cases.  Each test case consists of an integer <i>1 &le; n &le; 10000</i> giving the number of bags followed by <i>n</i> integers on one or more lines, each giving the dimension of a piece.  A line containing 0 follows the last test case.  For each test case your output should consist of <i>k</i>, the minimum number of pieces, followed by <i>k</i> lines, each giving the dimensions of the bags comprising one piece, separated by spaces.  Each dimension in the input should appear exactly once in the output, and the bags in each piece must fit nested one within another.  If there is more than one solution, any will do.  Output an empty line between cases.</p>', '', '', 'D:\\oj\\data\\2012', 'D:\\oj\\data\\2012', '6\r\n1 1 2 2 2 3\r\n0', '3\r\n1 2\r\n1 2\r\n3 2', '暂时没有SPJ.', '', '', '2011-06-10 19:39:07', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721'),
(2013, 'Mall Mania', '<p>Waterloo has two giant shopping malls, each enclosing several city blocks. Kim and Pat like to shop and to walk within the malls but they don''t like walking between the malls because such walking does not contribute directly to the task at hand:  shopping.  They would therefore like to know the minimum crossing distance between the malls.</p>\r\n<p>Each city block is a unit square delimited by streets and avenues.  Streets run east-west and avenues run north-south.  Both are identified by  consecutive integers between 0 and 2000.  (Lower numbered avenues are west of higher numbered avenues and lower numbered streets are south of higher numbered streets.)  Streets and avenues are narrow so their thickness may be assumed to be 0.</p>\r\n<p>Each mall is a contiguous set of complete city blocks.  By contiguous we mean that any two blocks are connected by some sequence of blocks such that  consecutive pairs of blocks in the sequence share a side.  The malls do not intersect and do not surround any empty blocks; that is, the blocks not in any mall are themselves contiguous.</p>\r\n<p>Standard input contains several test cases.  Each test case contains the description of the two malls.  Each mall''s description consists of an integer <i>p&nbsp;&ge;&nbsp;4</i>, the perimeter of the mall, followed by one or more lines containing <i>p</i> pairs <i>(a,s)</i> giving the coordinates of the avenue-street intersections contained in the perimeter, in clockwise order.  A line  containing 0 follows the last test case.</p>\r\n<p>For each case, output a single integer <i>d</i> -- the minimum walking distance between the malls, assuming that Kim and Pat always  walk along streets and avenues.</p>', '', '', 'D:\\oj\\data\\2013', 'D:\\oj\\data\\2013', '4\r\n0 0 0 1 1 1 1 0\r\n6\r\n4 3 4 2 3 2\r\n2 2 2 3\r\n3 3\r\n0', '2', '', 'http://plg1.cs.uwaterloo.ca/~acm00/060924/B.html', '', '2011-06-10 19:39:07', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 32, 'power721'),
(2014, 'Moonshine', '<p>Granny is preparing moonshine whiskey for an upcoming family reunion.  Because her family is large, she needs to make several batches of whiskey, which she collects in a large metal cream can.  After making, and sampling, several batches Granny  stumbles and knocks the can on its side.  Fortunately, the lid is tightly fixed so no whiskey is lost.</p>\r\n<p>Our question to you is this:  assuming that the depth of whiskey in the can was <i>k</i> cm with the can sitting upright, what is its depth with the can lying horizontal?  The can itself is made of two cylinders:  the body with height <i>h<sub>b</sub></i> and diameter <i>d<sub>b</sub></i>, and the neck with  height <i>h<sub>n</sub></i> and diameter <i>d<sub>n</sub></i>.  The neck and body are joined by a tapered conic shoulder such that the overall height of the can is <i>h</i>.  The bottom and lid of the can are disks of diameter <i>d<sub>b</sub></i> and <i>d<sub>n</sub></i> respectively.</p>\r\n<p>Input consists of several test cases.  Each test case consists of a line containing real numbers <i>k h<sub>b</sub> d<sub>b</sub> h<sub>n</sub> d<sub>n</sub></i> and <i>h.</i>  You may assume that <i>100&nbsp;&ge;&nbsp;h&nbsp;&ge;&nbsp;h<sub>b</sub>&nbsp;+&nbsp;h<sub>n</sub></i> and that <i>100&nbsp;&ge;&nbsp;d<sub>b</sub>&nbsp;&ge;&nbsp;d<sub>n</sub></i>.   A line containing 0 0 0 0 0 0 follows the last test case.</p>\r\n<p>For each test case, output a line containing <i>s</i> the depth with the can lying horizontally, rounded to two decimal places.</p>\r\n<center><img alt="" src="http://plg1.cs.uwaterloo.ca/%7Eacm00/060924/jug.jpg" /></center>', '', '', 'D:\\oj\\data\\2014', 'D:\\oj\\data\\2014', '5.625 10.0 10.0 5.0 5.0 15.0\r\n0 0 0 0 0 0', '5.00', '', 'http://plg1.cs.uwaterloo.ca/~acm00/060924/C.html', '', '2011-06-10 19:39:08', 10000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 10000, 18, 'power721');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(2015, 'WFF <font color=black>(need SPJ)</font>', '<p>WFF ''N PROOF is a logic game played with dice.  Each die has six faces representing some subset of the possible symbols K, A, N, C, E, p, q, r, s, t. A Well-formed formula (WFF) is any string of these symbols obeying the following rules:</p>\r\n<ul>\r\n    <li>p, q, r, s, and t are WFFs</li>\r\n    <li>if <i>w</i> is a WFF, N<i>w</i> is a WFF</li>\r\n    <li>if <i>w</i> and <i>x</i> are WFFs, K<i>wx</i>, A<i>wx</i>, C<i>wx</i>, and E<i>wx</i> are WFFs.</li>\r\n</ul>\r\n<p>The meaning of a WFF is defined as follows:</p>\r\n<ul>\r\n    <li>p, q, r, s, and t are logical variables that may take on the value 0 (false) or  1 (true).</li>\r\n    <li>K, A, N, C, E mean <i>and, or, not, implies,</i> and <i>equals</i> as defined in the truth table below.</li>\r\n</ul>\r\n<center>\r\n<table border="1" bgcolor="#ccffff" width="80%" cols="1">\r\n    <tbody>\r\n        <tr>\r\n            <td><center><b><font color="#000099"><font size="+1">Definitions of K, A, N, C, and E</font></font></b></center></td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<table border="1" bgcolor="#ccffff" width="80%" cols="6">\r\n    <tbody>\r\n        <tr>\r\n            <td>&nbsp;&nbsp;&nbsp;&nbsp; <b><font face="Courier New,Courier"><font size="+1"><i>w</i>&nbsp; <i>x</i></font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; K<i>wx</i></font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; A<i>wx</i></font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp;&nbsp; N<i>w</i></font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; C<i>wx</i></font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; E<i>wx</i></font></font></b></td>\r\n        </tr>\r\n        <tr>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 1&nbsp; 1</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 1</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 1</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp;&nbsp; 0</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 1</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 1</font></font></b></td>\r\n        </tr>\r\n        <tr>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 1&nbsp; 0</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 0</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 1</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp;&nbsp; 0</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 0</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 0</font></font></b></td>\r\n        </tr>\r\n        <tr>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 0&nbsp; 1</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 0</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 1</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp;&nbsp; 1</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 1</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 0</font></font></b></td>\r\n        </tr>\r\n        <tr>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 0&nbsp; 0</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 0</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 0</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp;&nbsp; 1</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 1</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 1</font></font></b></td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n</center>\r\n<p>Given a collection of symbols resulting from throwing a set of dice, determine the longest WFF that can be formed from those symbols.</p>\r\n<p>Input consists of several test cases.  Each test case is a single line containing a string containing between 1 and 100 of the characters.  A line containing 0 follows the last case.  For each test case, output a line containing the longest WFF that can be formed using some subset of the letters in the string.  If there are several such WFFs, any one will do.  If no WFF can be constructed, output a line containing "no WFF possible" as shown below.</p>', '', '', 'D:\\oj\\data\\2015', 'D:\\oj\\data\\2015', 'qKpNq\r\nKKN\r\n0', 'KqNq\r\nno WFF possible', '暂时没有SPJ.', 'http://plg1.cs.uwaterloo.ca/~acm00/060924/D.html', '', '2011-06-10 19:39:08', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 29, 'power721'),
(2016, 'Cousins', '<p>Two strings</p>\r\n<i>a</i>\r\n<p>and</p>\r\n<i>b</i>\r\n<p>are defined to be</p>\r\n<i>first cousins</i>\r\n<p>if they can be made equal by removing no more than half the characters from each. For example "abcdef" and "axcyd" are first cousins because we can remove 3 of the 6 characters (b,e,f) from the first string and 2 of the 5 characters in the second string (x,y) resulting in "acd".  Two strings</p>\r\n<i>c</i>\r\n<p>and</p>\r\n<i>d</i>\r\n<p>are said to be n+1</p>\r\n<i>st cousins</i>\r\n<p>if there exists a string</p>\r\n<i>e</i>\r\n<p>that is a first cousin of</p>\r\n<i>c</i>\r\n<p>and is an n</p>\r\n<i>th</i>\r\n<p>cousin of</p>\r\n<i>d</i>\r\n<p>.</p>\r\n<p>Given two strings <i>x</i> and <i>y</i>, determine the smallest <i>n&nbsp;&ge;&nbsp;1</i> such that <i>x</i> is an n<i>th</i> cousin of <i>y</i>.</p>\r\n<p>Input consists of several test cases.  Each test case consists of two lines representing <i>x</i> and <i>y</i>.  <i>x</i> and <i>y</i>  each consist of at least 1 and at most 100 lower case letters.   Two lines containing 0 follow the last test case. For each test case, output a line containing <i>n</i> or  <b>not related</b> if <i>x</i> and <i>y</i> are not n<i>th</i> cousins for any <i>n</i>.</p>', '', '', 'D:\\oj\\data\\2016', 'D:\\oj\\data\\2016', 'a\r\nb\r\nabb\r\nbaa\r\nabcdef\r\naxcyd\r\n0\r\n0', '2\r\n2\r\n1', '', 'http://plg1.cs.uwaterloo.ca/~acm00/060924/E.html', '', '2011-06-10 19:39:08', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 17, 'power721'),
(2017, 'Semi-prime H-numbers', '<img align="right" vspace="20" hspace="20" src="http://plg1.cs.uwaterloo.ca/%7Eacm00/060930/hilbert.jpg" alt="" />\r\n<p>This problem is based on an exercise of David Hilbert, who pedagogically suggested that one study the theory of</p>\r\n<em>4n+1</em>\r\n<p>numbers. Here, we do only a bit of that.</p>\r\n<p>An <b>H</b>-number is a positive number which is one more than a multiple of four: 1, 5, 9, 13, 17, 21,... are the <b>H</b>-numbers. For this problem we pretend that these are the <em>only</em> numbers. The <b>H</b>-numbers are closed under multiplication.</p>\r\n<p>As with regular integers, we partition the <b>H</b>-numbers into units, <b>H</b>-primes, and <b>H</b>-composites. 1 is the only unit. An <b>H</b>-number <b>h</b> is <b>H</b>-prime if it is not the unit,  and is the product of two <b>H</b>-numbers in only one way: 1 &times; <b>h</b>. The rest of the numbers are <b>H</b>-composite.</p>\r\n<p>For examples, the first few <b>H</b>-composites are: 5 &times; 5 = 25, 5 &times; 9 = 45, 5 &times; 13 = 65, 9 &times; 9 = 81, 5 &times; 17 = 85.</p>\r\n<p>Your task is to count the number of <b>H</b>-semi-primes. An <b>H</b>-semi-prime is an <b>H</b>-number which is the product of exactly two <b>H</b>-primes. The two <b>H</b>-primes may be equal or different. In the example above, all five numbers are <b>H</b>-semi-primes. 125 = 5 &times; 5 &times; 5 is not an <b>H</b>-semi-prime, because it''s the product of three <b>H</b>-primes.</p>\r\n<p>Each line of input contains an <b>H</b>-number &le; 1,000,001. The last line of input contains 0 and this line should not be processed.</p>\r\n<p>For each inputted <b>H</b>-number <b>h</b>, print a line stating <b>h</b> and the number of <b>H</b>-semi-primes between 1 and <b>h</b> inclusive, separated by one space in the format shown in the sample.</p>', '<p>Please Input Input Here</p>', '<p>Please Input Output Here</p>', 'D:\\oj\\data\\2017', 'D:\\oj\\data\\2017', '21 \r\n85\r\n789\r\n0', '21 0\r\n85 5\r\n789 62', '', '', '', '2011-06-10 19:39:08', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 25, 'power721'),
(2018, 'Rectilinear polygon', '<img align="right" vspace="20" hspace="20" src="http://plg1.cs.uwaterloo.ca/%7Eacm00/060930/rp.jpg" alt="" />\r\n<p>Given is</p>\r\n<it>n</it>\r\n<p>points with integer coordinates in the plane.  Is it is possible to construct a simple, that is non-intersecting, rectilinear polygon with the given points as vertices?  In a rectilinear polygon there are at least 4 vertices and every edge is either horizontal or vertical;  each vertex is an endpoint of exactly one horizontal edge and one vertical edge.  There are no holes in a polygon.</p>\r\n<p>The first line of input is an integer giving the number of cases that follow.  The input of each case starts with an integer 4 &le; <it>n</it> &le; 100000 giving the number of points for this test case. It is followed by <it>n</it> pairs of integers specifying the <it>x</it> and <it>y</it> coordinates of the points for this case.</p>\r\n<p>The output should contain one line for each case on input.  Each line should contain one integer number giving the length of the rectilinear  polygon passing throught the given points when it exists; otherwise, it should contain <tt>-1</tt>.</p>', '<p>Please Input Input Here</p>', '<p>Please Input Output Here</p>', 'D:\\oj\\data\\2018', 'D:\\oj\\data\\2018', '1\r\n8\r\n1 2\r\n1 0\r\n2 1\r\n2 2\r\n3 2\r\n3 1\r\n4 0\r\n4 2', '12', '', 'http://plg1.cs.uwaterloo.ca/~acm00/060930/B.html', '', '2011-06-10 19:39:08', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 22, 'power721'),
(2019, 'Life Forms', '<p>You may have wondered why most extraterrestrial life forms resemble humans, differing by superficial traits such as height, colour, wrinkles, ears, eyebrows and the like.  A few bear no human resemblance; these typically have geometric or amorphous shapes like cubes, oil slicks or clouds of dust.</p>\r\n<p>The answer is given in the 146th episode of <i>Star Trek - The Next Generation</i>, titled <i>The Chase</i>.  It turns out that in the vast majority of the quadrant''s life forms ended up with a large fragment of common DNA.</p>\r\n<p>Given the DNA sequences of several life forms represented as strings of letters, you are to find the longest substring that is shared by more than half of them.</p>\r\n<p>Standard input contains several test cases.  Each test case begins with 1 &le; n &le; 100, the number of life forms.  <i>n</i> lines follow; each contains a string of lower case letters representing the DNA sequence of a life form.  Each DNA sequence contains at least one and not more than 1000 letters.  A line containing 0 follows the last test case.</p>\r\n<p>For each test case, output the longest string or strings shared by more than half of the life forms.  If there are many, output all of them in alphabetical order.  If there is no solution with at least one letter, output "?".  Leave an empty line between test cases.</p>', '<p>Please Input Input Here</p>', '<p>Please Input Output Here</p>', 'D:\\oj\\data\\2019', 'D:\\oj\\data\\2019', '3\r\nabcdefg\r\nbcdefgh\r\ncdefghi\r\n3\r\nxxx\r\nyyy\r\nzzz\r\n0', 'bcdefg\r\ncdefgh\r\n\r\n?', '', '', '', '2012-03-31 23:43:11', 10000, 131072, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 10000, 23, 'power721'),
(2020, 'Tautology', '<p>WFF ''N PROOF is a logic game played with dice.  Each die has six faces representing some subset of the possible symbols K, A, N, C, E, p, q, r, s, t. A Well-formed formula (WFF) is any string of these symbols obeying the following rules:</p>\r\n<ul>\r\n    <li>p, q, r, s, and t are WFFs</li>\r\n    <li>if <i>w</i> is a WFF, N<i>w</i> is a WFF</li>\r\n    <li>if <i>w</i> and <i>x</i> are WFFs, K<i>wx</i>, A<i>wx</i>, C<i>wx</i>, and E<i>wx</i> are WFFs.</li>\r\n</ul>\r\n<p>The meaning of a WFF is defined as follows:</p>\r\n<ul>\r\n    <li>p, q, r, s, and t are logical variables that may take on the value 0 (false) or  1 (true).</li>\r\n    <li>K, A, N, C, E mean <i>and, or, not, implies,</i> and <i>equals</i> as defined in the truth table below.</li>\r\n</ul>\r\n<center>\r\n<table border="1" bgcolor="#ccffff" width="80%" cols="1">\r\n    <tbody>\r\n        <tr>\r\n            <td><center><b><font color="#000099"><font size="+1">Definitions of K, A, N, C, and E</font></font></b></center></td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<table border="1" bgcolor="#ccffff" width="80%" cols="6">\r\n    <tbody>\r\n        <tr>\r\n            <td>&nbsp;&nbsp;&nbsp;&nbsp; <b><font face="Courier New,Courier"><font size="+1"><i>w</i>&nbsp; <i>x</i></font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; K<i>wx</i></font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; A<i>wx</i></font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp;&nbsp; N<i>w</i></font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; C<i>wx</i></font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; E<i>wx</i></font></font></b></td>\r\n        </tr>\r\n        <tr>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 1&nbsp; 1</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 1</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 1</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp;&nbsp; 0</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 1</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 1</font></font></b></td>\r\n        </tr>\r\n        <tr>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 1&nbsp; 0</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 0</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 1</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp;&nbsp; 0</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 0</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 0</font></font></b></td>\r\n        </tr>\r\n        <tr>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 0&nbsp; 1</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 0</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 1</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp;&nbsp; 1</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 1</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 0</font></font></b></td>\r\n        </tr>\r\n        <tr>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 0&nbsp; 0</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 0</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 0</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp;&nbsp; 1</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 1</font></font></b></td>\r\n            <td><b><font face="Courier New,Courier"><font size="+1">&nbsp; 1</font></font></b></td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n</center>\r\n<p>A <i>tautology</i> is a WFF that has value 1 (true) regardless of the values of its variables.  For example, <i>ApNp</i> is a tautology because it is true regardless of the value of <i>p</i>.  On the other hand, <i>ApNq</i> is not, because it has the value 0 for <i>p=0, q=1</i>.</p>\r\n<p>You must determine whether or not a WFF is a tautology.</p>\r\n<p>Input consists of several test cases.  Each test case is a single line containing a WFF with no more than 100 symbols.  A line containing 0 follows the last case.  For each test case, output a line containing <i>tautology</i> or <i>not</i> as appropriate.</p>', '<p>Please Input Input Here</p>', '<p>Please Input Output Here</p>', 'D:\\oj\\data\\2020', 'D:\\oj\\data\\2020', 'ApNp\r\nApNq\r\n0', 'tautology\r\nnot', '', 'http://plg1.cs.uwaterloo.ca/~acm00/060930/D.html', '', '2011-06-10 19:39:09', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 15, 'power721'),
(2021, 'Rinse<font color=black>(need SPJ)</font>', '<p>Granny''s reunion was a smashing success.  Next she is expecting a visit from Eliot Ness and in anticipation of his visit would like to remove as much whiskey from the cream can as possible prior to his visit.</p>\r\n<p>Granny can upend the cream can, thus pouring its contents on the ground.  But due to surface tension and the shape of the can a small amount of the content remains, even after the can is upended.  Granny has a barrel full of rain water that she can use to rinse the can several times.  Each rinse involves pouring some amount of water (perhaps none) into the cream can, mixing it thoroughly with the existing contents, and pouring it out.  After each rinse an amount of liquid remains, some fraction of which is whiskey and the rest water.</p>\r\n<p>Mr. Ness'' visit is imminent, affording Granny the time to do at most <i>k</i> rinses.  You are to determine a rinsing strategy that Granny should employ to minimize the amount of residual whiskey in the cream can after the  last rinse.</p>\r\n<p>Standard input consists of several test cases.  Each test case is represented by a line with five numbers:</p>\r\n<ul>\r\n    <li>0 &lt; k &le; 100 -- an integer denoting the maximum number of rinses</li>\r\n    <li>V<sub>b</sub> &gt; 0 -- a real number denoting the volume of available rain water in the barrel</li>\r\n    <li>V<sub>w</sub> &gt; 0 -- a real number denoting the volume of whiskey in the cream can</li>\r\n    <li>V<sub>r</sub> &gt; 0 -- a real number denoting the volume of liquid that cannot be poured out by upending the can (further liquid might be eliminated by evaporation, but there is insufficient time before Ness'' visit for any evaporation to take place)</li>\r\n    <li>V<sub>c</sub> &gt; V<sub>w</sub>,V<sub>r</sub> -- a real number denoting the maximum capacity of the cream can.</li>\r\n</ul>\r\n<p>A line containing 0 follows the last case. For each test case, output</p>\r\n<p><i>r</i></p>\r\n<p>, the number of rinses that Granny should perform.  On the same line, output</p>\r\n<p><i>r</i></p>\r\n<p>real numbers, rounded to two decimal places, giving the amount of rain water to be used for each rinse, in order.</p>\r\n<p>Note that the total amount of water used in all rinses must not exceed V<sub>b</sub>.  The total amount of liquid in the cream can cannot exceed V<sub>c</sub> at any time.  Assume that whiskey and water mix perfectly and that their volumes are additive; that is, <i>x</i> units of whiskey and <i>y</i> units of water combine to form <i>x+y</i> units of liquid.</p>', '<p>Please Input Input Here</p>', '<p>Please Input Output Here</p>', 'D:\\oj\\data\\2021', 'D:\\oj\\data\\2021', '2 15.0 25.0 1.0 50.0\r\n0', '2 0.00 15.00', '暂时没有SPJ.', 'http://plg1.cs.uwaterloo.ca/~acm00/060930/rinse.html', '', '2011-06-10 19:39:09', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 23, 'power721'),
(2022, 'Open Source', '<p>At an open-source fair held at a major university, leaders of open-source projects put sign-up sheets on the wall, with the project name at the top in capital letters for identification.</p>\r\n<p>Students then signed up for projects using their userids.  A userid is a string of lower-case letters and numbers starting with a letter.</p>\r\n<p>The organizer then took all the sheets off the wall and typed in the information.</p>\r\n<p>Your job is to summarize the number of students who have signed up for each project. Some students were overly enthusiastic and put their name down several times for the same project. That''s okay, but they should only count once. Students were asked to commit to a single project, so any student who has signed up for more than one project should not count for any project.</p>\r\n<p>There are at most 10,000 students at the university, and at most 100 projects were advertised.</p>\r\n<p>Input Specification:</p>\r\n<p>The input contains several test cases, each one ending with a line that starts with the digit 1. The last test case is followed by a line starting with the digit 0.</p>\r\n<p>Each test case consists of one or more project sheets. A project sheet consists of a line containing the project name in capital letters, followed by the userids of students, one per line.</p>\r\n<p>Output Specification:</p>\r\n<p>For each test case, output a summary of each project sheet. The summary is one line with the name of the project followed by the number of students who signed up. These lines should be printed in decreasing order of number of signups. If two or more projects have the same number of signups, they should be listed in alphabetical order.</p>', '<p>Please Input Input Here</p>', '<p>Please Input Output Here</p>', 'D:\\oj\\data\\2022', 'D:\\oj\\data\\2022', 'UBQTS TXT\r\ntthumb\r\nLIVESPACE BLOGJAM\r\nphilton\r\naeinstein\r\nYOUBOOK\r\nj97lee\r\nsswxyzy\r\nj97lee\r\naeinstein\r\nSKINUX\r\n1\r\n0', 'YOUBOOK 2\r\nLIVESPACE BLOGJAM 1\r\nUBQTS TXT 1\r\nSKINUX 0', '', 'http://plg1.cs.uwaterloo.ca/~acm00/070714/A.html', '', '2011-06-10 19:39:10', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 25, 'power721'),
(2023, 'Antimonotonicity', '<p>I have a sequence Fred of length n comprised of integers between 1 and n  inclusive.  The elements of Fred are pairwise distinct.  I want to find a  subsequence Mary of Fred that is as long as possible and has the property  that:</p>\r\n<pre>\r\n   Mary[0] &gt; Mary[1] &lt; Mary[2] &gt; Mary[3] &lt; ...\r\n</pre>', '<p>The first line of input will contain a single integer T expressed in  decimal with no leading zeroes.  T will be at most 50.  T test cases will  follow.</p>\r\n<p>Each test case is contained on a single line.  A line describing a test  case is formatted as follows:</p>\r\n<pre>\r\n   n Fred[0] Fred[1] Fred[2] ... Fred[n-1].\r\n</pre>\r\n<p>where n and each element of Fred is an integer expressed in decimal with  no leading zeroes.  No line will have leading or trailing whitespace, and  two adjacent integers on the same line will be separated by a single  space.  n will be at most 30000.</p>\r\n<h3>&nbsp;</h3>', '<p>For each test case, output a single integer followed by a newline --- the  length of the longest subsequence Mary of Fred with the desired  properties.</p>\r\n<h3>&nbsp;</h3>', 'D:\\oj\\data\\2023', 'D:\\oj\\data\\2023', '4\r\n5 1 2 3 4 5\r\n5 5 4 3 2 1\r\n5 5 1 4 2 3\r\n5 2 4 1 3 5', '1\r\n2\r\n5\r\n3', '', 'http://plg1.cs.uwaterloo.ca/~acm00/070714/B.html', '', '2011-06-10 19:39:10', 10000, 131072, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 10000, 1, 'power721'),
(2024, 'Humidex', '<b>Adapted from Wikipedia, the free encyclopedia</b>\r\n<p>The humidex is a measurement used by Canadian meteorologists to reflect the combined effect of heat and humidity. It differs from the heat index used in the United States in using dew point rather than relative humidity.</p>\r\n<p>When the temperature is 30 C (86 F) and the dew point is 15 C (59 F), the humidex is 34 (note that humidex is a dimensionless number, but that the number indicates an approximate temperature in C). If the temperature remains 30 C and the dew point rises to 25 C (77 F), the humidex rises to 42.3.</p>\r\n<p>The humidex tends to be higher than the U.S. heat index at equal temperature and relative humidity.</p>\r\n<p>The current formula for determining the humidex was developed by J.M. Masterton and F.A. Richardson of Canada''s Atmospheric Environment Service in 1979.</p>\r\n<p>According to the Meteorological Service of Canada, a humidex of at least 40 causes "great discomfort" and above 45 is "dangerous." When the humidex hits 54, heat stroke is imminent.</p>\r\n<p>The record humidex in Canada occurred on June 20, 1953, when Windsor, Ontario hit 52.1. (The residents of Windsor would not have known this at the time, since the humidex had yet to be invented.) More recently, the humidex reached 50 on July 14, 1995 in both Windsor and Toronto.</p>\r\n<p>The humidex formula is as follows:</p>\r\n<pre>\r\n    humidex = temperature + h\r\n    h = (0.5555)*(e - 10.0)\r\n    e = 6.11 * exp [5417.7530 * ((1/273.16) - (1/(dewpoint+273.16)))]\r\n</pre>\r\n<p>where exp(x) is 2.718281828 raised to the exponent x.</p>\r\n<p>While humidex is just a number, radio announcers often announce it as if it were the temperature, e.g. "It''s 47 degrees out there ... [pause] .. with the humidex,". Sometimes weather reports give the temperature and dewpoint, or the temperature and humidex, but rarely do they report all three measurements. Write a program that, given any two of the measurements, will calculate the third.</p>\r\n<p>You may assume that for all inputs, the temperature, dewpoint, and humidex are all between -100 C and 100 C.</p>', '<p>Input will consist of a number of lines. Each line except the last will consist of four items separated by spaces: a letter, a number, a second letter, and a second number. Each letter specifies the meaning of the number that follows it, and will be either T, indicating temperature, D, indicating dewpoint, or H, indicating humidex. The last line of input will consist of the single letter E.</p>', '<p>For each line of input except the last, produce one line of output. Each line of output should have the form:</p>\r\n<pre>\r\nT number D number H number\r\n</pre>\r\n<p>where the three numbers are replaced with the temperature, dewpoint, and humidex. Each value should be expressed rounded to the nearest tenth of a degree, with exactly one digit after the decimal point. All temperatures are in degrees celsius.</p>', 'D:\\oj\\data\\2024', 'D:\\oj\\data\\2024', 'T 30 D 15\r\nT 30.0 D 25.0\r\nE', 'T 30.0 D 15.0 H 34.0\r\nT 30.0 D 25.0 H 42.3', '', 'http://plg1.cs.uwaterloo.ca/~acm00/070714/C.html', '', '2011-06-10 19:39:11', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 21, 'power721'),
(2025, 'Tour de France', '<p>A racing bicycle is driven by a chain connecting two sprockets. Sprockets are grouped into two clusters:  the front cluster  (typically consisting of 2 or 3 sprockets) and the rear cluster (typically consisting of between 5 and 10 sprockets).  At any time the chain connects one of the front sprockets to one of the rear sprockets.  The drive ratio -- the ratio of the angular velocity of the pedals to that of the wheels -- is n:m where n is the number of teeth on the rear sprocket and m is the number of teeth on the front sprocket. Two drive ratios  d<sub>1</sub>&lt;d<sub>2</sub> are adjacent if there is no other drive ratio  d<sub>1</sub>&lt;d<sub>3</sub>&lt;d<sub>2</sub>. The <i>spread</i> between a pair of drive ratios d<sub>1</sub>&lt;d<sub>2</sub> is their quotient:  d<sub>2</sub>/d<sub>1</sub>. You are to compute the maximum spread between two adjacent drive ratios achieved by a particular pair of front and rear clusters.</p>\r\n<p>Input consists of several test cases, followed by a line containing 0. Each test case is specified by the following input:</p>\r\n<ul>\r\n    <li>f:  the number of sprockets in the front cluster;</li>\r\n    <li>r:  the number of sprockets in the rear cluster;</li>\r\n    <li>f integers, each giving the number of teeth on one of the gears in the front cluster;</li>\r\n    <li>r integers, each giving the number of teeth on one of the gears in the rear cluster.</li>\r\n</ul>\r\n<p>You may assume that no cluster has more than 10 sprockets and that no gear has fewer than 10 or more than 100 teeth.</p>\r\n<p>For each test case, output the maximum spread rounded to two decimal places.</p>', '<p>Please Input Input Here</p>', '<p>Please Input Output Here</p>', 'D:\\oj\\data\\2025', 'D:\\oj\\data\\2025', '2 4\r\n40 50\r\n12 14 16 19\r\n0', '1.19', '', 'http://plg1.cs.uwaterloo.ca/~acm00/070714/D.html', '', '2011-06-10 19:39:11', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 14, 'power721'),
(2026, 'Texas Trip', '<p>After a day trip with his friend Dick, Harry noticed a strange pattern of tiny holes in the door of his SUV.  The local American Tire store sells fiberglass patching material only in square sheets. What is the smallest patch that Harry needs to fix his door?</p>\r\n<p>Assume that the holes are points on the integer lattice in the plane.  Your job is to find the area of the smallest square that will cover all the holes.</p>', '<p>The first line of input contains a single integer T expressed in decimal  with no leading zeroes, denoting the number of test cases to follow.  The  subsequent lines of input describe the test cases.</p>\r\n<p>Each test case begins with a single line, containing a single integer n  expressed in decimal with no leading zeroes, the number of points to  follow; each of the following n lines contains two integers x and y, both  expressed in decimal with no leading zeroes, giving the coordinates of one  of your points.</p>\r\n<p>You are guaranteed that T &lt;= 30 and that no data set contains more than 30  points.  All points in each data set will be no more than 500 units away  from (0,0).</p>\r\n<h3>&nbsp;</h3>', '<p>Print, on a single line with two decimal places of precision, the area of  the smallest square containing all of your points.  An answer will be  accepted if it lies within 0.1 of the correct answer.</p>\r\n<h3>&nbsp;</h3>', 'D:\\oj\\data\\2026', 'D:\\oj\\data\\2026', '2\r\n4\r\n-1 -1\r\n1 -1\r\n1 1\r\n-1 1\r\n4\r\n10 1\r\n10 -1\r\n-10 1\r\n-10 -1', '4.00\r\n242.00', '', 'http://plg1.cs.uwaterloo.ca/~acm00/070714/E.html', '', '2011-06-10 19:39:11', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 18, 'power721'),
(2027, 'Exchange Rates', '<p><a href="http://plg1.cs.uwaterloo.ca/~acm00/070923/million.jpg"><img src="http://plg1.cs.uwaterloo.ca/~acm00/070923/million.jpg" alt="" /></a></p>\r\n<p>Now that the Loonie is hovering about par with the Greenback, you have decided to use your $1000 entrance scholarship to engage in currency speculation.  So you gaze into a crystal ball which  predicts the closing exchange rate between Canadian and U.S. dollars for each of the next several days. On any given day, you can switch all of your money from Canadian to U.S. dollars, or vice versa, at the prevailing exchange rate, less a 3% commission, less any fraction of a cent.</p>\r\n<p>Assuming your crystal ball is correct, what''s the maximum amount of money you can have, in Canadian dollars, when you''re done?</p>\r\n<p>&nbsp;</p>', '<p>The input contains a number of test cases, followed by a line containing 0.  Each test case begins with <i>0 &lt;d &le; 365</i>, the number of days that your crystal ball can predict.  <i>d</i> lines follow, giving the price of a U.S. dollar in Canadian dollars, as a real number.</p>', '<p>For each test case, output a line giving the maximum amount of money, in Canadian dollars and cents, that it is possible to have at the end of the last prediction, assuming you may exchange money on any subset of the predicted days, in order.</p>', 'D:\\oj\\data\\2027', 'D:\\oj\\data\\2027', '3\r\n1.0500\r\n0.9300\r\n0.9900\r\n2\r\n1.0500\r\n1.1000\r\n0', '1001.60\r\n1000.00', '', '', '', '2011-06-10 19:39:11', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721'),
(2028, 'Conformity', '<p>Frosh commencing their studies at Waterloo have diverse interests, as evidenced by their desire to take various combinations of courses from among those available.</p>\r\n<p>University administrators are uncomfortable with this situation, and therefore wish to offer a <i>conformity prize</i> to frosh who choose one of the most popular combinations of courses.  How many frosh will win the prize?</p>\r\n<p>The input consists of several test cases followed by a line containing 0.  Each test case begins with an integer <i>1 &le; n &le; 10000</i>, the number of frosh.  For each frosh, a line follows containing the course numbers of five distinct courses selected by the frosh.  Each course number is an integer between 100 and 499.</p>\r\n<p>The <i>popularity</i> of a combination is the number of frosh selecting exactly the same combination of courses.  A combination of courses is considered <i>most popular</i> if no other combination has higher popularity.  For each line of input, you should output a single line giving the total number of students taking some combination of courses that is most popular. <a href="http://plg1.cs.uwaterloo.ca/~acm00/070923/0907einstein.jpg"><img alt="" src="http://plg1.cs.uwaterloo.ca/~acm00/070923/0907einstein.jpg" /></a></p>', '', '', 'D:\\oj\\data\\2028', 'D:\\oj\\data\\2028', '3\r\n100 101 102 103 488\r\n100 200 300 101 102\r\n103 102 101 488 100\r\n3\r\n200 202 204 206 208\r\n123 234 345 456 321\r\n100 200 300 400 444\r\n0', '2\r\n3', '', '', '', '2011-06-10 19:39:11', 10000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 10000, 16, 'power721'),
(2029, 'Pseudoprime numbers', '<p><img src="http://plg1.cs.uwaterloo.ca/~acm00/070923/fermat.jpg" style="width: 596px; height: 386px;" alt="" /></p>\r\n<p>&nbsp;</p>\r\n<p>Fermat''s theorem states that for any prime number <i>p</i> and for any integer <i>a &gt; 1</i>, <i>a<sup>p</sup> == a (mod p)</i>. That is, if we raise <i>a</i> to the <i>p</i>th power and divide by <i>p</i>, the remainder is <i>a</i>.  Some (but not very many) non-prime values of <i>p</i>, known as <i>base-a pseudoprimes</i>, have this property for some <i>a</i>.  (And some, known as Carmichael Numbers, are base-a pseudoprimes for all <i>a</i>.)</p>\r\n<p>Given <i>2 &lt; p &le; 1,000,000,000</i> and <i>1 &lt; a &lt; p</i>, determine whether or not <i>p</i> is a <i>base-a pseudoprime</i>.</p>\r\n<p>Input contains several test cases followed by a line containing "0 0".  Each test case consists of a line containing <i>p</i> and <i>a</i>.  For each test case, output "yes" if p is a base-a pseudoprime; otherwise output "no".</p>', '', '', 'D:\\oj\\data\\2029', 'D:\\oj\\data\\2029', '3 2\r\n10 3\r\n341 2\r\n341 3\r\n1105 2\r\n1105 3\r\n0 0', 'no\r\nno\r\nyes\r\nno\r\nyes\r\nyes', '', '', '', '2011-06-10 19:39:12', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721'),
(2030, 'Carpool', '<p><img src="http://plg1.cs.uwaterloo.ca/~acm00/070923/carpool.jpg" alt="" /></p>\r\n<p>A group of friends has just completed their CS assignments, and because  of the nice weather, they decide to go to Joe''s house for a BBQ.  Unfortunately, after all that coding, they are too tired to walk.  Fortunately, between them they have enough cars to take everyone.</p>\r\n<p>Joe remembers that he needs to stop off at the supermarket along the way to buy some burgers and pop.</p>\r\n<p>Jenn proposes that they stop at her house to get a frisbee.</p>\r\n<p>Jim decides that he doesn''t like burgers, and wants to grab a pizza along the way.</p>\r\n<p>After having spent so long in the computer lab, Jerry''s eyes have become very sensitive to sunlight, so he needs to stop at his house for his sunglasses.</p>\r\n<p>And so it goes: each person needs to run a little errand along the way. At this rate, the friends worry that it will be dark by the time they get to Joe''s house. They launch into a heated discussion to about who should go in which car to minimize the time needed for everyone to reach Joe''s house. The discussion itself, of course, wastes precious time that could be better spent at the BBQ.</p>\r\n<p>To help the group, you will write a program to settle the discussion by computing an optimal assignment of people to cars. The overall travel time is the maximum of the travel times of each car. An optimal assignment is one that minimizes the overall travel time.</p>\r\n<p>Your program will be provided with a representation of the roads in the city, in the form of distances between major landmarks. Assume that every car always travels at 60 kilometres per hour (one kilometre per minute). Each stop (at a supermarket, someone''s house, etc.) takes five minutes.</p>\r\n<p>Although the friends have many cars between them, to be nice to the  environment, they decide to take no more cars than necessary. Each car can take at most five people.</p>', '<p>The first line of input contains two integers n and m, 1 &le; n &le; 15, 1 &le; m &le; 1000, the number of people in the group and the number of roads in the city. The places that must be visited along the way are numbered 1 through n. The campus is numbered 0, and Joe''s house is numbered n+1. An additional m lines follow, each containing three integers describing a stretch of road. The first two integers are in the range 0 to n+1 inclusive, and describe the two places connected by the stretch of road. The third integer specifies the length of the stretch of road, in kilometres. A road may be taken in both directions. There is a sequence of roads connecting every place in the city to every other place.</p>', '<p>Output a single integer, giving the number of minutes required for everyone to reach Joe''s house using an optimal assignment of people to cars.</p>', 'D:\\oj\\data\\2030', 'D:\\oj\\data\\2030', '1 2\r\n0 1 15\r\n1 2 10', '30', '', '', '', '2011-06-10 19:39:12', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 14, 'power721'),
(2031, 'Friend or Foe?<font color=black>(need SPJ)</font>', '<p>Luke has a bit of trouble telling the difference between  star systems in the Rebel Alliance and those in the Empire. He has a list of the x,y,z coordinates of each system in the Empire and each in the Alliance, but at warp speed he simply has insufficient time to look up systems in his lists.</p>\r\n<p>After destroying the friendly planet Endor, Luke has had to admit he needs the help of his targeting computer.  His computer, being an early model, can only compute the truth value of the inequality</p>\r\n<pre>\r\n   ax + by + cz + d &gt; 0\r\n</pre>\r\n<p>Where x,y,z are the coordinates of the system, and a,b,c,d are real-valued coefficients.  You are to compute a,b,c,d so that the inequality holds for all systems in the Empire, and for no systems in the Alliance.</p>\r\n<p>Input consists of several test cases followed by -1 -1. Each test case first gives the number of Alliance systems, followed by a line for each system giving the integer coordinates <i>-100 &le; x,y,z &le; 100</i> of the system in 3-dimensional space.  The number of Empire systems, and the coordinates of each, follow.  The Empire and Alliance combined have at least one and no more than 200 systems. All systems have distinct coordinates.</p>\r\n<p>For each test case, output a single line containing a,b,c,d as real numbers separated by spaces.  Use enough precision to ensure that your solution is correct.  You may assume that a solution exists; if there is more than one solution, any one will do.</p>\r\n<h3><img alt="" src="http://plg1.cs.uwaterloo.ca/~acm00/070923/deathstar.jpg" /></h3>', '', '', 'D:\\oj\\data\\2031', 'D:\\oj\\data\\2031', '2\r\n-93 48 -92\r\n-62 12 -32\r\n8\r\n51 98 -61\r\n-3 72 81\r\n95 25 22\r\n89 43 -99\r\n100 -2 -96\r\n-18 45 -63\r\n36 -21 -8\r\n71 -24 42\r\n-1 -1', '83.000000 65.000000 -27.000000 -62.000000', '暂时没有SPJ.', '', '', '2011-06-10 19:39:12', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 25, 'power721'),
(2032, 'Gangs', '<p>The downtown core of Inner City is laid out as a grid, with numbered streets running north-south from 1st Street in the west to 20th Street in the east, and numbered avenues running east-west from 1st Avenue in the north to 20th Avenue in the south. The area is controlled by two gangs, the Blips and the Cruds. The boundary between their territory is the Green Line, running diagonally from the intersection of 1st Street and 1st Avenue to the intersection of 20th Street and 20th Avenue. The Blips control the area to the southwest of the Green Line, and the Cruds the area to the northeast.</p>\r\n<p>To prove their virility, the Blips go on "runs" through Crud territory, starting at 1st Avenue and 1st Street and ending at a point on the Green Line that varies from night to night. A run may return to the Green Line in between but never crosses it. A run uses avenues only in the east direction and streets only in the south direction. Thus a run can be described by a string of E''s and S''s of length 2N-2; such a run ends at Nth Street and Nth Avenue.</p>\r\n<p>The Blips judge the runs made on a given night (all of which have the same length) by how "OG" they are. A run R1 is more OG than a run R2 if and only if:</p>\r\n<ul>\r\n    <li>R2 returns to the Green Line for the first time at an earlier point   than when R1 returns to the Green Line, or</li>\r\n    <li>R1 and R2 return to the Green Line at the same point, but the   portion of R1 to that point (ignoring the initial E and final S) is   more OG than the portion of R2 to that point (also ignoring the   initial E and final S), or</li>\r\n    <li>R1 and R2 return to the Green Line at the same point and are   identical to that point, but the rest of R1 is more OG than the rest   of R2.</li>\r\n</ul>\r\n<p>Examples corresponding to these three cases:</p>\r\n<ul>\r\n    <li>EESS is more OG than ESES.</li>\r\n    <li>EEESSS is more OG than EESESS</li>\r\n    <li>EESSEESS is more OG than EESSESES.</li>\r\n</ul>\r\n<p>If all the runs of a given length are ordered according to how OG they are, then the rank of a run is its position in the resulting list. EESS has rank 1 and ESES has rank 2.</p>\r\n<p>Your task is to write a program to help the Blips plan and judge their nightly activities. The input to the program is a series of instances followed by 0 0. An instance consists of a line containing a positive integer N, representing the terminus of that night''s run (Nth Street and Nth Avenue), followed by positive integer M. The output corresponding to each instance is the run of length 2N-2  of rank M, or ERROR if there are fewer than M runs of length 2N-2.</p>', '', '', 'D:\\oj\\data\\2032', 'D:\\oj\\data\\2032', '3 1\r\n3 2\r\n3 3\r\n0 0', 'EESS\r\nESES\r\nERROR', '', 'http://plg1.cs.uwaterloo.ca/~acm00/070929/A.html', '', '2011-06-10 19:39:12', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 16, 'power721'),
(2033, 'Smeech', '<p>Professor Octastichs has invented a new programming language, Smeech.  An expression in Smeech may be a positive or negative integer, or may be of the form <tt>    (<i>p</i> <i>e<sub>1</sub></i> <i>e<sub>2</sub></i>) </tt> where <i>p</i> is a real number between 0 and 1 (inclusive) and <i>e<sub>1</sub></i> and <i>e<sub>2</sub></i> are Smeech expressions. The value represented by a Smeech expression is as follows:</p>\r\n<ul>\r\n    <li>An integer represents itself</li>\r\n    <li>With probability <i>p</i>, <tt>(<i>p</i> <i>e<sub>1</sub></i> <i>e<sub>2</sub></i>)</tt> represents <i>x+y</i> where <i>x</i> is the value of <i>e<sub>1</sub></i> and <i>y</i> is the value of <i>e<sub>2</sub></i>; otherwise it represents <i>x-y</i>.</li>\r\n</ul>\r\n<p>Given a Smeech expression, what is its expected value?</p>\r\n<p>Input consists of several Smeech expressions, one per line, followed by a line containing ().  For each expression, output its expected value to two decimal places.</p>', '<p>Please Input Input Here</p>', '<p>Please Input Output Here</p>', 'D:\\oj\\data\\2033', 'D:\\oj\\data\\2033', '7\r\n(.5 3 9)\r\n()', '7.00\r\n3.00', '', 'http://plg1.cs.uwaterloo.ca/~acm00/070929/B.html', '', '2011-06-10 19:39:12', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 16, 'power721'),
(2034, 'The Dragon of Loowater', '<p>Once upon a time, in the Kingdom of Loowater, a minor nuisance turned into a major problem. <img align="right" src="http://plg1.cs.uwaterloo.ca/~acm00/070929/Canadagoose_bw.GIF" alt="" /></p>\r\n<p>The shores of Rellau Creek in central Loowater had always been a prime breeding ground for geese. Due to the lack of predators, the geese population was out of control. The people of Loowater mostly kept clear of the geese. Occasionally, a goose would attack one of the people, and perhaps bite off a finger or two, but in general, the people tolerated the geese as a minor nuisance.</p>\r\n<p>One day, a freak mutation occurred, and one of the geese spawned a multi-headed fire-breathing dragon. When the dragon grew up, he threatened to burn the Kingdom of Loowater to a crisp. Loowater had a major problem. The king was alarmed, and called on his knights to slay the dragon and save the kingdom.</p>\r\n<p>The knights explained: "To slay the dragon, we must chop off all its heads. Each knight can chop off one of the dragon''s heads. The heads of the dragon are of different sizes. In order to chop off a head, a knight must be at least as tall as the diameter of the head. The knights'' union demands that for chopping off a head, a knight must be paid a wage equal to one gold coin for each centimetre of the knight''s height."</p>\r\n<p>Would there be enough knights to defeat the dragon? The king called on his advisors to help him decide how many and which knights to hire. After having lost a lot of money building Mir Park, the king wanted to minimize the expense of slaying the dragon. As one of the advisors, your job was to help the king. You took it very seriously: if you failed, you and the whole kingdom would be burnt to a crisp!</p>', '<p>The input contains several test cases. The first line of each test case contains two integers between 1 and 20000 inclusive, indicating the number <i>n</i> of heads that the dragon has, and the number <i>m</i> of knights in the kingdom. The next <i>n</i> lines each contain an integer, and give the diameters of the dragon''s heads, in centimetres. The following <i>m</i> lines each contain an integer, and specify the heights of the knights of Loowater, also in centimetres.</p>\r\n<p>The last test case is followed by a line containing:</p>\r\n<pre>\r\n0 0\r\n</pre>', '<p>For each test case, output a line containing the minimum number of gold coins that the king needs to pay to slay the dragon. If it is not possible for the knights of Loowater to slay the dragon, output the line:</p>\r\n<pre>\r\nLoowater is doomed!\r\n</pre>', 'D:\\oj\\data\\2034', 'D:\\oj\\data\\2034', '2 3\r\n5\r\n4\r\n7\r\n8\r\n4\r\n2 1\r\n5\r\n5\r\n10\r\n0 0', '11\r\nLoowater is doomed!', '', 'http://plg1.cs.uwaterloo.ca/~acm00/070929/C.html', '', '2011-06-10 19:39:12', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 17, 'power721');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(2035, 'Tournament<font color=black>(need SPJ)</font>', '<p>Every September, the Kingdom of Loowater holds a jousting tournament. In each of a series of event, a pair of knights attempt to knock each other from their respective horses.  The winning knight is paired  with another, while the loser is elimnated.  This process continues until all but one knight is eliminated; this knight is declared champion.</p>\r\n<p>The tournament schedule is organized so that no knight needs  to compete in more than <i>e</i> events to be champion, for the minimum possible <i>e</i> given <i>k</i>,  the number of knights.  In order to construct the schedule, it may be necessary to identify several knights who compete in fewer than <i>e</i> events; these knights are said to be awarded a <i>bye</i> and are excluded from the first round of competition.</p>\r\n<p>The first round of competition involves pairing as many knights as possible among those who are not awarded a bye.  The competition is more interesting if the knights in each pair are as evenly matched in ability as possible.  You are to determine which knights should be awarded a bye so as to make the first round as interesting as possible.</p>\r\n<p>Standard input consists of several test cases followed by a line containing 0.  Each test case begins with an integer <i>1 &lt; k  &le; 2500 </i>, the number of knights.  <i>i</i> lines follow, each giving the name and ability of a knight.  The name is a string of lower case letters not longer than 20; the ability is a real number.</p>\r\n<p>The <i>mismatch</i> between knights with abilities <i>a</i> and <i>b</i> respectively is defined to be <i>(a-b)<sup>2</sup></i>. For each test case, output the names of the knights to be given a bye such that the sum of all mismatch values for pairs of knights competing in the first round is minimized.  If there are several solutions, any will do.  Output an empty line between test cases.</p>', '<p>Please Input Input Here</p>', '<p>Please Input Output Here</p>', 'D:\\oj\\data\\2035', 'D:\\oj\\data\\2035', '3\r\ngallahad 10\r\nlancelot 11\r\nmccartney 2\r\n0', 'mccartney', '暂时没有SPJ.', 'http://plg1.cs.uwaterloo.ca/~acm00/070929/D.html', '', '2011-06-10 19:39:12', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 20, 'power721'),
(2036, 'Wedding<font color=black>(need SPJ)</font>', '<p>Up to thirty couples will attend a wedding feast, at which they will be  seated on either side of a long table. The bride and groom sit at one  end, opposite each other, and the bride wears an elaborate headdress  that keeps her from seeing people on the same side as her. It is  considered bad luck to have a husband and wife seated on the same side  of the table. Additionally, there are several pairs of people conducting  adulterous relationships (both different-sex and same-sex relationships  are possible), and it is bad luck for the bride to see both members of  such a pair.  Your job is to arrange people at the table so as to avoid any bad luck.</p>\r\n<p>The input consists of a number of test cases, followed by a line  containing 0 0.  Each test case gives <i>n</i>, the number of couples, followed  by the number of adulterous pairs, followed by the pairs, in  the form "4h 2w" (husband from couple 4, wife from couple 2), or "10w  4w", or "3h 1h".  Couples are numbered from 0 to <i>n-1</i> with the bride and groom being 0w and 0h.  For each case, output a single line containing  a list of the people that should be seated on the same side as the  bride.  If there are several solutions, any one will do.  If there is no solution, output a line containing "bad luck".</p>', '<p>Please Input Input Here</p>', '<p>Please Input Output Here</p>', 'D:\\oj\\data\\2036', 'D:\\oj\\data\\2036', '10 6\r\n3h 7h\r\n5w 3w\r\n7h 6w\r\n8w 3w\r\n7h 3w\r\n2w 5h\r\n0 0', '1h 2h 3w 4h 5h 6h 7h 8h 9h', '暂时没有SPJ.', 'http://plg1.cs.uwaterloo.ca/~acm00/070929/E.html', '', '2011-06-10 19:39:12', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 15, 'power721'),
(2037, 'Trainsorting', '<p>Erin is an engineer. She drives trains. She also arranges the cars within each train. She prefers to put the cars in decreasing order of weight, with the heaviest car at the front of the train.</p>\r\n<p>Unfortunately, sorting train cars is not easy. One cannot simply pick up a car and place it somewhere else. It is impractical to insert a car within an existing train. A car may only be added to the beginning and end of the train.</p>\r\n<p>Cars arrive at the train station in a predetermined order. When each car arrives, Erin can add it to the beginning or end of her train, or refuse to add it at all. The resulting train should be as long as possible, but the cars within it must be ordered by weight.</p>\r\n<p>Given the weights of the cars in the order in which they arrive, what is the longest train that Erin can make?</p>', '<p>The first line contains an integer 0 &lt;= n &lt;= 2000, the number of cars. Each of the following n lines contains a non-negative integer giving the weight of a car. No two cars have the same weight.</p>', '<p>Output a single integer giving the number of cars in the longest train that can be made with the given restrictions.</p>', 'D:\\oj\\data\\2037', 'D:\\oj\\data\\2037', '3\r\n1\r\n2\r\n3', '3', '', 'http://plg1.cs.uwaterloo.ca/~acm00/080615/A.html', '', '2011-06-10 19:39:13', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 16, 'power721'),
(2038, 'Classified', '<p>Classification levels like Secret and Top Secret are well-known features of military documents. Less well known are <em>integrity levels</em>, which correspond to <em>how reliable</em> information is.</p>\r\n<p>In the <b>Dynamic Biba integrity model</b>, every user and every document is assigned an integrity level. If a user writes to a document that has a higher integrity level than the user does, the document&rsquo;s integrity level goes down. Similarly, if a user reads a document that has a lower integrity level than the user does, the user&rsquo;s integrity level goes down.</p>\r\n<p>Your job is to keep track of the integrity levels of a number of users and documents. Complicating the matter is the fact that integrity levels aren&rsquo;t simply numbers; a document might contain very trusworthy information about operations in Afganistan, while at the same time containing less trustworthy information about operations in Iraq.</p>\r\n<p>Integrity levels are speficied by arbitrary labels, along with rules of the form <i>A</i> &rarr; <i>B</i>, indicating that integrity level <i>A</i> is at most as trustworthy as integrity level <i>B</i>. The rules satisfy a number of conditions:</p>\r\n<ul class="itemize">\r\n    <li class="li-itemize">For any label <i>A</i>, <i>A</i> &rarr; <i>A</i> is always true, and need not be specified.</li>\r\n    <li class="li-itemize">If <i>A</i> and <i>B</i> are two different labels, then it can never be the case that both <i>A</i> &rarr; <i>B</i> and <i>B</i> &rarr; <i>A</i> are true. However, it <em>can</em> be the case that neither <i>A</i> &rarr; <i>B</i> nor <i>B</i> &rarr; <i>A</i> are true.</li>\r\n    <li class="li-itemize">For any labels <i>A</i>, <i>B</i>, and <i>C</i>, if it is the case that <i>A</i> &rarr; <i>B</i> and <i>B</i> &rarr; <i>C</i> are both true, you can conclude (without it being explicitly specified) that <i>A</i> &rarr; <i>C</i> is true.</li>\r\n    <li class="li-itemize">For any two labels <i>A</i> and <i>B</i>, there is a label <i>G</i> = <i>glb</i>(<i>A</i>,<i>B</i>) called the <em>greatest lower bound</em> of <i>A</i> and <i>B</i> such that <i>G</i> &rarr; <i>A</i> and <i>G</i> &rarr; <i>B</i> are both true. Further, for any label <i>L</i> such that <i>L</i> &rarr; <i>A</i> and <i>L</i> &rarr; <i>B</i> are both true, it is also the case that <i>L</i> &rarr; <i>G</i> is true.</li>\r\n</ul>\r\n<p>You will be given as input the labels and rules defining the integrity levels, as well as the initial integrity level of a number of users and a number of documents. The format will be as follows:</p>\r\n<ul class="itemize">\r\n    <li class="li-itemize">The first line of the input will contain five integers separated by spaces. These integers are the number of integrity levels ?, the number of rules <i>r</i>, the number of users <i>u</i>, the number of documents <i>d</i>, and the number of actions <i>a</i>, in that order. None of these five integers will be greater than 10000. The integrity levels are numbered from 1 to ?; the users from 1 to <i>u</i>, and the documents from 1 to <i>d</i>.</li>\r\n    <li class="li-itemize">The next <i>r</i> lines specify the rules. Each line will consist of two integers between 1 and ?, separated by a space. The line &ldquo;<tt><i>x</i></tt><tt> </tt><tt><i>y</i></tt>&rdquo; indicates that integrity level <i>x</i> is at most as trustworthy as integrity level <i>y</i> (i.e. <i>x</i> &rarr; <i>y</i>)</li>\r\n    <li class="li-itemize">The next <i>u</i> lines specify the initial integrity levels for user number 1, 2, &hellip;, <i>u</i>. Each line will be an integrity level number, from 1 to ?.</li>\r\n    <li class="li-itemize">The next <i>d</i> lines specify the initial integrity levels for document number 1, 2, &hellip;, <i>d</i>. Each line will be an integrity level number, from 1 to ?.</li>\r\n    <li class="li-itemize">The next <i>a</i> lines specify the actions; each action will be of one of the following two forms (here, <em>user</em> is an integer between 1 and <i>u</i>, and <em>document</em> is an integer between 1 and <i>d</i>):\r\n    <ul class="itemize">\r\n        <li class="li-itemize"><tt><em>user</em></tt><tt> reads </tt><tt><em>document</em></tt>: The given user is reading the given document. The integrity level for the user should be changed to the <i>glb</i> of the old integrity level for the user and the integrity level of the document. Output the new integrity level for the user on a line by itself.</li>\r\n        <li class="li-itemize"><tt><em>user</em></tt><tt> writes </tt><tt><em>document</em></tt>: The given user is writing to the given document. The integrity level for the document should be changed to the <i>glb</i> of the integrity level for the user and the old integrity level of the document. Output the new integrity level for the document on a line by itself.</li>\r\n    </ul>\r\n    </li>\r\n</ul>', '<p>Please Input Input Here</p>', '<p>Please Input Output Here</p>', 'D:\\oj\\data\\2038', 'D:\\oj\\data\\2038', '9 11 2 3 5\r\n6 9\r\n2 6\r\n9 4\r\n7 5\r\n3 8\r\n7 2\r\n5 3\r\n8 4\r\n5 1\r\n6 1\r\n1 8\r\n4\r\n2\r\n5\r\n9\r\n8\r\n1 reads 3\r\n1 writes 2\r\n2 reads 2\r\n1 reads 1\r\n2 writes 1', '8\r\n6\r\n2\r\n5\r\n7', '', 'http://plg1.cs.uwaterloo.ca/~acm00/080615/B.html', '', '2011-06-10 19:39:13', 10000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 10000, 17, 'power721'),
(2039, 'Hot Spot', '<p>Hot Spot is a single player game played on a 4 by 4 game board. The purpose of the game is to move a red robot from its current location on the board to the top left corner. The game board may also contain green and blue robots. Each square of the game board can be occupied by no more than one robot at any time.</p>\r\n<p>A robot may move in one of two ways:</p>\r\n<ol>\r\n    <li>If two robots are adjacent horizontally or vertically (but not diagonally), one of them may jump over the other to the immediately adjacent square, provided that square is empty. For example, if robot a is immediately to the left of robot b, robot a may jump to the square immediately to the right of robot b.</li>\r\n    <li>If three robots are adjacent in a line (again not diagonally), one of them may jump over the other two, provided the destination square is empty. For example, if robot b is immediately to the right of robot a and robot c is immediately to the right of robot b, robot a may jump to the square immediately to the right of robot c.</li>\r\n</ol>\r\n<p>Every jump only changes the positions of the existing robots; robots are never removed from or added to the game board.</p>\r\n<p>A blue robot is never allowed to be adjacent horizontally or vertically to another blue robot or to the red robot.</p>\r\n<p>Given the initial configuration of the game board, determine the minimum number of jumps required to move the red robot into the top left corner.</p>', '<p>The input specifies the initial position of the board using four lines, each containing four characters. Each character may be either R, indicating the red robot, B, indicating a blue robot, G, indicating a green robot, or a period (.), indicating an empty square.</p>', '<p>Output a single line containing a single integer, the minimum number of jumps required for the red robot to reach the top left square of the game board.</p>\r\n<h3>&nbsp;</h3>', 'D:\\oj\\data\\2039', 'D:\\oj\\data\\2039', '.GR.\r\n....\r\n....\r\n....', '1', '', 'http://plg1.cs.uwaterloo.ca/~acm00/080615/C.html', '', '2011-06-10 19:39:13', 10000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 10000, 19, 'power721'),
(2040, 'Snakes and Ladders', '<p>Snakes and Ladders is a board game played on a 10 by 10 grid. The squares of the grid are numbered 1 to 100. Each player has a token which is placed on the square numbered 1 at the beginning of the game. Players take turns rolling a die which provides a random number between 1 and 6. After rolling, the player advances his or her token the number of squares shown on the die. If this would put the token past the square numbered 100, the token is advanced to 100. After advancing, if the token is on a square containing the bottom of a ladder, the token must be moved to the square containing the top of the ladder. Similarly, if the token is on a square containing the mouth of a snake, the token must be moved to the square containing the tail of the snake. No square contains more than one endpoint of any snake or ladder. The token numbered 100 does not contain the mouth of a snake or the bottom of a ladder. A player wins when his or her token reached the square numbered 100. At that point, the game ends.</p>\r\n<p>Given the configuration of the snakes and ladders on a game board and a sequence of die rolls, you are to determine the positions of all the tokens on the game board. The sequence of die rolls need not be complete (i.e. it need not lead to any player winning). The sequence of die rolls may also continue after the game is over; in this case, the die rolls after the end of the game should be ignored.</p>', '<p>The first line contains three positive integers: the number a of players, the number b of snakes or ladders, and the number c of die rolls. There will be no more than 1000000 players and no more than 1000000 die rolls. Each of the next b lines contains two integers specifying a snake or ladder. The first integer indicates the square containing the mouth of the snake or the bottom of the ladder. The second integer indicates the square containing the tail of the snake or the top of the ladder. The following c lines each contain one integer giving number rolled on the die.</p>', '<p>For each player, output a single line containing a string of the form <tt>Position of player N is P.</tt>, where <tt>N</tt> is replaced with the number of the player and <tt>P</tt> is replaced with the final position of the player.</p>\r\n<h3>&nbsp;</h3>', 'D:\\oj\\data\\2040', 'D:\\oj\\data\\2040', '3 1 3\r\n4 20\r\n3\r\n4\r\n5', 'Position of player 1 is 20.\r\nPosition of player 2 is 5.\r\nPosition of player 3 is 6.', '', 'http://plg1.cs.uwaterloo.ca/~acm00/080615/D.html', '', '2011-06-10 19:39:13', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 34, 'power721'),
(2041, 'Balance', '<p>A sailboat has many forces acting on it. This allows it to sail in many different directions, even if the wind is not blowing in the desired direction. In order for the boat to be easily controlled, however, certain forces must be balanced.</p>\r\n<p>Suppose the wind is blowing from the north and the boat is facing west. Above the water, the blowing wind hits the sails, and because of the way that they are angled, pushes the boat to the southwest. The keel extends deep below the water. The water resistance on the keel creates a counterforce pushing the boat northward. Ideally, the northward force  on the keel will counteract the southward component of the force on the sails, so that the boat will move to the west.</p>\r\n<p>A problem can arise if the centre of the sails (called the Centre of Effort, or CE) is not directly above the centre of the keel (called the Centre of Lateral Resistance, or CLR). In general, the boat can pivot about the centre of the keel. If the sails are too far forward of the keel, the wind will push the bow (the front) of the boat southwards, and the boat will turn towards the south. If the sails are too far aft of (behind) the keel, the wind will push the stern (the back) southwards, and the boat will turn towards the north. Ideally, the sails and keel are balanced so that the boat sails in a straight line.</p>\r\n<p>In this problem, you will examine a side view of the boat to determine whether the CE is above the CLR. The CE is defined as the centroid of the part of the boat above the waterline. The CLR is defined as the centroid of the part of the boat below the waterline. The centroid of a polygon is the unique point such that any line passing through it divides the polygon into two halves of equal area.</p>', '<p>The first line of input will contain a single integer n specifying the number of points along the outline of the side view of the boat. The following n lines will each contain two integers: the x and y coordinate of a point along the outline. The points will be given in order along the outline. The x axis (i.e. the line y = 0) represents the waterline. Assume that the boat faces in the direction of increasing x coordinates.</p>', '<p>If the CE is forward of the CLR, print the line:</p>\r\n<p><tt>CE is forward of CLR by N units.</tt></p>\r\n<p>If the CE is aft of (behind) the CLR, print the line:</p>\r\n<p><tt>CE is aft of CLR by N units.</tt></p>\r\n<p>In both cases, replace the <tt>N</tt> with the difference in the x coordinates of the CE and CLR to two decimal places. If the x coordinates of the CE and CLR are equal, print the line:</p>\r\n<p><tt>Balanced.</tt></p>', 'D:\\oj\\data\\2041', 'D:\\oj\\data\\2041', '7\r\n0 1\r\n2 3\r\n4 1\r\n4 -3\r\n2 -3\r\n2 -1\r\n0 -1', 'CE is aft of CLR by 0.50 units.', '', 'http://plg1.cs.uwaterloo.ca/~acm00/080615/E.html', '', '2011-06-10 19:39:14', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 18, 'power721'),
(2042, 'Laurel Creek', '<p>Laurel Creek is a perilous river that divides the campus into two halves and contains dangerous inhabitants such as geese and beavers. Your task in this problem is to find a way to cross the river without getting wet.</p>\r\n<p>To do so, you will take advantage of several tree stumps in the middle of the river. A tree stump provides a safe place for you to stand as you ponder your next move. To get from one stump to another, you walk along logs that connect the stumps.</p>\r\n<p>In cases where no log connects to the stump you wish to reach, all is not lost. You may pick up any log adjacent to the stump on which you are standing and put it down somewhere else so that it leads to the stump you wish to reach. In order for a log to be considered adjacent to a stump, it must be oriented in the appropriate direction; for example the log in <tt>S-S</tt> is adjacent to the two stumps, but the log in <tt>S|S</tt> is not considered adjacent to the two stumps.</p>\r\n<p>Each tree stump is located at a point on a square grid. Two stumps are designated as the beginning and end point of the crossing. Any two stumps lying in the same row or column of the grid may be connected by a log. At any point in time, you may perform one of the following legal moves:</p>\r\n<ul>\r\n    <li>Traverse a log adjacent to the tree stump you are standing on     to the tree stump at the opposite end of the log.</li>\r\n    <li>Pick up a log adjacent to the tree stump you are standing on.     You may not hold more than one log at a time.</li>\r\n    <li>Put down the log that you are holding so that it connects     the stump you are standing on to some other stump. The log must     be of precisely the right length to reach the other stump.     The log must rest in the water: you may not use a log to connect     two stumps if there is a third stump directly between them,     or if the log would cross some other log already in the water.</li>\r\n</ul>', '<p>The first line of input contains one integer specifying the number of test cases to follow. Each test case begins with a line containing two integers 1 &lt;= <i>r</i> &lt;= 15 and 1 &lt;= <i>c</i> &lt;= 15 specifying the number of rows and columns in the grid. Each of the next <i>r</i> lines of input contains <i>c</i> characters with the following meaning. The character <tt>S</tt> denotes a stump. The characters <tt>B</tt> and <tt>E</tt> denote the beginning and end stumps of the crossing, respectively.  A consecutive sequence of <tt>-</tt> or <tt>|</tt> characters in a line denotes a single log whose length is proportional to the number of symbols. The character <tt>.</tt> denotes an empty grid point containing only water. There will never be more than fifteen stumps in the river.</p>', '<p>For each test case, output a line containing a single integer, the minimum number of moves in which the end stump can be reached from the initial configuration. If it is not possible to reach the end stump from the initial configuration, output a line containing the integer 0.</p>\r\n<h3>&nbsp;</h3>', 'D:\\oj\\data\\2042', 'D:\\oj\\data\\2042', '1\r\n7 11\r\n....S......\r\n....|......\r\nB---S......\r\n...........\r\n...........\r\n...........\r\n....S.S...E', '10', '', 'http://plg1.cs.uwaterloo.ca/~acm00/080927/A.html', '', '2011-06-10 19:39:16', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 15, 'power721'),
(2043, 'Rocket Stages', '<p>Many rockets are made up of several stages to increase efficiency. When the fuel in one stage burns up, the stage can be discarded, reducing the weight of the remaining rocket. The first stage needs a strong engine capable of lifting the whole rocket, while later stages can have smaller engines.</p>\r\n<p>In this problem, you will determine which stages to put together to maximize the upward velocity of the rocket when all the fuel has burned.</p>\r\n<p>For each stage, you will be given:</p>\r\n<ul>\r\n    <li>the mass <i>S</i> of the stage, in kilograms, when it is empty (without fuel),</li>\r\n    <li>the mass <i>L</i> of the fuel, in kilograms, in the stage,</li>\r\n    <li>the thrust <i>T</i>, in newtons, provided by the engine in the stage, and</li>\r\n    <li>the fuel consumption <i>C</i>, in kilograms per second, of the stage.</li>\r\n</ul>\r\n<p>Assume that the rocket points straight upward for the duration of the flight. Two forces act on the rocket: the force of the engine, which is <i>T</i> newtons upwards, and the force of gravity, which is 9.8 <i>M</i> newtons downwards, where <i>M</i> is the total mass of the rocket in kilograms, including fuel. The acceleration of the rocket is <i>F</i> divided by <i>M</i> metres per second per second upwards, where <i>F</i> is the total net force acting on the rocket in newtons, and <i>M</i> is the total mass of the rocket in kilograms, including fuel. As soon as a stage finishes burning, it is immediately discarded and the next stage starts to burn. The final velocity of the rocket is the integral of the net acceleration (due to gravity and the engine) over time.</p>\r\n<p>Due to safety regulations, the net acceleration of the rocket is never allowed to be downwards, until the rocket runs out of fuel.</p>\r\n<p>Also due to safety regulations, the total mass of the rocket cannot exceed 10000 kilograms.</p>\r\n<p>The rocket must have at least one stage.</p>\r\n<p>&nbsp;</p>\r\n<h3>&nbsp;</h3>', '<p>The first line of input contains one integer specifying the number of test cases to follow. Each test case begins with a line containing an integer <i>N</i>, the number of rocket stages in the current test case. There will be no more than 1000 stages. This line is followed by <i>N</i> lines, one for each stage. Each of these lines contains the four integers <i>S</i>, <i>L</i>, <i>T</i>, <i>C</i> that describe a stage, as explained above. Each of these integers can be represented by a 32-bit unsigned binary number. The order of the stages as listed must be preserved but some stages (including, possibly, the first stage) may be left out of the rocket.  The stage listed first is at the top of the rocket (and will burn last). For every test case in the input, it is always possible to construct at least one rocket satisfying all the requirements of the problem statement.</p>\r\n<h3>&nbsp;</h3>', '<p>For each test case, output a line containing a single integer, the maximum possible speed in metres per second of the rocket when it has finished burning, rounded to the nearest metre per second.</p>', 'D:\\oj\\data\\2043', 'D:\\oj\\data\\2043', '1\r\n1\r\n9999 1 1000000 1', '90', '', 'http://plg1.cs.uwaterloo.ca/~acm00/080927/B.html', '', '2012-03-28 01:01:00', 10000, 131072, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 10000, 21, 'power721'),
(2044, 'Virtual Friends', '<p>These days, you can do all sorts of things online. For example, you can use various websites to make virtual friends. For some people, growing their social network (their friends, their friends'' friends, their friends'' friends'' friends, and so on), has become an addictive hobby. Just as some people collect stamps, other people collect virtual friends.</p>\r\n<p>Your task is to observe the interactions on such a website and keep track of the size of each person''s network.</p>\r\n<p>Assume that every friendship is mutual. If Fred is Barney''s friend, then Barney is also Fred''s friend.</p>', '<p>The first line of input contains one integer specifying the number of test cases to follow. Each test case begins with a line containing an integer <i>F</i>, the number of friendships formed, which is no more than 100 000. Each of the  following <i>F</i> lines contains the names of two people  who have just become friends, separated by a space. A name is a string of 1 to 20 letters (uppercase or lowercase).</p>', '<pre>\r\nWhenever a friendship is formed, print a line containing\r\none integer, the number of people in the social\r\nnetwork of the two people who have just become friends.\r\n\r\n\r\n\r\n</pre>', 'D:\\oj\\data\\2044', 'D:\\oj\\data\\2044', '1\r\n3\r\nFred Barney\r\nBarney Betty\r\nBetty Wilma', '2\r\n3\r\n4', '', 'http://plg1.cs.uwaterloo.ca/~acm00/080927/C.html', '', '2011-07-31 10:31:59', 10000, 131072, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 10000, 54, 'power721'),
(2045, 'Dominos', '<p>Dominos are lots of fun. Children like to stand the tiles on their side in long lines. When one domino falls, it knocks down the next one, which knocks down the one after that, all the way down the line. However, sometimes a domino fails to knock the next one down. In that case, we have to knock it down by hand to get the dominos falling again.</p>\r\n<p>Your task is to determine, given the layout of some domino tiles, the minimum number of dominos that must be knocked down by hand in order for all of the dominos to fall.</p>', '<p>The first line of input contains one integer specifying the number of test cases to follow. Each test case begins with a line containing two integers, each no larger than 100 000. The first integer <i>n</i> is the number of domino tiles and the second integer <i>m</i> is the number of lines to follow in the test case. The domino tiles are numbered from 1 to <i>n</i>. Each of the following lines contains two integers <i>x</i> and <i>y</i> indicating that if domino number <i>x</i> falls, it will cause domino number <i>y</i> to fall as well.</p>', '<p>For each test case, output a line containing one integer, the minimum number of dominos that must be knocked over by hand in order for all the dominos to fall.</p>\r\n<h3>&nbsp;</h3>', 'D:\\oj\\data\\2045', 'D:\\oj\\data\\2045', '1\r\n3 2\r\n1 2\r\n2 3', '1', '', 'http://plg1.cs.uwaterloo.ca/~acm00/080927/D.html', '', '2011-06-10 19:39:16', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 14, 'power721'),
(2046, 'Logo', '<p>Logo is a programming language built around a turtle. Commands in the language cause the turtle to move. The turtle has a pen attached to it. As the turtle moves, it draw lines on the page. The turtle can be programmed to draw interesting pictures.</p>\r\n<p>We are interested in making the turtle draw a picture, then return to the point that it started from. For example, we could give the turtle the following program:</p>\r\n<p><tt>fd 100 lt 120 fd 100 lt 120 fd 100</tt></p>\r\n<p>The command <tt>fd</tt> causes the turtle to move forward by the specified number of units. The command <tt>lt</tt> causes the turtle to turn left by the specified number of degrees. Thus the above commands cause the turtle to draw an equilateral triangle with sides 100 units long. Notice that after executing the commands, the turtle ends up in the same place as it started. The turtle understands two additional commands. The command <tt>bk</tt> causes the turtle to move backward by the specified number of units. The command <tt>rt</tt> causes the turtle to turn right by the specified number of degrees.</p>\r\n<p>After executing many commands, the turtle can get lost, far away from its starting position. Your task is to determine the straight-line distance from the turtle''s position at the end of its journey back to the position that it started from.</p>', '<p>The first line of input contains one integer specifying the number of test cases to follow. Each test case starts with a line containing one integer, the number of commands to follow. The commands follow, one on each line. Each test case will contain no more than 1000 commands.</p>', '<p>For each test case, output a line containing a single integer, the distance rounded to the nearest unit.</p>', 'D:\\oj\\data\\2046', 'D:\\oj\\data\\2046', '1\r\n5\r\nfd 100\r\nlt 120\r\nfd 100\r\nlt 120\r\nfd 100', '0', '', 'http://plg1.cs.uwaterloo.ca/~acm00/080927/E.html', '', '2011-06-10 19:39:17', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 27, 'power721'),
(2047, 'Cranes', '<p>A crane is a wonderful tool for putting up a building. It makes the job go very quickly. When the building must go up even faster, more than one crane can be used. However, when there are too many cranes working on the same building, it can get dangerous. As the cranes spins around, it can bump into another crane if the operator is not careful. Such an accident could cause the cranes to fall over, possibly causing major damage. Therefore, safety regulations require cranes to be spaced far enough apart so that it is impossible for any part of a crane to touch any part of any other crane. Unfortunately, these regulations limit the number of cranes that can be used on the construction site, slowing down the pace of construction. Your task is to place the cranes on the construction site while respecting the safety regulations.</p>\r\n<p>The construction site is laid out as a square grid. Several places on the grid have been marked as possible crane locations. The arm of each crane has a certain length <i>r</i>, and can rotate around the location of the crane. The crane covers the entire area that is no more than <i>r</i> units away from the location of the crane. You are to place the cranes to maximize the total area covered by all the cranes.</p>', '<p>The first line of input contains one integer specifying the number of test cases to follow. Each test case begins with a line containing an integer <i>C</i>, the number of possible locations where a crane could be placed. There will be no more than 15 such locations. Each of the following <i>C</i> lines contains three integers <i>x</i>, <i>y</i>, and <i>r</i>, all between -10 000 and 10 000 inclusive. The first two integers are the grid coordinates of the location, and the third integer is the length of the arm of the crane that can be placed at that location.</p>', '<p>For each test case, find the maximum area <i>A</i> that can be covered by cranes, and output a line containing a single integer <i>B</i> such that <i>A</i> = <i>B</i> &times; &pi; .</p>', 'D:\\oj\\data\\2047', 'D:\\oj\\data\\2047', '1\r\n3\r\n0 0 4\r\n5 0 4\r\n-5 0 4', '32', '', '', '', '2011-06-10 19:39:17', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 17, 'power721'),
(2048, 'WiFi', '<p>One day, the residents of Main Street got together and decided that they would install wireless internet on their street, with coverage for every house. Now they need your help to decide where they should place the wireless access points. They would like to have as strong a signal as possible in every house, but they have only a limited budget for purchasing access points. They would like to place the available access points so that the maximum distance between any house and the access point closest to it is as small as possible.</p>\r\n<p>Main Street is a perfectly straight road. The street number of each house is the number of metres from the end of the street to the house. For example, the house at address 123 Main Street is exactly 123 metres from the end of the street.</p>\r\n<h3>&nbsp;</h3>', '<p>The first line of input contains an integer specifying the number of test cases to follow. The first line of each test case contains two positive integers <i>n</i>, the number of access points that the residents can buy, and <i>m</i>, the number of houses on Main Street. The following <i>m</i> lines contain the house numbers of the houses on Main Street, one house number on each line. There will be no more than 100 000 houses on Main Street, and the house numbers will be no larger than one million.</p>', '<p>For each test case, output a line containing one number, the maximum distance between any house and the access point nearest to it. Round the number to the nearest tenth of a metre, and output it with exactly one digit after the decimal point.</p>', 'D:\\oj\\data\\2048', 'D:\\oj\\data\\2048', '1\r\n2 3\r\n1\r\n3\r\n10', '1.0', '', '', '', '2011-06-10 19:39:17', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 16, 'power721'),
(2049, 'Exact Change', '<ul>\r\n    <li>Seller: That will be fourteen dollars.</li>\r\n    <li>Buyer: Here''s a twenty.</li>\r\n    <li>Seller: Sorry, I don''t have any change.</li>\r\n    <li>Buyer: OK, here''s a ten and a five. Keep the change.</li>\r\n</ul>\r\n<p>When travelling to remote locations, it is often helpful to bring cash, in case you want to buy something from someone who does not accept credit or debit cards. It is also helpful to bring a variety of denominations in case the seller does not have change. Even so, you may not have the exact amount, and will have to pay a little bit more than full price. The same problem can arise even in urban locations, for example with vending machines that do not return change.</p>\r\n<p>Of course, you would like to minimize the amount you pay (though you must pay at least as much as the value of the item). Moreover, while paying the minimum amount, you would like to minimize the number of coins or bills that you pay out.</p>', '<p>The first line of input contains one integer specifying the number of test cases to follow. Each test case begins with a line containing an integer, the price in cents of the item you would like to buy. The price will not exceed 10 000 cents (i.e., $100). The following line contains a single integer <i>n</i>, the number of bills and coins that you have. The number <i>n</i> is at most 100. The following <i>n</i> lines  each contain one integer, the value in cents of each bill or coin that you have. Note that the denominations can be any number of cents; they are not limited to the values of coins and bills that we usually use in Canada. However, no bill or coin will have a value greater than 10 000 cents ($100). The total value of your bills and coins will always be equal to or greater than the price of the item.</p>', '<p>For each test case, output a single line containing two integers: the total amount paid (in cents), and the total number of coins and bills used.</p>', 'D:\\oj\\data\\2049', 'D:\\oj\\data\\2049', '1\r\n1400\r\n3\r\n500\r\n1000\r\n2000', '1500 2', '', '', '', '2011-06-10 19:39:17', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 17, 'power721'),
(2050, 'Dominos 2', '<p>Dominos are lots of fun. Children like to stand the tiles on their side in long lines. When one domino falls, it knocks down the next one, which knocks down the one after that, all the way down the line. However, sometimes a domino fails to knock the next one down. In that case, we have to knock it down by hand to get the dominos falling again.</p>\r\n<p>Given a set of dominos that are knocked down by hand, your task is to determine the total number of dominos that fall.</p>', '<p>The first line of input contains one integer specifying the number of test cases to follow. Each test case begins with a line containing three integers <i>n, m, l</i> no larger than 10 000, followed by <i>m</i>+<i>l</i> additional lines. The first integer <i>n</i> is the number of domino tiles. The domino tiles are numbered from 1 to <i>n</i>. Each of the <i>m</i> lines after the first line  contains two integers <i>x</i> and <i>y</i> indicating that if domino number <i>x</i> falls, it will cause domino number <i>y</i> to fall as well. Each of the following <i>l</i> lines contains a single integer <i>z</i> indicating that the domino numbered <i>z</i> is knocked over by hand.</p>', '<p>For each test case, output a line containing one integer, the total number of dominos that fall over.</p>', 'D:\\oj\\data\\2050', 'D:\\oj\\data\\2050', '1\r\n3 2 1\r\n1 2\r\n2 3\r\n2', '2', '', '', '', '2011-06-10 19:39:17', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 16, 'power721'),
(2051, 'Logo 2', '<p>Logo is a programming language built around a turtle. Commands in the language cause the turtle to move. The turtle has a pen attached to it. As the turtle moves, it draw lines on the page. The turtle can be programmed to draw interesting pictures.</p>\r\n<p>We are interested in making the turtle draw a picture, then return to the point that it started from. For example, we could give the turtle the following program:</p>\r\n<p><tt>fd 100 lt 120 fd 100 lt 120 fd 100</tt></p>\r\n<p>The command <tt>fd</tt> causes the turtle to move forward by the specified number of units. The command <tt>lt</tt> causes the turtle to turn left by the specified number of degrees. Thus the above commands cause the turtle to draw an equilateral triangle with sides 100 units long. Notice that after executing the commands, the turtle ends up in the same place as it started. The turtle understands two additional commands. The command <tt>bk</tt> causes the turtle to move backward by the specified number of units. The command <tt>rt</tt> causes the turtle to turn right by the specified number of degrees. The distances and angles in all commands are always non-negative integers.</p>\r\n<p>Unfortunately, we have been messy in writing the program down, and cannot read our own writing. One of the numbers in the program is missing. Assuming the turtle ends up at the place that it started at the end of its journey, can you find the missing number?</p>', '<p>The first line of input contains one integer specifying the number of test cases to follow.  Each test case starts with a line containing one integer, the number of commands to follow. The commands follow, one on each line. Each test case will contain no more than 1000 commands. The argument of each command is either an integer or a question mark (?). There will be exactly one question mark in each test case.</p>', '<p>For each test case, output line containing a single integer</p>\r\n<i>n</i>\r\n<p>such that when the question mark in the program is replaced by</p>\r\n<i>n</i>\r\n<p>, the turtle ends up at the same point that it started from once the program completes. If the question mark is the argument of an</p>\r\n<tt>lt</tt>\r\n<p>or</p>\r\n<tt>rt</tt>\r\n<p>command, the angle in the output must be between 0 and 359 degrees, inclusive. The correct answer will always be an integer, and we guarantee that for every test case, there will be only one correct answer.</p>', 'D:\\oj\\data\\2051', 'D:\\oj\\data\\2051', '1\r\n5\r\nfd 100\r\nlt 120\r\nfd ?\r\nlt 120\r\nfd 100', '100', '', '', '', '2011-06-10 19:39:17', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 17, 'power721'),
(2052, 'Tic Tac Toe', '<img align="right" src="http://plg1.cs.uwaterloo.ca/%7Eacm00/090613/A.png" alt="" />\r\n<p>The game of Tic Tac Toe is played on an</p>\r\n<i>n</i>\r\n<p>-by-</p>\r\n<i>n</i>\r\n<p>grid (where</p>\r\n<i>n</i>\r\n<p>is usually but not necessarily three). Two players alternate placing symbols on squares of the grid. One player places Xes and the other player places Os. The player placing Xes always goes first. When the grid contains a vertical, horizontal, or diagonal sequence of at least</p>\r\n<i>m</i>\r\n<p>consecutive squares all containing the same symbol, the game ends and the winner is the player who placed the last symbol. When all the squares of the grid are filled, if neither player has won, the game ends in a draw.</p>\r\n<p>Your task is to analyze the state of a Tic Tac Toe board, and determine whether the game is still in progress, or if it has completed, who won, or if the game ended in a draw. You should also detect erroneous states of the Tic Tac Toe board that could never occur during an actual game.</p>', '<p>The first line of input contains the two integers  <i>n</i> and <i>m</i>, separated by spaces, with  1 &lt;= <i>m</i> &lt;= <i>n</i> &lt;= 2000. The following <i>n</i> lines of input each contain one row of the Tic Tac Toe board. Each of these lines contains exactly <i>n</i> characters, and each of these characters is either an <tt>X</tt>, an <tt>O</tt>, or a period (<tt>.</tt>), indicating an empty square.</p>', '<p>Output a single line containing the appropriate string <tt>X WINS</tt>, <tt>O WINS</tt>, or <tt>DRAW</tt> if the game is over, the string <tt>IN PROGRESS</tt> if the game has not yet finished, or <tt>ERROR</tt> if the state of the board could never occur during a game.</p>', 'D:\\oj\\data\\2052', 'D:\\oj\\data\\2052', '3 3\r\n..X\r\nOOX\r\n..X', 'X WINS', '', 'http://plg1.cs.uwaterloo.ca/~acm00/090613/A.html', '', '2011-06-10 19:39:18', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 34, 'power721'),
(2053, 'Fire!', '<p><img align="right" alt="" src="http://plg1.cs.uwaterloo.ca/%7Eacm00/090613/B.png" /></p>\r\n<p>Joe works in a maze. Unfortunately, portions of the maze have caught on fire, and the owner of the maze neglected to create a fire escape plan. Help Joe escape the maze.</p>\r\n<p>Given Joe''s location in the maze and which squares of the maze are on fire, you must determine whether Joe can exit the maze before the fire reaches him, and how fast he can do it.</p>\r\n<p>Joe and the fire each move one square per minute, vertically or horizontally (not diagonally). The fire spreads all four directions from each square that is on fire. Joe may exit the maze from any square that borders the edge of the maze. Neither Joe nor the fire may enter a square that is occupied by a wall.</p>', '<p>The first line of input contains the two integers <i>R</i> and <i>C</i>, separated by spaces, with 1 &lt;= <i>R</i>,<i>C</i> &lt;= 1000. The following <i>R</i> lines of input each contain one row of the maze. Each of these lines contains exactly <i>C</i> characters, and each of these characters is one of:</p>\r\n<ul>\r\n    <li><tt>#</tt>, a wall</li>\r\n    <li><tt>.</tt>, a passable square</li>\r\n    <li><tt>J</tt>, Joe''s initial position in the maze, which is a passable square</li>\r\n    <li><tt>F</tt>, a square that is on fire</li>\r\n</ul>\r\n<p>There will be exactly one <tt>J</tt> in the input.</p>\r\n<h3>Sample Input</h3>\r\n<h5>I</h5>\r\n<pre>\r\n4 4\r\n####\r\n#JF#\r\n#..#\r\n#..#\r\n</pre>\r\n<h5>II</h5>\r\n<pre>\r\n3 3\r\n###\r\n#J.\r\n#.F\r\n</pre>', '<p>Output a single line containing <tt>IMPOSSIBLE</tt> if Joe cannot exit the maze before the fire reaches him, or an integer giving the earliest time Joe can safely exit the maze, in minutes.</p>\r\n<h5>I</h5>\r\n<pre>\r\n3\r\n</pre>\r\n<h5>II</h5>\r\n<pre>\r\nIMPOSSIBLE\r\n</pre>', 'D:\\oj\\data\\2053', 'D:\\oj\\data\\2053', '4 4\r\n####\r\n#JF#\r\n#..#\r\n#..#', '3', '', 'http://plg1.cs.uwaterloo.ca/~acm00/090613/B.html', '', '2011-06-10 19:39:18', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 18, 'power721'),
(2054, 'Nice Prefixes', '<p>Consider strings formed from characters from an alphabet of size <i>K</i>. For example, if <i>K = 4</i>, our alphabet might be <i>{a,b,c,d}</i>, and an example string is <i>bbcac</i>.</p>\r\n<p>For a string <i>S</i>, define <i>count(S, k)</i> to be the number of occurrences of the symbol <i>k</i> in <i>S</i>. For example, <i>count(bbcac, b) = 2</i> and <i>count(bbcac, a) = 1</i>.</p>\r\n<p>A prefix of a string <i>S</i> is any string obtained from <i>S</i> by deleting some (possibly none) of the trailing characters of <i>S</i>. For example, the prefixes of <i>acb</i> are the empty string, <i>a</i>, <i>ac</i>, and <i>acb</i>.</p>\r\n<p>A string <i>S</i> has "nice prefixes" if for every prefix <i>P</i> of <i>S</i> and for every two characters <i>k1</i> and <i>k2</i> in the alphabet, <i>|count(P, k1) - count(P, k2)| &lt;= 2</i>. For example, <i>bbcac</i> has nice prefixes, but <i>abbbc</i> does not because <i>count(abbb, b) = 3</i> and <i>count(abbb, c) = 0</i>.</p>\r\n<p>Count the number of strings of length <i>L</i> on an alphabet of size <i>K</i> that have nice prefixes. This number can be large, so print its remainder when divided by 1000000007.</p>', '<p>The input is a single line containing the two integers <i>L</i> and <i>K</i>, separated by spaces, with 1 &lt;= <i>L</i> &lt;= 10<sup>18</sup> and 1 &lt;= <i>K</i> &lt;= 50.</p>', '<p>Output a single line containing the number of strings of length <i>L</i> on an alphabet of size <i>K</i> that have nice prefixes, modulo 1000000007.</p>', 'D:\\oj\\data\\2054', 'D:\\oj\\data\\2054', '4 2', '12', '', 'http://plg1.cs.uwaterloo.ca/~acm00/090613/C.html', '', '2011-06-10 19:39:18', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 23, 'power721'),
(2055, 'Convex Hull', '<p><img align="right" src="http://plg1.cs.uwaterloo.ca/%7Eacm00/090613/D.png" alt="" /></p>\r\n<p>Finding the convex hull of a set of points is an important problem that is often part of a larger problem. There are many algorithms for finding the convex hull. Since problems involving the convex hull sometimes appear in the ACM World Finals, it is a good idea for contestants to know some of these algorithms.</p>\r\n<p>Finding the convex hull of a set of points in the plane can be divided into two sub-tasks. First, given a set of points, find a subset of those points that, when joined with line segments, form a convex polygon that encloses all of the original points. Second, output the points of the convex hull in order, walking counter-clockwise around the polygon. In this problem, the first sub-task has already been done for you, and your program should complete the second sub-task. That is, given the points that are known to lie on the convex hull, output them in order walking counter-clockwise around the hull.</p>', '<p>The first line of input contains a single integer  3 &lt;= <i>n</i> &lt;= 100000, the number of points. The following <i>n</i> lines of input each describe a point. Each of these lines contains two integers and either a <tt>Y</tt> or an <tt>N</tt>, separated by spaces. The two integers specify the x- and y-coordinates of the point. A <tt>Y</tt> indicates that the point is on the convex hull of all the points, and a <tt>N</tt> indicates that it is not. The x- and y-coordinates of each point will be no less than -1000000000 and no greater than 1000000000. No point will appear more than once in the input. The points in the input will never all lie on a line.</p>', '<p>First, output a line containing a single integer <i>m</i>, the number of points on the convex hull. Next output <i>m</i> lines, each describing a point on the convex hull, in counter-clockwise order around the hull. Each of these lines should contain the x-coordinate of the point, followed by a space, followed by the y-coordinate of the point. Start with the point on the hull whose x-coordinate is minimal. If there are multiple such points, start with the one whose y-coordinate is minimal.</p>', 'D:\\oj\\data\\2055', 'D:\\oj\\data\\2055', '5\r\n1 1 Y\r\n1 -1 Y\r\n0 0 N\r\n-1 -1 Y\r\n-1 1 Y', '4\r\n-1 -1\r\n1 -1\r\n1 1\r\n-1 1', '', 'http://plg1.cs.uwaterloo.ca/~acm00/090613/D.html', '', '2011-06-10 19:39:18', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 45, 'power721');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(2056, 'Slalom', '<img align="right" src="http://plg1.cs.uwaterloo.ca/%7Eacm00/090613/E.png" alt="" />\r\n<p>You are competing in a ski slalom, and you need to select the best skis for the race. The format of the race is that there are</p>\r\n<i>N</i>\r\n<p>pairs of left and right gates, where each right gate is</p>\r\n<i>W</i>\r\n<p>metres to the right of its corresponding left gate, and you may neither pass to the left of the left gate nor to the right of the right gate. The</p>\r\n<i>i</i><sup>th</sup>\r\n<p>pair of gates occurs at distance</p>\r\n<i>y<sub>i</sub></i>\r\n<p>down the hill, with the horizontal position of the</p>\r\n<i>i</i><sup>th</sup>\r\n<p>left gate given by</p>\r\n<i>x<sub>i</sub></i>\r\n<p>. Each gate is further down the hill than the previous gate (i.e.</p>\r\n<i>y<sub>i</sub></i>\r\n<p>&lt;</p>\r\n<i>y<sub>i+1</sub></i>\r\n<p>for all</p>\r\n<i>i</i>\r\n<p>).</p>\r\n<p>You may select from <i>S</i> pairs of skis, where the <i>j</i><sup>th</sup> pair has speed <i>s<sub>j</sub></i>. Your movement is governed by the following rule: if you select a pair of skis with speed <i>s<sub>j</sub></i>, you move with a constant downward velocity of <i>s<sub>j</sub></i> metres per second. Additionally, at any time you may move at a horizontal speed of at most <i>v<sub>h</sub></i> metres per second.</p>\r\n<p>You may start and finish at any two horizontal positions. Determine which pair of skis will allow you to get through the race course, passing through all the gates, in the shortest amount of time.</p>', '<p>The first line of input contains the three integers <i>W</i>, <i>v<sub>h</sub></i>, and <i>N</i>, separated by spaces, with 1 &lt;= <i>W</i> &lt;= 10<sup>8</sup>, 1 &lt;= <i>v<sub>h</sub></i> &lt;= 10<sup>6</sup>, and 1 &lt;= <i>N</i> &lt;= 10<sup>5</sup>.</p>\r\n<p>The following <i>N</i> lines of input each contain two integers <i>x<sub>i</sub></i> and <i>y<sub>i</sub></i>, the horizontal and vertical positions respectively of the <i>i</i><sup>th</sup> left gate, with 1 &lt;= <i>x<sub>i</sub></i>, <i>y<sub>i</sub></i> &lt;= 10<sup>8</sup>.</p>\r\n<p>The next line of input contains an integer <i>S</i>, the number of skis, with 1 &lt;= <i>S</i> &lt;= 10<sup>6</sup>.</p>\r\n<p>The following <i>S</i> lines of input each contain one integer <i>s<sub>j</sub></i>, the speed of the <i>j</i><sup>th</sup> pair of skis, with 1 &lt;= <i>s<sub>j</sub></i> &lt;= 10<sup>6</sup>.</p>\r\n<h5>I</h5>\r\n<pre>\r\n3 2 3\r\n1 1\r\n5 2\r\n1 3\r\n3\r\n3\r\n2\r\n1\r\n</pre>\r\n<h5>II</h5>\r\n<pre>\r\n3 2 3\r\n1 1\r\n5 2\r\n1 3\r\n1\r\n3\r\n</pre>', '<p>If it is impossible to complete the race with any pair of skis, print the line <tt>IMPOSSIBLE</tt>. Otherwise, print the vertical speed <i>s<sub>j</sub></i> of the pair of skis that allows you to get through the race course in the shortest time.</p>\r\n<h5>I</h5>\r\n<pre>\r\n2\r\n</pre>\r\n<h5>II</h5>\r\n<pre>\r\nIMPOSSIBLE\r\n</pre>', 'D:\\oj\\data\\2056', 'D:\\oj\\data\\2056', '3 2 3\r\n1 1\r\n5 2\r\n1 3\r\n3\r\n3\r\n2\r\n1', '2', '', 'http://plg1.cs.uwaterloo.ca/~acm00/090613/E.html', '', '2011-06-10 19:39:19', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 16, 'power721'),
(2057, 'MC part deux', '<p>The Dean has determined that mathies have outgrown the building that has served them so well for many years. Luckily for him, the PM has decided to stimulate the economy by funding a new math building. To maximize the stimulating effect, the construction process is outsourced to a software engineering consultant who employs agile methodologies. The building will be built first, and designed later. The Dean has some concerns about this innovative process. After all, it would be very embarrassing if the walls of the new math building failed to line up at right angles!</p>\r\n<p>The Dean sneaks out one night with a tape measure to survey the last remaining grassy area on campus, where the new building will go. He drives stakes into the ground, then measures the distances between them. Afterwards, he retreats into his office to construct a map from his measurements. He notices that the first three stakes form a right-angled triangle with arms of length one metre and hypotenuse of length sqrt(2) metres. And that\\''s not all. The Dean plots these first three stakes on a piece of graph paper at coordinates (0,0), (0,1), and (1,0). After plotting some of the other stakes, it turns out that all of the stakes happen to be precisely at lattice points (i.e. points with integer coordinates) on the graph paper. Still, plotting all of the many stakes is tedious, so he asks his co-op student (i.e. you) to help out.</p>', '<p>Input consists of a number of test cases. The first line of each test case contains two integers <i>n</i> and <i>m</i>, each at least 1 and no larger than 1000. The integer <i>n</i> is the number of lines that follow, and <i>m</i> is the number of stakes. The stakes are numbered from 1 to <i>m</i>. All of the stakes are at distinct locations. The x and y coordinates of each stake are no less than -1000000 and no greater than 1000000. Each of the following lines contains exactly six integers <i>a</i>, <i>b</i>, <i>c</i>, <i>x</i>, <i>y</i>, <i>z</i>. The integers <i>a</i>, <i>b</i>, and <i>c</i> are the numbers of three stakes. The three stakes are always listed in counter-clockwise order. That is, to move from stake <i>a</i> to stake <i>b</i> and then to stake <i>c</i>, one must turn left at stake <i>b</i>. The number <i>x</i> is the square of the distance from stake <i>a</i> to stake <i>b</i>. The number <i>y</i> is the square of the distance from stake <i>b</i> to stake <i>c</i>. The number <i>z</i> is the square of the distance from stake <i>c</i> to stake <i>a</i>. Every stake will appear in at least one line of the input. For every pair of stakes <i>a</i>, <i>b</i>, there is a subset of the triangles in the input that forms a sequence <i>T<sub>1</sub></i>, <i>T<sub>2</sub></i>, ..., <i>T<sub>n</sub></i> such that two of the vertices of <i>T<sub>i</sub></i> are also vertices of <i>T<sub>i+1</sub></i> for all 0&lt;<i>i</i>&lt;<i>n</i>, <i>a</i> is a vertex of <i>T<sub>1</sub></i>, and <i>b</i> is a vertex of <i>T<sub>n</sub></i>. The last line of input is <tt>0 0</tt>. These zeros are not values of <i>n</i> and <i>m</i>, and should not be processed as such.</p>', '<p>Output consists of exactly <i>m</i> lines for each test case. The <i>m</i> lines describe the stakes 1 to <i>m</i> in sequence. Each line contains two integers, giving the <i>x</i> and <i>y</i> coordinates of the stake. The first three lines of output for each test case are always:</p>\r\n<pre>\r\n0 0\r\n0 1\r\n1 0\r\n</pre>', 'D:\\oj\\data\\2057', 'D:\\oj\\data\\2057', '1 3\r\n1 3 2 1 2 1\r\n0 0', '0 0\r\n0 1\r\n1 0', '', 'http://plg1.cs.uwaterloo.ca/~acm00/090927/A.html', '', '2011-06-10 19:39:19', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 15, 'power721'),
(2058, 'Moveable maze', '<p>After solving a difficult programming problem, you decide to take a break and play a puzzle game. After playing the game for a while, you decide to write a program to solve it for you.</p>\r\n<p>The game is played on a grid with <i>R</i> rows and <i>C</i> columns. Each square of the grid contains a black dot in the centre and black lines in the direction of some, none, or all of its north, east, south, and west neighbouring squares. Your objective in this game is to move your playing piece from the centre of the square in the <i>i<sub>1</sub></i><sup>th</sup> row and the <i>j<sub>1</sub></i><sup>th</sup> column, where it begins, to the centre of the square in the the <i>i<sub>2</sub></i><sup>th</sup> row and the <i>j<sub>2</sub></i><sup>th</sup> column.</p>\r\n<p>You wish to do this in the least number of turns possible, where a turn consists of the following two parts. First in each turn, you may opt to select any grid square and rotate it 90 degrees clockwise or counterclockwise. Second in each turn, you may opt to move your piece from the centre of its current grid square to the centre of a neighbouring grid square, provided your piece does not leave the black markings. In other words, you may move from a square A to a neighbouring square B if A has a black line in the direction of B and B has a black line in the direction of A. Note that either part of a turn may be omitted.</p>', '<p>Input consists of a number of test cases. The first line of each test case contains the two integers <i>R</i> and <i>C</i>, separated by spaces, with 1 &lt;= <i>R</i>, <i>C</i> &lt;= 20.</p>\r\n<p>The next line contains the integers <i>i<sub>1</sub></i>, <i>j<sub>1</sub></i>, <i>i<sub>2</sub></i>, <i>j<sub>2</sub></i>, separated by spaces, with 1 &lt;= <i>i<sub>1</sub></i>, <i>i<sub>2</sub></i> &lt;= <i>R</i> and 1 &lt;= <i>j<sub>1</sub></i>, <i>j<sub>2</sub></i> &lt;= <i>C</i>.</p>\r\n<p>The following <i>R</i> lines of input each contain one row of the grid, from north to south. Each of these lines contains exactly <i>C</i> strings of letters, separated by spaces, that correspond to squares of the grid, from west to east. Their format is as follows:</p>\r\n<ul>\r\n    <li>If the string is the single character <tt>x</tt>, then the square does not contain a line to any of its neighbours.</li>\r\n    <li>Otherwise, the string contains some of the characters <tt>N</tt>, <tt>E</tt>, <tt>S</tt>, <tt>W</tt>, which indicate that a black line extends from this square\\''s centre in the direction of its north, east, south, or west neighbour, respectively. No character will appear in the string more than once.</li>\r\n</ul>\r\n<p>It is guaranteed that it is possible to move your playing piece from  (<i>i<sub>1</sub></i>, <i>j<sub>1</sub></i>) to (<i>i<sub>2</sub></i>, <i>j<sub>2</sub></i>).</p>\r\n<p>Input is terminated by a line containing <tt>0 0</tt>. These zeros are not a test case and should not be processed.</p>\r\n<p>&nbsp;</p>\r\n<pre>\r\n4 2\r\n1 1 4 1\r\nE SW\r\nx EW\r\nNW ES\r\nN x\r\n0 0\r\n</pre>\r\n<p>A diagram of the input:</p>\r\n<p><br />\r\n<img src="http://plg1.cs.uwaterloo.ca/~acm00/090927/Bexample.png" alt="" /></p>', '<p>Output consists of exactly one line for each test case. The lines contains an integer: the minimum number of turns to move your playing piece from (<i>i<sub>1</sub></i>, <i>j<sub>1</sub></i>) to (<i>i<sub>2</sub></i>, <i>j<sub>2</sub></i>).</p>', 'D:\\oj\\data\\2058', 'D:\\oj\\data\\2058', '4 2\r\n1 1 4 1\r\nE SW\r\nx EW\r\nNW ES\r\nN x\r\n0 0', '5', 'An example optimal solution is:\r\n\r\n   1. Rotate (2,2) clockwise. Step to (1,2).\r\n\r\n   2. Rotate (3,2) counterclockwise. Step to (2,2).\r\n\r\n   3. Rotate (3,2) counterclockwise. Step to (3,2).\r\n\r\n   4. Rotate (3,1) clockwise. Step to (3,1).\r\n\r\n   5. Rotate (3,1) clockwise. Step to (4,1).', '', '', '2011-06-10 19:39:19', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 14, 'power721'),
(2059, 'Pick up sticks', '<p>Pick up sticks is a fascinating game. A collection of coloured sticks are dumped in a tangled heap on the table. Players take turns trying to pick up a single stick at a time without moving any of the other sticks. It is very difficult to pick up a stick if there is another stick lying on top of it. The players therefore try to pick up the sticks in an order such that they never have to pick up a stick from underneath another stick.</p>\r\n<img align="right" width="411" height="330" src="http://plg1.cs.uwaterloo.ca/%7Eacm00/090927/C.png" alt="" />', '<p>The input consists of several test cases. The first line of each test case contains two integers <i>n</i> and <i>m</i> each at least one and no greater than one million. The integer <i>n</i> is the number of sticks, and  <i>m</i> is the number of lines that follow. The sticks are numbered from 1 to <i>n</i>. Each of the following lines contains a pair of integers <i>a</i>, <i>b</i>, indicating that there is a point where stick <i>a</i> lies on top of stick <i>b</i>. The last line of input is <tt>0 0</tt>. These zeros are not values of <i>n</i> and <i>m</i>, and should not be processed as such.</p>', '<p>For each test case, output <i>n</i> lines of integers, listing the sticks in the order in which they could be picked up without ever picking up a stick with another stick on top of it. If there are multiple such correct orders, any one will do. If there is no such correct order, output a single line containing the word <tt>IMPOSSIBLE</tt>.</p>', 'D:\\oj\\data\\2059', 'D:\\oj\\data\\2059', '3 2\r\n1 2\r\n2 3\r\n0 0', '1\r\n2\r\n3', '', '', '', '2011-06-10 19:39:19', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 16, 'power721'),
(2060, 'Digits', '<p><img align="right" width="270" height="164" alt="" src="http://plg1.cs.uwaterloo.ca/%7Eacm00/090927/D.png" /></p>\r\n<p>A googol written out in decimal has 101 digits. A googolplex has one plus a googol digits. That''s a lot of digits!</p>\r\n<p>Given any number <i>x<sub>0</sub></i>, define a sequence using the following recurrence:</p>\r\n<p>&nbsp;</p>\r\n<center>     <i>x<sub>i+1</sub></i> = the number of digits in the decimal representation of <i>x<sub>i</sub></i> </center>\r\n<p>Your task is to determine the smallest positive <i>i</i> such that <i>x<sub>i</sub></i> = <i>x<sub>i-1</sub></i>.</p>', '<p>Input consists of several lines. Each line contains a value of <i>x<sub>0</sub></i>. Every value of <i>x<sub>0</sub></i> is non-negative and has no more than one million digits. The last line of input contains the word <tt>END</tt>.</p>', '<p>For each value of <i>x<sub>0</sub></i> given in the input, output one line containing the smallest positive <i>i</i> such that <i>x<sub>i</sub></i> = <i>x<sub>i-1</sub></i>.</p>', 'D:\\oj\\data\\2060', 'D:\\oj\\data\\2060', '42\r\nEND', '3', '', 'http://plg1.cs.uwaterloo.ca/~acm00/090927/D.html', '', '2011-06-10 19:39:19', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721'),
(2061, 'Rotate to root', '<p>Rotate-to-root is a heuristic for balancing binary search trees. In this problem, the contents of the tree will be ignored, and you will be asked about the effect the heuristic has on the structure of the tree.</p>\r\n<p>A binary tree is either empty or consists of a node with a left child and a right child, where each of the children are also binary trees. No node has more than one parent, and there are no cycles. In any non-empty tree, there is exactly one node without a parent, which is called the root of the tree.</p>\r\n<p>The rotate-to-root heuristic takes effect when a node in the tree, say X, is accessed. While X is not the root of the tree, the following procedure is executed:</p>\r\n<ul>\r\n    <li>If X is the left child of its parent, a right tree rotation is performed. Let P be the parent of X, let A be X''s left child, let B be X''s right child, and let C be the right child of P. Then, P is replaced in the tree by X, so P''s parent (if any) becomes X''s parent; X''s right child becomes P''s left child (which replaces X); and P replaces X''s right child. Diagram:<br />\r\n    <img width="419" height="180" src="http://plg1.cs.uwaterloo.ca/%7Eacm00/090927/Erightrot.png" alt="" /></li>\r\n    <li>If X is the right child of its parent, a left tree rotation is performed. Let P be the parent of X, let A be the left child of P, let be B be X''s left child, and let C be X''s right child. Then, P is replaced in the tree by X, so P''s parent (if any) becomes X''s parent; X''s left child becomes P''s right child (which replaces X); and P replaces X''s left child. Diagram:<br />\r\n    <img width="422" height="180" src="http://plg1.cs.uwaterloo.ca/%7Eacm00/090927/Eleftrot.png" alt="" /></li>\r\n</ul>\r\n<p>Tree rotations preserve the order of the nodes in the tree, which is why they are useful, but that is not important for this problem.</p>\r\n<p>The height of a binary tree is the longest length of a path from its root to the bottom of the tree. More formally, the height of the empty tree is 0, and the height of a non-empty tree that has a root node X with children A and B is 1 + max{height(A), height(B)}.</p>\r\n<p>Given a binary tree, you must determine, for each node X, what the height of the tree would be after X is rotated to root.</p>', '<p>Input consists of a number of test cases. The first line of each test case contains the integer <i>N</i>, the number of nodes in the binary tree, where 1 &lt;= <i>N</i> &lt;= 10<sup>5</sup>.</p>\r\n<p>The following <i>N</i> lines of input each contain two integers. The <i>i</i><sup>th</sup> pair of these integers is <i>l<sub>i</sub></i> and <i>r<sub>i</sub></i>, the left and right children of node <i>i</i>. If <i>l<sub>i</sub></i> = 0, then the left child of node <i>i</i> is the empty tree, and if <i>r<sub>i</sub></i> = 0, then the right child of node <i>i</i> is the empty tree. Otherwise, 1 &lt;= <i>l</i>, <i>r</i> &lt;= N.</p>\r\n<p>It is guaranteed that the input will describe a binary tree.</p>\r\n<p>The last test case is followed by a line containing the integer <tt>0</tt>. This final line is not a test case and should not be processed.</p>', '<p>Output consists of <i>N</i> lines for each test case, where the <i>i</i><sup>th</sup> line contains an integer giving the height of the tree after node <i>i</i> is rotated to root.</p>', 'D:\\oj\\data\\2061', 'D:\\oj\\data\\2061', '4\r\n2 3\r\n4 0\r\n0 0\r\n0 0\r\n0', '3\r\n3\r\n4\r\n3', '', '', '', '2011-06-10 19:39:19', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 22, 'power721'),
(2062, 'Rooks', '<p>You have unexpectedly become the owner of a large chessboard, having fifteen squares to each side. Because you do not know how to play chess on such a large board, you find an alternative way to make use of it.</p>\r\n<p>In chess, a rook attacks all squares that are in the same row or column of the chessboard as it is. For the purposes of this problem, we define a rook as also attacking the square on which it is already standing.</p>\r\n<p>Given a set of chessboard squares, how many rooks are needed to attack all of them?</p>', '<p>Input consists of a number of test cases. Each test case consists of fifteen lines each containing fifteen characters depicting the chess board. Each character is either a period (<tt>.</tt>) or a hash (<tt>#</tt>). Every chessboard square depicted by a hash must be attacked by a rook. After all the test cases, one more line of input appears. This line contains the word <tt>END</tt>.</p>', '<p>Output consists of exactly one line for each test case. The line contains a single integer, the minimum number of rooks that must be placed on the chess board so that every square marked with a hash is attacked.</p>', 'D:\\oj\\data\\2062', 'D:\\oj\\data\\2062', '...............\r\n...............\r\n...............\r\n...............\r\n...............\r\n...............\r\n...............\r\n.......#.......\r\n...............\r\n...............\r\n...............\r\n...............\r\n...............\r\n...............\r\n...............\r\nEND', '1', '', '', '', '2011-06-10 19:39:20', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 18, 'power721'),
(2063, 'Pipes', '<p><img src="http://acm.zj.cn/upload/2010/3/B-22104525.jpg" alt="" /></p>\r\n<p>After writing a solver for the "moveable maze" game last week, you have grown tired of it. After all, you already know the optimal solution. To entertain yourself, you find another puzzle game called "Pipes", and play that for a while. On one puzzle, you have not been able to find a solution by hand, and you think that there is no solution. You decide to write a program to tell you whether this is the case.</p>\r\n<p>The game is played on a grid with <i>R</i> rows and <i>C</i> columns. Each square of the grid contains a black dot in the centre and black lines in the direction of some, none, or all of its north, east, south, and west neighbouring squares, with the following restriction: if two opposite directions both have lines, then at least one of the other two directions has a line as well. In other words, it is forbidden for a square to consist of a straight line.</p>\r\n<p>The objective of the game is to rotate each square, as many times as you like, such that for each square, if it has a line going in a compass direction (that is, north, east, south, or west), then it has a neighbour in that compass direction and that neighbour has a line going in the opposite compass direction. In other words, each edge in the grid should either have a line on both sides or neither side.</p>\r\n<p>Your task is to determine whether a given grid has a solution.</p>\r\n<h3>&nbsp;</h3>', '<p>The input consists of several test cases.</p>\r\n<p>The first line of each test case contains the two integers <i>R</i> and <i>C</i>, separated by spaces, with 1 &lt;= <i>R</i>,<i>C</i> &lt;= 12.</p>\r\n<p>The following <i>R</i> lines of input each contain one row of the grid, from north to south. Each of these lines contains exactly <i>C</i> strings of letters, separated by spaces, that correspond to squares of the grid, from west to east. Their format is as follows:</p>\r\n<ul>\r\n    <li>If the string is the single character <i>x</i>, then the square      does not contain a line to any of its neighbours.</li>\r\n    <li>Otherwise, the string contains some of the characters <tt>N</tt>,      <tt>E</tt>, <tt>S</tt>, <tt>W</tt>, which indicate that a black      line extends from this square''s centre in the direction of its      north, east, south, or west neighbour, respectively. No character      will appear in the string more than once.</li>\r\n</ul>\r\n<p>Input is terminated by a line containing <tt>0 0</tt>. These zeros are not a test case and should not be processed.</p>', '<p>For each test case, output <tt>SOLVABLE</tt> if there is a solution to the puzzle, and <tt>UNSOLVABLE</tt> otherwise.</p>', 'D:\\oj\\data\\2063', 'D:\\oj\\data\\2063', '3 3\r\nNW NW x\r\nNES NESW W\r\nE W x\r\n2 2\r\nES x\r\nx N\r\n0 0', 'SOLVABLE\r\nUNSOLVABLE', '', '', '', '2011-06-10 19:39:20', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 16, 'power721'),
(2064, 'Cantor', '<p>&nbsp;</p>\r\n<p>The ternary expansion of a number is that number written in base 3. A number can have more than one ternary expansion. A ternary expansion is indicated with a subscript 3. For example, 1 = 1<sub>3</sub> = 0.222...<sub>3</sub>, and 0.875 = 0.212121...<sub>3</sub>.</p>\r\n<p>The Cantor set is defined as the real numbers between 0 and 1 inclusive that have a ternary expansion that does not contain a 1. If a number has more than one ternary expansion, it is enough for a single one to not contain a 1.</p>\r\n<p>For example, 0 = 0.000...<sub>3</sub> and 1 = 0.222...<sub>3</sub>, so they are in the Cantor set. But 0.875 = 0.212121...<sub>3</sub> and this is its only ternary expansion, so it is not in the Cantor set.</p>\r\n<p>Your task is to determine whether a given number is in the Cantor set.</p>\r\n<h3>&nbsp;</h3>\r\n<p>&nbsp;</p>\r\n<p><img src="http://acm.zj.cn/upload/2010/3/C-22105053.jpg" alt="" /></p>', '<p>The input consists of several test cases.</p>\r\n<p>Each test case consists of a single line containing a number <i>x</i> written in decimal notation, with 0 &lt;= <i>x</i> &lt;= 1, and having at most 6 digits after the decimal point.</p>\r\n<p>The last line of input is <tt>END</tt>. This is not a test case.</p>', '<p>For each test case, output <tt>MEMBER</tt> if <i>x</i> is in the Cantor set, and <tt>NON-MEMBER</tt> if <i>x</i> is not in the Cantor set.</p>', 'D:\\oj\\data\\2064', 'D:\\oj\\data\\2064', '0\r\n1\r\n0.875\r\nEND', 'MEMBER\r\nMEMBER\r\nNON-MEMBER', '', '', '', '2011-06-10 19:39:20', 10000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 10000, 16, 'power721'),
(2065, 'Meltdown', '<p>A polygon is lowered at a constant speed of <i>v</i> metres per minute from the air into a liquid that dissolves it at a constant speed of <i>c</i> metres per minute from all sides. Given a point <i>(x,y)</i> inside the polygon that moves with the polygon, determine when the liquid reaches the point.</p>\r\n<p>The border between air and liquid always has y-coordinate 0, and the liquid only eats away from the sides of the polygon in 2 dimensions. The polygon does not rotate as it is lowered into the liquid, and at time 0, it is not touching the liquid.</p>\r\n<p>Unlike the polygon, which is flat (2-dimensional), the liquid exists in three dimensions. Therefore, the liquid seeps into cavities in the polygon. For example, if the polygon is "cup-shaped", the liquid can get "inside" the cup, as in the diagram below.</p>\r\n<p><img src="http://plg1.cs.uwaterloo.ca/%7Eacm00/091003/Ddiag.png" alt="" /></p>', '<p>The input consists of several test cases.</p>\r\n<p>The first line of each test case contains the five integers <i>N</i>, <i>x</i>, <i>y</i>, <i>v</i>, and <i>c</i>, where  3 &lt;= <i>N</i> &lt;= 30, -100 &lt;= <i>x</i> &lt;= 100, 1 &lt;= <i>y</i> &lt;= 100, and 1 &lt;= <i>c</i> &lt; <i>v</i> &lt;= 10.</p>\r\n<p>The following <i>N</i> lines of the test case each contain one vertex of the polygon. The <i>i</i><sup>th</sup> line contains the two integers <i>x</i>, <i>y</i>, where -100 &lt;= <i>x</i> &lt;= 100, 1 &lt;= <i>y</i> &lt;= 100.</p>\r\n<p>The vertices of the polygon are given in counter-clockwise order. The border of the polygon does not intersect or touch itself, and the point <i>(x,y)</i> lies strictly inside the polygon&mdash;it does not lie on the border of the polygon.</p>\r\n<p>Input is terminated by a line containing <tt>0 0 0 0 0</tt>. These zeros are not a test case and should not be processed.</p>', '<p>For each test case, output the first time in minutes that the liquid reaches the specified point, rounded to four decimal places.</p>', 'D:\\oj\\data\\2065', 'D:\\oj\\data\\2065', '4 0 50 2 1\r\n-1 10\r\n1 10\r\n1 90\r\n-1 90\r\n0 0 0 0 0', '25.8660', '', '', '', '2011-06-10 19:39:20', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 17, 'power721'),
(2066, 'sqrt log sin', '<img align="right" src="http://plg1.cs.uwaterloo.ca/%7Eacm00/091003/E.png" alt="" />\r\n<p>An evil professor has just assigned you the following problem.</p>\r\n<p>A sequence is defined by the following recurrence:</p>\r\n<p><img align="center" src="http://plg1.cs.uwaterloo.ca/%7Eacm00/091003/Eeq.png" alt="" /></p>\r\n<p>Determine</p>\r\n<i>x<sub>1000000</sub></i>\r\n<p>.</p>', '<p>Input consists of a number of lines, each containing one integer, a value of <i>i</i>, no less than zero and no greater than one million. Input is followed by a single line containing the integer <i>-1</i>. This last line is not a value of <i>i</i> and should not be processed.</p>', '<p>For each value of <i>i</i> in the input (but not the final <tt>-1</tt>), output the corresponding value of <i>x<sub>i</sub></i> modulo 1000000.</p>', 'D:\\oj\\data\\2066', 'D:\\oj\\data\\2066', '0\r\n-1', '1', '', '', '', '2011-06-12 07:33:27', 1000, 131072, 'N', NULL, 0, 1, 0, 1, 100, 1, 0, 1000, 28, 'power721'),
(2067, 'Problem A: Shopping', '<p></p>\r\n<h2>Problem A: Shopping</h2>\r\n<p><img align="right" alt="" src="http://plg1.cs.uwaterloo.ca/~acm00/100710/A.jpg" />  You have just moved into a new apartment and have a long list of items you need to buy. Unfortunately, to buy this many items requires going to many different stores. You would like to minimize the amount of driving necessary to buy all the items you need.</p>\r\n<p>Your city is organized as a set of intersections connected by roads. Your house and every store is located at some intersection. Your task is to find the shortest route that begins at your house, visits all the stores that you need to shop at, and returns to your house.</p>\r\n<p></p>', '<p>The first line of input contains a single integer, the number of test cases to follow. Each test case begins with a line containing two integers N and M, the number of intersections and roads in the city, respectively. Each of these integers is between 1 and 100000, inclusive. The intersections are numbered from 0 to N-1.  Your house is at the intersection numbered 0. M lines follow, each containing three integers X, Y, and D, indicating that the intersections X and Y are connected by a bidirectional road of length D. The following line contains a single integer S, the number of stores you need to visit, which is between 1 and ten, inclusive. The subsequent S lines each contain one integer indicating the intersection at which each store is located. It is possible to reach all of the stores from your house.</p>', '<p>For each test case, output a line containing a single integer, the length of the shortest possible shopping trip from your house, visiting all the stores, and returning to your house.</p>', 'D:\\oj\\data\\2067', 'D:\\oj\\data\\2067', '1\r\n4 6\r\n0 1 1\r\n1 2 1\r\n2 3 1\r\n3 0 1\r\n0 2 5\r\n1 3 5\r\n3\r\n1\r\n2\r\n3', '4', '', 'http://plg1.cs.uwaterloo.ca/~acm00/100710/A.html', '', '2011-06-10 19:39:27', 10000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 10000, 28, 'power721'),
(2068, 'Problem B: Stack Machine', '<img align="right" src="http://plg1.cs.uwaterloo.ca/%7Eacm00/100710/B.png" alt="" />\r\n<p>A mathematician observes one person get on a bus. Then two people get off the bus. The mathematician says: "If one more person gets on the bus, the bus will be empty."</p>\r\n<p>A stack machine is a special kind of bus. It only has doors at the front, and it is so narrow that the people on the bus cannot move past each other. Of the people on the bus, the person who got on the bus last must be the first to get off.</p>\r\n<p>The bus travels in a city in which roads connect intersections, and all the roads are unidirectional. Along each road, a  person either gets on or off the bus.</p>\r\n<p>The mathematician does not know the identity of the bus passengers, but can estimate their height. Note that there may be multiple people with the same height.</p>\r\n<p>Your task is to plan the route of the bus. The bus must be empty at the beginning and end of the route. Along the route, it must pick up and drop off the people corresponding to the roads it travels on. The height of the person that gets on or off the bus is fixed for each road.</p>', '<p>The first line of input contains a single integer, the number of test cases to follow. Each test case begins with a line containing three integers N, M, Q, the number of intersections and roads in the city and the number of queries, respectively. The number of intersections is between 1 and 100, inclusive. The number of roads and the number of queries are each between 1 and 100000, inclusive.  Intersections in the city are numbered from 1 to N. The first line of each test case is followed by M lines describing the roads. Each of these lines contains three integers X, Y, and Z. These integers indicate that a road exists from intersection X to intersection Y, and that when the bus travels on this road, a person who is Z centimetres tall gets on the bus, if Z is positive, or a person who is -Z centimetres tall gets off the bus, if Z is negative. For example, Z=170 indicates that a 170 cm tall person gets on the bus, and Z=-170 indicates that a 170 cm tall person gets off the bus. Each person is at least 40 cm and at most 220 cm tall. The lines describing the roads are followed by Q more lines, each describing a query. A line describing a query contains two integers, the beginning and ending intersections of the bus route.</p>', '<p>For each query, output a line containing a single integer giving the length of the shortest non-empty path that the bus can take from the beginning to the end of the route. The input data will be such that this length is no more than 10^9. If there is no such path, output a line containing the word <tt>impossible</tt>.</p>\r\n<h3></h3>', 'D:\\oj\\data\\2068', 'D:\\oj\\data\\2068', '1\r\n2 2 4\r\n1 2 100\r\n2 1 -100\r\n1 1\r\n2 2\r\n1 2\r\n2 1', '2\r\nimpossible\r\nimpossible\r\nimpossible', '', '', '', '2011-06-10 19:39:27', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 21, 'power721'),
(2069, 'Problem C: Ideas', '<p>A unique feature of ideas is that they are not consumed when used. A good idea can benefit arbitrarily many people without diminishing the value of the idea. An idea can even serve as the basis for creative people to derive even better ideas. Each person relies on a specific set of ideas to build on and create new ideas.</p>\r\n<p>In order to realize these benefits, ideas need to be communicated to the people who use them. People have developed an extensive worldwide communication network to satisfy this need. The network is composed of a series of tubes connecting people. The tubes are inhabited by curious creatures called packets which carry ideas from one person to another. In order to avoid collisions between packets, the tubes are all unidirectional. Each person can have zero or more incoming and zero or more outgoing tubes.</p>\r\n<p>All of the packets start at the same person, and each packet follows the following algorithm:</p>\r\n<ol>\r\n    <li>Learn and remember the ideas created by the current person.</li>\r\n    <li>If there are no outgoing tubes from the current person, stop         executing the algorithm.</li>\r\n    <li>Otherwise, choose an arbitrary outgoing tube and use it to         travel to a new person.</li>\r\n    <li>Tell the new person all of the ideas that he or she needs from         other people.</li>\r\n    <li>Go back to step 1.</li>\r\n</ol>\r\n<p>The input data is such that it is possible for a packet to reach every person from person 0, and whenever a person P relies on a given idea, every path a packet could have taken to reach P will have visited at least one person who created that idea. It is possible for more than one person to independently create the same idea.</p>\r\n<p>To ease the strain on each packet, you would like to minimize the number of ideas that it remembers at any given time by directing the packet to forget certain ideas in certain tubes. However, in so doing, you must ensure that no matter what path the packet takes, every time it visits a person, the packet knows all of the ideas that the person needs.</p>', '<p>The first line of input contains a single integer, the number of test cases to follow. Each test case begins with a line containing three integers N, M, I, the number of people, tubes, and ideas, respectively. Each of these integers is between 1 and one thousand, inclusive. People are numbered from 0 to N-1, ideas from 0 to I-1. All of the packets start at person 0.  2N lines follow, two lines for each person in order from 0 to N-1. Each of these lines contains some number of integers separated by spaces. For each person, the first line lists the ideas that the person needs, and the second line lists the ideas that the person creates. A given idea will never appear on both lines for the same person. M more lines follow, each describing a tube using two integers: the source and destination person of the tube.</p>', '<p>For each test case, output M lines, each corresponding to one of the tubes in the same order as in the input. For each tube, output a list of integers: the minimal set of ideas the packet must have in its memory when travelling through the given tube. Output the ideas in each set in increasing order.</p>', 'D:\\oj\\data\\2069', 'D:\\oj\\data\\2069', '1\r\n3 3 2\r\n\r\n1\r\n1\r\n0\r\n0\r\n1\r\n0 1\r\n1 2\r\n2 1', '1\r\n0\r\n1', '', '', '', '2011-06-10 19:39:28', 10000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 10000, 20, 'power721'),
(2070, 'Problem D: HST', '<p>On July 1st, Ontario''s Provincial Sales Tax (PST) was merged with the Federal Goods and Services Tax (GST), creating the Harmonized Sales Tax (HST). This changed the rate of tax Ontarians pay on various items.</p>\r\n<p>Dalton would like to calculate how this change will affect his personal monthly budget.</p>', '<p>The first line of input contains a single integer, the number of test cases to follow. Each test case begins with a line containing two integers N, M, the number of categories of items and the number of purchases Dalton makes each month, respectively. Each of these integers is between 1 and 100000, inclusive. N lines follow, each describing a category of item. Each of these lines contains a category name, which is a string of at most 30 uppercase letters, followed by three percentages, giving the PST, GST, and HST rate on that category. Each percentage is a number with up to two digits after the decimal point, and each percentage is followed by the % symbol. Each percentage is at least 0% and at most 100%. These lines are followed by M more lines, each describing one of Dalton''s purchases. Each of these lines contains a category name and a price in dollars and cents and prefixed by the $ symbol. Each such line indicates the amount of pre-tax money that Dalton spends on an item in the specified category. The amount of each tax to be paid on an item is rounded to the nearest cent; if the tax amount is exactly half a cent more than a whole number of cents, it is rounded up to the nearest greater whole number of cents.</p>', '<p>For each test case, output the difference, in dollars and cents, between the total HST payable and the total sum of PST and GST payable on Dalton''s monthly purchases. If the HST is more than the PST+GST, output a positive amount. If the HST is less than the PST+GST, output a negative amount.</p>\r\n<h3></h3>', 'D:\\oj\\data\\2070', 'D:\\oj\\data\\2070', '1\r\n1 1\r\ngas 0% 5% 13%\r\ngas $100.00', '8.00', '', '', '', '2011-06-10 19:39:32', 10000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 10000, 16, 'power721'),
(2071, 'Problem E: Tunnelling the Earth', '<p>There are different methods of transporting people from place to place: cars, bikes, boats, trains, planes, etc. For very long distances, people generally fly in a plane. But this has the disadvantage that the plane must fly around the curved surface of the earth. A distance travelled would be shorter if the traveller followed a straight line from one point to the other through a tunnel through the earth.</p>\r\n<p>For example, travelling from Waterloo to Cairo requires a distance of 9293521 metres following the great circle route around the earth, but only 8491188 metres following the straight line through the earth.</p>\r\n<p>For this problem, assume that the earth is a perfect sphere with radius of 6371009 metres.</p>', '<p>The first line of input contains a single integer, the number of test cases to follow. Each test case is one line containing four floating point numbers: the latitude and longitude of the origin of the trip, followed by the latitude and longitude of the destination of the trip. All of these measurements are in degrees. Positive numbers indicate North latitude and East longitude, while negative numbers indicate South latitude and West longitude.</p>', '<p>For each test case, output a line containing a single integer, the difference in the distance between the two points following the great circle route around the surface of the earth and following the straight line through the earth, in metres. Round the difference of the distances to the nearest integer number of metres.</p>', 'D:\\oj\\data\\2071', 'D:\\oj\\data\\2071', '1\r\n43.466667 -80.516667 30.058056 31.228889', '802333', '', '', '', '2011-06-10 19:39:33', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 29, 'power721'),
(2072, 'Problem A: CD', '<p></p>\r\n<h2>Problem A: CD</h2>\r\n<p><img align="right" src="images/problem/pic2072_0" alt="" />  Jack and Jill have decided to sell some of their  Compact Discs, while they still have some value. They have decided to sell one of each of the CD titles that they both own.  How many CDs can Jack and Jill sell?</p>\r\n<p>Neither Jack nor Jill owns more than one copy of each CD.</p>', '<p>The input consists of a sequence of test cases. The first line of each test case contains two non-negative integers N and M, each at most one million, specifying the number of CDs owned by Jack and by Jill, respectively. This line is followed by N lines listing the catalog numbers of the CDs owned by Jack in increasing order, and M more lines listing the catalog numbers of the CDs owned by Jill in  increasing order. Each catalog number is a positive integer no greater  than one billion. The input is terminated by a line containing two zeros. This last line  is not a test case and should not be processed.</p>', '<p>For each test case, output a line containing one integer, the number of CDs that Jack and Jill both own.</p>', 'D:\\oj\\data\\2072', 'D:\\oj\\data\\2072', '3 3\r\n1\r\n2\r\n3\r\n1\r\n2\r\n4\r\n0 0', '2', '', 'Waterloo ACM Programming Contest September 26, 2010', '', '2011-06-12 07:15:23', 10000, 131072, 'Y', NULL, 1, 1, 100, 0, 0, 1, 1, 10000, 10, 'power721'),
(2073, 'Problem B: Alaska', '<p></p>\r\n<p><img align="right" alt="" src="images/problem/pic2073_0" /></p>\r\n<h2>Problem B: Alaska</h2>\r\n<p>The Alaska Highway runs 1422 miles from Dawson Creek, British Columbia to Delta Junction, Alaska.  Brenda would like to be the first person to drive her new electric car the length of the highway.  Her car can travel up to 200 miles once charged at a special charging station. There is a charging station in Dawson Creek, where she begins her journey, and also several charging stations along the way.  Can Brenda drive her car from Dawson City to Delta Juntion and back?</p>\r\n<p></p>', '<p>The input contains several scenario.  Each scenario begins with a line containing <i>n</i>, a positive number indicating the number of charging stations.  <i>n</i> lines follow, each giving the location of a filling station on the highway, including the one in Dawson City.  The location is an integer between 0 and 1422, inclusive, indicating the distance in miles from Dawson Creek.  No two filling stations are at the same location.  A line containing 0 follows the last scenario.</p>', '<p>For each scenario, output a line containing <tt>POSSIBLE</tt> if Brenda can make the trip. Otherwise, output a line containing the word <tt>IMPOSSIBLE</tt>.</p>', 'D:\\oj\\data\\2073', 'D:\\oj\\data\\2073', '2\r\n0\r\n900\r\n8\r\n1400\r\n1200\r\n1000\r\n800\r\n600\r\n400\r\n200\r\n0\r\n0', 'IMPOSSIBLE\r\nPOSSIBLE', '', 'Waterloo ACM Programming Contest September 26, 2010', '', '2011-06-10 19:39:33', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 23, 'power721'),
(2074, 'Problem C: Celebrity Split', '<p></p>\r\n<h2>Problem C: Celebrity Split</h2>\r\n<p><img align="right" src="images/problem/pic2074_0" alt="" />  Jack and Jill have decided to separate and divide their property equally. Each of their N mansions has a value between 1,000,000 and 40,000,000 dollars. Jack will receive some of the mansions; Jill will receive some of the mansions; the remaining mansions will be sold, and the proceeds split equally.</p>\r\n<p>Neither Jack nor Jill can tolerate the other receiving property with higher total value. The sum of the values of the mansions Jack receives must be equal to the sum of the values of the mansions Jill receives.  So long as the value that each receives is equal, Jack and Jill would like each to receive property of the highest possible value.</p>\r\n<p>Given the values of <b>N</b> mansions, compute the value of the mansions that must be sold so that the rest may be divided so as to satisfy Jack and Jill.</p>\r\n<p></p>\r\n<h3>Example</h3>\r\n<p>Suppose Jack and Jill own 5 mansions valued at 6,000,000, 30,000,000, 3,000,000, 11,000,000, and 3,000,000 dollars.  To satisfy their requirements, Jack or Jill would receive the mansion worth 6,000,000 and the other would receive both manstions worth 3,000,000 dollars.  The mansions worth 11,000,000 and 30,000,000 dollars would be sold, for a total of 41,000,000 dollars.  The answer is therefore 41000000.</p>', '<p>The input consists of a sequence of test cases. The first line of each test case contains a single integer <b>N</b>, the number of mansions, which will be no more than 24. This line is followed by <b>N</b> lines, each giving the value of a mansion. The final line of input contains the integer zero. This line is not a test case and should not be processed.</p>', '<p>For each test case, output a line containing a single integer, the value of the mansions that must be sold so that the rest may be divided so as to satisfy Jack and Jill.</p>\r\n<h3></h3>', 'D:\\oj\\data\\2074', 'D:\\oj\\data\\2074', '5\r\n6000000\r\n30000000\r\n3000000\r\n11000000\r\n3000000\r\n0', '41000000', '', 'Waterloo ACM Programming Contest September 26, 2010', '', '2011-06-10 19:39:33', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 120000, 27, 'power721'),
(2075, 'Problem D: Knight''s Trip', '<p></p>\r\n<h2>Problem D: Knight''s Trip</h2>\r\n<p><img align="right" src="images/problem/pic2075_0" alt="" />  In chess, each move of a knight consists of moving by two squares horizontally and one square vertically, or by one square horizontally and two squares vertically. A knight making one move from location (0,0) of an infinite chess board would end up at one of the following eight locations: (1,2),  (-1,2),  (1,-2),  (-1,-2),  (2,1), (-2,1), (2,-1), (-2,-1).</p>\r\n<p>Starting from location (0,0), what is the minimum number of moves required for a knight to get to some other arbitrary location (x,y)?</p>', '<p>Each line of input contains two integers <i>x</i> and <i>y</i>, each with absolute value at most one billion. The integers designate a location (<i>x</i>,<i>y</i>) on the infinite chess board. The final line contains the word <tt>END</tt>.</p>', '<p>For each location in the input, output a line containing one integer, the minimum number of moves required for a knight to move from (0,0) to (<i>x</i>, <i>y</i>).</p>', 'D:\\oj\\data\\2075', 'D:\\oj\\data\\2075', '1 2\r\n2 4\r\nEND', '1\r\n2', '', 'Waterloo ACM Programming Contest September 26, 2010', '', '2011-06-10 19:39:33', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 24, 'power721'),
(2076, 'Problem E - Paintball', '<p></p>\r\n<h2>Problem E - Paintball</h2>\r\n<p><img align="right" src="images/problem/pic2076_0" alt="" />  You are playing paintball on a 1000x1000 square field.  A number of your opponents are on the field hiding behind trees at various positions. Each opponent can fire a paintball a certain distance in any direction. Can you cross the field without being hit by a paintball?</p>\r\n<p>Assume that the southwest corner of the field is at (0,0) and the northwest corner at (0,1000).  The input consists of a line containing n &lt;= 1000, the number of opponents.  A line follows for each opponent, containing three real numbers:  the (x,y) location of the opponent and its firing range.  The opponent can hit you with a paintball if you ever pass within his firing range.</p>\r\n<p>You must enter the field somewhere between the southwest and northwest corner and must leave somewhere between the southeast and northeast corners.</p>\r\n<p>If you can complete the trip, output four real numbers with two digits after the decimal place, the coordinates at which you may enter and leave the field, separated by spaces.  If you can enter and leave at several places, give the most northerly.  If there is no such pair of positions, print the line: <br />\r\n<tt>IMPOSSIBLE</tt></p>', '', '', 'D:\\oj\\data\\2076', 'D:\\oj\\data\\2076', '3\r\n500 500 499\r\n0 0 999\r\n1000 1000 200', '0.00 1000.00 1000.00 800.00', '', 'Waterloo ACM Programming Contest September 26, 2010', '', '2011-06-10 19:39:33', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 15, 'power721'),
(2077, 'Problem A: Egypt', '<p></p>\r\n<p>\r\n<title></title>\r\n<img align="right" width="300" alt="" src="images/problem/pic2077_0" /></p>\r\n<h2>Problem A: Egypt</h2>\r\n<p>A long time ago, the Egyptians figured out that a triangle with sides of length 3, 4, and 5 had a right angle as its largest angle.   You must determine if other triangles have a similar property.</p>\r\n<h2>The Input</h2>\r\n<p>Input represents several test cases, followed by a line containing 0 0 0. Each test case has three positive integers, less than 30,000, denoting the lengths of the sides of a triangle.</p>\r\n<h2>The Output</h2>\r\n<p>For each test case, a line containing "right" if the triangle is a right triangle, and a line containing "wrong" if the triangle is not a right triangle.</p>', '', '', 'D:\\oj\\data\\2077', 'D:\\oj\\data\\2077', '6 8 10\r\n25 52 60\r\n5 12 13\r\n0 0 0', 'right\r\nwrong\r\nright', '', 'Waterloo October 2, 2010', '', '2011-06-11 12:53:41', 1000, 131072, 'Y', NULL, 1, 1, 100, 0, 0, 1, 1, 1000, 7, 'power721');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(2078, 'Problem B: Buzzwords', '<p></p>\r\n<h2>Problem B: Buzzwords</h2>\r\n<p><img align="right" width="500" alt="" src="images/problem/pic2078_0" />  The word the is the most common three-letter word. It even shows up inside other words, such as "o<b>the</b>r" and "ma<b>the</b>matics". Sometimes it hides, split between two words, such as "no<b>t he</b>re". Have you ever wondered what the most common words of lengths other than three are?</p>\r\n<p>Your task is the following. You will be given a text. In this text, find the most common word of length one. If there are multiple such words, any one will do. Then count how many times this most common word appears in the text. If it appears more than once, output how many times it appears. Then repeat the process with words of length 2, 3, and so on, until you reach such a length that there is no longer any repeated word of that length in the text.</p>', '<p>The input consists of a sequence of lines. The last line of input is empty and should not be processed. Each line of input other than the last contains at least one but no more than one thousand uppercase letters and spaces. The spaces are irrelevant and should be ignored.</p>', '<p>For each line of input, output a sequence of lines, giving the number of repetitions of words of length 1, 2, 3, and so on. When you reach a length such that there are no repeated words of that length, output one blank line, do not output anything further for that input line, and move on to the next line of input.</p>', 'D:\\oj\\data\\2078', 'D:\\oj\\data\\2078', 'THE OTHER MATHEMATICS NOT HERE\r\nAA', '5\r\n4\r\n4\r\n2\r\n2\r\n\r\n2', '', 'Waterloo October 2, 2010', '', '2011-06-10 19:39:55', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721'),
(2079, 'Problem C: Ferry Loading V<font color=black>(need SPJ)</font>', '<p></p>\r\n<p>\r\n<title></title>\r\n<img align="right" width="500" src="images/problem/pic2079_0" alt="" /></p>\r\n<h2>Problem C: Ferry Loading V</h2>\r\n<p>Before bridges were common, ferries were used to transport vehicles across rivers.  River ferries, unlike their larger cousins, run on a guide line and are powered by the river''s current.  Two lanes of vehicles drive onto the ferry from one end, the ferry crosses the river, and the vehicles exit from the other end of the ferry.</p>\r\n<p>The vehicles waiting to board the ferry form a single queue, and the operator directs each vehicle in turn to drive onto the port (left) or starboard (right) lane of the ferry so as to balance the load. Each vehicle in the queue has a different weight, which the operator estimates by inspecting the queue.</p>\r\n<p>Given <i>n</i> vehicles, you are to compute how to divide them between the port and starboard lanes so that the weight of vehicles on each side is nearly equal.</p>\r\n<p>Input contains several test cases.  Each test case begins with 1 &lt;  <i>n</i> &le; 100; the number of vehicles to be boarded. Consider the vehicles to be numbered 1 through <i>n</i>.  <i>n</i> lines follow; the <i>i</i>th line gives the weight in tonnes of the <i>i</i>th vehicle - a positive real number not greater than 100.  A line containing 0 follows the last test case.</p>\r\n<p>For each test case, output a single line giving the numbers of the vehicles that should be directed to the starboard lane.  Assume that the other vehicles will be directed to the port lane.  The total weight of vehicles on the port side should not differ from that on the starboard side by more than 2%.  If there are many solutions, any one will do. There will always be a solution; indeed, there will always be a solution that balances within 1%, but you aren''t required to find it.</p>', '', '', 'D:\\oj\\data\\2079', 'D:\\oj\\data\\2079', '5\r\n10.0\r\n50.0\r\n90.0\r\n38.0\r\n7.1\r\n0', '3 5', '暂时没有SPJ.', 'Waterloo October 2, 2010', '', '2011-06-10 19:39:55', 10000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 10000, 28, 'power721'),
(2080, 'Problem D: Driving Range', '<p></p>\r\n<h2>Problem D: Driving Range</h2>\r\n<p><img align="right" src="images/problem/pic2080_0" alt="" />  These days, many carmakers are developing cars that run on electricity instead of gasoline. The batteries used in these cars are generally very heavy and expensive, so designers must make an important tradeoffs when determining the battery capacity, and therefore the range, of these vehicles. Your task is to help determine the minimum range necessary so that it is possible for the car to travel between any two cities on the continent.</p>\r\n<p>The road network on the continent consists of cities connected by bidirectional roads of different lengths. Each city contains a charging station. Along a route between two cities, the car may pass through any number of cities, but the distance between each pair of consecutive cities along the route must be no longer than the range of the car. What is the minimum range of the car so that there is a route satisfying this constraint between every pair of cities on the continent?</p>\r\n<p></p>', '<p>The input consists of a sequence of road networks. The first line of each road network contains two positive integers <i>n</i> and <i>m</i>, the number of cities and roads. Each of these integers is no larger than one million. The cities are numbered from 0 to <i>n</i>-1. The first line is followed by <i>m</i> more lines, each describing a road. Each such line contains three non-negative integers. The first two integers are the numbers of the two cities connected by the road. The third integer is the length of the road. The last road network is followed by a line containing two zeros, indicating the end of the input.</p>', '<p>For each road network, output a line containing one integer, the minimum range of the car that enables it to drive from every city to every other city. If it is not possible to drive from some city to some other city regardless of the range of the car, instead output a line containing the word <tt>IMPOSSIBLE</tt>.</p>', 'D:\\oj\\data\\2080', 'D:\\oj\\data\\2080', '3 3\r\n0 1 3\r\n1 2 4\r\n2 1 5\r\n2 0\r\n0 0', '4\r\nIMPOSSIBLE', '', 'Waterloo October 2, 2010', '', '2011-06-10 19:39:55', 10000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 10000, 16, 'power721'),
(2081, 'Problem E: Frosh Week', '<p></p>\r\n<h2>Problem E: Frosh Week</h2>\r\n<p><img align="right" alt="" src="images/problem/pic2081_0" />  During Frosh Week, students play various fun games to get to know each other and compete against other teams. In one such game, all the frosh on a team stand in a line, and are then asked to arrange themselves according to some criterion, such as their height, their birth date, or their student number. This rearrangement of the line must be accomplished only by successively swapping pairs of consecutive students. The team that finishes fastest wins. Thus, in order to win, you would like to minimize the number of swaps required.</p>', '<p>The first line of input contains one positive integer n, the number of students on the team, which will be no more than one million. The following n lines each contain one integer, the student number of each student on the team. No student number will appear more than once.</p>', '<p>Output a line containing the minimum number of swaps required to arrange the students in increasing order by student number.</p>', 'D:\\oj\\data\\2081', 'D:\\oj\\data\\2081', '3\r\n3\r\n1\r\n2', '2', '', 'Waterloo October 2, 2010', '', '2011-06-10 19:40:03', 10000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 10000, 18, 'power721'),
(2082, 'Problem A - Billiard', '<p></p>\r\n<p>\r\n<title></title>\r\n</p>\r\n<h2>Problem A - Billiard</h2>\r\n<p>In a billiard table with horizontal side <b>a</b> inches and vertical side <b>b</b> inches, a ball is launched from the middle of the table.  After <b>s</b> &gt; 0 seconds the ball returns to the point from which it was launched, after having made <b>m</b> bounces off the vertical sides and <b>n</b> bounces off the horizontal sides of the table.  Find the launching angle <b>A</b> (measured from the horizontal), which will be between 0 and 90 degrees inclusive, and the initial velocity of the ball.</p>\r\n<p>Assume that the collisions with a side are elastic (no energy loss), and thus the velocity component of the ball parallel to each side remains unchanged.  Also, assume the ball has a radius of zero.  Remember that, unlike pool tables, billiard tables have no pockets.</p>', '<p>Input consists of a sequence of lines, each containing five nonnegative integers separated by whitespace. The five numbers are: a, b, s, m, and n, respectively. All numbers are positive integers not greater than 10000. Input is terminated by a line containing five zeroes.</p>', 'For each input line except the last, output a line containing two real numbers (accurate to two decimal places) separated by a single space. The first number is the measure of the angle A in degrees and the second is the velocity of the ball measured in inches per second, according to the description above.', 'D:\\oj\\data\\2082', 'D:\\oj\\data\\2082', '100 100 1 1 1\r\n200 100 5 3 4\r\n201 132 48 1900 156\r\n0 0 0 0 0', '45.00 141.42\r\n33.69 144.22\r\n3.09 7967.81', '', '', '', '2011-06-10 19:40:14', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 16, 'power721'),
(2083, 'Problem B - The Brick Stops Here', '<p></p>\r\n<p>\r\n<title></title>\r\n</p>\r\n<h2>Problem B - The Brick Stops Here</h2>\r\n<p>You have been hired by several clients of a factory that manufactures brass bricks.  Brass is an alloy of copper and zinc; each brick weighs 1000 grams, and the copper content of a brick can range from 1 to 999 grams.  (Note that brass with less than 55% or more than 62% of copper is practically useless; however, this is irrelevant for this question)  The factory manufactures, through various processes, different types of brick, each of which has a different copper concentration and price.  It distributes a catalog of these types to its customers.</p>\r\n<p>Your clients desire to buy a certain number (<b>M</b>) of bricks, which for, uh, religious reasons must be of different types.  They will be melted together, and the resultant mixture must have a concentration of at least <b>CMin</b> and at most <b>CMax</b> grams of copper per kilogram.  Their goal is to pick the <b>M</b> types of brick so that the mixture has the correct concentration and the price of the collection is minimized.  You must figure out how to do this.  <b>M</b>, <b>CMin</b>, and <b>CMax</b> will vary depending on the client.</p>', '<p></p>\r\n<p><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">The first part of input consists of a line containing a number</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">&nbsp;</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; "><b>N</b></span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">&nbsp;</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">(1 &lt;=</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">&nbsp;</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; "><b>N</b></span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">&nbsp;</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">&lt;= 200), the number of brick types, and then</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">&nbsp;</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; "><b>N</b></span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">lines containing the copper concentration (between 1 and 999) and price (in cents) of each brick type. No brick costs more than 10 dollars.</span></p>\r\n<p>\r\n<meta http-equiv="content-type" content="text/html; charset=utf-8" /></p>\r\n<p style="font-family: ''AR PL UKai CN''; font-size: medium; ">The second part consists of a line containing a number&nbsp;<b>C</b>&nbsp;(1 &lt;=&nbsp;<b>C</b>&nbsp;&lt;= 100), the number of clients you are serving, followed by<b>C</b>&nbsp;lines containing&nbsp;<b>M</b>&nbsp;(1 &lt;=&nbsp;<b>M</b>&nbsp;&lt;= 20),&nbsp;<b>CMin</b>&nbsp;(1 &lt;=&nbsp;<b>CMin</b>&nbsp;&lt;= 999), and&nbsp;<b>CMax</b>&nbsp;(1 &lt;=&nbsp;<b>CMax</b>&nbsp;&lt;= 999) for each client.</p>\r\n<p></p>\r\n<p></p>', '<p></p>\r\n<p><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">Output consists of a line for each client containing the minimum possible price for which they can purchase bricks to meet their demands. If there is no way to match their specifications, output "impossible".</span></p>\r\n<p>\r\n<meta http-equiv="content-type" content="text/html; charset=utf-8" /></p>\r\n<p></p>', 'D:\\oj\\data\\2083', 'D:\\oj\\data\\2083', '11\r\n550 300\r\n550 200\r\n700 340\r\n300 140\r\n600 780\r\n930 785\r\n730 280\r\n678 420\r\n999 900\r\n485 390\r\n888 800\r\n3\r\n2 500 620\r\n9 550 590\r\n9 610 620', '420\r\nimpossible\r\n3635', '', '', '', '2011-06-10 19:40:14', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 37, 'power721'),
(2084, 'Problem C - Election', '<p></p>\r\n<p>\r\n<title></title>\r\n</p>\r\n<h2>Problem C - Election</h2>\r\n<p>Canada has a multi-party system of government.  Each candidate is generally associated with a party, and the party whose candidates win the most ridings generally forms the government.  Some candidates run as independents, meaning they are not associated with any party. Your job is to count the votes for a particular riding and to determine the party with which the winning candidate is associated.</p>', '<p></p>\r\n<p><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">The first line of input contains a positive integer</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">&nbsp;</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; "><b>n</b></span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">&nbsp;</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">satisfying 2 &lt;=</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">&nbsp;</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; "><b>n</b></span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">&nbsp;</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">&lt;= 20, the number of candidates in the riding.</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">&nbsp;</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; "><b>n</b></span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">pairs of lines follow: the first line in each pair is the name of the candidate, up to 80 characters; the second line is the name of the party, up to 80 characters, or the word "independent" if the candidate has no party. No candidate name is repeated and no party name is repeated in the input. No lines contain leading or trailing blanks.</span></p>\r\n<p>\r\n<meta http-equiv="content-type" content="text/html; charset=utf-8" /></p>\r\n<p></p>\r\n<p></p>', '<p></p>\r\n<p><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">Output consists of a single line containing one of:</span></p>\r\n<p>\r\n<meta http-equiv="content-type" content="text/html; charset=utf-8" /></p>\r\n<ul style="font-family: ''AR PL UKai CN''; font-size: medium; ">\r\n    <li>The name of the party with whom the winning candidate is associated, if there is a winning candidate and that candidate is associated with a party.</li>\r\n    <li>The word "independent" if there is a winning candidate and that candidate is not associated with a party.</li>\r\n    <li>The word "tie" if there is no winner; that is, if no candidate receives more votes than every other candidate.</li>\r\n</ul>\r\n<p></p>\r\n<p></p>', 'D:\\oj\\data\\2084', 'D:\\oj\\data\\2084', '3\r\nMarilyn Manson\r\nRhinoceros\r\nJane Doe\r\nFamily Coalition\r\nJohn Smith\r\nindependent\r\n6\r\nJohn Smith\r\nMarilyn Manson\r\nMarilyn Manson\r\nJane Doe\r\nJohn Smith\r\nMarilyn Manson', 'Rhinoceros', '', '', '', '2011-06-10 19:40:14', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 20, 'power721'),
(2085, 'Problem D - Maze', '<p></p>\r\n<p>\r\n<title></title>\r\n</p>\r\n<h2>Problem D - Maze</h2>\r\n<p>You have been blindfolded and deposited someplace in a maze.  You have no idea where you are.  You do know, however, that the maze is laid out on a grid, and that each grid location is either blocked or free.  In fact, you have memorized a map of the maze.  Also, your magnetic personality allows you to always sense which direction is north.</p>\r\n<p>In this maze, you have four possible moves: north, south, east, and west. Your task is to find the shortest sequence of moves that will guarantee your escape, regardless of your initial placement in the maze.  You have "escaped" whenever you reach a square on an outside edge of the grid (and if you start there, then you''ve already escaped).  Further moves are irrelevant once you have escaped.  If you try to walk into a wall, you will simply stay in the same spot.</p>\r\n<p>You may assume that it is possible to escape from every unblocked position in the maze.</p>', '<p></p>\r\n<p><span style="font-family: ''AR PL UKai CN''; font-size: medium;" class="Apple-style-span">Input consists of a positive integer</span><span style="font-family: ''AR PL UKai CN''; font-size: medium;" class="Apple-style-span">&nbsp;</span><span style="font-family: ''AR PL UKai CN''; font-size: medium;" class="Apple-style-span"><b>n</b></span><span style="font-family: ''AR PL UKai CN''; font-size: medium;" class="Apple-style-span">&nbsp;</span><span style="font-family: ''AR PL UKai CN''; font-size: medium;" class="Apple-style-span">&lt;= 8, followed by</span><span style="font-family: ''AR PL UKai CN''; font-size: medium;" class="Apple-style-span">&nbsp;</span><span style="font-family: ''AR PL UKai CN''; font-size: medium;" class="Apple-style-span"><b>n</b></span><span style="font-family: ''AR PL UKai CN''; font-size: medium;" class="Apple-style-span">&nbsp;</span><span style="font-family: ''AR PL UKai CN''; font-size: medium;" class="Apple-style-span">lines giving the rows of an</span><span style="font-family: ''AR PL UKai CN''; font-size: medium;" class="Apple-style-span">&nbsp;</span><span style="font-family: ''AR PL UKai CN''; font-size: medium;" class="Apple-style-span"><b>n</b></span><span style="font-family: ''AR PL UKai CN''; font-size: medium;" class="Apple-style-span">&nbsp;</span><span style="font-family: ''AR PL UKai CN''; font-size: medium;" class="Apple-style-span">by</span><span style="font-family: ''AR PL UKai CN''; font-size: medium;" class="Apple-style-span">&nbsp;</span><span style="font-family: ''AR PL UKai CN''; font-size: medium;" class="Apple-style-span"><b>n</b></span><span style="font-family: ''AR PL UKai CN''; font-size: medium;" class="Apple-style-span">&nbsp;</span><span style="font-family: ''AR PL UKai CN''; font-size: medium;" class="Apple-style-span">grid. This grid describes the maze you are trapped in. Written on the screen, north is up. Blocked locations are denoted by the character "O" (that''s an uppercase "o"), while unblocked locations are indicated by the character ".".</span>&nbsp;</p>\r\n<p>\r\n<meta content="text/html; charset=utf-8" http-equiv="content-type" /></p>\r\n<p></p>', '<p></p>\r\n<p><span style="font-family: ''AR PL UKai CN''; font-size: medium;" class="Apple-style-span">Output consists of a number of lines, each consisting of one of "north", "south", "east", or "west", indicating the shortest sequence of moves that guarantees escape for any possible unblocked starting position.</span></p>\r\n<p>\r\n<meta content="text/html; charset=utf-8" http-equiv="content-type" /></p>\r\n<p></p>\r\n<p></p>', 'D:\\oj\\data\\2085', 'D:\\oj\\data\\2085', '4\r\nOO.O\r\n...O\r\nOO..\r\nO..O', 'east\r\nnorth', '', '', '', '2011-06-10 19:40:14', 10000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 10000, 16, 'power721'),
(2086, 'Problem E - Boastin'' Red Socks', '<p></p>\r\n<p>\r\n<title></title>\r\n</p>\r\n<h2>Problem E - Boastin'' Red Socks</h2>\r\n<p>You have a drawer that is full of two kinds of socks: red and black.  You know that there are at least 2 socks, and not more than 50000.  However, you do not know how many there actually are, nor do you know how many are red, or how many are black.  (Your mother does the laundry!)</p>\r\n<p>You have noticed, though, that when you reach into the drawer each morning and choose two socks to wear (in pitch darkness, so you cannot distinguish red from black), the probability that you pick two red socks is exactly <b>p</b>/<b>q</b>, where 0 &lt; <b>q</b> and 0 &lt;= <b>p</b> &lt;= <b>q</b>.</p>\r\n<p>From this, can you determine how many socks of each colour are in your drawer? There may be multiple solutions - if so, pick the solution with the fewest total number of socks.</p>', '<p></p>\r\n<p><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">Input consists of multiple problems, each on a separate line. Each problem consists of the integers</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">&nbsp;</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; "><b>p</b></span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">&nbsp;</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">and</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">&nbsp;</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; "><b>q</b></span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">&nbsp;</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">separated by a single space. Note that</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">&nbsp;</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; "><b>p</b></span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">&nbsp;</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">and</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">&nbsp;</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; "><b>q</b></span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">&nbsp;</span><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">will both fit into an unsigned long integer.</span></p>\r\n<p><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">Input is terminated by a line consisting of two zeroes.</span></p>\r\n<p>\r\n<meta http-equiv="content-type" content="text/html; charset=utf-8" />\r\n<meta http-equiv="content-type" content="text/html; charset=utf-8" /></p>\r\n<p></p>\r\n<p></p>', '<p></p>\r\n<p><span class="Apple-style-span" style="font-family: ''AR PL UKai CN''; font-size: medium; ">For each problem, output a single line consisting of the number of red socks and the number of black socks in your drawer, separated by one space. If there is no solution to the problem, print "impossible".</span></p>\r\n<p>\r\n<meta http-equiv="content-type" content="text/html; charset=utf-8" /></p>\r\n<p></p>', 'D:\\oj\\data\\2086', 'D:\\oj\\data\\2086', '1 2\r\n6 8\r\n12 2499550020\r\n56 789\r\n0 0', '3 1\r\n7 1\r\n4 49992\r\nimpossible', '', '', '', '2011-06-10 19:40:14', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 24, 'power721'),
(2087, 'Problem A: Fire Station', '<p></p>\r\n<p>\r\n<title></title>\r\n</p>\r\n<h2>Problem A: Fire Station</h2>\r\n<p>A city is served by a number of fire stations.  Some residents have complained that the distance from their houses to the nearest station is too far, so a new station is to be built.  You are to choose the location of the fire station so as to reduce the distance to the nearest station from the houses of the disgruntled residents.</p>\r\n<p>The city has up to 500 intersections, connected by road segments of various lengths.  No more than 20 road segments intersect at a given intersection.  The location of houses and firestations alike are considered to be at intersections (the travel distance from the intersection to the actual building can be discounted).  Furthermore, we assume that there is at least one house associated with every intersection.  There may be more than one firestation per intersection.</p>', '<p>The first line of input contains two positive integers:  <i>f</i>,the  number of existing fire stations (<i>f</i> &lt;= 100) and <i>i</i>, the number of  intersections  (<i>i</i> &lt;= 500).  The intersections are numbered from 1 to <i>i</i> consecutively.  <i>f</i> lines follow; each contains the intersection number at which an existing fire station is found.  A number of lines follow, each containing three positive integers:  the number of an intersection, the number of a different intersection, and the length of the road segment connecting the intersections.  All road segments are two-way (at least as far as fire engines are concerned), and there will exist a route between any pair of intersections.</p>', '<p>You are to output a single integer:  the lowest intersection number at  which a new fire station should be built so as to minimize the maximum distance from any intersection to the nearest fire station.</p>', 'D:\\oj\\data\\2087', 'D:\\oj\\data\\2087', '1 6\r\n2\r\n1 2 10\r\n2 3 10\r\n3 4 10\r\n4 5 10\r\n5 6 10\r\n6 1 10', '5', '', '', '', '2011-06-10 19:40:14', 10000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 10000, 40, 'power721'),
(2088, 'Problem B: Soundex', '<p></p>\r\n<p>\r\n<title></title>\r\n</p>\r\n<h2>Problem B: Soundex</h2>\r\n<p>Soundex coding groups together words that appear to sound alike based on their spelling.  For example, "can" and "khawn", "con" and "gone" would be equivalent under Soundex coding.</p>\r\n<p>Soundex coding involves translating each word into a series of digits in which each digit represents a letter:</p>\r\n<pre>\r\n      1 represents B, F, P, or V\r\n      2 represents C, G, J, K, Q, S, X,  or Z\r\n      3 represents D or T\r\n      4 represents L\r\n      5 represents M or N\r\n      6 represents R\r\n</pre>\r\n<p>The letters A, E, I, O, U, H, W, and Y are not represented in Soundex coding, and repeated letters with the same code digit are represented by a single instance of that digit.  Words with the same Soundex coding are considered equivalent.</p>\r\n<p>Each line of input contains a single word, all upper case, less than 20 letters long.  For each line of input, produce a line of output giving the Soundex code.</p>', '', '', 'D:\\oj\\data\\2088', 'D:\\oj\\data\\2088', 'KHAWN\r\nPFISTER\r\nBOBBY', '25\r\n1236\r\n11', '', '', '', '2011-06-10 19:40:14', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 15, 'power721'),
(2089, 'Problem C: Ferry Loading', '<p></p>\r\n<p>\r\n<title></title>\r\n</p>\r\n<h2>Problem C: Ferry Loading</h2>\r\n<p>Before bridges were common, ferries were used to transport cars across rivers.  River ferries, unlike their larger cousins, run on a guide line and are powered by the river''s current.  Two lanes of cars drive onto the ferry from one end, the ferry crosses the river, and the cars exit from the other end of the ferry.</p>\r\n<p>The cars waiting to board the ferry form a single queue, and the operator directs each car in turn to drive onto the port (left) or starboard (right) lane of the ferry so as to balance the load. Each car in the queue has a different length, which the operator estimates by inspecting the queue.  Based on this inspection, the operator decides which side of the ferry each car should board, and boards as many cars as possible from the queue, subject to the length limit of the ferry. Your job is to write a program that will tell the operator which car to load on which side so as to maximize the number of cars loaded.</p>', '<p>The first line of input contains a single integer between 1 and 100: the length of the ferry (in metres). For each car in the queue there is an additional line of input  specifying the length of the car (in cm, an integer between 100 and 3000  inclusive).   A final line of input contains the integer 0. The cars must be loaded in order, subject to the constraint that the total length of cars on either side does not exceed the length of the ferry. Subject to this constraint as many cars should be loaded as possible, starting with the first car in the queue and loading cars in order until no more can be loaded.</p>', '<p>The first line of outuput should give the number of cars that can be loaded onto the ferry. For each car that can be loaded onto the ferry, in the order the cars appear in the input, output a line containing "port" if the car is to be directed to the port side and "starboard" if the car is to be directed to the starboard side.  If several arrangements of the cars meet the criteria above, any one will do.</p>', 'D:\\oj\\data\\2089', 'D:\\oj\\data\\2089', '50\r\n2500\r\n3000\r\n1000\r\n1000\r\n1500\r\n700\r\n800\r\n0', '6\r\nport\r\nstarboard\r\nstarboard\r\nport\r\nport\r\nstarboard', '', '', '', '2011-06-10 19:40:14', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 15, 'power721'),
(2090, 'Problem D:  Dog & Gopher', '<p></p>\r\n<p>\r\n<title></title>\r\n</p>\r\n<h2>Problem D:  Dog &amp; Gopher</h2>\r\n<p>A large field has a dog and a gopher.  The dog wants to eat the gopher, while the gopher wants to run to safety through one of several gopher holes dug in the surface of the field.</p>\r\n<p>Neither the dog nor the gopher is a math major; however, neither is entirely stupid. The gopher decides on a particular gopher hole and heads for that  hole in a straight line at a fixed speed.  The dog, which is very good at reading body language, anticipates which hole the gopher has chosen, and heads at double the speed of the gopher to the hole, where it intends to gobble up the gopher.  If the dog reaches the hole first, the gopher gets gobbled; otherwise, the gopher escapes.</p>\r\n<p>You have been retained by the gopher to select a hole through which it can escape, if such a hole exists.</p>\r\n<p>The first line of input contains four floating point numbers:  the  (x,y) coordinates of the gopher followed by the (x,y) coordinates of the dog.  Subsequent lines of input each contain two floating point numbers:  the (x,y) coordinates of a gopher hole.  All distances are in metres, to the nearest mm.</p>\r\n<p>Your output should consist of a single line.  If the gopher can escape the line should read "The gopher can escape through the hole at (<i>x</i>,<i>y</i>)."  identifying the appropriate hole to the nearest mm.   Otherwise the output line should read "The gopher cannot escape."  If the gopher may escape through more than one hole, any one will do.  If the gopher and dog reach the hole at the same time either answer may be given. There are not more than 1000 gopher holes and all coordinates are between -10000 and +10000.</p>', '', '', 'D:\\oj\\data\\2090', 'D:\\oj\\data\\2090', '1.000 1.000 2.000 2.000\r\n1.500 1.500', 'The gopher cannot escape.', '<h3>Sample Input 2</h3>\r\n<pre>\r\n2.000 2.000 1.000 1.000\r\n1.500 1.500\r\n2.500 2.500\r\n</pre>\r\n<h3>Output for Sample Input 2</h3>\r\n<pre>\r\nThe gopher can escape through the hole at (2.500,2.500).\r\n</pre>', '', '', '2011-06-10 19:40:14', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 20, 'power721'),
(2091, 'Problem E: Gas Station Numbers', '<p></p>\r\n<p>\r\n<title></title>\r\n</p>\r\n<h2>Problem E: Gas Station Numbers</h2>\r\n<p>Many gas stations use plastic digits on an illuminated sign to indicate prices.  When there is an insufficient quantity of a particular digit, the attendant may substitute another one upside down.</p>\r\n<p>The digit "6" looks much like "9" upside down.  The digits "0", "1"  and "8" look  like themselves.  The digit "2" looks a bit like a "5" upside down (well, at least enough so that gas stations use it).</p>\r\n<p>Due to rapidly increasing prices, a certain gas station has used all of its available digits to display the current price.  Fortunately, this shortage of digits need not prevent the attendant from raising  prices.  She can simply rearrange the digits, possibly reversing some of them as described above.</p>\r\n<p>Your job is to compute, given the current price of gas, the next highest price that can be displayed using exactly the same digits. The input consists of several lines, each containing between 2 and 30 digits (to account for future prices) and a decimal point immediately before the last digit. There are no useless leading zeroes; that is, there is a leading zero only if the price is less than 1. You are to compute the next highest price that can be displayed using the same digits and the same format rules.  An input line containing a decimal  point alone terminates the input.  If the price  cannot be raised,  print "The price cannot be raised."</p>', '', '', 'D:\\oj\\data\\2091', 'D:\\oj\\data\\2091', '65.2\r\n76.7\r\n77.7\r\n.', '65.5\r\n77.6\r\nThe price cannot be raised.', '', '', '', '2011-06-10 19:40:14', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 17, 'power721'),
(2092, 'The 3n + 1 problem', '<p>Problems in Computer Science are often classified as belonging to a certain class of problems (e.g., NP, Unsolvable, Recursive).  In this problem you will be analyzing a property of an algorithm whose classification is not known for all possible inputs.</p>\r\n<p></p>\r\n<p>Consider the following algorithm:</p>\r\n<pre><tt> <br />		1. 		 input <i>n</i><br /></tt><p><br /><tt>		2. 		 print <i>n</i><br /></tt></p><p><br /><tt>		3. 		 if <i>n</i> = 1 then STOP<br /></tt></p><p><br /><tt>		4. 		 		 if <i>n</i> is odd then  <img width="95" height="25" src="images/problem/pic2092_0" alt="tex2html_wrap_inline44" /> <br /></tt></p><p><br /><tt>		5. 		 		 else  <img width="74" height="27" src="images/problem/pic2092_1" alt="tex2html_wrap_inline46" /> <br /></tt></p><p><br /><tt>		6. 		 GOTO 2<br /></tt></p><p></p></pre>\r\n<p>Given the input 22, the following sequence of numbers will be printed 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1</p>\r\n<p>It is conjectured that the algorithm above will terminate (when a 1 is printed) for any integral input value.  Despite the simplicity of the algorithm, it is unknown whether this conjecture is true.  It has been verified, however, for all integers <i>n</i> such that 0 &lt; <i>n</i> &lt; 1,000,000 (and, in fact, for many more numbers than this.)</p>\r\n<p>Given an input <i>n</i>, it is possible to determine the number of numbers printed (including  the 1).  For a given <i>n</i> this is called the <em>cycle-length</em> of <i>n</i>.  In the example above, the cycle length of 22 is 16.</p>\r\n<p>For any two numbers <i>i</i> and <i>j</i> you are to determine the maximum cycle length over all numbers between <u> <i>i</i> and <i>j</i>. </u></p>', '<p>The input will consist of a series of pairs of integers <i>i</i> and <i>j</i>, one pair of integers per line.  All integers will be less than 1,000,000 and greater than 0.</p>\r\n<p>You should process all pairs of integers and for each pair determine the maximum cycle length over all integers between and including <i>i</i> and <i>j</i>.</p>', '<p>For each pair of input integers <i>i</i> and <i>j</i> you should output <i>i</i>, <i>j</i>, and the maximum cycle length for integers between and including <i>i</i> and <i>j</i>.  These three numbers should be separated by at least one space with all three numbers on one line and with one line of output for each line of input.  The integers <i>i</i> and <i>j</i> must appear in the output in the same order in which they appeared in the input and should be followed by the maximum cycle length (on the same line).</p>', 'D:\\oj\\data\\2092', 'D:\\oj\\data\\2092', '1 10\r\n100 200\r\n201 210\r\n900 1000', '1 10 20\r\n100 200 125\r\n201 210 89\r\n900 1000 174', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:14', 1000, 131072, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 0, 'power721'),
(2093, 'The Blocks Problem', '<p>Many areas of Computer Science use simple, abstract domains  for both analytical and empirical studies.  For example, an early AI study of planning and robotics (STRIPS) used a block world in which a robot arm performed tasks involving the manipulation of blocks.</p>\r\n<p>In this problem you will model a simple block world under certain rules and constraints.  Rather than determine how to achieve a specified state, you will ``program'''' a robotic arm to respond to a limited set of commands.</p>\r\n<p>The problem is to parse a series of commands that instruct a robot arm in how to manipulate blocks that lie on a flat table.  Initially there are <i>n</i> blocks on the table (numbered from 0 to <i>n</i>-1) with block <i>b</i><sub><i>i</i></sub> adjacent to block <i>b</i><sub><i>i</i>+1</sub> for all   <img border="0" width="106" height="31" src="images/problem/pic2093_0" alt="$0 \\leq i &lt; n-1$" /> as shown in the diagram below:</p>\r\n<div align="CENTER"><a name="74">&nbsp;</a>\r\n<table width="50%">\r\n    <tbody>\r\n        <tr>\r\n            <td><img width="433" height="52" src="images/problem/pic2093_1" alt="\\begin{figure} \\centering \\setlength{\\unitlength}{0.0125in} % \\begin{picture} (2... ...raisebox{0pt}[0pt][0pt]{$\\bullet \\bullet \\bullet$ }}} \\end{picture} \\end{figure}" /></td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<strong>Figure:</strong> Initial Blocks World</div>\r\n<p></p>\r\n<p>The valid commands for the robot arm that manipulates blocks are:</p>\r\n<ul>\r\n    <li>move <i>a</i> onto <i>b</i>\r\n    <p>where <i>a</i> and <i>b</i> are block numbers, puts block <i>a</i> onto block <i>b</i> after returning any blocks that are stacked on top of blocks <i>a</i> and <i>b</i> to their initial positions.</p>\r\n    <p></p>\r\n    </li>\r\n    <li>move <i>a</i> over <i>b</i>\r\n    <p>where <i>a</i> and <i>b</i> are block numbers, puts block <i>a</i> onto the top of the stack containing block <i>b</i>, after returning any blocks that are stacked on top of block <i>a</i> to their initial positions.</p>\r\n    <p></p>\r\n    </li>\r\n    <li>pile <i>a</i> onto <i>b</i>\r\n    <p>where <i>a</i> and <i>b</i> are block numbers, moves the pile of blocks consisting of block <i>a</i>,  and any blocks that are stacked above block <i>a</i>, onto block <i>b</i>.  All blocks on top of block <i>b</i> are moved to their initial positions prior to the pile taking place.  The blocks stacked above block <i>a</i> retain their order when moved.</p>\r\n    <p></p>\r\n    </li>\r\n    <li>pile <i>a</i> over <i>b</i>\r\n    <p>where <i>a</i> and <i>b</i> are block numbers, puts the pile of blocks consisting of block <i>a</i>, and any blocks that are stacked above  block <i>a</i>, onto the top of the stack containing block <i>b</i>.  The blocks stacked above block <i>a</i> retain their original order when moved.</p>\r\n    <p></p>\r\n    </li>\r\n    <li>quit\r\n    <p>terminates manipulations in the block world.</p>\r\n    </li>\r\n</ul>\r\n<p>Any command in which <i>a</i> = <i>b</i> or in which <i>a</i> and <i>b</i> are in the same stack of blocks is an illegal command.  All illegal commands should be ignored and should have no affect on the configuration of blocks.</p>', '<p>The input begins with an integer <i>n</i> on a line by itself representing the number of blocks in the block world.  You may assume that   0 &lt; <i>n</i> &lt; 25.</p>\r\n<p>The number of blocks is followed by a sequence of block commands, one command per line.  Your program should process all commands until the <tt>quit</tt> command is encountered.</p>\r\n<p>You may assume that all commands will be of the form specified above. There will be no syntactically incorrect commands.</p>', '<p>The output should consist of the final state of the blocks world.  Each original block position numbered <i>i</i>  (  <img border="0" width="76" height="31" alt="$0 \\leq i &lt; n$" src="images/problem/pic2093_2" /> where <i>n</i> is the number of blocks) should appear followed immediately by a colon. If there is at least a block on it, the colon must be followed by one space, followed by a list of  blocks that appear stacked in that position with each block number  separated from other block numbers by a space. Don''t put any trailing  spaces on a line.</p>\r\n<p>There should be one line of output for each block position (i.e., <i>n</i> lines of output where <i>n</i> is the  integer on the first line of input).</p>', 'D:\\oj\\data\\2093', 'D:\\oj\\data\\2093', '10\r\nmove 9 onto 1\r\nmove 8 over 1\r\nmove 7 over 1\r\nmove 6 over 1\r\npile 8 over 6\r\npile 8 over 5\r\nmove 2 over 1\r\nmove 4 over 9\r\nquit', '0: 0\r\n 1: 1 9 2 4\r\n 2:\r\n 3: 3\r\n 4:\r\n 5: 5 8 7 6\r\n 6:\r\n 7:\r\n 8:\r\n 9:', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:14', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 23, 'power721'),
(2094, 'Ecological Bin Packing', '<p>Bin packing, or the placement of objects of certain weights into different bins subject to certain constraints, is an historically interesting problem.  Some bin packing problems are NP-complete but are amenable to dynamic programming solutions or to approximately optimal heuristic solutions.</p>\r\n<p>In this problem you will be solving a bin packing problem that deals with recycling glass.</p>\r\n<p>Recycling glass requires that the glass be separated by color into one of three categories: brown glass, green glass, and clear glass.  In this problem you will be given three recycling bins, each containing a specified number of brown, green and clear bottles.  In order to be recycled, the bottles will need to be moved so that each bin contains bottles of only one color.</p>\r\n<p>The problem is to minimize the number of bottles that are moved.  You may assume that the only problem is to minimize the number of movements between boxes.</p>\r\n<p>For the purposes of this problem, each bin has infinite capacity and the only constraint is moving the bottles so that each bin contains bottles of a single color. The total number of bottles will never exceed 2^31.</p>', '<p>The input consists of a series of lines with each line containing 9 integers.  The first three integers on a line represent the number of brown, green, and clear bottles (respectively) in bin number 1, the second three represent the number of brown, green and clear bottles (respectively) in bin number 2, and the last three integers represent the number of brown, green, and clear bottles (respectively) in bin number 3.  For example, the line 10 15 20 30 12 8 15 8 31</p>\r\n<p>indicates that there are 20 clear bottles in bin 1, 12 green bottles in bin 2, and 15 brown bottles in bin 3.</p>\r\n<p>Integers on a line will be separated by one or more spaces.  Your program should process all lines in the input file.</p>', '<p>For each line of input there will be one line of output indicating what color bottles go in what bin to minimize the number of bottle movements. You should also print the minimum number of bottle movements.</p>\r\n<p>The output should consist of a string of the three upper case characters ''G'', ''B'', ''C'' (representing the colors green, brown, and clear) representing the color associated with each bin.</p>\r\n<p>The first character of the string represents the color associated with the first bin, the second character of the string represents the color associated with the second bin, and the third character represents the color associated with the third bin.</p>\r\n<p>The integer indicating the minimum number of bottle movements should follow the string.</p>\r\n<p>If more than one order of brown, green, and clear bins yields the minimum number of movements then the alphabetically first string representing a minimal configuration should be printed.</p>', 'D:\\oj\\data\\2094', 'D:\\oj\\data\\2094', '1 2 3 4 5 6 7 8 9\r\n5 10 5 20 10 5 10 20 10', 'BCG 30\r\nCBG 50', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:14', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 48, 'power721');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(2095, 'Stacking Boxes', '<p>Consider an <i>n</i>-dimensional ``box'''' given by its dimensions.  In two dimensions the box (2,3) might represent a box with length 2 units and width 3 units.  In three dimensions the box (4,8,9) can represent a box  <img align="MIDDLE" width="68" height="24" alt="tex2html_wrap_inline40" src="images/problem/pic2095_0" />  (length, width, and height).  In 6 dimensions it is, perhaps, unclear what the box (4,5,6,7,8,9) represents; but we can analyze properties of the box such as the sum of its dimensions.</p>\r\n<p></p>\r\n<p>In this problem you will analyze a property of a group of <i>n</i>-dimensional boxes. You are to determine the longest <em>nesting string</em> of boxes, that is a sequence of boxes  <img align="MIDDLE" width="91" height="25" alt="tex2html_wrap_inline44" src="images/problem/pic2095_1" />  such that each box  <img align="MIDDLE" width="11" height="25" alt="tex2html_wrap_inline46" src="images/problem/pic2095_2" />   nests in box  <img align="MIDDLE" width="28" height="26" alt="tex2html_wrap_inline48" src="images/problem/pic2095_3" />  ( <img align="MIDDLE" width="75" height="27" alt="tex2html_wrap_inline50" src="images/problem/pic2095_4" /> .</p>\r\n<p>A box D = ( <img width="96" height="25" alt="tex2html_wrap_inline52" src="images/problem/pic2095_5" /> )  nests in a box E = ( <img align="MIDDLE" width="93" height="17" alt="tex2html_wrap_inline54" src="images/problem/pic2095_6" /> ) if there is some rearrangement of the  <img align="MIDDLE" width="13" height="25" alt="tex2html_wrap_inline56" src="images/problem/pic2095_7" />   such that when rearranged each dimension is less than the corresponding dimension in box E.  This loosely corresponds to turning box D to see if it will fit in box E. However, since any rearrangement suffices, box D can be contorted, not just turned (see examples below).</p>\r\n<p>For example, the box D = (2,6) nests in the box E = (7,3) since D can be rearranged as (6,2) so that each dimension is less than the corresponding dimension in E.  The box D = (9,5,7,3) does NOT nest in the box E = (2,10,6,8) since no rearrangement of D results in a box that satisfies the nesting property, but F = (9,5,7,1) does nest in box E since F can be rearranged as (1,9,5,7) which nests in E.</p>\r\n<p>Formally, we define nesting as follows: box D = ( <img align="MIDDLE" width="96" height="25" alt="tex2html_wrap_inline52" src="images/problem/pic2095_8" /> ) <em>nests</em> in  box E = ( <img align="MIDDLE" width="93" height="17" alt="tex2html_wrap_inline54" src="images/problem/pic2095_6" /> ) if there is a permutation  <img align="BOTTOM" width="8" height="8" alt="tex2html_wrap_inline62" src="images/problem/pic2095_9" />  of  <img align="BOTTOM" width="44" height="12" alt="tex2html_wrap_inline64" src="images/problem/pic2095_10" />  such that  ( <img align="MIDDLE" width="151" height="26" alt="tex2html_wrap_inline66" src="images/problem/pic2095_11" /> ) ``fits'''' in ( <img align="MIDDLE" width="93" height="17" alt="tex2html_wrap_inline54" src="images/problem/pic2095_6" /> ) i.e., if  <img align="MIDDLE" width="68" height="26" alt="tex2html_wrap_inline70" src="images/problem/pic2095_12" />  for all  <img align="MIDDLE" width="70" height="25" alt="tex2html_wrap_inline72" src="images/problem/pic2095_13" /> .</p>', '<p>The input consists of a series of box sequences.  Each box sequence begins with a line consisting of the the number of boxes <i>k</i> in the sequence followed by the dimensionality of the boxes, <i>n</i> (on the same line.)</p>\r\n<p>This line is followed by <i>k</i> lines, one line per box with the <i>n</i> measurements of each box on one line separated by one or more spaces.  The  <img width="18" height="15" alt="tex2html_wrap_inline82" src="images/problem/pic2095_14" />  line in the sequence ( <img width="69" height="26" alt="tex2html_wrap_inline84" src="images/problem/pic2095_15" /> ) gives the measurements for the  <img width="18" height="15" alt="tex2html_wrap_inline82" src="http://127.1:80/web/upload/201012/103img14(1).gif" />  box.</p>\r\n<p>There may be several box sequences in the input file. Your program should process all of them and determine, for each sequence, which of the <i>k</i>  boxes determine the longest nesting string and the length of that nesting string (the number of boxes in the string).</p>\r\n<p>In this problem the maximum dimensionality is 10 and the minimum dimensionality is 1.  The maximum number of boxes in a sequence is 30.</p>', '<p>For each box sequence in the input file, output the length of the longest nesting string on one line followed on the next line by a list of the boxes that comprise this string in order.  The ``smallest'''' or ``innermost'''' box of the nesting string should be listed first, the next box (if there is one) should be listed second, etc.</p>\r\n<p>The boxes should be numbered according to the order in which they appeared in the input file (first box is box 1, etc.).</p>\r\n<p>If there is more than one longest nesting string then any one of them can be output.</p>', 'D:\\oj\\data\\2095', 'D:\\oj\\data\\2095', '5 2\r\n3 7\r\n8 10\r\n5 2\r\n9 11\r\n21 18\r\n8 6\r\n5 2 20 1 30 10\r\n23 15 7 9 11 3\r\n40 50 34 24 14 4\r\n9 10 11 12 13 14\r\n31 4 18 8 27 17\r\n44 32 13 19 41 19\r\n1 2 3 4 5 6\r\n80 37 47 18 21 9', '5\r\n3 1 2 4 5\r\n4\r\n7 2 5 6', '', 'www.csie.nctu.edu.tw', '', '2012-08-15 19:45:18', 1000, 131072, 'N', NULL, 0, 2, 0, 2, 100, 1, 0, 1000, 30, 'power721'),
(2096, 'Arbitrage', '<p>The use of computers in the finance industry has been marked with controversy lately as programmed trading -- designed to take advantage of extremely small fluctuations in prices -- has been outlawed at many Wall Street firms.  The ethics of computer programming is a fledgling field with many thorny issues.</p>\r\n<p><em>Arbitrage</em> is the trading of one currency for another with the hopes of taking advantage of small differences in conversion rates among several currencies in order to achieve a profit.   For example, if $1.00 in U.S. currency buys 0.7 British pounds currency, &pound;1 in British currency buys 9.5 French francs, and 1 French franc buys 0.16 in U.S. dollars, then an arbitrage trader can start with $1.00 and earn  <img width="209" height="24" alt="tex2html_wrap_inline29" src="images/problem/pic2096_0" />  dollars thus earning a profit of 6.4 percent.</p>\r\n<p>You will write a program that determines whether a sequence of currency exchanges can yield a profit as described above.</p>\r\n<p>To result in successful arbitrage, a sequence of exchanges must begin and end with the same currency, but any starting currency may be considered.</p>', '<p>The input file consists of one or more conversion tables.  You must solve the arbitrage problem for each of the tables in the input file.</p>\r\n<p>Each table is preceded by an integer <i>n</i> on a line by itself giving the dimensions of the table.  The maximum dimension is 20; the minimum dimension is 2.</p>\r\n<p>The table then follows in row major order but with the diagonal elements of the table missing (these are assumed to have value 1.0). Thus the first row of the table represents the conversion rates between country 1 and <i>n</i>-1 other countries, i.e., the amount of currency of country <i>i</i> ( <img width="70" height="25" alt="tex2html_wrap_inline37" src="images/problem/pic2096_1" /> ) that can be purchased with one unit of the currency of country 1.</p>\r\n<p>Thus each table consists of <i>n</i>+1 lines in the input file: 1 line containing <i>n</i> and <i>n</i> lines representing the conversion table.</p>', '<p>For each table in the input file you must determine whether a sequence of exchanges exists that results in a profit of more than  1 percent (0.01).  If a sequence exists you must print the sequence of exchanges that results in a profit.  If there is more than one sequence that results in a profit of more than 1 percent you must print a  sequence of minimal length, i.e., one of the sequences that uses the fewest exchanges of currencies to yield a profit.</p>\r\n<p></p>\r\n<p>Because the IRS (United States Internal Revenue Service) notices lengthy transaction sequences, all profiting sequences must consist of <i>n</i> or fewer transactions where <i>n</i> is the dimension of the table giving conversion rates. The sequence 1 2 1 represents two conversions.</p>\r\n<p>If a profiting sequence exists you must print  the sequence of exchanges that results in a profit.  The sequence is printed as a sequence of integers with the integer <i>i</i> representing the  <img width="17" height="15" alt="tex2html_wrap_inline51" src="images/problem/pic2096_2" />  line of the conversion table (country <i>i</i>).  The first integer in the sequence is the country  from which the profiting sequence starts.  This integer also ends the sequence.</p>\r\n<p>If no profiting sequence of <i>n</i> or fewer transactions exists, then the line</p>\r\n<pre>\r\nno arbitrage sequence exists</pre>\r\n<p>should be printed.</p>', 'D:\\oj\\data\\2096', 'D:\\oj\\data\\2096', '3\r\n1.2 .89\r\n.88 5.1\r\n1.1 0.15\r\n4\r\n3.1    0.0023    0.35\r\n0.21   0.00353   8.13 \r\n200    180.559   10.339\r\n2.11   0.089     0.06111\r\n2\r\n2.0\r\n0.45', '1 2 1\r\n1 2 4 1\r\nno arbitrage sequence exists', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:14', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 16, 'power721'),
(2097, 'Fermat vs. Pythagoras', '<h2><font color="#0070e8"><a name="SECTION0001001000000000000000">Background</a></font></h2>\r\n<p>Computer generated and assisted proofs and verification occupy a small niche in the realm of Computer Science.  The first proof of the four-color problem was completed with the assistance of a computer program and current efforts in verification have succeeded in verifying the translation of high-level code down to the chip level.</p>\r\n<p>This problem deals with computing quantities relating to part of Fermat''s Last Theorem: that there are no integer solutions of  <img align="MIDDLE" width="94" height="26" alt="tex2html_wrap_inline29" src="images/problem/pic2097_0" />  for <i>n</i> &gt; 2.</p>\r\n<p></p>\r\n<h2><font color="#0070e8"><a name="SECTION0001002000000000000000">The Problem</a></font></h2>\r\n<p>Given a positive integer <i>N</i>, you are to write a program that computes two quantities regarding the solution of</p>\r\n<p><img align="BOTTOM" width="296" height="19" alt="displaymath22" src="images/problem/pic2097_1" /></p>\r\n<p>where <i>x</i>, <i>y</i>, and <i>z</i> are constrained to be positive integers less than or equal to <i>N</i>.   You are to compute the number of triples (<i>x</i>,<i>y</i>,<i>z</i>) such that <i>x</i>&lt;<i>y</i>&lt; <i>z</i>, and they are relatively prime, i.e., have no common divisor larger than 1.  You are also to compute the number of values  <img align="MIDDLE" width="78" height="25" alt="tex2html_wrap_inline51" src="images/problem/pic2097_2" />  such that <i>p</i> is not part of any triple (not just relatively prime triples).</p>', '<p>The input consists of a sequence of positive integers, one per line.  Each integer in the input file will be less than or equal to 1,000,000.  Input is terminated by end-of-file.</p>', '<p>For each integer <i>N</i> in the input file print two integers separated by a space.  The first integer is the number of relatively prime triples (such that each component of the triple is  <img align="MIDDLE" width="33" height="26" alt="tex2html_wrap_inline57" src="images/problem/pic2097_3" /> ).  The second number is the number of positive integers  <img align="MIDDLE" width="33" height="26" alt="tex2html_wrap_inline57" src="images/problem/pic2097_3" />  that are not part of any triple whose components are all  <img align="MIDDLE" width="33" height="26" alt="tex2html_wrap_inline57" src="images/problem/pic2097_3" /> .  There should be one output line for each input line.</p>', 'D:\\oj\\data\\2097', 'D:\\oj\\data\\2097', '10\r\n25\r\n100', '1 4\r\n4 9\r\n16 27', '', 'www.csie.nctu.edu.tw', '', '2012-03-31 22:36:47', 1000, 131072, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 1000, 24, 'power721'),
(2098, 'SCUD Busters', '<h2><font color="#0070e8"><a name="SECTION0001001000000000000000">Background</a></font></h2>\r\n<p>Some problems are difficult to solve but have a simplification that is easy to solve.  Rather than deal with the difficulties of constructing a model of the Earth (a somewhat oblate spheroid), consider a pre-Columbian flat world that is a 500 kilometer  <img align="MIDDLE" width="9" height="18" src="images/problem/pic2098_0" alt="tex2html_wrap_inline41" />  500 kilometer square.</p>\r\n<p>In the model used in this problem, the flat world consists of several warring kingdoms.  Though warlike, the people of the world are strict isolationists; each kingdom is surrounded by a high (but thin) wall designed to both protect the kingdom and to isolate it.  To avoid fights for power, each kingdom has its own electric power plant.</p>\r\n<p>When the urge to fight becomes too great, the people of a kingdom often launch missiles at other kingdoms.  Each SCUD missile (<u>anitary <u>leansing <u>niversal <u>estroyer) that lands within the walls of a kingdom destroys that kingdom''s power plant (without loss of life). </u></u></u></u></p>\r\n<p></p>\r\n<h2><font color="#0070e8"><a name="SECTION0001002000000000000000">The Problem</a></font></h2>\r\n<p>Given coordinate locations of several kingdoms (by specifying the locations of houses and the location of the power plant in a kingdom) and missile landings you are to write a program that determines the total area of all kingdoms that are without power after an exchange of missile fire.</p>\r\n<p>In the simple world of this problem kingdoms do not overlap. Furthermore, the walls surrounding each kingdom are considered to be of zero thickness.  The wall surrounding a kingdom is the minimal-perimeter wall that completely surrounds all the houses and the power station that comprise a kingdom; the area of a kingdom is the area enclosed by the minimal-perimeter thin wall.</p>\r\n<p>There is exactly one power station per kingdom.</p>\r\n<p>There may be empty space between kingdoms.</p>', '<p>The input is a sequence of kingdom specifications followed by a sequence of missile landing locations.</p>\r\n<p>A kingdom is specified by a number <i>N</i> ( <img align="MIDDLE" width="96" height="26" src="images/problem/pic2098_1" alt="tex2html_wrap_inline45" /> ) on a single line which indicates the number of sites in this kingdom.  The next line contains the <i>x</i> and <i>y</i> coordinates of the power station, followed by <i>N</i>-1 lines of <i>x</i>, <i>y</i> pairs indicating the locations of homes served by this power station.  A value of -1 for <i>N</i> indicates that there are no more kingdoms.  There will be at least one kingdom in the data set.</p>\r\n<p>Following the last kingdom specification will be the coordinates of one or more missile attacks, indicating the location of a missile landing.  Each missile location is on a line by itself.  You are to process missile attacks until you reach the end of the file.</p>\r\n<p>Locations are specified in kilometers using coordinates on a 500 km by 500 km grid.  All coordinates will be integers between 0 and 500 inclusive.  Coordinates are specified as a pair of integers separated by white-space on a single line.  The input file will consist of up to 20 kingdoms, followed by any number of missile attacks.</p>', '<p>The output consists of a single number representing the total area of all kingdoms without electricity after all missile attacks have been processed.  The number should be printed with (and correct to) two decimal places.</p>', 'D:\\oj\\data\\2098', 'D:\\oj\\data\\2098', '12\r\n3 3\r\n4 6\r\n4 11\r\n4 8\r\n10 6\r\n5 7\r\n6 6\r\n6 3\r\n7 9\r\n10 4\r\n10 9\r\n1 7\r\n5\r\n20 20\r\n20 40\r\n40 20\r\n40 40\r\n30 30\r\n3\r\n10 10\r\n21 10\r\n21 13\r\n-1\r\n5 5\r\n20 12', '70.50', '<p>You may or may not find the following formula useful.</p>\r\n<p>Given a polygon described by the vertices  <img align="MIDDLE" width="94" height="17" src="images/problem/pic2098_2" alt="tex2html_wrap_inline61" />  such that  <img align="MIDDLE" width="55" height="17" src="images/problem/pic2098_3" alt="tex2html_wrap_inline63" /> , the signed area of the polygon is given by</p>\r\n<p><img align="BOTTOM" width="354" height="45" src="images/problem/pic2098_4" alt="displaymath59" /></p>\r\n<p>where  the x, y coordinates of  <img align="MIDDLE" width="85" height="27" src="images/problem/pic2098_5" alt="tex2html_wrap_inline65" /> ; the edges of the polygon are from  <img align="MIDDLE" width="11" height="17" src="images/problem/pic2098_6" alt="tex2html_wrap_inline67" />  to  <img align="MIDDLE" width="29" height="18" src="images/problem/pic2098_7" alt="tex2html_wrap_inline69" />  for  <img align="MIDDLE" width="103" height="24" src="images/problem/pic2098_8" alt="tex2html_wrap_inline71" /> .</p>\r\n<p>If the points describing the polygon are given in a counterclockwise direction, the value of <i>a</i> will be positive, and if the points of the polygon are listed in a clockwise direction, the value of <i>a</i> will be negative.</p>', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:14', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 16, 'power721'),
(2099, 'Meta-Loopless Sorts', '<h2><font color="#0070e8"><a name="SECTION0001001000000000000000"> Background</a>&nbsp;</font></h2>\r\n<p>Sorting holds an important place in computer science.  Analyzing and implementing various sorting algorithms forms an important part of the education of most computer scientists, and sorting accounts for a significant percentage of the world''s computational resources.  Sorting algorithms range from the bewilderingly popular Bubble sort, to Quicksort, to parallel sorting algorithms and sorting networks.  In this problem you will be writing a program that creates a sorting program (a meta-sorter).</p>\r\n<p></p>\r\n<h2><font color="#0070e8"><a name="SECTION0001002000000000000000"> The Problem</a>&nbsp;</font></h2>\r\n<p>The problem is to create several programs whose output is a standard Pascal program that sorts</p>\r\n<span class="MATH"><i>n</i></span>\r\n<p>numbers where</p>\r\n<span class="MATH"><i>n</i></span>\r\n<p>is the only input to the program you will write. The Pascal programs generated by your program must have the following properties:</p>\r\n<p></p>\r\n<ul>\r\n    <li>They must begin with <tt>program sort(input,output);</tt>\r\n    <p></p>\r\n    </li>\r\n    <li>They must declare storage for exactly <span class="MATH"><i>n</i></span> <tt>integer</tt> variables.  The names of the variables must come from the first <span class="MATH"><i>n</i></span> letters of the alphabet (a,b,c,d,e,f).\r\n    <p></p>\r\n    </li>\r\n    <li>A single <tt>readln</tt> statement must read in values for all the integer variables.\r\n    <p></p>\r\n    </li>\r\n    <li>Other than <tt>writeln</tt> statements, the only statements in the program are <tt>if then else</tt> statements.  The boolean conditional for each <tt>if</tt> statement must consist of one strict inequality (either <span class="MATH">&lt;</span> or <span class="MATH">&gt;</span>) of two integer variables.  Exactly <span class="MATH"><i>n</i>!</span> <tt>writeln</tt> statements must appear in the program.\r\n    <p></p>\r\n    </li>\r\n    <li>Exactly three semi-colons must appear in the programs\r\n    <ol>\r\n        <li>after the program header: <tt>program sort(input,output);</tt>\r\n        <p></p>\r\n        </li>\r\n        <li>after the variable declaration: <tt>...: integer;</tt>\r\n        <p></p>\r\n        </li>\r\n        <li>after the <tt>readln</tt> statement: <tt>readln(...);</tt></li>\r\n    </ol>\r\n    <p></p>\r\n    </li>\r\n    <li>No redundant comparisons of integer variables should be made. For example, during program execution, once it is determined that <span class="MATH"><i>a</i> &lt; <i>b</i></span>, variables <span class="MATH"><i>a</i></span> and <span class="MATH"><i>b</i></span> should not be compared again.\r\n    <p></p>\r\n    </li>\r\n    <li>Every <tt>writeln</tt> statement must appear on a line by itself.\r\n    <p></p>\r\n    </li>\r\n    <li>The programs must compile.  Executing the program with input consisting of any arrangement of any <span class="MATH"><i>n</i></span> distinct integer values should result in the input values being printed in sorted order.</li>\r\n</ul>\r\n<p>For those unfamiliar with Pascal syntax, the example at the end of this problem completely defines the small subset of Pascal needed.</p>', '<p>The input consist on a number in the first line indicating the number M of programs to make, followed by a blank line. Then there are M test cases, each one consisting on a single integer <span class="MATH"><i>n</i></span> on a line by itself with  <span class="MATH">1 <img border="0" align="MIDDLE" width="18" height="30" alt="$ \\leq$" src="images/problem/pic2099_0" /> <i>n</i> <img border="0" align="MIDDLE" width="18" height="30" alt="$ \\leq$" src="images/problem/pic2099_0" /> 8</span>. There will be a blank line between test cases.</p>', '<p>The output is M compilable standard Pascal programs meeting the criteria specified above. Print a blank line between two consecutive programs.</p>', 'D:\\oj\\data\\2099', 'D:\\oj\\data\\2099', '1\r\n\r\n3', 'program sort(input,output);\r\nvar\r\na,b,c : integer;\r\nbegin\r\n  readln(a,b,c);\r\n  if a < b then\r\n    if b < c then\r\n      writeln(a,b,c)\r\n    else if a < c then\r\n      writeln(a,c,b)\r\n    else\r\n      writeln(c,a,b)\r\n  else\r\n    if a < c then\r\n      writeln(b,a,c)\r\n    else if b < c then\r\n      writeln(b,c,a)\r\n    else\r\n      writeln(c,b,a)\r\nend.', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:14', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 23, 'power721'),
(2100, 'Climbing Trees', '<h2><font color="#0070e8"><a name="SECTION0001001000000000000000">Background</a></font></h2>\r\n<p>Expression trees, B and B* trees, red-black trees, quad trees, PQ  trees; trees play a significant role in many domains of computer  science. Sometimes the name of a problem may indicate that trees are  used when they are not, as in the Artificial Intelligence planning  problem traditionally called the <em>Monkey and Bananas problem</em>.   Sometimes trees may be used in a problem whose name gives no  indication that trees are involved, as in the <em>Huffman code</em>.</p>\r\n<p></p>\r\n<p>This problem involves determining how pairs of people who may be part of a ``family tree'''' are related.</p>\r\n<p></p>\r\n<h2><font color="#0070e8"><a name="SECTION0001002000000000000000">The Problem</a></font></h2>\r\n<p>Given a sequence of <em>child-parent</em> pairs, where a pair consists of the child''s name followed by the (single) parent''s name, and a list of query pairs also expressed as two names, you are to write a program to determine whether the query pairs are related. If the names comprising a query pair are related the program should determine what the relationship is.  Consider academic advisees and advisors as exemplars of such a single parent genealogy (we assume a single advisor, i.e., no co-advisors).</p>\r\n<p></p>\r\n<p>In this problem the child-parent pair  <img align="MIDDLE" width="27" height="17" src="images/problem/pic2100_0" alt="tex2html_wrap_inline76" />  denotes that <i>p</i> is the child of <i>q</i>.  In determining relationships between names we use the following definitions:</p>\r\n<ul>\r\n    <li><i>p</i> is a <em>0-descendent</em> of <i>q</i> (respectively <em>0-ancestor</em>) if and only if the child-parent pair  <img align="MIDDLE" width="27" height="17" src="images/problem/pic2100_0" alt="tex2html_wrap_inline76" />  (respectively  <img align="MIDDLE" width="26" height="17" src="images/problem/pic2100_1" alt="tex2html_wrap_inline88" /> ) appears in the input sequence of child-parent pairs.</li>\r\n    <li><i>p</i> is a <em>k-descendent</em> of <i>q</i> (respectively <em>k-ancestor</em>) if and only if the child-parent pair  <img align="MIDDLE" width="27" height="17" src="images/problem/pic2100_2" alt="tex2html_wrap_inline94" />  (respectively  <img align="MIDDLE" width="25" height="17" src="images/problem/pic2100_3" alt="tex2html_wrap_inline96" /> ) appears in the input sequence and <i>r</i> is a (<i>k</i>-1)-descendent of <i>q</i> (respectively <i>p</i> is a (<i>k</i>-1)-ancestor of <i>r</i>).</li>\r\n</ul>\r\n<p>For the purposes of this problem the relationship between a person <i>p</i> and a person <i>q</i> is expressed as exactly one of the following four relations:</p>\r\n<ol>\r\n    <li>child -- grand child, great grand child, great great grand child, <em>etc.</em>\r\n    <p>By definition <i>p</i> is the ``child'''' of <i>q</i> if and only if the pair  <img align="MIDDLE" width="27" height="17" src="images/problem/pic2100_0" alt="tex2html_wrap_inline76" />  appears in the input sequence of child-parent pairs (i.e., p is a 0-descendent of q); <i>p</i> is the ``grand child'''' of <i>q</i> if and only if <i>p</i> is a 1-descendent of <i>q</i>; and</p>\r\n    <p><img align="BOTTOM" width="427" height="38" src="images/problem/pic2100_4" alt="displaymath33" /></p>\r\n    <p>if and only if <i>p</i> is an (<i>n</i>+1)-descendent of <i>q</i>.</p>\r\n    </li>\r\n    <li>parent -- grand parent, great grand parent, great great grand parent, <em>etc.</em>\r\n    <p>By definition <i>p</i> is the ``parent'''' of <i>q</i> if and only if the pair  <img align="MIDDLE" width="26" height="17" src="images/problem/pic2100_1" alt="tex2html_wrap_inline88" />  appears in the input sequence of child-parent pairs (i.e., <i>p</i> is a 0-ancestor of <i>q</i>); <i>p</i> is the ``grand parent'''' of <i>q</i> if and only if <i>p</i> is a 1-ancestor of <i>q</i>; and</p>\r\n    <p><img align="BOTTOM" width="433" height="38" src="images/problem/pic2100_5" alt="displaymath40" /></p>\r\n    <p>if and only if <i>p</i> is an (<i>n</i>+1)-ancestor of <i>q</i>.</p>\r\n    </li>\r\n    <li>cousin --  <img align="BOTTOM" width="24" height="19" src="images/problem/pic2100_6" alt="tex2html_wrap_inline158" />  cousin,  <img align="BOTTOM" width="21" height="17" src="images/problem/pic2100_7" alt="tex2html_wrap_inline160" />  cousin,  <img align="BOTTOM" width="26" height="18" src="images/problem/pic2100_8" alt="tex2html_wrap_inline162" />  cousin, <em>etc.</em>; cousins may be once removed, twice removed, three times removed, <em>etc.</em>\r\n    <p>By definition <i>p</i> and <i>q</i> are ``cousins'''' if and only if they are related (i.e., there is a path from <i>p</i> to <i>q</i> in the implicit undirected parent-child tree).  Let <i>r</i> represent the least common ancestor of <i>p</i> and <i>q</i> (i.e., no descendent of <i>r</i> is an ancestor of both <i>p</i> and <i>q</i>), where <i>p</i> is an <i>m</i>-descendent of <i>r</i> and <i>q</i> is an <i>n</i>-descendent of <i>r</i>.</p>\r\n    <p>Then, by definition, cousins <i>p</i> and <i>q</i> are `` <img align="BOTTOM" width="25" height="18" src="images/problem/pic2100_9" alt="tex2html_wrap_inline200" />   cousins'''' if and only if  <img align="MIDDLE" width="120" height="27" src="images/problem/pic2100_10" alt="tex2html_wrap_inline202" /> , and, also by definition, <i>p</i>  and <i>q</i> are ``cousins removed <i>j</i> times'''' if and only if  <img align="MIDDLE" width="102" height="27" src="images/problem/pic2100_11" alt="tex2html_wrap_inline210" /> .</p>\r\n    </li>\r\n    <li>sibling --  <img align="BOTTOM" width="24" height="19" src="images/problem/pic2100_6" alt="tex2html_wrap_inline158" />  cousins removed 0 times are ``siblings'''' (they have the same parent).</li>\r\n</ol>', '<p>The input consists of parent-child pairs of names, one pair per line. Each name in a pair consists of lower-case alphabetic characters or periods (used to separate first and last names, for example).  Child names are separated from parent names by one or more spaces. Parent-child pairs are terminated by a pair whose first component is the string ``<em>no.child</em>''''.  Such a pair is NOT to be considered as a parent-child pair, but only as a delimiter to separate the parent-child pairs from the query pairs.  There will be no circular relationships, i.e., no name <i>p</i> can be <em>both</em> an ancestor and a descendent of the same name <i>q</i>.</p>\r\n<p></p>\r\n<p>The parent-child pairs are followed by a sequence of query pairs in the same format as the parent-child pairs, i.e., each name in a query pair is a sequence of lower-case alphabetic characters and periods, and names are separated by one or more spaces.  Query pairs are terminated by end-of-file.</p>\r\n<p></p>\r\n<p>There will be a maximum of 300 different names overall (parent-child and query pairs).  All names will be fewer than 31 characters in length.  There will be no more than 100 query pairs.</p>', '<p>For each query-pair  <img align="MIDDLE" width="27" height="17" src="images/problem/pic2100_0" alt="tex2html_wrap_inline76" />   of names the output should indicate the relationship <i>p</i> <em>is-the-relative-of</em> <i>q</i> by the appropriate string of the form</p>\r\n<ul>\r\n    <li>child, grand child, great grand child, great great ...great grand child</li>\r\n    <li>parent, grand parent, great grand parent, great great ...great grand parent</li>\r\n    <li>sibling</li>\r\n    <li><i>n</i> cousin removed <i>m</i></li>\r\n    <li>no relation</li>\r\n</ul>\r\n<p>If an</p>\r\n<i>m</i>\r\n<p>-cousin is removed 0 times then only</p>\r\n<em>m cousin</em>\r\n<p>should be printed, i.e.,</p>\r\n<em>removed 0</em>\r\n<p>should NOT be printed.  Do not print</p>\r\n<em>st, nd, rd, th</em>\r\n<p>after the numbers.</p>', 'D:\\oj\\data\\2100', 'D:\\oj\\data\\2100', 'alonzo.church oswald.veblen\r\nstephen.kleene alonzo.church\r\ndana.scott alonzo.church\r\nmartin.davis alonzo.church\r\npat.fischer hartley.rogers\r\nmike.paterson david.park\r\ndennis.ritchie pat.fischer\r\nhartley.rogers alonzo.church\r\nles.valiant mike.paterson\r\nbob.constable stephen.kleene\r\ndavid.park hartley.rogers\r\nno.child no.parent\r\nstephen.kleene bob.constable\r\nhartley.rogers stephen.kleene\r\nles.valiant alonzo.church\r\nles.valiant dennis.ritchie\r\ndennis.ritchie les.valiant\r\npat.fischer michael.rabin', 'parent\r\nsibling\r\ngreat great grand child\r\n1 cousin removed 1\r\n1 cousin removed 1\r\nno relation', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:14', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 29, 'power721'),
(2101, 'Unidirectional TSP', '<h2><font color="#0070e8"><a name="SECTION0001001000000000000000">Background</a></font></h2>\r\n<p>Problems that require minimum paths through some domain appear in many different areas of computer science.  For example, one of the constraints in VLSI routing problems is minimizing wire length. The Traveling Salesperson Problem (TSP) -- finding whether all the cities in a salesperson''s route can be visited exactly once with a specified limit on travel time -- is one of the canonical examples of an NP-complete problem; solutions appear to require an inordinate amount of time to generate, but are simple to check.</p>\r\n<p>This problem deals with finding a minimal path through a grid of points while traveling only from left to right.</p>\r\n<p></p>\r\n<h2><font color="#0070e8"><a name="SECTION0001002000000000000000">The Problem</a></font></h2>\r\n<p>Given an  <img align="MIDDLE" width="46" height="18" src="images/problem/pic2101_0" alt="tex2html_wrap_inline352" />  matrix of integers, you are to write a program that computes a path of minimal weight.  A path starts anywhere in column 1 (the first column) and consists of a sequence of steps terminating in column <i>n</i> (the last column).  A step consists of traveling from column <i>i</i> to column <i>i</i>+1 in an adjacent (horizontal or diagonal) row.  The first and last rows (rows 1 and <i>m</i>) of a matrix are considered adjacent, i.e., the matrix ``wraps'''' so that it represents a horizontal cylinder.  Legal steps are illustrated below.</p>\r\n<p><img align="BOTTOM" width="67" height="99" src="images/problem/pic2101_1" alt="picture25" /></p>\r\n<p></p>\r\n<p>The <em>weight</em> of a path is the sum of the integers in each of the <i>n</i> cells of the matrix that are visited.</p>\r\n<p>For example, two slightly different  <img align="MIDDLE" width="37" height="24" src="images/problem/pic2101_2" alt="tex2html_wrap_inline366" />  matrices are shown below (the only difference is the numbers in the bottom row).</p>\r\n<p></p>\r\n<p><img align="BOTTOM" width="534" height="175" src="images/problem/pic2101_3" alt="picture37" /></p>\r\n<p></p>\r\n<p>The minimal path is illustrated for each matrix.  Note that the path for the matrix on the right takes advantage of the adjacency property of the first and last rows.</p>', '<p>The input consists of a sequence of matrix specifications.  Each matrix specification consists of the row and column dimensions in that order on a line followed by  <img align="BOTTOM" width="37" height="8" src="images/problem/pic2101_4" alt="tex2html_wrap_inline376" />  integers where <i>m</i> is the row dimension and <i>n</i> is the column dimension.  The integers appear in the input in row major order, i.e., the first <i>n</i> integers constitute the first row of the matrix, the second <i>n</i> integers constitute the second row and so on. The integers on a line will be separated from other integers by one or more spaces.  Note: integers are not restricted to being positive. There will be one or more matrix specifications in an input file. Input is terminated by end-of-file.</p>\r\n<p>For each specification the number of rows will be between 1 and 10 inclusive; the number of columns will be between 1 and 100 inclusive. No path''s weight will exceed integer values representable using 30 bits.</p>', '<p>Two lines should be output for each matrix specification in the input file, the first line represents a minimal-weight path, and the second line is the cost of a minimal path.  The path consists of a sequence of <i>n</i> integers (separated by one or more spaces) representing the rows that constitute the minimal path.  If there is more than one path of minimal weight the path that is <i>lexicographically</i> smallest should be output.</p>', 'D:\\oj\\data\\2101', 'D:\\oj\\data\\2101', '5 6\r\n3 4 1 2 8 6\r\n6 1 8 2 7 4\r\n5 9 3 9 9 5\r\n8 4 1 3 2 6\r\n3 7 2 8 6 4\r\n5 6\r\n3 4 1 2 8 6\r\n6 1 8 2 7 4\r\n5 9 3 9 9 5\r\n8 4 1 3 2 6\r\n3 7 2 1 2 3\r\n2 2\r\n9 10 9 10', '1 2 3 4 4 5\r\n16\r\n1 2 1 5 4 5\r\n11\r\n1 1\r\n19', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:14', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 23, 'power721'),
(2102, 'Mutant Flatworld Explorers', '<h2><font color="#0070e8"><a name="SECTION0001001000000000000000">Background</a></font></h2>\r\n<p>Robotics, robot motion planning, and machine learning are areas that cross the boundaries of many of the subdisciplines that comprise Computer Science: artificial intelligence, algorithms and complexity, electrical and mechanical engineering to name a few.  In addition, robots as ``turtles'''' (inspired by work by Papert, Abelson, and diSessa) and as ``beeper-pickers'''' (inspired by work by Pattis) have been studied and used by students as an introduction to programming for many years.</p>\r\n<p>This problem involves determining the position of a robot exploring a pre-Columbian flat world.</p>\r\n<p></p>\r\n<h2><font color="#0070e8"><a name="SECTION0001002000000000000000">The Problem</a></font></h2>\r\n<p>Given the dimensions of a rectangular grid and a sequence of robot positions and instructions, you are to write a program that determines for each sequence of robot positions and instructions the final position of the robot.</p>\r\n<p>A robot <em>position</em> consists of a grid coordinate (a pair of integers: x-coordinate followed by y-coordinate) and an orientation (N,S,E,W for north, south, east, and west).  A robot <em>instruction</em> is a string of the letters ''<em>L</em>'', ''<em>R</em>'', and ''<em>F</em>'' which represent, respectively, the instructions:</p>\r\n<ul>\r\n    <li><em>Left</em>: the robot turns left 90 degrees and remains on the current grid point.</li>\r\n    <li><em>Right</em>: the robot turns right 90 degrees and remains on the current grid point.</li>\r\n    <li><em>Forward</em>: the robot moves forward one grid point in the direction of the current orientation and mantains the same orientation.</li>\r\n</ul>\r\n<p>The direction <em>North</em> corresponds to the direction from grid point (<i>x</i>,<i>y</i>) to grid point (<i>x</i>,<i>y</i>+1).</p>\r\n<p>Since the grid is rectangular and bounded, a robot that moves ``off'''' an edge of the grid is lost forever.  However, lost robots leave a robot ``scent'''' that prohibits future robots from dropping off the world at the same grid point.  The scent is left at the last grid position the robot occupied before disappearing over the edge.  An instruction to move ``off'''' the world from a grid point from which a robot has been previously lost is simply ignored by the current robot.</p>', '<p>The first line of input is the upper-right coordinates of the rectangular world, the lower-left coordinates are assumed to be 0,0.</p>\r\n<p>The remaining input consists of a sequence of robot positions and instructions (two lines per robot).  A position consists of two integers specifying the initial coordinates of the robot and an orientation (N,S,E,W), all separated by white space on one line.  A robot instruction is a string of the letters ''L'', ''R'', and ''F'' on one line.</p>\r\n<p>Each robot is processed sequentially, i.e., finishes executing the robot instructions before the next robot begins execution.</p>\r\n<p>Input is terminated by end-of-file.</p>\r\n<p>You may assume that all initial robot positions are within the bounds of the specified grid.  The maximum value for any coordinate is 50.  All instruction strings will be less than 100 characters in length.</p>', '<p>For each robot position/instruction in the input, the output should indicate the final grid position and orientation of the robot.  If a robot falls off the edge of the grid the word ``LOST'''' should be printed after the position and orientation.</p>', 'D:\\oj\\data\\2102', 'D:\\oj\\data\\2102', '5 3\r\n1 1 E\r\nRFRFRFRF\r\n3 2 N\r\nFRRFLLFFRRFLL\r\n0 3 W\r\nLLFFFLFLFL', '1 1 E\r\n3 3 N LOST\r\n2 3 S', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:14', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 44, 'power721'),
(2103, 'Pipe Fitters', '<h2><font color="#0070e8"><a name="SECTION0001001000000000000000">Background</a></font></h2>\r\n<p>Filters, or programs that pass ``processed'''' data through in some changed form, are an important class of programs in the UNIX operating system.  A pipe is an operating system concept that permits data to ``flow'''' between processes (and allows filters to be chained together easily.)</p>\r\n<p>This problem involves maximizing the number of pipes that can be fit into a storage container (but it''s a pipe fitting problem, not a bin packing problem).</p>\r\n<p></p>\r\n<h2><font color="#0070e8"><a name="SECTION0001002000000000000000">The Problem</a></font></h2>\r\n<p>A company manufactures pipes of uniform diameter.  All pipes are stored in rectangular storage containers, but the containers come in several different sizes.  Pipes are stored in rows within a container so that there is no space between pipes in any row (there may be some space at the end of a row), i.e., all pipes in a row are tangent, or touch. Within a rectangular cross-section, pipes are stored in either a <em> grid</em> pattern or a <em>skew</em> pattern as shown below: the two left-most cross-sections are in a grid pattern, the two right-most cross-sections are in a skew pattern.</p>\r\n<p></p>\r\n<p><img align="BOTTOM" src="images/problem/pic2103_0" alt="picture26" /></p>\r\n<p></p>\r\n<p>Note that although it may not be apparent from the diagram, there is no space between adjacent pipes in any row.  The pipes in any row are tangent to (touch) the pipes in the row below (or rest on the bottom of the container).  When pipes are packed into a container, there may be ``left-over'''' space in which a pipe cannot be packed.  Such left-over space is packed with padding so that the pipes cannot settle during shipping.</p>', '<p>The input is a sequence of cross-section dimensions of storage containers.  Each cross-section is given as two real values on one line separated by white space.  The dimensions are expressed in units of pipe diameters.  All dimensions will be less than  <img align="BOTTOM" width="15" height="15" src="images/problem/pic2103_1" alt="tex2html_wrap_inline133" /> .   Note that a cross section with dimensions  <img align="MIDDLE" width="37" height="24" src="images/problem/pic2103_2" alt="tex2html_wrap_inline135" />  can also be viewed as a cross section with dimensions  <img align="MIDDLE" width="37" height="24" src="images/problem/pic2103_3" alt="tex2html_wrap_inline137" /> .</p>', '<p>For each cross-section in the input, your program should print the maximum number of pipes that can be packed into that cross section. The number of pipes is an integer -- no fractional pipes can be packed.  The maximum number is followed by the word ``grid'''' if a grid pattern results in the maximal number of pipes or the word ``skew'''' if a skew pattern results in the maximal number of pipes.  If the pattern doesn''t matter, that is the same number of pipes can be packed with either a grid or skew pattern, then the word ``grid'''' should be printed.</p>', 'D:\\oj\\data\\2103', 'D:\\oj\\data\\2103', '3 3\r\n2.9 10\r\n2.9 10.5\r\n11 11', '9 grid\r\n29 skew\r\n30 skew\r\n126 skew', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:15', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 21, 'power721'),
(2104, 'Trees on the level', '<h2><font color="#0070e8"><a name="SECTION0001001000000000000000">Background</a></font></h2>\r\n<p>Trees are fundamental in many branches of computer science.  Current state-of-the art parallel computers such as Thinking Machines'' CM-5 are based on <em>fat trees</em>.  Quad- and octal-trees are fundamental to many algorithms in computer graphics.</p>\r\n<p>This problem involves building and traversing binary trees.</p>\r\n<p></p>\r\n<h2><font color="#0070e8"><a name="SECTION0001002000000000000000">The Problem</a></font></h2>\r\n<p>Given a sequence of binary trees, you are to write a program that prints a level-order traversal of each tree.  In this problem each node of a binary tree contains a positive integer and all binary trees have have fewer than 256 nodes.</p>\r\n<p>In a <em>level-order</em> traversal of a tree, the data in all nodes at a given level are printed in left-to-right order and all nodes at level <i>k</i> are printed before all nodes at level <i>k</i>+1.</p>\r\n<p>For example, a level order traversal of the tree</p>\r\n<p><img align="BOTTOM" width="290" height="226" src="images/problem/pic2104_0" alt="picture28" /></p>\r\n<p></p>\r\n<p>is: 5, 4, 8, 11, 13, 4, 7, 2, 1.</p>\r\n<p>In this problem a binary tree is specified by a sequence of pairs (<i>n</i>,<i>s</i>) where <i>n</i> is the value at the node whose path from the root is given by the string <i>s</i>.  A path is given be a sequence of <em>L</em>''s and <em>R</em>''s where <em>L</em> indicates a left branch and <em>R</em> indicates a right branch.  In the tree diagrammed above, the node containing 13 is specified by (13,RL), and the node containing 2 is specified by (2,LLR). The root node is specified by (5,) where the empty string indicates the path from the root to itself.  A binary tree is considered to be <em>completely specified</em> if every node on all root-to-node paths in the tree is given a value exactly once.</p>', '<p>The input is a sequence of binary trees specified as described above. Each tree in a sequence consists of several pairs (<i>n</i>,<i>s</i>) as described above separated by whitespace.  The last entry in each tree is ().  No whitespace appears between left and right parentheses.</p>\r\n<p>All nodes contain a positive integer.  Every tree in the input will consist of at least one node and no more than 256 nodes.  Input is terminated by end-of-file.</p>', '<p>For each completely specified binary tree in the input file, the level order traversal of that tree should be printed.  If a tree is not completely specified, i.e., some node in the tree is NOT given a value or a node is given a value more than once, then the string ``not complete'''' should be printed.</p>', 'D:\\oj\\data\\2104', 'D:\\oj\\data\\2104', '(11,LL) (7,LLL) (8,R)\r\n(5,) (4,L) (13,RL) (2,LLR) (1,RRR) (4,RR) ()\r\n(3,L) (4,R) ()', '5 4 8 11 13 4 7 2 1\r\nnot complete', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:15', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 30, 'power721'),
(2105, 'Searching Quickly', '<h2><font color="#0070e8"><a name="SECTION0001001000000000000000">Background</a></font></h2>\r\n<p>Searching and sorting are part of the theory and practice of computer science.  For example, binary search provides a good example of an easy-to-understand algorithm with sub-linear complexity.  Quicksort is an efficient  <img align="MIDDLE" width="74" height="27" src="images/problem/pic2105_0" alt="tex2html_wrap_inline29" />  [average case] comparison based sort.</p>\r\n<p>KWIC-indexing is an indexing method that permits efficient ``human search'''' of, for example, a list of titles.</p>\r\n<p></p>\r\n<h2><font color="#0070e8"><a name="SECTION0001002000000000000000">The Problem</a></font></h2>\r\n<p>Given a list of titles and a list of ``words to ignore'''', you are to write a program that generates a KWIC (Key Word In Context) index of the titles.  In a KWIC-index, a title is listed once for each keyword that occurs in the title.  The KWIC-index is alphabetized by keyword.</p>\r\n<p>Any word that is not one of the ``words to ignore'''' is a potential keyword.</p>\r\n<p>For example, if words to ignore are ``<code>the, of, and, as, a</code>'''' and the list of titles is:</p>\r\n<pre>\r\nDescent of Man\r\nThe Ascent of Man\r\nThe Old Man and The Sea\r\nA Portrait of The Artist As a Young Man</pre>\r\n<p>A KWIC-index of these titles might be given by:</p>\r\n<p></p>\r\n<pre>\r\n                      a portrait of the ARTIST as a young man \r\n                                    the ASCENT of man \r\n                                        DESCENT of man \r\n                             descent of MAN \r\n                          the ascent of MAN \r\n                                the old MAN and the sea \r\n    a portrait of the artist as a young MAN \r\n                                    the OLD man and the sea \r\n                                      a PORTRAIT of the artist as a young man \r\n                    the old man and the SEA \r\n          a portrait of the artist as a YOUNG man</pre>', '<p>The input is a sequence of lines, the string <code>::</code> is used to separate the list of words to ignore from the list of titles.  Each of the words to ignore appears in lower-case letters on a line by itself and is no more than 10 characters in length.  Each title appears on a line by itself and may consist of mixed-case (upper and lower) letters. Words in a title are separated by whitespace.  No title contains more than 15 words.</p>\r\n<p>There will be no more than 50 words to ignore, no more than than 200 titles, and no more than 10,000 characters in the titles and words to ignore combined.  No characters other than ''a''-''z'', ''A''-''Z'', and white space will appear in the input.</p>', '<p>The output should be a KWIC-index of the titles, with each title appearing once for each keyword in the title, and with the KWIC-index alphabetized by keyword.  If a word appears more than once in a title, each instance is a potential keyword.</p>\r\n<p>The keyword should appear in all upper-case letters. All other words in a title should be in lower-case letters. Titles in the KWIC-index with the same keyword should appear in the same order as they appeared in the input file.  In the case where multiple instances of a word are keywords in the same title, the keywords should be capitalized in left-to-right order.</p>\r\n<p>Case (upper or lower) is irrelevant when determining if a word is to be ignored.</p>\r\n<p>The titles in the KWIC-index need NOT be justified or aligned by keyword, all titles may be listed left-justified.</p>', 'D:\\oj\\data\\2105', 'D:\\oj\\data\\2105', 'is\r\nthe\r\nof\r\nand\r\nas\r\na\r\nbut\r\n::\r\nDescent of Man\r\nThe Ascent of Man\r\nThe Old Man and The Sea\r\nA Portrait of The Artist As a Young Man\r\nA Man is a Man but Bubblesort IS A DOG', 'a portrait of the ARTIST as a young man \r\nthe ASCENT of man \r\na man is a man but BUBBLESORT is a dog \r\nDESCENT of man \r\na man is a man but bubblesort is a DOG \r\ndescent of MAN \r\nthe ascent of MAN \r\nthe old MAN and the sea \r\na portrait of the artist as a young MAN \r\na MAN is a man but bubblesort is a dog \r\na man is a MAN but bubblesort is a dog \r\nthe OLD man and the sea \r\na PORTRAIT of the artist as a young man \r\nthe old man and the SEA \r\na portrait of the artist as a YOUNG man', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:15', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 21, 'power721');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(2106, 'Numbering Paths', '<h2><font color="#0070e8"><a name="SECTION0001001000000000000000">Background</a></font></h2>\r\n<p>Problems that process input and generate a simple ``yes'''' or ``no'''' answer are called decision problems.  One class of decision problems, the NP-complete problems, are not amenable to general efficient solutions.  Other problems may be simple as decision problems, but enumerating all possible ``yes'''' answers may be very difficult (or at least time-consuming).</p>\r\n<p>This problem involves determining the number of routes available to an emergency vehicle operating in a city of one-way streets.</p>\r\n<p></p>\r\n<h2><font color="#0070e8"><a name="SECTION0001002000000000000000">The Problem</a></font></h2>\r\n<p>Given the intersections connected by one-way streets in a city, you are to write a program that determines the number of different routes between each intersection.  A route is a sequence of one-way streets connecting two intersections.</p>\r\n<p>Intersections are identified by non-negative integers.  A one-way street is specified by a pair of intersections.  For example,  <img align="MIDDLE" width="28" height="25" src="images/problem/pic2106_0" alt="tex2html_wrap_inline30" />  indicates that there is a one-way street from intersection  <i>j</i> to intersection <i>k</i>.  Note that two-way streets can be modeled by specifying two one-way streets:  <img align="MIDDLE" width="28" height="25" src="images/problem/pic2106_0" alt="tex2html_wrap_inline30" />  and  <img align="MIDDLE" width="26" height="25" src="images/problem/pic2106_1" alt="tex2html_wrap_inline38" /> .</p>\r\n<p>Consider a city of four intersections connected by the following one-way streets:</p>\r\n<pre>\r\n    0  1\r\n    0  2\r\n    1  2\r\n    2  3</pre>\r\n<p>There is one route from intersection 0 to 1, two routes from 0 to 2 (the routes are</p>\r\n<img align="BOTTOM" width="79" height="13" src="images/problem/pic2106_2" alt="tex2html_wrap_inline40" />\r\n<p>and</p>\r\n<img align="BOTTOM" width="43" height="13" src="images/problem/pic2106_3" alt="tex2html_wrap_inline42" />\r\n<p>),  two routes from 0 to 3, one route from 1 to 2, one route from 1 to 3, one route from 2 to 3, and no other routes.</p>\r\n<p>It is possible for an infinite number of different routes to exist.  For example if the intersections above are augmented by the street  <img align="BOTTOM" width="25" height="13" src="images/problem/pic2106_4" alt="tex2html_wrap_inline44" /> , there is still only one route from 0 to 1, but there are infinitely many different routes from 0 to 2.  This is because the street from 2 to 3 and back to 2 can be repeated yielding a different sequence of streets and hence a different route.  Thus the route  <img align="BOTTOM" width="186" height="13" src="images/problem/pic2106_5" alt="tex2html_wrap_inline46" />  is a different route than  <img align="BOTTOM" width="114" height="13" src="images/problem/pic2106_6" alt="tex2html_wrap_inline48" /> .</p>', '<p>The input is a sequence of city specifications.  Each specification begins with the number of one-way streets in the city followed by that many one-way streets given as pairs of intersections.  Each pair   <img align="MIDDLE" width="28" height="25" src="images/problem/pic2106_0" alt="tex2html_wrap_inline30" />  represents a one-way street from intersection <i>j</i> to intersection <i>k</i>. In all cities, intersections are numbered sequentially from 0 to the ``largest'''' intersection.  All integers in the input are separated by whitespace.  The input is terminated by end-of-file.</p>\r\n<p>There will never be a one-way street from an intersection to itself. No city will have more than 30 intersections.</p>', '<p>For each city specification, a square matrix of the number of different routes from intersection <i>j</i> to intersection <i>k</i> is printed.  If the matrix is denoted <i>M</i>, then <i>M</i>[<i>j</i>][<i>k</i>] is the number of different routes from intersection <i>j</i> to intersection <i>k</i>.  The matrix <i>M</i> should be printed in row-major order, one row per line.  Each matrix should be preceded by the string ``<code>matrix for city</code> <i>k</i>'''' (with <i>k</i> appropriately instantiated, beginning with 0).</p>\r\n<p>If there are an infinite number of different paths between two intersections a -1 should be printed.  <b>DO NOT</b> worry about justifying and aligning the output of each matrix.  All entries in a row should be separated by whitespace.</p>', 'D:\\oj\\data\\2106', 'D:\\oj\\data\\2106', '7 0 1 0 2 0 4 2 4 2 3 3 1 4 3\r\n5 \r\n0 2 \r\n0 1 1 5 2 5 2 1\r\n9\r\n0 1 0 2 0 3\r\n0 4 1 4 2 1\r\n2 0\r\n3 0\r\n3 1', 'matrix for city 0\r\n0 4 1 3 2\r\n0 0 0 0 0\r\n0 2 0 2 1\r\n0 1 0 0 0\r\n0 1 0 1 0\r\nmatrix for city 1\r\n0 2 1 0 0 3\r\n0 0 0 0 0 1\r\n0 1 0 0 0 2\r\n0 0 0 0 0 0\r\n0 0 0 0 0 0\r\n0 0 0 0 0 0\r\nmatrix for city 2\r\n-1 -1 -1 -1 -1\r\n0 0 0 0 1\r\n-1 -1 -1 -1 -1\r\n-1 -1 -1 -1 -1\r\n0 0 0 0 0', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:15', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 20, 'power721'),
(2107, 'The Errant Physicist', '<p>The well-known physicist Alfred E Neuman is working on problems that  involve multiplying polynomials of x and y.  For example, he may need to  calculate</p>\r\n<p></p>\r\n<p><img align="BOTTOM" width="385" height="20" alt="displaymath50" src="images/problem/pic2107_0" /></p>\r\n<p></p>\r\n<p>getting the answer</p>\r\n<p></p>\r\n<p><img align="BOTTOM" width="485" height="19" alt="displaymath51" src="images/problem/pic2107_1" /></p>\r\n<p></p>\r\n<p>Unfortunately, such problems are so trivial that the great man''s mind keeps  drifting off the job, and he gets the wrong answers.  As a consequence,  several nuclear warheads that he has designed have detonated prematurely,  wiping out five major cities and a couple of rain forests.</p>\r\n<p></p>\r\n<p>You are to write a program to perform such multiplications and save the  world.</p>', '<p>The file of input data will contain pairs of lines, with each line containing  no more than 80 characters.  The final line of the input file contains a  <tt>#</tt> as  its first character.  Each input line contains a polynomial written without  spaces and without any explicit exponentiation operator.  Exponents are  positive non-zero unsigned integers.  Coefficients are also integers, but may  be negative.  Both exponents and coefficients are less than or equal to 100  in magnitude.  Each term contains at most one factor in x and one in y.</p>', '<p>Your program must multiply each pair of polynomials in the input, and print  each product on a pair of lines, the first line containing all the exponents,  suitably positioned with respect to the rest of the information, which is in  the line below.</p>\r\n<p></p>\r\n<p>The following rules control the output format:</p>\r\n<ol>\r\n    <li>Terms in the output line must be sorted in decreasing order of powers  of x and, for a given power of x, in increasing order of powers of y.</li>\r\n    <li>Like terms must be combined into a single term.  For example,  40x<sup>2</sup>y<sup>3</sup> - 38x<sup>2</sup>y<sup>3</sup> is replaced by 2x<sup>2</sup>y<sup>3</sup>.</li>\r\n    <li>Terms with a zero coefficient must not be displayed.</li>\r\n    <li>Coefficients of 1 are omitted, except for the case of a constant term  of 1.</li>\r\n    <li>Exponents of 1 are omitted.</li>\r\n    <li>Factors of x<sup>0</sup>  and y<sup>0</sup> are omitted.</li>\r\n    <li>Binary pluses and minuses (that is the pluses and minuses connecting  terms in the output) have a single blank column both before and after.</li>\r\n    <li>If the coefficient of the first term is negative, it is preceded by a  unary minus in the first column, with no intervening blank column.   Otherwise, the coefficient itself begins in the first output column.</li>\r\n    <li>The output can be assumed to fit into a single line of at most 80  charactes in length.</li>\r\n    <li>There should be no blank lines printed between each pair of output  lines.</li>\r\n    <li>The pair of lines that contain a product should be the same length--trailing blanks should appear after the last non-blank character of the shorter line to achieve this.</li>\r\n</ol>', 'D:\\oj\\data\\2107', 'D:\\oj\\data\\2107', '-yx8+9x3-1+y\r\nx5y+1+x3\r\n1\r\n1\r\n#', '13 2    11      8      6    5     5 2     3    3\r\n-x  y  - x  y + 8x y + 9x  - x y + x y  + 8x  + x y - 1 + y \r\n\r\n1', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:15', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 27, 'power721'),
(2108, 'Krypton Factor', '<p>You have been employed by the organisers of a Super Krypton Factor Contest  in which contestants have very high mental and physical abilities.  In one  section of the contest the contestants are tested on their ability to recall a  sequenace of characters which has been read to them by the Quiz Master.   Many of the contestants are very good at recognising patterns.  Therefore, in  order to add some difficulty to this test, the organisers have decided that  sequences containing certain types of repeated subsequences should not be  used.  However, they do not wish to remove all subsequences that are  repeated, since in that case no single character could be repeated.  This in  itself would make the problem too easy for the contestants.  Instead it is  decided to eliminate all sequences containing an occurrence of two  adjoining identical subsequences.  Sequences containing such an occurrence  will be called ``easy''''.  Other sequences will be called ``hard''''.</p>\r\n<p>For example, the sequence ABACBCBAD is easy, since it contains an  adjoining repetition of the subsequence CB.  Other examples of easy  sequences are:</p>\r\n<p></p>\r\n<ul>\r\n    <li>BB</li>\r\n    <li>ABCDACABCAB</li>\r\n    <li>ABCDABCD</li>\r\n</ul>\r\n<p>Some examples of hard sequences are:</p>\r\n<p></p>\r\n<ul>\r\n    <li>D</li>\r\n    <li>DC</li>\r\n    <li>ABDAB</li>\r\n    <li>CBABCBA</li>\r\n</ul>', '<p>In order to provide the Quiz Master with a potentially unlimited source of  questions you are asked to write a program that will read input lines that  contain integers <i>n</i> and <i>L</i> (in that order), where <i>n</i> &gt; 0 and <i>L</i> is in the  range  <img align="MIDDLE" width="83" height="26" src="images/problem/pic2108_0" alt="tex2html_wrap_inline39" /> , and for each input line prints out the <i>n</i>th hard  sequence (composed of letters drawn from the first <i>L</i> letters in  the  alphabet), in increasing alphabetical order (alphabetical ordering here  corresponds to the normal ordering encountered in a dictionary),  followed (on the next line) by the length of that sequence.  The first  sequence in this ordering is A.  You may assume that for given <i>n</i> and <i>L</i>  there do exist at least <i>n</i> hard sequences.</p>\r\n<p>For example, with <i>L</i> = 3, the first 7 hard sequences are:</p>\r\n<p></p>\r\n<blockquote>  A <br />\r\nAB <br />\r\nABA <br />\r\nABAC <br />\r\nABACA <br />\r\nABACAB <br />\r\nABACABA </blockquote>\r\n<p>As each sequence is potentially very long, split it into groups of four (4)  characters separated by a space.  If there are more than 16 such groups,  please start a new line for the 17th group.</p>\r\n<p>Therefore, if the integers 7 and 3 appear on an input line, the output lines  produced should be</p>\r\n<p></p>\r\n<pre>\r\nABAC ABA\r\n7</pre>\r\n<p>Input is terminated by a line containing two zeroes.  Your program may  assume a maximum sequence length of 80.</p>', '', 'D:\\oj\\data\\2108', 'D:\\oj\\data\\2108', '30 3\r\n0 0', 'ABAC ABCA CBAB CABA CABC ACBA CABA\r\n28', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:15', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721'),
(2109, 'Roman Roulette', '<p>The historian Flavius Josephus relates how, in the Romano-Jewish conflict  of 67 A.D., the Romans took the town of Jotapata which he was commanding.   Escaping, Jospehus found himself trapped in a cave with 40 companions.  The  Romans discovered his whereabouts and invited him to surrender, but his  companions refused to allow him to do so.  He therefore suggested that they  kill each other, one by one, the order to be decided by lot.  Tradition has it  that the means for effecting the lot was to stand in a circle, and, beginning  at some point, count round, every third person being killed in turn.  The  sole survivor of this process was Josephus, who then surrendered to the  Romans.  Which begs the question: had Josephus previously practised quietly  with 41 stones in a dark corner, or had he calculated mathematically that he  should adopt the 31st position in order to survive?</p>\r\n<p>Having read an account of this gruesome event you become obsessed with  the fear that you will find yourself in a similar situation at some time in  the future.  In order to prepare yourself for such an eventuality you decide  to write a program to run on your hand-held PC which will determine the  position that the counting process should start in order to ensure that you  will be the sole survivor.</p>\r\n<p>In particular, your program should be able to handle the following variation  of the processes described by Josephus.  <i>n</i> &gt; 0 people are initially  arranged in a circle, facing inwards, and numbered from 1 to <i>n</i>.  The  numbering from 1 to <i>n</i> proceeds consecutively in  a clockwise direction.   Your allocated number is 1.  Starting with person number <i>i</i>, counting  starts in a clockwise direction, until we get to person number <i>k</i> (<i>k</i> &gt; 0),  who is promptly killed.  We then proceed to count a further <i>k</i> people in a  clockwise direction, starting with the person immediately to the left of the  victim.  The person number <i>k</i> so selected has the job of burying the  victim, and then returning to the position in the circle that the victim had  previously occupied.  Counting then proceeeds from the person to his  immediate left, with the <i>k</i>th person being killed, and so on, until only one  person remains.</p>\r\n<p>For example, when <i>n</i> = 5, and <i>k</i> = 2, and <i>i</i> = 1, the order of execution is  2, 5, 3, and 1.  The survivor is 4.</p>', '<p>Your program must read input lines containing values for <i>n</i> and <i>k</i> (in  that order), and for each input line output the number of the person with  which the counting should begin in order to ensure that you are the sole  survivor.  For example, in the above case the safe starting position is 3.   Input will be terminated by a line containing values of 0 for <i>n</i> and <i>k</i>.</p>\r\n<p>Your program may assume a maximum of 100 people taking part in this  event.</p>', '', 'D:\\oj\\data\\2109', 'D:\\oj\\data\\2109', '1 1\r\n1 5\r\n0 0', '1\r\n1', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:15', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 27, 'power721'),
(2110, 'The Psychic Poker Player', '<p>In 5-card draw poker, a player is dealt a hand of five cards (which may be  looked at).  The player may then discard between zero and five of his or her  cards and have them replaced by the same number of cards from the top of  the deck (which is face down).  The object is to maximize the value of the  final hand.  The different values of hands in poker are given at the end of  this problem.</p>\r\n<p>Normally the player cannot see the cards in the deck and so must use  probability to decide which cards to discard.  In this problem, we imagine  that the poker player is psychic and knows which cards are on top of the  deck.  Write a program which advises the player which cards to discard so  as to maximize the value of the resulting hand.</p>', '<p>Input will consist of a series of lines, each containing the initial five cards in the hand then the first five cards on top of the deck. Each card is represented as a two-character code.  The first character is the face-value (A=Ace, 2-9, T=10, J=Jack, Q=Queen, K=King) and the second character is the suit (C=Clubs, D=Diamonds, H=Hearts, S=Spades).  Cards will be separated by single spaces.  Each input line will be from a single valid deck, that is there will be no duplicate cards in each hand and deck.</p>\r\n<p>Each line of input should produce one line of output, consisting of the initial hand, the top five cards on the deck, and the best value of hand that is possible.  Input is terminated by end of file.</p>\r\n<p></p>\r\n<p>Use the sample input and output as a guide. Note that the order of the cards in the player''s hand is irrelevant, but the  order of the cards in the deck is important because the discarded cards must  be replaced from the top of the deck.  Also note that examples of all types  of hands appear in the sample output, with the hands shown in decreasing  order of value.</p>', '', 'D:\\oj\\data\\2110', 'D:\\oj\\data\\2110', 'TH JH QC QD QS QH KH AH 2S 6S\r\n2H 2S 3H 3S 3C 2D 3D 6C 9C TH\r\n2H 2S 3H 3S 3C 2D 9C 3D 6C TH\r\n2H AD 5H AC 7H AH 6H 9H 4H 3C\r\nAC 2D 9C 3S KD 5S 4D KS AS 4C\r\nKS AH 2H 3C 4H KC 2C TC 2D AS\r\nAH 2C 9S AD 3C QH KS JS JD KD\r\n6C 9C 8C 2D 7C 2H TC 4C 9S AH\r\n3D 5S 2H QD TD 6S KH 9H AD QH', 'Hand: TH JH QC QD QS Deck: QH KH AH 2S 6S Best hand: straight-flush\r\nHand: 2H 2S 3H 3S 3C Deck: 2D 3D 6C 9C TH Best hand: four-of-a-kind\r\nHand: 2H 2S 3H 3S 3C Deck: 2D 9C 3D 6C TH Best hand: full-house\r\nHand: 2H AD 5H AC 7H Deck: AH 6H 9H 4H 3C Best hand: flush\r\nHand: AC 2D 9C 3S KD Deck: 5S 4D KS AS 4C Best hand: straight\r\nHand: KS AH 2H 3C 4H Deck: KC 2C TC 2D AS Best hand: three-of-a-kind\r\nHand: AH 2C 9S AD 3C Deck: QH KS JS JD KD Best hand: two-pairs\r\nHand: 6C 9C 8C 2D 7C Deck: 2H TC 4C 9S AH Best hand: one-pair\r\nHand: 3D 5S 2H QD TD Deck: 6S KH 9H AD QH Best hand: highest-card', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:15', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 70, 'power721'),
(2111, 'Bumpy Objects', '<p><img align="BOTTOM" src="images/problem/pic2111_0" alt="picture23" /></p>\r\n<p></p>\r\n<p>Consider objects such as these.  They are polygons, specified by the coordinates of a centre of mass and their vertices.  In the figure, centres of mass are shown as black squares.  The vertices will be numbered consecutively anti-clockwise as shown.</p>\r\n<p></p>\r\n<p>An object can be rotated to stand stably if two vertices can be found that can be joined by a straight line that does not intersect the object, and, when this line is horizontal, the centre of mass lies above the line and strictly between its endpoints.  There are typically many stable positions and each is defined by one of these lines known as its base line.  A base line, and its associated stable position, is identified by the highest numbered vertex touched by that line.</p>\r\n<p></p>\r\n<p>Write a program that will determine the stable position that has the lowest numbered base line.  Thus for the above objects, the desired base lines would be 6 for object 1, 6 for object 2 and 2 for the square.  You may assume that the objects are possible, that is they will be represented as non self-intersecting polygons, although they may well be concave.</p>', '<p>Successive lines of a data set will contain: a string of less than 20 characters identifying the object; the coordinates of the centre of mass; and the coordinates of successive points terminated by two zeroes (0 0), on one or more lines as necessary.  There may be successive data sets (objects).  The end of data will be defined by the string ''<tt>#</tt>''.</p>\r\n<p></p>\r\n<p>Output will consist of the identification string followed by the number of the relevant base line.</p>', '', 'D:\\oj\\data\\2111', 'D:\\oj\\data\\2111', 'Object2\r\n4 3\r\n3 2  5 2  6 1  7 1  6 3  4 7  1 1  2 1  0 0\r\nSquare \r\n2 2\r\n1 1  3 1  3 3  1 3  0 0\r\n#', 'Object2             6\r\nSquare              2', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:15', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 16, 'power721'),
(2112, 'Loglan-A Logical Language', '<p>Loglan is a synthetic speakable language designed to test some of the fundamental problems of  linguistics, such as the Sapir Whorf hypothesis.  It is syntactically unambiguous, culturally neutral  and metaphysically parsimonious.  What follows is a gross over-simplification of an already very  small grammar of some 200 rules.</p>\r\n<p></p>\r\n<p>Loglan sentences consist of a series of words and names, separated by spaces, and are terminated by a  period (.).  Loglan words all end with a vowel; names, which are derived extra-linguistically, end with  a consonant.  Loglan words are divided into two classes--little words which specify the structure of a  sentence, and predicates which have the form CCVCV or CVCCV where C represents a consonant  and V represents a vowel (see examples later).</p>\r\n<p></p>\r\n<p>The subset of Loglan that we are considering uses the following grammar:</p>\r\n<p></p>\r\n<p><img align="BOTTOM" width="681" height="298" src="images/problem/pic2112_0" alt="tabular21" /></p>\r\n<p></p>\r\n<p>Write a program that will read a succession of strings and determine whether or not they are correctly formed Loglan sentences.</p>', '<p>Each Loglan sentence will start on a new line and will be terminated by a period (.).  The sentence may occupy more than one line and words may be separated by more than one whitespace character.  The input will be terminated by a line containing a single `<tt>#</tt>''.  You can assume that all words will be correctly formed.</p>\r\n<p>Output will consist of one line for each sentence containing  either `<tt>Good</tt>'' or `<tt>Bad!</tt>''.</p>', '', 'D:\\oj\\data\\2112', 'D:\\oj\\data\\2112', 'la mutce bunbo mrenu bi ditca.\r\nla fumna bi le mrenu.\r\ndjan ga vedma le negro ketpi.\r\n#', 'Good\r\nBad!\r\nGood', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:15', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 18, 'power721'),
(2113, 'Polygons', '<p>Given two convex polygons, they may or may not overlap.  If they do overlap, they will do so to differing degrees and in different ways.  Write a program that will read in the coordinates of the corners of two convex polygons and calculate the `exclusive or'' of the two areas, that is the area that is bounded by exactly one of the polygons.  The desired area is shaded in the following diagram:</p>\r\n<p></p>\r\n<p><img align="BOTTOM" width="464" height="207" src="images/problem/pic2113_0" alt="picture23" /></p>', '<p>Input will consist of pairs of lines each containing the number of vertices of the polygon, followed by that many pairs of integers representing the x,y coordinates of the corners in a clockwise direction. All the coordinates will be positive integers less than 100. For each pair of polygons (pair of lines in the data file), your program should print out the desired area correct to two decimal places. The input will end with a line containing a zero (0).</p>', '<p>Output will consist of a single line containing the desired area written as a succession of eight (8) digit fields with two (2) digits after the  decimal point.  There will not be enough cases to need more than one line.</p>', 'D:\\oj\\data\\2113', 'D:\\oj\\data\\2113', '3  5 5  8 1  2 3\r\n3  5 5  8 1  2 3\r\n4  1 2  1 4  5 4  5 2\r\n6  6 3  8 2  8 1  4 1  4 2  5 3\r\n0', '0.00   13.50', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:15', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 21, 'power721'),
(2114, 'Orchard Trees', '<p>An Orchardist has planted an orchard in a rectangle with trees uniformly spaced in both directions. Thus the trees form a rectangular grid and we can consider the trees to have integer coordinates. The origin of the coordinate system is at the bottom left of the following diagram:</p>\r\n<p></p>\r\n<p><img align="BOTTOM" src="images/problem/pic2114_0" alt="picture23" /></p>\r\n<p></p>\r\n<p>Consider that we now overlay a series of triangles on to this grid. The vertices of the triangle can have any real coordinates in the range 0.0 to 100.0, thus trees can have coordinates in the range 1 to 99. Two possible triangles are shown.</p>\r\n<p></p>\r\n<p>Write a program that will determine how many trees are contained within a given triangle. For the purposes of this problem, you may assume that the trees are of point size, and that any tree (point) lying exactly on the border of a triangle is considered to be in the triangle.</p>', '<p>Input will consist of a series of lines. Each line will contain 6 real numbers in the range 0.00 to 100.00 representing the coordinates of a triangle. The entire file will be terminated by a line containing 6 zeroes (0 0 0 0 0 0).</p>\r\n<p></p>\r\n<p>Output will consist of one line for each triangle, containing the number of trees for that triangle right justified in a field of width 4.</p>', '', 'D:\\oj\\data\\2114', 'D:\\oj\\data\\2114', '1.5 1.5  1.5 6.8  6.8 1.5\r\n10.7 6.9  8.5 1.5  14.5 1.5\r\n0 0 0 0 0 0', '15\r\n  17', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:15', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 23, 'power721'),
(2115, 'Forests', '<p>The saying ``You can''t see the wood for the trees'''' is not only a cliche, but is also incorrect. The real problem is that you can''t see the trees for the wood. If you stand in the middle of a ``wood'''' (in NZ terms, a patch of bush), the trees tend to obscure each other and the number of distinct trees you can actually see is quite small. This is especially true if the trees are planted in rows and columns (as in a pine plantation), because they tend to line up. The purpose of this problem is to find how many distinct trees you can see from an arbitrary point in a pine plantation (assumed to stretch ``for ever'''').</p>\r\n<p></p>\r\n<p><img align="BOTTOM" width="475" height="333" src="images/problem/pic2115_0" alt="picture23" /></p>\r\n<p></p>\r\n<p>You can only see a distinct tree if no part of its trunk is obscured by a nearer tree--that is if both sides of the trunk can be seen, with a discernible gap between them and the trunks of all trees closer to you. Also, you can''t see a tree if it is apparently ``too small''''. For definiteness, ``not too small'''' and ``discernible gap'''' will mean that the angle subtended at your eye is greater than 0.01 degrees (you are assumed to use one eye for observing). Thus the two trees marked <img align="BOTTOM" width="13" height="13" src="images/problem/pic2115_1" alt="picture169" />  obscure at least the trees marked <img align="BOTTOM" width="13" height="13" src="images/problem/pic2115_2" alt="picture175" />  from the given view point.</p>\r\n<p></p>\r\n<p>Write a program that will determine the number of trees visible under these assumptions, given the diameter of the trees, and the coordinates of a viewing position. Because the grid is infinite, the origin is unimportant, and the coordinates will be numbers between 0 and 1.</p>', '<p>Input will consist of a series of lines, each line containing three real numbers of the form 0.nn. The first number will be the trunk diameter--all trees will be assumed to be cylinders of exactly this diameter, with their centres placed exactly on the points of a rectangular grid with a spacing of one unit. The next two numbers will be the x and y coordinates of the observer. To avoid potential problems, say by being too close to a tree, we will guarantee that  <img align="MIDDLE" width="255" height="27" src="images/problem/pic2115_3" alt="tex2html_wrap_inline260" /> .  To avoid problems with trees being too small you may assume that  <img align="MIDDLE" width="115" height="26" src="images/problem/pic2115_4" alt="tex2html_wrap_inline262" /> . The file will be terminated by a line consisting of three zeroes.</p>', '<p>Output will consist of a series of lines, one for each line of the input. Each line will consist of the number of trees of the given size, visible from the given position.</p>', 'D:\\oj\\data\\2115', 'D:\\oj\\data\\2115', '0.10 0.46 0.38\r\n0 0 0', '128', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:15', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 28, 'power721'),
(2116, 'Double Time', '<p>In 45 BC a standard calendar was adopted by Julius Caesar--each year would have 365 days, and every fourth year have an extra day--the 29th of February. However this calendar was not quite accurate enough to track the true solar year, and it became noticeable that the onset of the seasons was shifting steadily through the year. In 1582 Pope Gregory XIII ruled that a new style calendar should take effect. From then on, century years would only be leap years if they were divisible by 400. Furthermore the current year needed an adjustment to realign the calendar with the seasons. This new calendar, and the correction required, were adopted immediately by Roman Catholic countries, where the day following Thursday 4 October 1582 was Friday 15 October 1582. The British and Americans (among others) did not follow suit until 1752, when Wednesday 2 September was followed by Thursday 14 September. (Russia did not change until 1918, and Greece waited until 1923.) Thus there was a long period of time when history was recorded in two different styles.</p>\r\n<p></p>\r\n<p>Write a program that will read in a date, determine which style it is in, and then convert it to the other style.</p>', '<p>Input will consist of a series of lines, each line containing a day and date (such as Friday 25 December 1992). Dates will be in the range 1 January 1600 to 31 December 2099, although converted dates may lie outside this range. Note that all names of days and months will be in the style shown, that is the first letter will be capitalised with the rest lower case. The file will be terminated by a line containing a single `<tt>#</tt>''.</p>', '<p>Output will consist of a series of lines, one for each line of the input. Each line will consist of a date in the other style. Use the format and spacing shown in the example and described above. Note that there must be exactly one space between each pair of fields. To distinguish between the styles, dates in the old style must have an asterisk (`*'') immediately after the day of the month (with no intervening space). Note that this will not apply to the input.</p>', 'D:\\oj\\data\\2116', 'D:\\oj\\data\\2116', 'Saturday 29 August 1992\r\nSaturday 16 August 1992\r\nWednesday 19 December 1991\r\nMonday 1 January 1900\r\n#', 'Saturday 16* August 1992\r\nSaturday 29 August 1992\r\nWednesday 1 January 1992\r\nMonday 20* December 1899', '', '', '', '2011-06-10 19:40:15', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 20, 'power721'),
(2117, 'Route Finding', '<p>Many cities provide a comprehensive public transport system, often integrating bus routes, suburban commuter train services and underground railways. Routes on such systems can be categorised according to the stations or stops along them. We conventionally think of them as forming lines (where the vehicle shuttles from one end of the route to the other and returns), loops (where the two ends of the ``branch'''' are the same and vehicles circle the system in both directions) and connections, where each end of the route connects with another route. Obviously all of these can be thought of as very similar, and can connect with each other at various points along their routes. Note that vehicles can travel in both directions along all routes, and that it is only possible to change between routes at connecting stations.</p>\r\n<p></p>\r\n<p>To simplify matters, each route is given a designation letter from the set `<tt>A</tt>'' to `<tt>Z</tt>'', and each station along a route will be designated by another letter from the set  `<tt>a</tt>''  to `<tt>z</tt>''. Connecting stations will have more than one designation. Thus an example could be:</p>\r\n<p></p>\r\n<p><img align="BOTTOM" src="images/problem/pic2117_0" alt="picture31" /></p>\r\n<p></p>\r\n<p>A common problem in such systems is finding a route between two stations. Once this has been done we wish to find the ``best'''' route, where ``best'''' means ``shortest time''''.</p>\r\n<p></p>\r\n<p>Write a program that will read in details of such a system and then will find the fastest routes between given pairs of stations. You can assume that the trip between stations always takes 1 unit of time and that changing between routes at a connecting station takes 3 units of time.</p>', '<p>Input will consist of two parts. The first will consist of a description of a system, the second will consist of pairs of stations. The description will start with a number between 1 and 26 indicating how many routes there are in the system. This will be followed by that many lines, each describing a single route. Each line will start with the route identifier followed by a `<tt>:</tt>'' followed by the stations along that route, in order. Connections will be indicated by an `<tt>=</tt>'' sign followed by the complete alternative designation. All connections will be identified at least once, and if there are more than two lines meeting at a connection, some or of all the alternative designations may be identified together.  That is, there may be sequences such as `<tt>...hc=Bg=Cc=Abd...</tt>''. If the route forms a loop then the last station will be the same as the first. This is the only situation in which station letters will be repeated. The next portion of the input file will consist of a sequence of lines each containing two stations written contiguously. The file will be terminated by a line consisting of a single <tt>#</tt>.</p>', '<p>Output will consist of a series of lines, one for each pair of stations in the input. Each line will consist of the time for the fastest route joining the two stations, right justified in a field of width 3, followed by a colon and a space and the sequence of stations representing the shortest journey. Follow the example shown below. Note that there will always be only one fastest route for any given pair of stations and that the route must start and finish at the named stations (not at any synonyms thereof), hence the time for the route must include the time for any inter-station transfers.</p>\r\n<p></p>\r\n<p>The example input below refers to the diagram given above.</p>', 'D:\\oj\\data\\2117', 'D:\\oj\\data\\2117', '4\r\nA:fgmpnxzabjd=Dbf\r\nD:b=Adac=Ccf\r\nB:acd=Azefg=Cbh\r\nC:bac\r\nAgAa\r\nAbBh\r\nBhDf\r\n#', '5: Agfdjba\r\n  9: Abaz=Bdefgh\r\n 10: Bhg=Cbac=Dcf', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:15', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 31, 'power721'),
(2118, 'Calendar', '<p>Most of us have a calendar on which we scribble details of important events in our lives--visits to the dentist, the Regent 24 hour book sale, Programming Contests and so on. However there are also the fixed dates: partner''s birthdays, wedding anniversaries and the like; and we also need to keep track of these. Typically we need to be reminded of when these important dates are approaching--the more important the event, the further in advance we wish to have our memories jogged.</p>\r\n<p></p>\r\n<p>Write a program that will provide such a service. The input will specify the year for which the calendar is relevant (in the range 1901 to 1999). Bear in mind that, within the range specified, all years that are divisible by 4 are leap years and hence have an extra day (February 29th) added. The output will specify ``today''s'''' date, a list of forthcoming events and an indication of their relative importance.</p>', '<p>The first line of input will contain an integer representing the year (in the range 1901 to 1999). This will be followed by a series of lines representing anniversaries or days for which the service is requested.</p>\r\n<p>An anniversary line will consist of the letter `<tt>A</tt>''; three integer numbers (<i>D</i>, <i>M</i>, <i>P</i>) representing the date, the month and the importance of the event; and a string describing the event, all separated by one or more spaces. P will be a number between 1 and 7 (both inclusive) and represents the number of days before the event that the reminder service should start. The string describing the event will always be present and will start at the first non-blank character after the priority.</p>\r\n<p>A date line will consist of the letter `<tt>D</tt>'' and the date and month as above.</p>\r\n<p>All anniversary lines will precede any date lines. No line will be longer than 255 characters in total. The file will be terminated by a line consisting of a single <tt>#</tt>.</p>\r\n<p></p>\r\n<h2><font color="#0070e8"><a name="SECTION0001002000000000000000"></a></font></h2>', '<p>Output will consist of a series of blocks of lines, one for each date line in the input. Each block will consist of the requested date followed by the list of events for that day and as many following days as necessary.</p>\r\n<p>The output should specify the date of the event (<i>D</i> and <i>M</i>), right justified in fields of width 3, and the relative importance of the event. Events that happen today should be flagged as shown below, events that happen tomorrow should have P stars, events that happen the day after tomorrow should have P-1 stars, and so on. If several events are scheduled for the same day, order them by relative importance (number of stars).</p>\r\n<p>If there is still a conflict, order them by their appearance in the input stream. Follow the format used in the example below. Leave 1 blank line between blocks.</p>', 'D:\\oj\\data\\2118', 'D:\\oj\\data\\2118', '1993\r\nA 23 12 5 Partner''s birthday\r\nA 25 12 7    Christmas\r\nA 20 12 1 Unspecified Anniversary\r\nD 20 12\r\n#', 'Today is: 20 12\r\n 20 12 *TODAY* Unspecified Anniversary\r\n 23 12 ***     Partner''s birthday\r\n 25 12 ***     Christmas', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:15', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 18, 'power721'),
(2119, 'Beggar My Neighbour', '<p>``Beggar My Neighbour'''' (sometimes known as ``Strip Jack Naked'''') is a traditional card game, designed to help teach beginners something about cards and their values. A standard deck is shuffled and dealt face down to the two players, the first card to the non-dealer, the second to the dealer, and so on until each player has 26 cards. The dealer receives the last card. The non-dealer starts the game by playing the top card of her deck (the second last card dealt) face up on the table. The dealer then covers it by playing her top card face up. Play continues in this fashion until a ``face'''' card (Ace, King, Queen or Jack) is played. The next player must then ``cover'''' that card, by playing one card for a Jack, two for a Queen, three for a King and four for an Ace. If a face card is played at any stage during this sequence, play switches and the other player must cover that card. When this sequence has ended, the player who exposed the last face card takes the entire heap, placing it face down under her existing deck. She then starts the next round by playing one card face up as before, and play continues until one player cannot play when called upon to do so, because they have no more cards.</p>\r\n<p></p>\r\n<p>Write a program that will simulate playing this game. Remember that a standard deck (or pack) of cards contains 52 cards. These are divided into 4 suits--Spades ( <img align="MIDDLE" width="12" height="27" src="images/problem/pic2119_0" alt="tex2html_wrap_inline30" /> ), Hearts ( <img align="MIDDLE" width="12" height="24" src="images/problem/pic2119_1" alt="tex2html_wrap_inline32" /> ), Diamonds ( <img align="MIDDLE" width="12" height="27" src="images/problem/pic2119_2" alt="tex2html_wrap_inline34" /> ) and Clubs ( <img align="MIDDLE" width="13" height="27" src="images/problem/pic2119_3" alt="tex2html_wrap_inline36" /> ). Within each suit there are 13 cards--Ace (A), 2-9, Ten (T), Jack (J), Queen (Q) and King (K).</p>\r\n<p></p>\r\n<h2><font color="#0070e8"><a name="SECTION0001001000000000000000"></a></font></h2>', '<p>Input will consist of a series of decks of cards. Each deck will give the cards in order as they would be dealt (that is in the example deck below, the non-dealer would start the game by playing the H2). Decks will occupy 4 lines with 13 cards on each. The designation of each card will be the suit (S, H, D, C) followed by the rank (A, 2-9, T, J, Q, K). There will be exactly one space between cards. The file will be terminated by a line consisting of a single <tt>#</tt>.</p>', '<p>Output will consist of a series of lines, one for each deck in the input. Each line will consist of the number of the winning player (1 is the dealer, 2 is the first to play) and the number of cards in the winner''s hand (ignoring any on the stack), right justified in a field of width 3.</p>\r\n<p></p>\r\n<h2><font color="#0070e8"><a name="SECTION0001003000000000000000"></a></font></h2>', 'D:\\oj\\data\\2119', 'D:\\oj\\data\\2119', 'HA H3 H4 CA SK S5 C5 S6 C4 D5 H7 HJ HQ\r\nD4 D7 SJ DT H6 S9 CT HK C8 C9 D6 CJ C6\r\nS8 D8 C2 S2 S3 C7 H5 DJ S4 DQ DK D9 D3\r\nH9 DA SA CK CQ C3 HT SQ H8 S7 ST H2 D2\r\n#', '1 44', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:15', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 26, 'power721'),
(2120, 'City Directions', '<p>When driving through a city, an intersection usually offers one the choice of going straight on or turning left or right through 90 degrees. However some cities have diagonal roads, thus at intersections involving these one may be able to turn through 45 degrees (``half'''') or through 135 degrees (``sharp'''').</p>\r\n<p></p>\r\n<p>Consider such a city with Avenues running north-south, Streets running east-west and Boulevards running diagonally. The central Avenue and Street are labelled Zero (A0 and S0). Other roads are labelled relative to these, thus A3W is the third avenue to the west of A0. There are 6 Boulevards--two passing through the centre of the city, and 4 others, one in each quadrant. The diagram below shows the northwest quadrant of a small version of such a city.</p>\r\n<p></p>\r\n<p><img align="BOTTOM" src="images/problem/pic2120_0" alt="picture27" /></p>\r\n<p></p>\r\n<p>The roads marked in grey are considered to be throughways. These are elevated for most of their length, thus it is possible to cross them easily, however they always intersect each other at a circle, which is shared by all other roads that meet at that intersection. You may only enter or leave them by turning left (sharp left in the case of boulevards). You may not stop on them for any reason. There are no restrictions on turns for other roads.</p>\r\n<p></p>\r\n<p>This system allows a very simple method of determining one''s current position and a way of arriving at one''s destination. Position can be specified in terms of the last intersection you passed through (the numbers of the Avenue and Street that meet there) and your current heading, which can be one of: north (N), northeast (NE), east (E), southeast (SE), south (S), southwest (SW), west (W) and northwest (NW). Directions can then be given in terms of how many intersections to pass through and which turns to make. However, the locals have an infuriating habit of giving incorrect or invalid directions, although it cannot be determined whether this is deliberate or accidental. Directions should (but don''t always) conform to the following simple grammar:</p>\r\n<p></p>\r\n<blockquote> &lt;command&gt; ::= &lt;turn_command&gt;  <img align="MIDDLE" width="2" height="27" src="images/problem/pic2120_1" alt="tex2html_wrap_inline231" />  &lt;straight_command&gt; <br />\r\n&lt;turn_command&gt; ::= TURN [HALF  <img align="MIDDLE" width="2" height="27" src="images/problem/pic2120_1" alt="tex2html_wrap_inline231" />  SHARP] {LEFT  <img align="MIDDLE" width="2" height="27" src="images/problem/pic2120_1" alt="tex2html_wrap_inline231" />  RIGHT} <br />\r\n&lt;straight_command&gt; ::= GO [STRAIGHT] n  <img align="MIDDLE" width="11" height="24" src="images/problem/pic2120_2" alt="tex2html_wrap_inline249" />  n  <img align="MIDDLE" width="11" height="24" src="images/problem/pic2120_2" alt="tex2html_wrap_inline249" />  99 </blockquote>\r\n<p>Write a program that will simulate driving through such a city, by tracking your position and heading as you follow a set of directions (commands). Each quadrant of the city will be 50 blocks by 50 blocks, thus the entire city will be 100 blocks by 100 blocks, the outer throughways will be labelled Fifty and the major and minor boulevards will cross at roads labelled Twentyfive. You will be told your starting position and heading and then given a series of directions. If a direction does not follow the above grammar, or would involve an illegal or impossible turn then ignore it. At no stage will directions take you out of the confines of the city.</p>', '<p>Input will consist of a series of scenarios.</p>\r\n<p>Each scenario will consist of a position and a heading and will be followed by a series of directions (commands), each on a separate line. If either of the roads involved is one of the central roads (A0, S0), they will be labelled <tt>N</tt> or <tt>E</tt> as appropriate. Note that you may assume that you have just left the intersection specified. The <code>GO &lt;n&gt;</code> command means that you pass through <code>&lt;n&gt;</code> intersections.</p>\r\n<p>Each scenario will be terminated by a line consisting of the word <tt>STOP</tt>.</p>\r\n<p>The file will be terminated by a line consisting of the word <tt>END</tt> only.</p>\r\n<p></p>\r\n<p>Input data will follow the format shown below, except that more than one space may occur where only one is shown. No line will be longer than 80 characters.</p>\r\n<p></p>\r\n<h2><font color="#0070e8"><a name="SECTION0001002000000000000000"></a></font></h2>', '<p>Output will consist of a series of lines, one for each scenario. Each line will consist of a position and a heading in the same format as the input. If the final stopping place is illegal, report `<tt>Illegal stopping place</tt>'' as the answer.</p>', 'D:\\oj\\data\\2120', 'D:\\oj\\data\\2120', 'A2W S1N E\r\nTURN SHARP LEFT\r\nGO 1\r\nTURN RIGHT\r\nTURN LEFT\r\nTURN SHARP LEFT\r\nGO 1\r\nTURN LEFT\r\nSTOP\r\nA2W S1N W\r\nGO STRAIGHT 2\r\nTURN LEFT\r\nGO ON 2\r\nTURN HALF LEFT\r\nTURN LEFT\r\nGO 2\r\nSTOP\r\nEND', 'A3W S1N E\r\nIllegal stopping place', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:15', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 15, 'power721'),
(2121, 'String Computer', '<p>Extel have just brought out their newest computer, a string processing computer dubbed the X9091. It is hoped that it will have some value in cryptography and related fields. (It is rumoured that the Taiwanese are working on a clone that will correct Stage 1 essays, but we will ignore such vapourware). This computer will accept input strings and produce output strings from them, depending on the programs loaded into them at the time. The chip is the ultimate in RISC technology--it has only three transformation instructions:</p>\r\n<p></p>\r\n<ul>\r\n    <li>Delete a character at a particular position.</li>\r\n    <li>Insert a character at a particular position.</li>\r\n    <li>Change the character at a particular position to a different character.</li>\r\n</ul>\r\n<p>Programs for this machine are written in a form of machine code where each instruction has the format <tt>ZXdd--Z</tt> represents the code for the instruction (<tt>D</tt>, <tt>I</tt> or <tt>C</tt>), <tt>X</tt> is a character and <tt>dd</tt> represents a two digit number. A program is terminated by a special halt instruction consisting of the letter `<tt>E</tt>''. Note that each instruction works on the string in memory at the time the instruction is executed.</p>\r\n<p>To see how this all works consider the following example. It is desired to transform the string `<tt>abcde</tt>'' to the string `<tt>bcgfe</tt>''. This could be achieved by a series of Change commands, but is not minimal. The following program is better.</p>\r\n<p></p>\r\n<p><img align="BOTTOM" width="610" height="103" src="images/problem/pic2121_0" alt="tabular32" /></p>\r\n<p>Write a program that will read in two strings (the input string and the target string) and will produce a <em>minimal</em> X9091 program necessary to transform the input string into the target string. Since there may be multiple solutions, only one should be produced. Any solution that satisfies these criteria will be accepted.</p>', '<p>Input will consist of a series of lines, each line containing two strings separated by exactly one space. The strings will consist of no more than 20 lower case characters. The file will be terminated by a line consisting of a single <tt>#</tt>.</p>\r\n<p>Output will consist of a series of lines, one for each line of the input. Each will consist of a program in X9091 language.</p>', '', 'D:\\oj\\data\\2121', 'D:\\oj\\data\\2121', 'abcde bcgfe\r\n#', 'Da01Cg03If04E', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:15', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 20, 'power721');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(2122, 'Stamps', '<p>The government of Nova Mareterrania requires that various legal documents have stamps attached to them so that the government can derive revenue from them. In terms of recent legislation, each class of document is limited in the number of stamps that may be attached to it. The government wishes to know how many different stamps, and of what values, they need to print to allow the widest choice of values to be made up under these conditions. Stamps are always valued in units of $1.</p>\r\n<p></p>\r\n<p>This has been analysed by government mathematicians who have derived a formula for <i>n</i>(<i>h</i>,<i>k</i>), where <i>h</i> is the number of stamps that may be attached to a document, <i>k</i> is the number of denominations of stamps available, and <i>n</i> is the largest attainable value in a continuous sequence starting from $1. For instance, if <i>h</i>=3, <i>k</i>=2 and the denominations are $1 and $4, we can make all the values from $1 to $6 (as well as $8, $9 and $12). However with the same values of <i>h</i> and <i>k</i>, but using $1 and $3 stamps we can make all the values from $1 to $7 (as well as $9). This is maximal, so <i>n</i>(3,2) = 7.</p>\r\n<p></p>\r\n<p>Unfortunately the formula relating <i>n</i>(<i>h</i>,<i>k</i>) to <i>h</i>, <i>k</i> and the values of the stamps has been lost--it was published in one of the government reports but no-one can remember which one, and of the three researchers who started to search for the formula, two died of boredom and the third took a job as a lighthouse keeper because it provided more social stimulation.</p>\r\n<p>The task has now been passed on to you. You doubt the existence of a formula in the first place so you decide to write a program that, for given values of <i>h</i> and <i>k</i>, will determine an optimum set of stamps and the value of <i>n</i>(<i>h</i>,<i>k</i>).</p>', '<p>Input will consist of several lines, each containing a value for <i>h</i> and <i>k</i>. The file will be terminated by two zeroes (0 0). For technical reasons the sum of <i>h</i> and <i>k</i> is limited to 9. (The President lost his little finger in a shooting accident and cannot count past 9).</p>', '<p>Output will consist of a line for each value of <i>h</i> and <i>k</i> consisting of the <i>k</i> stamp values in ascending order right justified in fields 3 characters wide, followed by a space and an arrow (<code>-&gt;</code>) and the value of <i>n</i>(<i>h</i>,<i>k</i>) right justified in a field 3 characters wide.</p>', 'D:\\oj\\data\\2122', 'D:\\oj\\data\\2122', '3 2\r\n0 0', '1  3 ->  7', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:15', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 17, 'power721'),
(2123, 'The Sultan''s Successors', '<p>The Sultan of Nubia has no children, so she has decided that the country will be split into up to <i>k</i> separate parts on her death and each part will be inherited by whoever performs best at some test. It is possible for any individual to inherit more than one or indeed all of the portions. To ensure that only highly intelligent people eventually become her successors, the Sultan has devised an ingenious test. In a large hall filled with the splash of fountains and the delicate scent of incense have been placed <i>k</i> chessboards. Each chessboard has numbers in the range 1 to 99 written on each square and is supplied with 8 jewelled chess queens. The task facing each potential successor is to place the 8 queens on the chess board in such a way that no queen threatens another one, and so that the numbers on the squares thus selected sum to a number at least as high as one already chosen by the Sultan. (For those unfamiliar with the rules of chess, this implies that each row and column of the board contains exactly one queen, and each diagonal contains no more than one.)</p>\r\n<p></p>\r\n<p>Write a program that will read in the number and details of the chessboards and determine the highest scores possible for each board under these conditions. (You know that the Sultan is both a good chess player and a good mathematician and you suspect that her score is the best attainable.)</p>', '<p>Input will consist of <i>k</i> (the number of boards), on a line by itself, followed by <i>k</i> sets of 64 numbers, each set consisting of eight lines of eight numbers. Each number will be a positive integer less than 100. There will never be more than 20 boards.</p>', '<p>Output will consist of <i>k</i> numbers consisting of your <i>k</i> scores, each score on a line by itself and right justified in a field 5 characters wide.</p>', 'D:\\oj\\data\\2123', 'D:\\oj\\data\\2123', '1\r\n 1  2  3  4  5  6  7  8\r\n 9 10 11 12 13 14 15 16\r\n17 18 19 20 21 22 23 24\r\n25 26 27 28 29 30 31 32\r\n33 34 35 36 37 38 39 40\r\n41 42 43 44 45 46 47 48\r\n48 50 51 52 53 54 55 56\r\n57 58 59 60 61 62 63 64', '260', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:15', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 51, 'power721'),
(2124, 'Xenosemantics', '<p>Contact with extra-terrestrial intelligence has been made at last!! A stream of messages has been discovered, apparently emanating from Procyon IV. After intensive study by the world''s best xenosemanticists, the following definite conclusions on the format of the messages have been reached. The messages are streams of bits divided into groups of 8. Somewhat coincidentally the meaningful parts of the message map onto the lower case alphabet, although other characters sometimes intervene. Letters are organised into words separated by spacer letters. The spacer letter varies within a message, but a word which is delimited by a particular spacer pair does not contain that spacer letter within it. In addition the message is conceptually bounded by a pair of `joker'' letters or `wild spacers'' that can match any letter. For example, a message segment <tt> xwrxwtx</tt> contains 3 words--<tt>wr</tt>, <tt>wt</tt>, and <tt>rx</tt>; <tt>wrxwt</tt> is not a word in this segment of the message. If this segment appeared at the start of a message then <tt>xw</tt> and <tt>xwrxw</tt> could also be words. The words <tt>wr</tt> and <tt>rx</tt> overlap, while <tt>wt</tt> does not overlap any words in this message segment. While a word contains the same letters each time it appears in one message, the order of the letters may vary in different occurrences of the same word. Each message contains many words which are not ``true'''' words in that they carry no meaning (like err.., umm.., etc in English). Every true word in the message contains at least two and no more than 250 letters, overlaps with another true word, and is repeated somewhere in the message (possibly with the letters in a different order). In the example above, <tt>wr</tt> and <tt>rx</tt> would both be true words if <tt> wr</tt> or <tt>rw</tt>, and <tt>rx</tt> or <tt>xr</tt>, occurred as words elsewhere in the message. The word <tt>wt</tt> would be a true word if <tt>wt</tt> or <tt>tw</tt> occurred elsewhere in the message, overlapping another true word.</p>\r\n<p></p>\r\n<p>Write a program that will read in messages and print out a list of the different true words contained in each message (using the spelling which occurs first), in the order the words first appear in the message. If the first appearances of two words overlap, then the word that finishes first precedes the other. Remember that both the start and the end of the message count as spacer letters. Your program must be able to process messages of up to 1000 letters.</p>', '<p>Input will consist of one or more messages. Each message will consist of one or more lines. Each line will be no more than 60 characters long and will contain a mixture of lower case letters and other characters. If the last character of a line is a dash (<tt>-</tt>) then the message continues on the next line. All characters other than lower case `<tt>a</tt>'' to `<tt>z</tt>'' form no part of the message. The file will be terminated by a line consisting of a single <tt>#</tt>.</p>', '<p>Output will consist of the true words for each message, in the correct order as specified above, one word per line. Terminate the list for each message by a line consisting of a single *.</p>', 'D:\\oj\\data\\2124', 'D:\\oj\\data\\2124', 'dyj@ttdi%sdort^jdyt*rFnn  trlnsvkGHoalexotrjxzasvs-\r\nozgpsi<>:pkelaovo,.;''slnxt''][-prsjlntrjo\r\naaaaaaa\r\n#', 'dyj\r\nortj\r\nlnsvkoalexot\r\n*\r\n*', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:15', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721'),
(2125, 'Car Trialling', '<p>Car trialling requires the following of carefully worded instructions. When setting a trial, the organiser places traps in the instructions to catch out the unwary.</p>\r\n<p></p>\r\n<p>Write a program to determine whether an instruction obeys the following rules, which are loosely based on real car trialling instructions. <b>BOLD-TEXT</b> indicates text as it appears in the instruction (case sensitive),  <img align="MIDDLE" width="2" height="27" src="images/problem/pic2125_0" alt="tex2html_wrap_inline61" />  separates options of which exactly one must be chosen, and .. expands, so <b>A</b>..<b>D</b> is equivalent to <b>A</b> <img align="MIDDLE" width="2" height="27" src="images/problem/pic2125_0" alt="tex2html_wrap_inline61" /> <b>B</b> <img align="MIDDLE" width="2" height="27" src="images/problem/pic2125_0" alt="tex2html_wrap_inline61" /> <b>C</b> <img align="MIDDLE" width="2" height="27" src="images/problem/pic2125_0" alt="tex2html_wrap_inline61" /> <b>D</b> .</p>\r\n<p>instruction = navigational   <img align="MIDDLE" width="2" height="27" src="images/problem/pic2125_0" alt="tex2html_wrap_inline61" />   time-keeping   <img align="MIDDLE" width="2" height="27" src="images/problem/pic2125_0" alt="tex2html_wrap_inline61" />   navigational <b>AND</b> time-keeping</p>\r\n<p>navigational = directional   <img align="MIDDLE" width="2" height="27" src="images/problem/pic2125_0" alt="tex2html_wrap_inline61" />   navigational <b>AND THEN </b>directional</p>\r\n<p>directional = how direction   <img align="MIDDLE" width="2" height="27" src="images/problem/pic2125_0" alt="tex2html_wrap_inline61" />   how direction where</p>\r\n<p>how = <b>GO</b>   <img align="MIDDLE" width="2" height="27" src="images/problem/pic2125_0" alt="tex2html_wrap_inline61" />   <b>GO</b> when   <img align="MIDDLE" width="2" height="27" src="images/problem/pic2125_0" alt="tex2html_wrap_inline61" />   <b>KEEP</b></p>\r\n<p>direction = <b>RIGHT</b>   <img align="MIDDLE" width="2" height="27" src="images/problem/pic2125_0" alt="tex2html_wrap_inline61" />   <b>LEFT</b></p>\r\n<p>when = <b>FIRST </b>  <img align="MIDDLE" width="2" height="27" src="images/problem/pic2125_0" alt="tex2html_wrap_inline61" />   <b>SECOND</b>   <img align="MIDDLE" width="2" height="27" src="images/problem/pic2125_0" alt="tex2html_wrap_inline61" />   <b>THIRD</b></p>\r\n<p>where = <b>AT</b> sign</p>\r\n<p>sign = <b><tt>"</tt></b>signwords<b><tt>"</tt></b></p>\r\n<p>signwords = s-word   <img align="MIDDLE" width="2" height="27" src="images/problem/pic2125_0" alt="tex2html_wrap_inline61" />   signwords s-word</p>\r\n<p>s-word = letter   <img align="MIDDLE" width="2" height="27" src="images/problem/pic2125_0" alt="tex2html_wrap_inline61" />   s-word letter</p>\r\n<p>letter = <b>A</b>..<b>Z</b>   <img align="MIDDLE" width="2" height="27" src="images/problem/pic2125_0" alt="tex2html_wrap_inline61" />   <b>.</b></p>\r\n<p>time-keeping = record   <img align="MIDDLE" width="2" height="27" src="images/problem/pic2125_0" alt="tex2html_wrap_inline61" />   change</p>\r\n<p>record = <b>RECORD TIME</b></p>\r\n<p>change = cas <b>TO</b> nnn <b>KMH</b></p>\r\n<p>cas = <b>CHANGE AVERAGE SPEED</b>   <img align="MIDDLE" width="2" height="27" src="images/problem/pic2125_0" alt="tex2html_wrap_inline61" />   <b>CAS</b></p>\r\n<p>nnn = digit   <img align="MIDDLE" width="2" height="27" src="images/problem/pic2125_0" alt="tex2html_wrap_inline61" />   nnn digit</p>\r\n<p>digit = <b>0</b>..<b>9</b> Note that <em>s-word</em> and <em>nnn</em> are sequences of letters and digits respectively, with no intervening spaces. There will be one or more spaces between items except before a period (.), after the opening speech marks or before the closing speech marks.</p>', '<p>Each input line will consist of not more than 75 characters. The input will be terminated by a line consisting of a single <tt>#</tt>.</p>', '<p>The output will consist of a series of sequentially numbered lines, either containing the valid instruction, or the text <tt>Trap!</tt> if the line did not obey the rules. The line number will be right justified in a field of 3 characters, followed by a full-stop, a single space, and the instruction, with sequences of more than one space reduced to single spaces.</p>\r\n<p></p>\r\n<h2><font color="#0070e8"><a name="SECTION0001003000000000000000"></a></font></h2>', 'D:\\oj\\data\\2125', 'D:\\oj\\data\\2125', 'KEEP LEFT AND THEN GO RIGHT\r\nCAS TO 20 KMH\r\nGO FIRST       RIGHT AT "SMITH ST."  AND   CAS TO 20 KMH\r\nGO 2nd RIGHT\r\nGO LEFT AT "SMITH STREET AND RECORD TIME\r\nKEEP RIGHT AND THEN RECORD TIME\r\n#', '1. KEEP LEFT AND THEN GO RIGHT\r\n  2. CAS TO 20 KMH\r\n  3. GO FIRST RIGHT AT "SMITH ST." AND CAS TO 20 KMH\r\n  4. Trap!\r\n  5. Trap!\r\n  6. Trap!', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:15', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 20, 'power721'),
(2126, 'Calculator Language', '<p>Calculator Language (CL) supports assignment, positive and negative integers and simple arithmetic. The allowable characters in a CL statement are thus:</p>\r\n<p></p>\r\n<p></p>\r\n<p><img align="BOTTOM" width="240" height="189" src="images/problem/pic2126_0" alt="tabular20" /></p>\r\n<p></p>\r\n<p></p>\r\n<p>All operators have the same precedence and are right associative, thus 15 - 8 - 3 = 15 - (8 - 3) = 10. As one would expect, brackets will force the expression within them to be evaluated first. Brackets may be nested arbitrarily deeply. An expression never has two operators next to each other (even if separated by a bracket), an assignment operator is always immediately preceded by a variable and the leftmost operator on a line is always an assignment. For readability, spaces may be freely inserted into an expression, except between a negative sign and a number. A negative sign will not appear before a variable. All variables are initialised to zero (0) and retain their values until changed explicitly.</p>\r\n<p></p>\r\n<p>Write a program that will accept and evaluate expressions written in this language. Each expression occupies one line and contains at least one assignment operator, and maybe more.</p>', '<p>Input will consist of a series of lines, each line containing a correct CL expression. No line will be longer than 100 characters. The file will be terminated by a line consisting of a single <tt>#</tt>.</p>', '<p>Output will consist of a series of lines, one for each line of the input. Each line will consist of a list of the final values of all variables whose value changes as a result of the evaluation of that expression. If more than one variable changes value, they should be listed in alphabetical order, separated by commas. If a variable changes value more than once in an expression, only the final value is output. A variable is said to change value if its value after the expression has been evaluated is different from its value before the expression was evaluated. If no variables change value, then print the message `<tt>No Change</tt>''. Follow the format shown below exactly.</p>', 'D:\\oj\\data\\2126', 'D:\\oj\\data\\2126', 'A = B = 4\r\nC = (D = 2)*_2\r\nC = D = 2 * _2\r\nF = C - D\r\nE = D * _10\r\nZ = 10 / 3\r\n#', 'A = 4, B = 4\r\nC = -4, D = 2\r\nD = -4\r\nNo Change\r\nE = 40\r\nZ = 3', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:15', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721'),
(2127, 'Network Wars', '<p>It is the year 2126 and comet Swift-Tuttle has struck the earth as predicted. The resultant explosion emits a large cloud of high energy neutrons that eliminates all human life. The accompanying electro-magnetic storm causes two unusual events: many of the links between various parts of the electronic network are severed, and some postgraduate AI projects begin to merge and mutate, in much the same way as animal life did several million years ago. In a very short time two programs emerge, Paskill and Lisper, which move through the network marking each node they visit: Paskill activates a modified Prolog interpreter and Lisper activates the `Hello World'' program. However `Hello World'' has mutated into an endless loop that so ties up the node that no other program, not even Lisper, can re-enter that node and the Prolog interpreter immediately reverse compiles (and destroys) any program that enters. However, Paskill knows which nodes it has visited and never tries to re-enter them. Thus if Lisper attempts to enter a node already visited by Paskill it will be annihilated; neither can enter a node already visited by Lisper, if either (or both) cannot move both will halt and if they ever arrive at a node simultaneously they annihilate each other. Both programs move through the network at the same speed.</p>\r\n<p></p>\r\n<p>Write a program to simulate these events. All nodes in the the network are labelled with a single uppercase letter as shown below. When moving to the next node, Paskill searches alphabetically forwards from the current node, whereas Lisper searches alphabetically backwards from the current node, both wrapping round if necessary. Thus, (in the absence of the other) if Paskill enters the network below at A, it would visit the nodes in the order A, B, C, D, G, H, E, F; if Lisper enters the network at H it would visit them in the order H, G, E, F. Simulation stops when one or more of the above events occurs. If more than one event occurs, mention Paskill first.</p>\r\n<p></p>\r\n<p><img align="BOTTOM" src="images/problem/pic2127_0" alt="picture23" /></p>', '<p>Input will consist of a series of lines. Each line will describe a network and indicate the starting nodes for the two programs. A network is described as a series of nodes separated by `<tt>;</tt>'' and terminated by a period (`<tt>.</tt>'').  Each node is described by its identifier, a `<tt>:</tt>'' and one or more of the nodes connected to it. Each link will be mentioned at least once, as will each node, although not all nodes will be `described''. After the period will appear the labels of the starting nodes--first Paskill and then Lisper. No line will contain more than 255 characters. The file will be terminated by a line consisting of a single <tt>#</tt>.</p>', '<p>Output will consist of one line for each network. Each line will specify the terminating event and the node where it occurs. The terminating event is one or two of the following:</p>\r\n<p></p>\r\n<ul>\r\n    <li>Lisper destroyed in node ?</li>\r\n    <li>{Paskill/Lisper} trapped in node ?</li>\r\n    <li>Both annihilated in node ?</li>\r\n</ul>', 'D:\\oj\\data\\2127', 'D:\\oj\\data\\2127', 'A:BD;C:BD;F:E;G:DEH;H:EG. A H\r\nE:AB. A B\r\nB:ACD. B D\r\nA:B;B:C;D:E. A D\r\n#', 'Paskill trapped in node D Lisper trapped in node F\r\nBoth annihilated in node E\r\nLisper destroyed in node B\r\nLisper trapped in node E', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:16', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 18, 'power721'),
(2128, 'Strategy', '<p>A well known psychology experiment involves people playing a game in which they can either trade with each other or attempt to cheat the other player. If both players TRADE then each gains one point. If one TRADEs and the other CHEATs then the TRADEr loses 2 points and the CHEATer wins 2. If both CHEAT then each loses 1 point.</p>\r\n<p></p>\r\n<p>There are a variety of different strategies for playing this game, although most people are either unable to find a winning strategy, or, having decided on a strategy, do not stick to it. Thus it is fairer to attempt to evaluate these strategies by simulation on a computer. Each strategy is simulated by an automaton. An automaton is characterised by a program incorporating the strategy, a memory for previous encounters and a count reflecting the score of that automaton. The count starts at zero and is altered according to the above rules after each encounter. The memory is able to determine what happened on up to the last two encounters with each other contender.</p>\r\n<p></p>\r\n<p>Write a program that will read in details of up to 10 different strategies, play each strategy against each other strategy 10 times and then print out the final scores. Strategies will be in the form of simple programs obeying the following grammar:</p>\r\n<p></p>\r\n<blockquote>  &lt;program&gt; ::= &lt;statement&gt;. <br />\r\n&lt;statement&gt; ::= &lt;command&gt;  <img align="MIDDLE" width="2" height="27" src="images/problem/pic2128_0" alt="tex2html_wrap_inline45" />  &lt;ifstat&gt; <br />\r\n&lt;ifstat&gt; ::= IF &lt;condition&gt; THEN &lt;statement&gt; ELSE &lt;statement&gt; <br />\r\n&lt;condition&gt; ::= &lt;cond&gt;  <img align="MIDDLE" width="2" height="27" src="images/problem/pic2128_0" alt="tex2html_wrap_inline45" />  &lt;cond&gt; &lt;op&gt; &lt;condition&gt; <br />\r\n&lt;op&gt; ::= AND  <img align="MIDDLE" width="2" height="27" src="images/problem/pic2128_0" alt="tex2html_wrap_inline45" />  OR <br />\r\n&lt;cond&gt; ::= &lt;memory&gt; {=  <img align="MIDDLE" width="2" height="27" src="images/problem/pic2128_0" alt="tex2html_wrap_inline45" />  #} {&lt;command&gt;  <img align="MIDDLE" width="2" height="27" src="images/problem/pic2128_0" alt="tex2html_wrap_inline45" />  NULL} <br />\r\n&lt;memory&gt; ::= {MY  <img align="MIDDLE" width="2" height="27" src="images/problem/pic2128_0" alt="tex2html_wrap_inline45" />  YOUR} LAST {1  <img align="MIDDLE" width="2" height="27" src="images/problem/pic2128_0" alt="tex2html_wrap_inline45" />  2} <br />\r\n&lt;command&gt; ::= TRADE  <img align="MIDDLE" width="2" height="27" src="images/problem/pic2128_0" alt="tex2html_wrap_inline45" />  CHEAT </blockquote>\r\n<p>Note that LAST1 refers to the previous encounter between these two automata, LAST2 to the encounter before that and that `MY'' and `YOUR'' have the obvious meanings. Spaces and line breaks may appear anywhere in the program and are for legibility only. The symbol `<tt>#</tt>'' means `is not equal to''. NULL indicates that an encounter has not ocurred.  The following are valid programs:</p>\r\n<p></p>\r\n<pre>\r\nCHEAT.\r\nIF MY LAST1 = CHEAT THEN TRADE ELSE CHEAT.\r\nIFYOURLAST2=NULLTHENTRADEELSEIFYOURLAST1=TRADETHENTRADE\r\nELSECHEAT.</pre>', '<p>Input will consist of a series of programs. Each program will be no longer than 255 characters and may be split over several lines for convenience. There will be no more than 10 programs. The file will be terminated by a line containing only a single `<tt>#</tt>''.</p>', '<p>Output will consist of one line for each line of input. Each line will consist of the final score of the relevant program right justified in a field of width 3.</p>', 'D:\\oj\\data\\2128', 'D:\\oj\\data\\2128', 'CHEAT.\r\nIF MY LAST1 = CHEAT THEN TRADE ELSE CHEAT.\r\nIFYOURLAST2=NULLTHENTRADEELSEIFYOURLAST1=TRADETHENTRADE\r\nELSECHEAT.\r\n#', '1\r\n-12\r\n-13', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:16', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 14, 'power721'),
(2129, 'Keywords', '<p>Many researchers are faced with an ever increasing number of journal articles to read and find it difficult to locate papers of relevance to their particular lines of research. However, it is possible to subscribe to various services which claim that they will find articles that fit an `interest profile'' that you supply, and pass them on to you. One simple way of performing such a search is to determine whether a pair of keywords occurs `sufficiently'' close to each other in the title of an article. The threshold is determined by the researchers themselves, and refers to the number of words that may occur between the pair of keywords. Thus an archeologist interested in cave paintings could specify her profile as ``<tt>0 rock art</tt>'''', meaning that she wants all titles in which the words ``<tt>rock</tt>'''' and ``<tt>art</tt>'''' appear with 0 words in between, that is next to each other. This would select not only ``<tt>Rock Art of the Maori</tt>'''' but also ``<tt>Pop Art, Rock, and the Art of Hang-glider Maintenance</tt>''''.</p>\r\n<p></p>\r\n<p>Write a program that will read in a series of profiles followed by a series of titles and determine which of the titles (if any) are selected by each of the profiles. A title is selected by a profile if at least one pair of keywords from the profile is found in the title, separated by no more than the given threshold. For the purposes of this program, a word is a sequence of letters, preceded by one or more blanks and terminated by a blank or the end of line marker.</p>', '<p>Input will consist of no more than 50 profiles followed by no more than 250 titles. Each profile and title will be numbered in the order of their appearance, starting from 1, although the numbers will not appear in the file.</p>\r\n<p></p>\r\n<ul>\r\n    <li>Each profile will start with the characters ``<tt>P:</tt>'''', and will consist of a number representing a threshold, followed by two or more keywords in lower case.</li>\r\n    <li>Each title will start with the characters ``<tt>T:</tt>'''', and will consist of a string of characters terminated by ``<tt>|</tt>''''. The character ``<tt>|</tt>'''' will not occur anywhere in a title except at the end. No title will be longer than 255 characters, and if necessary it will flow on to more than one line. No line will be longer than eighty characters and each continuation line of a title will start with at least one blank. Line breaks will only occur between words.\r\n    <p></p>\r\n    <p>All non-alphabetic characters are to be ignored, thus the title ``<tt>Don''t Rock -- the Boat as Metaphor in 1984</tt>'''' would be treated as ``<tt>Dont Rock the Boat as Metaphor in</tt>'''' and ``<tt>HP2100X</tt>'''' will be treated as ``<tt>HPX</tt>''''. The file will be terminated by a line consisting of a single <tt>#</tt>.</p>\r\n    </li>\r\n</ul>', '<p>Output will consist of a series of lines, one for each profile in the input. Each line will consist of the profile number (the number of its appearance in the input) followed by ``<tt>:</tt>'''' and the numbers of the selected titles in numerical order, separated by commas and with no spaces.</p>', 'D:\\oj\\data\\2129', 'D:\\oj\\data\\2129', 'P: 0 rock art\r\nP: 3 concepts conceptions\r\nP: 1   art rock   metaphor concepts\r\nT: Rock Art of the Maori|\r\nT: Jazz and Rock - Art Brubeck and Elvis Presley|\r\nT: Don''t Rock --- the Boat as Metaphor in 1984, Concepts\r\n   and (Mis)-Conceptions of an Art Historian.|\r\nT: Carved in Rock, The Art and Craft of making promises\r\n   believable when your `phone bills have gone\r\n   through the roof|\r\n#', '1: 1,2\r\n2: \r\n3: 1,2,3,4', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:16', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 17, 'power721'),
(2130, 'City Navigation', '<p>Most US cities are constructed according to a very simple plan--they have Avenues running north and south, and Streets running east and west, enclosing square blocks. Avenues and Streets are numbered, with numbers increasing westward and southward. There are 50 driveways on each side of a block, numbered 00 to 98 on one side and 01 to 99 on the other. House numbers increase in the same directions as Street and Avenue numbers. If you are travelling in the direction of increasing numbers then odd numbers are on your right. Thus the house at 1288 16th Street (S16 1288) is located on 16th Street, west of 12th Avenue and east of 13th Avenue, and is on the right-hand side going east. The residence described as A11 1543 lies on 11th Avenue, south of 15th Street and north of 16th Street, and is on the right-hand side going south. Both of these are marked on the following typical street map:</p>\r\n<p><img src="images/problem/pic2130_0" alt="" /></p>\r\n<p>Quiet suburbs are formed by the simple expedient of making some Avenues and Streets discontinuous as shown above. Note that Avenues and Streets keep the same name, even when there are places where they simply don''t exist. It is difficult to get lost in such a city, as the address tells you exactly where to go. However, if you don''t know the pattern of missing portions, you can spend a lot of time going into dead-end roads.</p>\r\n<p></p>\r\n<p>Write a program that will firstly read in a description of the `missing'' areas in a city and then a series of pairs of addresses, where an address is assumed to specify a driveway not necessarily a residence. For each pair of addresses the program must calculate the distance between them, by the shortest legal route. The distance is the number of driveways you pass (on your side of the road) excluding the source and destination. You may make the following assumptions:</p>\r\n<p></p>\r\n<ul>\r\n    <li>You drive on the right hand side of the road.</li>\r\n    <li>You may not cross a lane of traffic except at an intersection, that is you must turn right when entering or leaving a driveway.</li>\r\n    <li>Driveways are located in the centres of their sections.</li>\r\n    <li>U-turns are illegal except at the end of cul de sacs.</li>\r\n    <li>Streets and Avenues are numbered from 00 to 49 and there are no roads beyond these bounds; however there are driveways on both sides of the bounding roads.</li>\r\n    <li>Sections on corners have two driveways.</li>\r\n    <li>A route exists between any pair of driveways.</li>\r\n</ul>', '<p>Input will be divided into two portions: a ``missing road'''' portion and an address portion, each terminated by a line consisting of a single `<tt>#</tt>''. The ``missing road'''' portion consists of a series of lines with each line containing a road identifier and a pair of house numbers. A road identifier is an `<tt>A</tt>'' or an `<tt>S</tt>'' (specifying an Avenue or a Street) followed by a number in the range 00 to 49. A house number is an even number in the range 0000 to 4898. The area between and including the specified numbers on the identified road is inaccessible. Note that the line goes directly across the street, thus if number 1612 is inaccessible, then so is 1613. Inaccessible portions run from the borders of sections not from driveways. There will be exactly one space separating parts of the input.</p>\r\n<p></p>\r\n<p>The address portion consists of a series of lines each line containing two addresses. An address is a road identifier (as above) followed by a number in the range 0000 to 4899. There will be exactly one space separating parts of the input.</p>', '<p>Output consists of a series of lines, one for each line in the address portion of the input file. Each line contains the distance between the two houses specified in the input (the number of driveways passed) written as an integer, left justified.</p>\r\n<p></p>\r\n<p></p>\r\n<p><b>Note:</b> The following sample data matches the diagram on previous page. (Note the intersection of A13 and S17).</p>', 'D:\\oj\\data\\2130', 'D:\\oj\\data\\2130', 'A11 1612 1720\r\nA12 1508 1636\r\nS16 1152 1250\r\nS17 1048 1134\r\nS17 1272 1326\r\n#\r\nS16 1288 A11 1543\r\n#', '213', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:16', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721'),
(2131, 'Eeny Meeny', '<p>In darkest &lt;name of continent/island deleted to prevent offence&gt; lived a tribe called the ``Eeny Meenys''''. They got this name from their way of choosing a chief for a year. It appears that a newspaper reporter visited the tribe and managed to get across a few ideas of civilisation, but apparently came to an unfortunate end before finishing the job. Thus the tribe no longer had a permanent chief; the chief''s term was exactly one year. At the end of that time, they ate the current chief, and chose another chief. Their method of choosing a chief was the ``Eeny meeny miny mo'''' method. All eligible tribal members (women were also eligible--one of the blessings of civilisation the tribe had adopted) stood in a circle, a starting place was chosen, and the chief medicine man (who was ineligible for chieftainship) went around counting out `E'', `e'', `n'', `y'', `M'', `e'', `e'', `n'', `y'', `M'',`i'', `n'', `y'', `M'', `o!'', `E'', `e'', `n'', `y'', `M'', `e'', `e'', `n'', `y'', `M'', `i'', `n'', `y'', `M'', `o!'', .... At every `o!'', the person indicated was pushed out of the circle which then closed up and the count restarted with his neighbour (the one who would have been `E'' anyway). This process continued until only one was left--the new chief.</p>\r\n<p></p>\r\n<p>While the chance of glory for a year makes the job of chief highly attractive to tribal members, you (possessing a computer decades before they were invented) find the brevity of the glory unappealing. You have managed to find out that the count this year will start with Mxgobgwq (a very large person), so you would like to know where not to stand. You don''t know the direction, nor how many eligible people there are, but you can estimate the number (it is certainly less or equal than 1000000).</p>\r\n<p></p>\r\n<p>Write a program that will determine the `first'' (i.e. closest to Mxgobgwq) safe position to stand, regardless of the actual number of people and the direction of count (clockwise or anti-clockwise).</p>', '<p>Input will consist of a series of lines, each line containing the upper and lower estimates of the number of eligible people (both numbers inclusive). The file will be terminated by a line containing two zeroes (0 0).</p>', '<p>Output will consist of a series of lines, one for each line of the input. Each line will consist of a single number giving the number of the position closest to Mxgobgwq that will not be chosen as chief for any number in the given range and for either direction of elimination. If no position is safe then print <tt>"Better estimate needed"</tt>.</p>', 'D:\\oj\\data\\2131', 'D:\\oj\\data\\2131', '80 150\r\n40 150\r\n0 0', '1\r\nBetter estimate needed', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:16', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721'),
(2132, 'Hearts', '<p>There are 52 playing cards in a pack, divided into suits, and, within suits, into denominations. The suits are (in order, lowest to highest) Clubs, Diamonds, Hearts and Spades, abbreviated C, D, H and S. The 13 denominations (or face values) are (from lowest to highest): 2, 3, 4, 5, 6, 7, 8, 9, 10 (T), Jack (J), Queen (Q), King (K) and Ace(A). A higher card will beat a lower card in the same suit, but will not usually beat any other card in a different suit. An exception to this is the `trump'' suit--if a suit is designated to be a trump suit (by whatever means the rules of the game allow), then <b>any</b> card of that suit will beat <b>any</b> card of any other suit.</p>\r\n<p></p>\r\n<p>A simplified version of an old card game called Hearts is played as follows. The dealer deals cards clockwise, one by one, face downward, to four other players and himself, starting with the player on his left, who thus gets the first card, followed by the sixth, and so on, while the dealer gets the fifth card, followed by the tenth, and so on. When each player has 10 cards there will be two left--these are exposed and the suit of the one of higher denomination determines the trump suit. If there is a tie, then the highest ranking suit becomes the trump suit.</p>\r\n<p></p>\r\n<p>A `game'' consists of 10 `tricks'', each containing 5 cards, one from each player. For each trick, one player `leads'', i.e. plays a card face up on the table, the rest of the players then `follow'', in clockwise order. The player to the dealer''s left leads to the first trick, thereafter the winner of each trick leads to the next trick. A player must follow suit if possible, i.e. play a card of the same suit as the one lead. If he cannot, then he must trump it (play a card of the designated trump suit). If he cannot trump it (because he has no cards in the trump suit), he discards a card. If a trick is trumped, then the person playing the highest trump wins the trick, otherwise the person playing the highest card of the correct suit wins it.</p>\r\n<p></p>\r\n<p>Strategies are as follows:</p>\r\n<p></p>\r\n<ol>\r\n    <li>Leader: The leader always plays the highest card in his hand. If   there is a tie and one of the cards is a trump card, then he leads   the trump, otherwise he plays the highest ranking suit.</li>\r\n    <li>Follower: If possible he must play the highest card in his   hand of the correct suit. If he has no cards in that suit then he   plays the highest trump he has. If he cannot trump it he plays the   highest card in his hand, breaking ties as previously specified.</li>\r\n</ol>\r\n<p>When all the tricks have been played, each player examines the tricks he has taken and scores the face value of any Heart he has (Jack counts 11, Queen counts 12, King counts 13 and Ace counts 14). This score is recorded.</p>\r\n<p></p>\r\n<p>Write a program to simulate the playing of this game.</p>', '<p>Input will consist of a series of decks of cards, each deck spread over four lines as shown below. The file will be terminated by a line consisting of a single <tt>#</tt>.</p>', '<p>Output will consist of a series of lines, one for each deck in the input. Each line will consist of 5 numbers reflecting the scores of the individual players, starting with the dealer and proceeding clockwise through the rest of the players. Each score will consist of a number right justified in a field of width 3.</p>', 'D:\\oj\\data\\2132', 'D:\\oj\\data\\2132', 'TS QC 8S 8D QH 2D 3H KH 9H 2H TH KS KC\r\n9D JH 7H JD 2S QS TD 2C 4H 5H AD 4D 5D\r\n6D 4S 9S 5S 7S JS 8H 3D 8C 3S 4C 6S 9C\r\nAS 7C AH 6H KD JC 7D AC 5C TC QD 6C 3C\r\n#', '22  0 68  0 14', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:16', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 18, 'power721'),
(2133, 'Bonus Bonds', '<p>The government of Impecunia does not levy any taxes, instead it raises money by the (sometimes forced) sale of Bonus Bonds. Originally the Bonds were numbered using a 7 digit number prefixed by a one digit code in the range 1 to 9 representing the region of Impecunia in which the bond was sold. However the scheme has proved so popular that the numbering scheme has been extended by a further two digits. To retain compatibility with the previous scheme, the 8th digit from the right (the third from the left) still designates the region of sale. At the same time, a `central'' region was created and has been given the designation 0. For security reasons no bond may be numbered with a number consisting entirely of zeroes, thus, although the original bonds all started from zero (since the region code was non-zero), the bonds from the central region start from 0000000001.</p>\r\n<p></p>\r\n<p>Each month, the winning numbers are drawn for each region independently. The equipment generates a stream of single digits and it would appear to be simple enough to collect these together in groups of ten and compare the results with the list of Bond-holders. However, the equipment is a little antiquated and is liable to various breakdowns, thus it is desirable to only generate numbers that lie within the allocated range and with the same distributions of digits at each position as would be found by examining all the bonds sold for that region. Thus if we wish to draw <i>N</i> numbers for a given region, the equipment is set to generate 10 streams of <i>N</i> digits, one for each position. The first winning number is then made up by taking the first digit from each stream, the second winning number is composed of the second digit in each stream, and so on. For each stream, the equipment is adjusted so that the distribution of digits it generates closely matches the actual distributions of digits in that position on the allocated Bonds. The state auditors generate a table of these distributions so that the two may be compared.</p>\r\n<p></p>\r\n<p>Write a program that will generate the table for the state auditors for any given draw. For each region, the program will read the serial number of the <b>next bond to be sold in that region</b> so that it can calculate the distributions. Since the output is voluminous, your program will only need to print the digit distribution for a particular digit position.</p>\r\n<p></p>\r\n<h2><font color="#0070e8"><a name="SECTION0001001000000000000000"></a></font></h2>', '<p>Input will consist of a series of lines, each line consisting of a ten digit number representing the <b>next</b> bond number to be sold in a particular region and an integer in the range 1 to 10 representing the desired character position. It is possible that some regions will appear more than once in the input stream, and that others will not appear at all. The file will be terminated by a line consisting of 0000000000 0.</p>', '<p>Output will consist of a series of tables, one for each line of the input. Each table will consist of ten rows, one for each digit in the range 0 to 9. Each row will consist of a single number giving the numbers of times that digit appears in the sequence numbers at the desired position. Each number will be right justified in a field of width 11. Separate tables by one blank line.</p>', 'D:\\oj\\data\\2133', 'D:\\oj\\data\\2133', '4810000000 1\r\n0000000000 0', '100000000\r\n  100000000\r\n  100000000\r\n  100000000\r\n   80000000\r\n          0\r\n          0\r\n          0\r\n          0\r\n          0', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:16', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721'),
(2134, 'Laser Lines', '<p>A computer chip manufacturer has discovered a new way to combine opto-electronics and ordinary electronics by forming light-emitting and receiving nodes on the surface of the chip. These can be used to send messages to each other in a direct line-of-sight manner, thereby speeding up operation considerably by allowing a much greater density of information transfer. One difficulty is that the nodes must all be able to send messages to each other; no node should block the line-of-sight between two other nodes. The manufacturing method ensures that the nodes will be positioned exactly on the points of a lattice covering the chip, so their coordinates are given by integers between 0 and 9999 (inclusive) except that for technical reasons no node can appear at point (0, 0).</p>\r\n<p></p>\r\n<p>Write a program that will read in sets of coordinates of these nodes and determine whether any of them lie on lines containing three or more nodes. Because of the layout method used, it is envisaged that there may well be several lines containing three nodes, but that `longer'' lines will be increasingly rare. However, no line will contain more than 10 points.</p>', '<p>Input will consist of a series of data sets, each set containing the coordinates of between 3 and 300 points (both inclusive). Each set will start on a new line.</p>\r\n<p>The coordinates will be pairs of integers in the range 0 to 9999 and each set will be terminated by a pair of zeroes (0 0). Successive numbers will be separated by one or more spaces; in addition a data set may be split into several lines, such splits will only occur between coordinate pairs and never between the elements of a coordinate pair. The entire file will also be terminated by a pair of zeroes (0 0).</p>\r\n<p>Note that there will be several test cases, but only one will contain more than 100 points.</p>\r\n<p></p>\r\n<h2><font color="#0070e8"><a name="SECTION0001002000000000000000"></a></font></h2>', '<p>Output, for each set, is either the message <tt>"No lines were   found"</tt>, or the message <tt>"The following lines were found:"</tt>, followed by the sets of points lying on straight lines, each set ordered first by <i>x</i>, and if the <i>x</i>''s are equal, then by <i>y</i>.</p>\r\n<p>All coordinates are in a field of width 4, and are separated by a comma; the points are delimited by brackets, with no spaces between successive points. The lines themselves are ordered in a similar manner to the points on each line; i.e. by considering the first point on each line, and if more than one line starts at that point, by considering the second point on the line.</p>', 'D:\\oj\\data\\2134', 'D:\\oj\\data\\2134', '5 5 8 7 14 11 4 8   20 15\r\n12 6  18 21 0  0\r\n5 5 8 8 14 13 0 0\r\n5 5 25 17 20 23 10 11 20 14 15 11 0 0\r\n0 0', 'The following lines were found: \r\n(   4,   8)(   8,   7)(  12,   6)\r\n(   5,   5)(   8,   7)(  14,  11)(  20,  15)\r\n(  12,   6)(  14,  11)(  18,  21)\r\nNo lines were found\r\nThe following lines were found: \r\n(   5,   5)(  10,  11)(  20,  23)\r\n(   5,   5)(  15,  11)(  20,  14)(  25,  17)', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:16', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(2135, 'Roman Numerals', '<p>The original system of writing numbers used by the early Romans was simple but cumbersome. Various letters were used to represent important numbers, and these were then strung together to represent other numbers with the values decreasing monotonically from left to right. The letters they used and the numbers that were represented are given in the following table.</p>\r\n<p></p>\r\n<div align="CENTER">\r\n<table cellpadding="3">\r\n    <tbody>\r\n        <tr>\r\n            <td align="LEFT">I</td>\r\n            <td align="RIGHT">1</td>\r\n            <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>\r\n            <td align="LEFT">V</td>\r\n            <td align="RIGHT">5</td>\r\n        </tr>\r\n        <tr>\r\n            <td align="LEFT">X</td>\r\n            <td align="RIGHT">10</td>\r\n            <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>\r\n            <td align="LEFT">L</td>\r\n            <td align="RIGHT">50</td>\r\n        </tr>\r\n        <tr>\r\n            <td align="LEFT">C</td>\r\n            <td align="RIGHT">100</td>\r\n            <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>\r\n            <td align="LEFT">D</td>\r\n            <td align="RIGHT">500</td>\r\n        </tr>\r\n        <tr>\r\n            <td align="LEFT">M</td>\r\n            <td align="RIGHT">1000</td>\r\n            <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>\r\n            <td align="LEFT">&nbsp;</td>\r\n            <td align="RIGHT">&nbsp;</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n</div>\r\n<p>Thus 1993 was written as <tt>MDCCCCLXXXXIII</tt>. This system was then superseded by a partially place-oriented system, whereby if the above rule of decreasing values was broken, it meant that the immediately preceding (lower) value was deemed to be `negative'' and was subtracted from the higher (out of place) value. In this system 1993 was usually written as <tt>MCMXCIII</tt>. There is still some controversy as to which letters could precede which other letters, but for the purposes of this problem we will assume the following restrictions:</p>\r\n<p></p>\r\n<dl compact="compact">\r\n    <dt>1. </dt>\r\n    <dd>A letter from the left column can never appear more than three times in a row, and there can never be more than one other     occurrence of that letter.\r\n    <p></p>\r\n    </dd>\r\n    <dt>2. </dt>\r\n    <dd>A letter from the right column can never appear more than     once.\r\n    <p></p>\r\n    </dd>\r\n    <dt>3. </dt>\r\n    <dd>Once a letter has been used in a `negative'' position, all     subsequent characters (apart from the one immediately following)     may not be greater than that character. </dd>\r\n</dl>\r\n<p>Thus we could write <tt>MXMIII</tt> for 1993 or <tt>CCXCIV</tt> for 294, however we could not write <tt>ILV</tt> for 54, nor could we write <tt>LIL</tt> for 99. Note that 299 could be written as <tt>CCXCIX</tt> or <tt>CCIC</tt></p>\r\n<p></p>\r\n<p><br />\r\nGiven a Roman sum, we can either interpret it as such or as an encoding of an Arabic sum. Thus <tt>V+V=X</tt> could be interpreted as an ambiguous encoding of an Arabic sum with <tt>V</tt> <img border="0" align="MIDDLE" width="16" height="30" alt="$\\in$" src="images/problem/pic2135_0" /> {1, 2, 3, 4} and <tt>X = 2 * V</tt>. Similarly, <tt>X+X=XX</tt> could be interpreted as a correct Roman sum but an impossible Arabic encoding (apart from the trivial encoding <tt>X</tt> = 0) and <tt>XX+XX=MXC</tt> as an incorrect Roman sum, but a valid encoding with <tt>M</tt> = 1, <tt>X</tt> = 9, and <tt>C</tt> = 8.</p>\r\n<p></p>\r\n<p><br />\r\nWrite a program that will read in sums in Roman numerals and determine whether or not they are correct as Roman sums and also whether they are impossible, ambiguous or valid as Arabic encodings. Assume that zero will never appear on its own or as a leading digit, and that no two Roman numerals map onto the same Arabic digit.</p>', '<p>Input will consist of a series of lines, each line consisting of an apparent Roman sum, i.e. a valid Roman number, a plus sign (<tt>+</tt>), another valid Roman number, an equal sign (<tt>=</tt>) and another valid Roman number. No Roman number will contain more than 9 letters. The file will be terminated by a line consisting of a single <tt>#</tt>.</p>', '<p>Output will consist of a series of lines, one for each line of the input, and each containing two words. The first word will be one of (<tt>Correct, Incorrect</tt>) depending on whether the Roman sum is or is not correct. The second word will be separated from the first by exactly one space and will be one of the set (impossible, ambiguous, valid) depending on the Arabic sum.</p>', 'D:\\oj\\data\\2135', 'D:\\oj\\data\\2135', 'V+V=X\r\nX+X=XX\r\nXX+XX=MXC\r\n#', 'Correct ambiguous\r\nCorrect impossible\r\nIncorrect valid', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:16', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721'),
(2136, 'Pascal Program Lengths', '<p>Your local computer user''s group publishes a quarterly newsletter,  and in each issue there is a small Turbo Pascal programming problem  to be solved by the membership. Members submit their solutions to  the problem to the newsletter editor, and the member submitting the  shortest solution to the problem receives a prize.</p>\r\n<p></p>\r\n<p>The length of a program is measured in units. The unit count is determined by counting all occurrences of reserved words, identifiers, constants, left parentheses, left brackets, and the following operators: <code>+, -, *, /, =, &lt;, &gt;, &lt;=, &gt;=, &lt;&gt;, @, ^</code>, and <code>:=</code>. Comments are ignored, as are all other symbols not falling into one of the categories mentioned above. The program with the lowest unit count is declared the winner. Two or more programs with equal unit counts split the prize for the quarter.</p>\r\n<p></p>\r\n<p>In an effort to speed the judging of the contest, your team has been asked to write a program that will determine the length of a series of  Pascal programs and print the number of units in each.</p>\r\n<p></p>\r\n<p><b>Note:</b> Here are some additional notes on Turbo Pascal for those not familiar with the language:</p>\r\n<ul>\r\n    <li>Identifiers start with an underscore (<tt>_</tt>) or a letter (upper or lower case) which is followed by zero or more characters that are underscores, letters or digits.</li>\r\n    <li>The delimiter for the beginning and ending of a string constant  is the single forward quote (<tt>''</tt>).  Each string is entirely on a single source line (that is a string constant cannot begin on one line and continue on the next).  If <tt>''''</tt> appears within a string then it represents a single <tt>''</tt> character that is part of the string. A string constant consisting of a single <tt>''</tt> character is, therefore, represented by <tt>''''''''</tt> in a Turbo Pascal program. The empty string is allowed.</li>\r\n    <li>The most general form of a numeric constant is illustrated by the  constant <tt>10.56E-15</tt>.  The <tt>10</tt> is the integral part (1 or more digits) and is always present.  The <tt>.56</tt> is the decimal part and is optional.  The <tt>E-15</tt> is the exponent and it is also optional. It begins with an upper or lower case <tt>E</tt>, which is followed by a sign (<tt>+</tt> or <tt>-</tt>).  The sign is optional.</li>\r\n    <li>Turbo Pascal supports hexadecimal integer constants which consist of a $ followed by one or more hex digits (`0'' to `9'', `a'' to `f'', `A'' to `F'').  For example, $a9F is a legal integer constant in Turbo Pascal.</li>\r\n    <li>The only comment delimiters that you should recognise are <tt>{}</tt>, and not <tt>(**)</tt>.  Comments do not nest.</li>\r\n    <li>`+'' and `-'' should be considered as operators wherever possible. For example in <br />\r\n    <tt>x := -3</tt> the `-'' and the `3'' are separate tokens.</li>\r\n    <li>Subranges of ordinal types can be expressed as <tt>     lower..upper</tt>.  For example, <tt>1..10</tt> is a subrange involving   the integers from 1 to 10.</li>\r\n    <li>All tokens not mentioned anywhere above consist of a single character.</li>\r\n</ul>', '<p>Input to your program will be a series of Turbo Pascal programs.  Each program will be terminated by a line containing tilde characters  in the first two columns, followed by the name of the submitting  member. Each of these programs will be syntactically correct and use  the standard symbols for comments (braces) and subscripts (square  brackets).</p>\r\n<p></p>\r\n<p>For each program, you are print a separate line containing the name of the submitting member and the unit count of the program. Use a  format identical to that of the sample below.</p>', '<pre>\r\nPROGRAM SAMPLEINPUT;\r\n\r\nVAR\r\n  TEMP : RECORD\r\n    FIRST, SECOND : REAL;\r\n    END;\r\n\r\nBEGIN {Ignore this }\r\nTEMP.FIRST := 5.0E-2;\r\nREADLN (TEMP.SECOND); \r\nWRITELN (''THE ANSWER IS'', TEMP.FIRST * TEMP.SECOND : 7 : 3)\r\nEND.\r\n~~A. N. Onymous</pre>', 'D:\\oj\\data\\2136', 'D:\\oj\\data\\2136', 'Program by A. N. Onymous contains 29 units.', '', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:16', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 30, 'power721'),
(2137, 'Synchronous Design', '<p>The designers of digital integrated circuits (IC) are very concerned about the correctness of their designs because, unlike software, ICs cannot be easily tested. Real tests are not possible until the design has been finalized and the IC has been produced.</p>\r\n<p></p>\r\n<p>To simulate the behavior of a digital IC and to more or less guarantee that the final chip will work, all of today''s digital ICs are based on a <i>synchronous design</i>.</p>\r\n<p></p>\r\n<p><a name="27">&nbsp;</a> <img align="BOTTOM" src="images/problem/pic2137_0" alt="figure22" /> <br />\r\n<strong>Figure:</strong> The critical path (dashed line) takes 43ns to settle</p>\r\n<p></p>\r\n<p>In a synchronous design, an external clock signal triggers the IC to go from a well defined and stable state to the next one. On the active edge of the clock, all input and output signals and all internal nodes are stable in either the high or low state. Between two consecutive edges of the clock, the signals and nodes are allowed to change and may take any intermediate state. The behavior of a synchronous network is predictable and will not fail due to hazards or glitches introduced by irregularities of the real circuit.</p>\r\n<p></p>\r\n<p>To analyze whether an IC has a synchronous design, we distinguish between <i>synchronous</i> and  <img align="MIDDLE" width="157" height="25" src="images/problem/pic2137_1" alt="tex2html_wrap_inline65" /> . Flip flops are synchronous nodes. On the active edge of the clock, the output of the flip flop changes to the state of the input and holds that state throughout the next clock cycle. Synchronous nodes are connected to the clock signal.</p>\r\n<p></p>\r\n<p>Simple gates like ANDs or ORs are asynchronous nodes. Their output changes - with a short delay - whenever one of their inputs changes. During that transition phase, the output can even go into some undefined or intermediate state.</p>\r\n<p></p>\r\n<p>For simplicity, we assume that all inputs of the circuits are directly connected to the output of a synchronous node outside the circuit and that all outputs of the circuit are directly connected to the input of a synchronous node outside the circuit.</p>\r\n<p>For an IC to have a synchronous design, mainly two requirements must be met:</p>\r\n<p></p>\r\n<ul>\r\n    <li>The  <img align="MIDDLE" width="99" height="25" src="images/problem/pic2137_2" alt="tex2html_wrap_inline67" />  introduced between two synchronous nodes must be smaller or equal than the clock period so there is enough time for nodes to become stable. In figure 1, the round-ended boxes are asynchronous nodes whereas the square boxes are synchronous nodes. The delay introduced on the dashed path is 43ns and exceeds the given clock period of 30ns.</li>\r\n    <li>There may be  <img align="MIDDLE" width="76" height="25" src="images/problem/pic2137_3" alt="tex2html_wrap_inline69" />  composed exclusively of asynchronous nodes. In the real circuit such cycles could oscillate. In figure 2, the dashed path constitutes a cycle of asynchronous nodes.</li>\r\n</ul>\r\n<p>Figure 3 shows a circuit with a synchronous design. It does not contain cycles composed of asynchronous nodes and the longest path between two  synchronous nodes is shorter than the clock period of 30ns.</p>\r\n<p></p>\r\n<p><a name="36">&nbsp;</a> <img align="BOTTOM" src="images/problem/pic2137_4" alt="figure31" /> <br />\r\n<strong>Figure:</strong> The design contains a cycle (dashed line)</p>\r\n<p></p>\r\n<p></p>\r\n<p><a name="43">&nbsp;</a> <img align="BOTTOM" src="images/problem/pic2137_5" alt="figure38" /> <br />\r\n<strong>Figure:</strong> A synchronous design</p>\r\n<p></p>\r\n<p>Your are to write a program that decides for a given IC whether it has a synchronous design or not. You are given a network of synchronous and asynchronous nodes, a delay for each node, some inputs and outputs and the clock period.</p>\r\n<p>You may safely assume that</p>\r\n<p></p>\r\n<ul>\r\n    <li>the delays introduced between any input and any output of the same node are equal, i.e. equal to the delay given for that node,</li>\r\n    <li>synchronous nodes have no delay at all,</li>\r\n    <li>all connections between two nodes connect an output to an input.</li>\r\n</ul>', '<p>The input file contains several circuits. The first line gives the number of circuits in the file.</p>\r\n<p></p>\r\n<p>For each circuit in the file, the first line contains the clock period for the circuit, given as an integer number in nanoseconds. The next line gives the number of nodes. The following lines each contain a node, described by a letter and a integer number. The letter is ''<tt>i</tt>'' for an input, ''<tt>o</tt>'' for an output, ''<tt>a</tt>'' for an asynchronous node and ''<tt>s</tt>'' for a synchronous node. The number gives the delay introduced by the node as an integer number in nanoseconds (only meaningful for an asynchronous node). Nodes are implicitly numbered, starting at zero.</p>\r\n<p>After the nodes, the number of connections for the circuit follows. Each following line contains a pair of integer numbers denoting a connection between the output and the input of two nodes. The connection links an output of the node given by the first number and an input of the node given by the second number.</p>\r\n<p></p>\r\n<p>The clock signal is not given in the input file. We assume that all synchronous nodes are properly connected to the clock signal.</p>', '<p>For each circuit in the input file, your output file should contain a line with one of the following messages:</p>\r\n<p></p>\r\n<ul>\r\n    <li><tt>"Synchronous design. Maximum delay: &lt;ss&gt;."</tt> if the circuit has a synchronous design.\r\n    <p>&lt;<i>ss</i>&gt; should be replaced by the longest delay found on any path between two synchronous nodes.</p>\r\n    </li>\r\n    <li><tt>"Circuit contains cycle."</tt> if the circuit contains a cycle composed exclusively of asynchronous nodes.</li>\r\n    <li><tt>"Clock period exceeded."</tt> if there is a path between two synchronous nodes that is longer than the given clock period and there are no cycles composed of asynchronous nodes.</li>\r\n</ul>', 'D:\\oj\\data\\2137', 'D:\\oj\\data\\2137', '1\r\n30\r\n10\r\ni 0\r\ni 0\r\ni 0\r\ni 0\r\no 0\r\no 0\r\na 9\r\na 11\r\na 8\r\ns 0\r\n9\r\n0 8\r\n1 7\r\n2 6\r\n2 6\r\n6 7\r\n7 8\r\n8 4\r\n7 9\r\n9 5', 'Synchronous design. Maximum delay: 28.', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:16', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 18, 'power721'),
(2138, 'Triangle', '<p>A triangle is a basic shape of planar geometry. It consists of three straight lines and three angles in between. Figure 1 shows how the sides and angles are usually labeled.</p>\r\n<p></p>\r\n<p><a name="27">&nbsp;</a> <img align="BOTTOM" src="images/problem/pic2138_0" alt="figure22" /> <br />\r\n<strong>Figure:</strong> Triangle</p>\r\n<p></p>\r\n<p>A look into a book about geometry shows that many formulas for triangles exist:</p>\r\n<p></p>\r\n<p><img align="BOTTOM" width="303" height="16" src="images/problem/pic2138_1" alt="displaymath48" /></p>\r\n<p></p>\r\n<p></p>\r\n<p><img align="BOTTOM" width="329" height="39" src="images/problem/pic2138_2" alt="displaymath50" /></p>\r\n<p></p>\r\n<p></p>\r\n<p><img align="BOTTOM" width="322" height="16" src="images/problem/pic2138_3" alt="displaymath52" /></p>\r\n<p></p>\r\n<p></p>\r\n<p><img align="BOTTOM" width="337" height="17" src="images/problem/pic2138_4" alt="displaymath54" /></p>\r\n<p></p>\r\n<p></p>\r\n<p><img align="BOTTOM" width="364" height="38" src="images/problem/pic2138_5" alt="displaymath56" /></p>\r\n<p></p>\r\n<p>The values of <i>a</i>, <i>b</i>, <i>c</i>,  <img align="BOTTOM" width="10" height="8" src="images/problem/pic2138_6" alt="tex2html_wrap_inline64" /> ,  <img align="MIDDLE" width="10" height="25" src="images/problem/pic2138_7" alt="tex2html_wrap_inline66" /> , and  <img align="MIDDLE" width="9" height="17" src="images/problem/pic2138_8" alt="tex2html_wrap_inline68" />  form a set of six parameters that fully define a triangle. If a large enough subset of these parameters is given, the missing ones can be calculated by using the formulas above.</p>\r\n<p></p>\r\n<p>You are to write a program that calculates the missing parameters for a given subset of the six parameters of a triangle. For some sets of parameters, it is not possible to calculate the triangle because either too few is known about the triangle or the parameters would lead to an invalid triangle. The sides of a valid triangle are greater than 0 and the angles are greater than 0 and less than  <img align="BOTTOM" width="8" height="8" src="images/problem/pic2138_9" alt="tex2html_wrap_inline70" /> . Your program should detect this case and output: <tt>"Invalid input."</tt> The same phrase should be output if more than the minimal set needed to compute the triangle is given but the parameters conflict with each other, e.g. all three angles are given but their sum is greater than  <img align="BOTTOM" width="8" height="8" src="images/problem/pic2138_9" alt="tex2html_wrap_inline70" /> .</p>\r\n<p></p>\r\n<p>Other sets of parameters can lead to more than one but still a finite number of valid solutions for the triangle. In such a case, your program should output: <tt>"More than one solution."</tt></p>\r\n<p>In all other cases, your program should compute the missing parameters and output all six parameters.</p>', '<p>The first line of the input file contains a number indicating the number of parameter sets to follow. Each following line consists of six numbers, separated by a single blank character. The numbers are the values for the parameters <i>a</i>,  <img align="BOTTOM" width="10" height="8" src="images/problem/pic2138_6" alt="tex2html_wrap_inline64" /> , <i>b</i>,  <img align="MIDDLE" width="10" height="25" src="images/problem/pic2138_7" alt="tex2html_wrap_inline66" /> , <i>c</i>, and  <img align="MIDDLE" width="9" height="17" src="images/problem/pic2138_8" alt="tex2html_wrap_inline68" />  respectively. The parameters are labeled as shown in figure 1. A value of -1 indicates that the corresponding parameter is undefined and has to be calculated. All floating-point numbers include at least eight significant digits.</p>', '<p>Your program should output a line for each set of parameters found in the input file. If a unique solution for a valid triangle can be found for the given parameters, your program should output the six parameters <i>a</i>,  <img align="BOTTOM" width="10" height="8" src="images/problem/pic2138_6" alt="tex2html_wrap_inline64" /> , <i>b</i>,  <img align="MIDDLE" width="10" height="25" src="images/problem/pic2138_7" alt="tex2html_wrap_inline66" /> , <i>c</i>,  <img align="MIDDLE" width="9" height="17" src="images/problem/pic2138_8" alt="tex2html_wrap_inline68" /> , separated by a blank character. Otherwise the line should contain the phrase</p>\r\n<p><tt>"More than one solution."</tt> or</p>\r\n<p><tt>"Invalid input."</tt></p>\r\n<p>as explained above.</p>\r\n<p></p>\r\n<p>The numbers in the output file should include at least six significant digits. Your calculations should be precise enough to get the six most significant digits correct (i.e. a relative error of 0.000001 is allowed).</p>', 'D:\\oj\\data\\2138', 'D:\\oj\\data\\2138', '4\r\n47.9337906847 0.6543010109 78.4455517579 1.4813893731 66.5243757656 1.0059022695\r\n62.72048064 2.26853639 -1.00000000 0.56794657 -1.00000000 -1.00000000\r\n15.69326944 0.24714213 -1.00000000 1.80433105 66.04067877 -1.00000000\r\n72.83685175 1.04409241 -1.00000000 -1.00000000 -1.00000000 -1.00000000', '47.933791 0.654301 78.445552 1.481389 66.524376 1.005902\r\n62.720481 2.268536 44.026687 0.567947 24.587225 0.305110\r\nInvalid input.\r\nInvalid input.', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:16', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 31, 'power721'),
(2139, 'Spreadsheet', '<p>In 1979, Dan Bricklin and Bob Frankston wrote VisiCalc, the first spreadsheet application. It became a huge success and, at that time, was the killer application for the Apple II computers. Today, spreadsheets are found on most desktop computers.</p>\r\n<p></p>\r\n<p>The idea behind spreadsheets is very simple, though powerful. A spreadsheet consists of a table where each cell contains either a number or a formula. A formula can compute an expression that depends on the values of other cells. Text and graphics can be added for presentation purposes.</p>\r\n<p></p>\r\n<p>You are to write a very simple spreadsheet application. Your program should accept several spreadsheets. Each cell of the spreadsheet contains either a numeric value (integers only) or a formula, which only support sums. After having computed the values of all formulas, your program should output the resulting spreadsheet where all formulas have been replaced by their value.</p>\r\n<p></p>\r\n<a name="28">&nbsp;</a> <img align="BOTTOM" width="298" height="157" src="images/problem/pic2139_0" alt="figure22" /> <br />\r\n<strong>Figure:</strong>\r\n<p>Naming of the top left cells</p>', '<p>The first line of the input file contains the number of spreadsheets to follow. A spreadsheet starts with a line consisting of two integer numbers, separated by a space, giving the number of columns and rows. The following lines of the spreadsheet each contain a row. A row consists of the cells of that row, separated by a single space.</p>\r\n<p></p>\r\n<p>A cell consists either of a numeric integer value or of a formula. A formula starts with an equal sign (<tt>=</tt>). After that, one or more cell names follow, separated by plus signs (<tt>+</tt>). The value of such a formula is the sum of all values found in the referenced cells. These cells may again contain a formula. There are no spaces within a formula.</p>\r\n<p>You may safely assume that there are no cyclic dependencies between cells. So each spreadsheet can be fully computed.</p>\r\n<p></p>\r\n<p>The name of a cell consists of one to three letters for the column followed by a number between 1 and 999 (including) for the row. The letters for the column form the following series: A, B, C, ..., Z, AA, AB, AC, ..., AZ, BA, ..., BZ, CA, ..., ZZ, AAA, AAB, ..., AAZ, ABA, ..., ABZ, ACA, ..., ZZZ. These letters correspond to the number from 1 to 18278. The top left cell has the name <tt>A1</tt>. See figure 1.</p>', '<p>The output of your program should have the same format as the input, except that the number of spreadsheets and the number of columns and rows are not repeated. Furthermore, all formulas should be replaced by their value.</p>', 'D:\\oj\\data\\2139', 'D:\\oj\\data\\2139', '1\r\n4 3\r\n10 34 37 =A1+B1+C1\r\n40 17 34 =A2+B2+C2\r\n=A1+A2 =B1+B2 =C1+C2 =D1+D2', '10 34 37 81\r\n40 17 34 91\r\n50 51 71 172', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:16', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 17, 'power721'),
(2140, 'Peter''s Calculator', '<p>Unfortunately, Peter''s Calculator broke down last week. Now Peter is left with his computer, which has no calculator application, and paper and pencil, which is too tiresome for an engineer. As one of Peter''s friends, you are asked to write him a calculator application. After talking to him, you figure out the following:</p>\r\n<ul>\r\n    <li>Peter does only integer arithmetic. The operations he needs are addition, subtraction and multiplication.</li>\r\n    <li>He would like to use an arbitrary number of variables whose names are not longer than 50 characters.</li>\r\n    <li>His main way of doing calculations are to type in a few formulas and to assign them to variables. Some formulas are complicated expressions, which can refer to yet undefined variables, while other formulas consist of a single number. Then Peter asks for the value of some variables, i.e. he evaluates the formulas.</li>\r\n    <li>Peters wants to redefine some variables and then to reevaluate formulas that depend on these variables.</li>\r\n</ul>\r\n<p>The input strictly adheres to the following syntax (given in EBNF):</p>\r\n<p></p>\r\n<pre>\r\nfile = line { line } &lt;EOF&gt;.\r\nline = [ assignment | print | reset ] &lt;CR&gt;.\r\nassignment = var ":=" expression.\r\nprint = "PRINT" var.\r\nreset = "RESET".\r\nexpression = term { addop term }.\r\nterm = factor { mulop factor }.\r\nfactor = "(" expression ")" | var | number.\r\naddop = "+" | "-".\r\nmulop = "*".</pre>\r\n<p>In the Extended Backus-Naur Formalism (EBNF), <tt>A = B C</tt> declares that the grammatical construct <tt>A </tt> consists of a <tt>B </tt> followed by a <tt>C </tt>. <tt>A = B | C </tt> means that <tt>A </tt> consists of a <tt>B </tt> or, alternatively, of a <tt>C </tt>. <tt>A = [ B ] </tt> defines construct <tt>A </tt> to be either a <tt>B </tt> or nothing and <tt>A =  B  </tt> tells you that <tt>A </tt> consists of the concatenation of any number of <tt>B</tt>''s (including none).</p>\r\n<p></p>\r\n<p>The production <tt>var </tt> stands for the name of a variable, which starts with a letter followed by up to 49 letters or digits. Letters may be uppercase or lowercase. The production <tt>number </tt> stands for a integer number. The precise syntax for these productions are given below. The case of letters is important for both variables and statements.</p>\r\n<p></p>\r\n<pre>\r\nvar = letter { letter | digit }.\r\nnumber = [ "-" ] digit { digit }.\r\nletter = "A" | "B" | ... | "Z" | "a" | "b" | ... | "z".\r\ndigit = "0" | "1" | ... | "8" | "9".</pre>\r\n<p></p>\r\n<p>Between the parts of a grammatical construct but not within the names of variables or integer numbers, any number of spaces may appear. <code>&lt;EOF&gt;</code> stands for the end of the input file and <code>&lt;CR&gt;</code> stands for the new-line character. All lines in the input file are shorter than 200 characters.</p>\r\n<p></p>\r\n<p>The value of a variable is said to be undefined:</p>\r\n<ul>\r\n    <li>if it has not yet been defined or it refers to a variable, which has not yet been defined;</li>\r\n    <li>if the definition of the variable contains a cycle.</li>\r\n</ul>\r\n<p>Your are to write a program that implements Peter''s calculator. It should store all variable definitions and for each "<tt>PRINT</tt>" statement evaluate the specified variable based on the latest variable definitions. If your program encounters a "<tt>RESET</tt>" statement, it should delete all stored variables so that all variables become undefined.</p>', '<p>The input file contains calculations adhering to the syntax given above. Each line contains either an assignment to a variable, a "<tt>PRINT</tt>" statement, a "<tt>RESET</tt>" statement or nothing.</p>', '<p>For each <tt>"PRINT"</tt> statement found in the input file, your program should output a line containing the numerical value of the specified variable or the word <tt>"UNDEF"</tt> if the variable is undefined.</p>', 'D:\\oj\\data\\2140', 'D:\\oj\\data\\2140', 'a := b + c\r\nb := 3\r\nc := 5\r\nPRINT d\r\nPRINT a\r\nb := 8\r\nPRINT a\r\nRESET\r\nPRINT a', 'UNDEF\r\n8\r\n13\r\nUNDEF', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:16', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 17, 'power721'),
(2141, 'Partial differential equations', '<p>In engineering sciences, partial differential equations play an important and central role. For example, the temperature of a metal plate can be expressed as a partial differential equation if the temperature on the boundaries is known. This is called a boundary value problem.</p>\r\n<p>Usually, it is not easy to solve these problems. Analytical solutions exist only in very special cases. But there are some more or less "good" numerical ways to solve boundary value problems.</p>\r\n<p></p>\r\n<p>We now will look at one method which works with finite difference approximations for the derivatives of a function. For this approach, we do not look at an analytical function <i>u</i>(<i>x</i>) but we are only interested in the values of <i>u</i> at a finite set of discrete points  <img align="MIDDLE" width="104" height="27" src="images/problem/pic2141_0" alt="tex2html_wrap_inline118" /> . The distance between two adjacent points,  <img align="MIDDLE" width="13" height="17" src="images/problem/pic2141_1" alt="tex2html_wrap_inline120" />  and  <img align="MIDDLE" width="30" height="18" src="images/problem/pic2141_2" alt="tex2html_wrap_inline122" /> , is constant:  <img align="MIDDLE" width="100" height="26" src="images/problem/pic2141_3" alt="tex2html_wrap_inline124" />  (cf. figure 1).</p>\r\n<p></p>\r\n<p><a name="31">&nbsp;</a> <img align="BOTTOM" src="images/problem/pic2141_4" alt="figure26" /> <br />\r\n<strong>Figure:</strong> <i>u</i>(<i>x</i>) at some discrete points  <img align="MIDDLE" width="13" height="17" src="images/problem/pic2141_1" alt="tex2html_wrap_inline120" /> </p>\r\n<p></p>\r\n<p>The finite difference approximation of a first derivative of the function <i>u</i>(<i>x</i>) is</p>\r\n<p></p>\r\n<p><img align="BOTTOM" width="500" height="40" src="images/problem/pic2141_6" alt="equation33" /></p>\r\n<p></p>\r\n<p>The second derivative is approximated by</p>\r\n<p></p>\r\n<p><img align="BOTTOM" width="506" height="42" src="images/problem/pic2141_7" alt="equation39" /></p>\r\n<p></p>\r\n<p>This approximation works with 2-dimensional functions <i>u</i>(<i>x</i>,<i>y</i>) as well. For simplicity we only work on square problems, i.e. (<i>x</i>, <i>y</i>) is element of  <img align="MIDDLE" width="89" height="27" src="images/problem/pic2141_8" alt="tex2html_wrap_inline136" /> . Again, the area of the function is discretized in a similar way:  <img align="MIDDLE" width="225" height="31" src="images/problem/pic2141_9" alt="tex2html_wrap_inline138" /> , for some integer  <img align="MIDDLE" width="41" height="25" src="images/problem/pic2141_10" alt="tex2html_wrap_inline140" /> . We only look at the values of <i>u</i>(<i>x</i>,<i>y</i>) at the discrete points  <img align="MIDDLE" width="198" height="28" src="images/problem/pic2141_11" alt="tex2html_wrap_inline144" /> . With this discretization, we have a function  <img align="MIDDLE" width="23" height="17" src="images/problem/pic2141_12" alt="tex2html_wrap_inline146" />  as shown in figure 2:</p>\r\n<p></p>\r\n<p><a name="111">&nbsp;</a> <img align="BOTTOM" src="images/problem/pic2141_13" alt="figure50" /> <br />\r\n<strong>Figure:</strong> Function  <img align="MIDDLE" width="23" height="17" src="images/problem/pic2141_12" alt="tex2html_wrap_inline146" />  in the discretization area</p>\r\n<p></p>\r\n<p></p>\r\n<p>On the boundary,  <img align="MIDDLE" width="60" height="28" src="images/problem/pic2141_15" alt="tex2html_wrap_inline150" />  is given by 4 known functions:</p>\r\n<p></p>\r\n<p><img align="BOTTOM" width="500" height="84" src="images/problem/pic2141_16" alt="equation57" /></p>\r\n<p></p>\r\n<p>The points  <img align="MIDDLE" width="18" height="25" src="images/problem/pic2141_17" alt="tex2html_wrap_inline152" />  cover the inner points of the discretization area, i.e. the area without the boundary. They are numbered from left to right and from top to bottom like English text.</p>\r\n<p></p>\r\n<p>What we now want to do is to solve the poisson-equation in the area  <img align="MIDDLE" width="89" height="27" src="images/problem/pic2141_8" alt="tex2html_wrap_inline136" /> :</p>\r\n<p></p>\r\n<p><img align="BOTTOM" width="500" height="42" src="images/problem/pic2141_19" alt="equation62" /></p>\r\n<p></p>\r\n<p>with the above boundary conditions. <i>f</i>(<i>x</i>,<i>y</i>) is a given 2-dimensional function. With equation (2) and the above discretization, the poisson-equation can be approximated at</p>\r\n<p></p>\r\n<p><img align="BOTTOM" width="572" height="36" src="images/problem/pic2141_20" alt="equation66" /></p>\r\n<p></p>\r\n<p>where  <img align="MIDDLE" width="21" height="26" src="images/problem/pic2141_21" alt="tex2html_wrap_inline158" />  is the function <i>f</i>(<i>x</i>,<i>y</i>), evaluated at the discrete points  <img align="MIDDLE" width="49" height="28" src="images/problem/pic2141_22" alt="tex2html_wrap_inline162" /> .</p>\r\n<p></p>\r\n<p>Formula (5) can be written in a more readable form, depending on the position of the discrete points:</p>\r\n<p></p>\r\n<p><img align="BOTTOM" width="546" height="67" src="images/problem/pic2141_23" alt="displaymath164" /></p>\r\n<p></p>\r\n<p>A similar equation, which we will use as an example below, is:</p>\r\n<p></p>\r\n<p><img align="BOTTOM" width="546" height="67" src="images/problem/pic2141_24" alt="displaymath166" /></p>\r\n<p></p>\r\n<p>We call the  <img align="MIDDLE" width="37" height="24" src="images/problem/pic2141_25" alt="tex2html_wrap_inline168" />  matrix on the left hand side <i>v</i> and the  <img align="MIDDLE" width="37" height="24" src="images/problem/pic2141_25" alt="tex2html_wrap_inline168" />  matrix on the right hand side <i>g</i>.</p>\r\n<p></p>\r\n<p>Now, equation (6b) can be formulated in every point of the discrete area of figure 2:</p>\r\n<p></p>\r\n<p><img align="BOTTOM" width="758" height="86" src="images/problem/pic2141_27" alt="equation92" /></p>\r\n<p></p>\r\n<p>and (7) is a linear equation system for the values of <i>u</i>(<i>x</i>,<i>y</i>) at the points  <img align="MIDDLE" width="69" height="25" src="images/problem/pic2141_28" alt="tex2html_wrap_inline178" />  and  <img align="MIDDLE" width="17" height="25" src="images/problem/pic2141_29" alt="tex2html_wrap_inline180" /> .</p>\r\n<p></p>\r\n<p>By rearranging and adding the terms on each line, the linear equation system can be formulated as:</p>\r\n<p></p>\r\n<p><img align="BOTTOM" width="500" height="18" src="images/problem/pic2141_30" alt="equation101" /></p>\r\n<p></p>\r\n<p>where <i>a</i> is a  <img align="MIDDLE" width="38" height="24" src="images/problem/pic2141_31" alt="tex2html_wrap_inline184" />  matrix and <i>b</i> is a vector with 4 elements. Vector <i>z</i> represents the unknown values of <i>u</i>(<i>x</i>,<i>y</i>) at the points  <img align="MIDDLE" width="69" height="25" src="images/problem/pic2141_28" alt="tex2html_wrap_inline178" />  and  <img align="MIDDLE" width="17" height="25" src="images/problem/pic2141_29" alt="tex2html_wrap_inline180" /> .</p>\r\n<p></p>\r\n<p>You are to write a program that creates the linear equation system (7) in the form (8) for any two matrices <i>v</i> and <i>g</i> (6). As input, the two matrices <i>v</i> and <i>g</i> and the functions  <img align="MIDDLE" width="81" height="25" src="images/problem/pic2141_34" alt="tex2html_wrap_inline204" />  , and <i>f</i> are given. Also, a parameter <i>n</i> is given as the number of discretization intervals. Thus,  <img align="MIDDLE" width="43" height="31" src="images/problem/pic2141_35" alt="tex2html_wrap_inline210" /> . As the result, your program should calculate the matrix <i>a</i> and the vector <i>b</i>. For this more general case, there are  <img align="MIDDLE" width="58" height="30" src="images/problem/pic2141_36" alt="tex2html_wrap_inline216" />  inner points and <i>a</i> and <i>b</i> must be sized accordingly.</p>\r\n<p></p>\r\n<h2><font color="#0070e8"><a name="SECTION0001001000000000000000"></a></font></h2>', '<p>The input file consists of <i>m</i> tests. The number <i>m</i> is given in the first line of the file. The first line of each test contains the number <i>n</i> which gives the number of discretizations intervals as defined above. You may assume that  <img align="MIDDLE" width="82" height="25" src="images/problem/pic2141_37" alt="tex2html_wrap_inline228" /> . Then the  <img align="MIDDLE" width="37" height="24" src="images/problem/pic2141_25" alt="tex2html_wrap_inline168" />  matrices <i>v</i> and <i>g</i> follow. The following four lines contain the functions  <img align="MIDDLE" width="59" height="25" src="images/problem/pic2141_39" alt="tex2html_wrap_inline236" />  and  <img align="MIDDLE" width="13" height="25" src="images/problem/pic2141_40" alt="tex2html_wrap_inline238" /> , each given as a vector of order <i>n</i>+1, containing the values for 0, <i>h</i>, 2<i>h</i>, ..., 1. Finally, the function <i>f</i> is given as a <i>n</i>+1 by <i>n</i>+1 matrix. Like the vectors before, it contains the values for  <img align="MIDDLE" width="149" height="25" src="images/problem/pic2141_41" alt="tex2html_wrap_inline252" /> . Each row contains from left to right the function values for increasing <i>x</i> values while each column contains from top to bottom the function values for decreasing <i>y</i> values.</p>\r\n<p></p>\r\n<p>A vector occupies one line. Its values are given in ascending order, separated by a space. A <i>n</i> by <i>n</i> matrix occupies <i>n</i> lines. Its rows are given in ascending order as vectors, which occupy one line each. All values found in the input file are integer values.</p>', '<p>For each test found in the input file, your program should output the matrices <i>a</i> and <i>b</i>. Matrix <i>a</i> is a  <img align="MIDDLE" width="141" height="30" src="images/problem/pic2141_42" alt="tex2html_wrap_inline270" />  matrix (the discretization area (cf. figure 2) contains  <img align="MIDDLE" width="58" height="30" src="images/problem/pic2141_36" alt="tex2html_wrap_inline216" />  inner points, which are unknown). The vector <i>b</i> is of order  <img align="MIDDLE" width="58" height="30" src="images/problem/pic2141_36" alt="tex2html_wrap_inline216" /> . They should be output in the same format as the vectors and matrices in the input file. Your output should only contain integer values. Note that the expression  <img align="MIDDLE" width="15" height="31" src="images/problem/pic2141_45" alt="tex2html_wrap_inline278" />  yields an integer number and that all other calculations can also be done using integer numbers.</p>', 'D:\\oj\\data\\2141', 'D:\\oj\\data\\2141', '1\r\n3\r\n1 0 2\r\n0 -4 0\r\n3 0 4\r\n0 5 0\r\n6 0 7\r\n0 8 0\r\n3 4 5 6\r\n0 1 2 3\r\n3 2 1 0\r\n6 5 4 3\r\n1 1 1 1\r\n2 2 2 2\r\n3 3 3 3\r\n4 4 4 4', '-36 0 0 36\r\n0 -36 27 0\r\n0 18 -36 0\r\n9 0 0 -36\r\n-35 -188 -189 -315', '', 'www.csie.nctu.edu.tw', '', '2011-06-10 19:40:16', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 23, 'power721'),
(2142, 'Maya Calendar', '<p>During his last sabbatical, professor M. A. Ya made a surprising discovery about the old Maya calendar. From an old knotted message, professor discovered that the Maya civilization used a 365 day long year, called <i>Haab</i>, which had 19 months. Each of the first 18 months was 20 days long, and the names of the months were <i>pop, no, zip, zotz, tzec, xul, yoxkin, mol, chen, yax, zac, ceh, mac, kankin, muan, pax, koyab, cumhu</i>. Instead of having names, the days of the months were denoted by numbers starting from 0 to 19. The last month of Haab was called <i>uayet</i> and had 5 days denoted by numbers 0, 1, 2, 3, 4. The Maya believed that this month was unlucky, the court of justice was not in session, the trade stopped, people did not even sweep the floor.</p>\r\n<p></p>\r\n<p>For religious purposes, the Maya used another calendar in which the year was called <i>Tzolkin</i> (holly year). The year was divided into thirteen periods, each 20 days long. Each day was denoted by a pair consisting of a number and the name of the day. They used 20 names: <i>imix, ik, akbal, kan, chicchan, cimi, manik, lamat, muluk, ok, chuen, eb, ben, ix, mem, cib, caban, eznab, canac, ahau</i> and 13 numbers; both in cycles.</p>\r\n<p></p>\r\n<p>Notice that each day has an unambiguous description. For example, at the beginning of the year the days were described as follows:</p>\r\n<p></p>\r\n<p><i>1 imix, 2 ik, 3 akbal, 4 kan, 5 chicchan, 6 cimi, 7 manik, 8 lamat, 9 muluk, 10 ok, 11 chuen, 12 eb, 13 ben, 1 ix, 2 mem, 3 cib, 4 caban, 5 eznab, 6 canac, 7 ahau</i>, and again in the next period <i>8 imix, 9 ik, 10 akbal...</i></p>\r\n<p></p>\r\n<p>Years (both Haab and Tzolkin) were denoted by numbers 0, 1, ..., where the number 0 was the beginning of the world. Thus, the first day was:</p>\r\n<p></p>\r\n<p></p>\r\n<p>Haab: <code>0. pop 0</code></p>\r\n<p>Tzolkin: <code>1 imix 0</code></p>\r\n<p></p>\r\n<p>Help professor M. A. Ya and write a program for him to convert the dates from the Haab calendar to the Tzolkin calendar.</p>', '<p>The date in Haab is given in the following format:</p>\r\n<p></p>\r\n<p></p>\r\n<p><em>NumberOfTheDay. Month Year</em></p>\r\n<p></p>\r\n<p>The first line of the input file contains the number of the input dates in the file. The next <i>n</i> lines contain <i>n</i> dates in the Haab calendar format, each in separate line. The year is smaller then 5000.</p>', '<p>The date in Tzolkin should be in the following format:</p>\r\n<p></p>\r\n<p></p>\r\n<p><em>Number NameOfTheDay Year</em></p>\r\n<p></p>\r\n<p>The first line of the output file contains the number of the output dates. In the next <i>n</i> lines, there are dates in the Tzolkin calendar format, in the order corresponding to the input dates.</p>', 'D:\\oj\\data\\2142', 'D:\\oj\\data\\2142', '3\r\n10. zac 0\r\n0. pop 0\r\n10. zac 1995', '3\r\n3 chuen 0\r\n1 imix 0\r\n9 cimi 2801', '', '', '', '2011-06-10 19:40:16', 1000, 131072, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 1, 'power721'),
(2143, 'Transportation', '<p>Ruratania is just entering capitalism and is establishing new enterprising activities in many fields including transport. The transportation company TransRuratania is starting a new express train from city A to city B with several stops in the stations on the way. The stations are successively numbered, city A station has number 0, city B station number <i>m</i>. The company runs an experiment in order to improve passenger transportation capacity and thus to increase its earnings. The train has a maximum capacity <i>n</i> passengers. The price of the train ticket is equal to the number of stops (stations) between the starting station and the destination station (including the destination station). Before the train starts its route from the city A, ticket orders are collected from all onroute stations. The ticket order from the station S means all reservations of tickets from S to a fixed destination station. In case the company cannot accept all orders because of the passenger capacity limitations, its rejection policy is that it either completely accept or completely reject single orders from single stations.</p>\r\n<p></p>\r\n<p>Write a program which for the given list of orders from single stations on the way from A to B determines the biggest possible total earning of the TransRuratania company. The earning from one accepted order is the product of the number of passengers included in the order and the price of their train tickets. The total earning is the sum of the earnings from all accepted orders.</p>', '<p>The input file is divided into blocks. The first line in each block contains three integers: passenger capacity <i>n</i> of the train, the number of the city B station and the number of ticket orders from all stations. The next lines contain the ticket orders. Each ticket order consists of three integers: starting station, destination station, number of passengers. In one block there can be maximum 22 orders. The number of the city B station will be at most 7. The block where all three numbers in the first line are equal to zero denotes the end of the input file.</p>', '<p>The output file consists of lines corresponding to the blocks of the input file except the terminating block. Each such line contains the biggest possible total earning.</p>', 'D:\\oj\\data\\2143', 'D:\\oj\\data\\2143', '10 3 4\r\n0 2 1\r\n1 3 5\r\n1 2 7\r\n2 3 10\r\n10 5 4\r\n3 5 10\r\n2 4 9\r\n0 2 5\r\n2 5 8\r\n0 0 0', '19\r\n34', '', '', '', '2011-06-10 19:40:17', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 24, 'power721'),
(2144, 'John''s trip', '<p>Little Johnny has got a new car. He decided to drive around the town to visit his friends. Johnny wanted to visit all his friends, but there was many of them. In each street he had one friend. He started thinking how to make his trip as short as possible. Very soon he realized that the best way to do it was to travel through each street of town only once. Naturally, he wanted to finish his trip at the same place he started, at his parents'' house.</p>\r\n<p>The streets in Johnny''s town were named by integer numbers from 1 to <i>n</i>, <i>n</i> &lt; 1995. The junctions were independently named by integer numbers from 1 to <i>m</i>,  <img align="MIDDLE" width="54" height="25" src="images/problem/pic2144_0" alt="tex2html_wrap_inline32" /> . All junctions in the town had different numbers. Each street was connecting exactly two (not necessarily different) junctions. No two streets in the town had the same number. He immediately started to plan his round trip. If there was more than one such round trip, he would have chosen the one which, when written down as a sequence of street numbers is lexicographically the smallest.</p>\r\n<p>But Johnny was not able to find even one such round trip. Help Johnny and write a program which finds the desired shortest round trip. If the round trip does not exist the program should write a message. Assume that Johnny lives at the junction ending the 1st street input with smaller number. All streets in the town are two way. There exists a way from each street to another street in the town. The streets in the town are very narrow and there is no possibility to turn back the car once he is in the street.</p>', '<p>Input file consists of several blocks. Each block describes one town. Each line in the block contains three integers <i>x</i>, <i>y</i>, <i>z</i>, where <i>x</i> &gt; 0 and <i>y</i> &gt; 0 are the numbers of junctions which are connected by the street number <i>z</i>. The end of the block is marked by the line containing <i>x</i> = <i>y</i> = 0. At the end of the input file there is an empty block, <i>x</i> = <i>y</i> = 0.</p>\r\n<p></p>\r\n<h2><font color="#0070e8"><a name="SECTION0001002000000000000000"></a></font></h2>', '<p>The output file consists of 2 line blocks corresponding to the blocks of the input file. The first line of each block contains the sequence of street numbers (single members of the sequence are separated by space) describing Johnny''s round trip. If the round trip cannot be found the corresponding output block contains the message ``<tt>Round trip does not exist.</tt>''''. The second line of each block is empty.</p>', 'D:\\oj\\data\\2144', 'D:\\oj\\data\\2144', '1 2 1\r\n2 3 2\r\n3 1 6\r\n1 2 5\r\n2 3 3\r\n3 1 4\r\n0 0\r\n1 2 1\r\n2 3 2\r\n1 3 3\r\n2 4 4\r\n0 0\r\n0 0', '1 2 3 5 4 6\r\n\r\nRound trip does not exist.', '', '', '', '2012-07-15 15:07:57', 1000, 131072, 'N', NULL, 1, 5, 20, 4, 80, 1, 1, 1000, 35, 'power721');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(2145, 'Pipe', '<p>The GX Light Pipeline Company started to prepare bent pipes for the new transgalactic light pipeline. During the design phase of the new pipe shape the company ran into the problem of determining how far the light can reach inside each component of the pipe. Note that the material which the pipe is made from is not transparent and not light reflecting.</p>\r\n<p></p>\r\n<center><img src="images/problem/pic2145_0" alt="" /></center>\r\n<p>Each pipe component consists of many straight pipes connected tightly together. For the programming purposes, the company developed the description of each component as a sequence of points  <img align="MIDDLE" width="199" height="27" src="images/problem/pic2145_1" alt="tex2html_wrap_inline31" /> , where  <img align="MIDDLE" width="142" height="19" src="images/problem/pic2145_2" alt="tex2html_wrap_inline33" />  . These are the upper points of the pipe contour. The bottom points of the pipe contour consist of points with <i>y</i>-coordinate decreased by 1. To each upper point  <img align="MIDDLE" width="44" height="27" src="images/problem/pic2145_3" alt="tex2html_wrap_inline37" />  there is a corresponding bottom point  <img align="MIDDLE" width="74" height="27" src="images/problem/pic2145_4" alt="tex2html_wrap_inline39" />  (see picture above). The company wants to find, for each pipe component, the point with maximal <i>x</i>-coordinate that the light will reach. The light is emitted by a segment source with endpoints  <img align="MIDDLE" width="78" height="27" src="images/problem/pic2145_5" alt="tex2html_wrap_inline43" />  and  <img align="MIDDLE" width="48" height="27" src="images/problem/pic2145_6" alt="tex2html_wrap_inline45" />  (endpoints are emitting light too). Assume that the light is not bent at the pipe bent points and the bent points do not stop the light beam.</p>', '<p>The input file contains several blocks each describing one pipe component. Each block starts with the number of bent points  <img align="MIDDLE" width="81" height="25" src="images/problem/pic2145_7" alt="tex2html_wrap_inline47" />  on separate line. Each of the next <i>n</i> lines contains a pair of real values  <img align="MIDDLE" width="35" height="17" src="images/problem/pic2145_8" alt="tex2html_wrap_inline51" />  separated by space. The last block is denoted with <i>n</i> = 0.</p>\r\n<p></p>\r\n<h2><font color="#0070e8"><a name="SECTION0001002000000000000000"></a></font></h2>', '<p>The output file contains lines corresponding to blocks in input file. To each block in the input file there is one line in the output file. Each such line contains either a real value, written with precision of two decimal places, or the message <tt>Through all the pipe.</tt>. The real value is the desired maximal <i>x</i>-coordinate of the point where the light can reach from the source for corresponding pipe component. If this value equals to  <img align="MIDDLE" width="17" height="17" src="images/problem/pic2145_9" alt="tex2html_wrap_inline57" /> , then the message <tt>Through all the pipe.</tt> will appear in the output file.</p>', 'D:\\oj\\data\\2145', 'D:\\oj\\data\\2145', '4\r\n0 1\r\n2 2\r\n4 1\r\n6 4\r\n6\r\n0 1\r\n2 -0.6\r\n5 -4.45\r\n7 -5.57\r\n12 -10.8\r\n17 -16.55\r\n0', '4.67\r\nThrough all the pipe.', '', '', '', '2011-06-10 19:40:17', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 17, 'power721'),
(2146, 'Department', '<p>The Department of Security has a new headquarters building. The building has several floors, and on each floor there are rooms numbered <i>xxyy</i> where <i>yy</i> stands for the room number and <i>xx</i> for the floor number, 0 &lt; <i>xx</i>, <i>yy</i> &lt; 10. The building has `pater-noster'' elevator, i.e. elevator build up from several cabins running all around. From time to time the agents must visit the headquarters. During their visit they want to visit several rooms and in each room they want to stay for some time. Due to the security reasons, there can be only one agent in the same room at the same time, The same rule applies to the elevators. The visits are planned in the way ensuring they can be accomplished within one day. Each agent visits the headquarters at most once a day.</p>\r\n<p>Each agent enters the building at the 1st floor, passes the reception and then starts to visit the rooms according to his/her list. Agents always visit the rooms by the increasing room numbers. The agents form a linear hierarchy according to which they have assigned their one letter personal codes. The agents with higher seniority have lexicographically smaller codes. No two agents have the same code.</p>\r\n<p>If more then one agent want to enter a room, or an elevator, the agents have to form a queue. In each queue, they always stand according to their codes. The higher the seniority of the agent, the closer to the top of the queue he stands. Every 5 s (seconds) the first agent in the queue in front of the elevator enters the elevator. After visiting the last room in the headquarters each agent uses if necessary elevator to the first floor and exits the building.</p>\r\n<p>The times necessary to move from a certain point in the headquarters to another are set as follows: Entering the building, i.e. passing the reception and reaching the elevator, or a room on the first floor takes 30 s. Exiting the building, i.e. stepping out of the elevator or a room on the first floor and passing the reception takes also 30 s. On the same floor, the transfer from the elevator to the room (or to the queue in front of the room), or from the room to the elevator (or to the queue in front of the elevator), or from one room to another (or to the queue in front of the room) takes 10 s. The transfer from one floor to the next floor above or below in an elevator takes 30 s. Write a program that determines time course of agent''s visits in the headquarters.</p>\r\n<p></p>\r\n<h2><font color="#0070e8"><a name="SECTION0001001000000000000000"></a></font></h2>', '<p>The input file contains the descriptions of  <img align="MIDDLE" width="41" height="25" src="images/problem/pic2146_0" alt="tex2html_wrap_inline49" />  visits of different agents. The first line of the description of each visit consists of agent''s one character code <i>C</i>, <i>C</i> = <tt>A, ..., Z</tt>, and the time when the agent enters the headquarters. The time is in the format HH:MM:SS (hours, minutes, seconds). The next lines (there will be at least one) contain the room number, and the length of time intended to stay in the room, time is in seconds. Each room is in a separate line. The list of rooms is sorted according to the increasing room number. The list of rooms ends by the line containing 0. The list of the descriptions of visits ends by the line containing the character dot.</p>', '<p>The output contains detailed records of each agent''s visit in the headquarters. For each agent, there will be a block. Blocks are ordered in the order of increasing agent''s codes. The first line of a block contains the code of agent. Next lines contain the starting and ending time (in format HH:MM:SS) and the descriptions of his/her activity. Time data will be separated by one blank character. Description will be separated from time by one blank character. Description will have a form <tt>Entry, Exit</tt> or Message. The Message can be one of the following: <tt>Waiting in elevator queue, Waiting in front of room</tt> <em>RoomNumber</em>, <tt>Transfer from room</tt> <em>RoomNumber</em> <tt>to room</tt> <em>RoomNumber</em>, <tt>Transfer from elevator to room</tt> <em>RoomNumber</em>, <tt>transfer from</tt> <em>RoomNumber</em> <tt>to elevator</tt>, <tt>Stay in room</tt> <em>RoomNumber</em>, <tt>Stay in elevator</tt>.<br />\r\nPrint a blank line after each test case.</p>', 'D:\\oj\\data\\2146', 'D:\\oj\\data\\2146', 'A 10:00:00\r\n0101 100\r\n0110 50\r\n0202 90\r\n0205 50\r\n0\r\nB 10:01:00\r\n0105 100\r\n0201 5\r\n0205 200\r\n0\r\n.', 'A\r\n10:00:00 10:00:30 Entry\r\n10:00:30 10:02:10 Stay in room 0101\r\n10:02:10 10:02:20 Transfer from room 0101 to room 0110\r\n10:02:20 10:03:10 Stay in room 0110\r\n10:03:10 10:03:20 Transfer from room 0110 to elevator\r\n10:03:20 10:03:50 Stay in elevator\r\n10:03:50 10:04:00 Transfer from elevator to room 0202\r\n10:04:00 10:05:30 Stay in room 0202\r\n10:05:30 10:05:40 Transfer from room 0202 to room 0205\r\n10:05:40 10:07:40 Waiting in front of room 0205\r\n10:07:40 10:08:30 Stay in room 0205\r\n10:08:30 10:08:40 Transfer from room 0205 to elevator\r\n10:08:40 10:09:10 Stay in elevator\r\n10:09:10 10:09:40 Exit\r\nB\r\n10:01:00 10:01:30 Entry\r\n10:01:30 10:03:10 Stay in room 0105\r\n10:03:10 10:03:20 Transfer from room 0105 to elevator\r\n10:03:20 10:03:25 Waiting in elevator queue\r\n10:03:25 10:03:55 Stay in elevator\r\n10:03:55 10:04:05 Transfer from elevator to room 0201\r\n10:04:05 10:04:10 Stay in room 0201\r\n10:04:10 10:04:20 Transfer from room 0201 to room 0205\r\n10:04:20 10:07:40 Stay in room 0205\r\n10:07:40 10:07:50 Transfer from room 0205 to elevator\r\n10:07:50 10:08:20 Stay in elevator\r\n10:08:20 10:08:50 Exit', '', '', '', '2011-06-10 19:40:17', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 27, 'power721'),
(2147, 'Joseph', '<p>The Joseph''s problem is notoriously known. For those who are not familiar with the original problem: from among <i>n</i> people, numbered 1, 2, ..., <i>n</i>, standing in circle every <i>m</i>th is going to be executed and only the life of the last remaining person will be saved. Joseph was smart enough to choose the position of the last remaining person, thus saving his life to give us the message about the incident. For example when <i>n</i> = 6 and <i>m</i> = 5 then the people will be executed in the order 5, 4, 6, 2, 3 and 1 will be saved.</p>\r\n<p></p>\r\n<p>Suppose that there are <i>k</i> good guys and <i>k</i> bad guys. In the circle the first <i>k</i> are good guys and the last <i>k</i> bad guys. You have to determine such minimal <i>m</i> that all the bad guys will be executed before the first good guy.</p>', '<p>The input file consists of separate lines containing <i>k</i>. The last line in the input file contains 0. You can suppose that 0 &lt; <i>k</i> &lt; 14.</p>', '<p>The output file will consist of separate lines containing <i>m</i> corresponding to <i>k</i> in the input file.</p>', 'D:\\oj\\data\\2147', 'D:\\oj\\data\\2147', '3\r\n4\r\n0', '5\r\n30', '', '', '', '2011-06-10 19:40:18', 1000, 131072, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 2, 'power721'),
(2148, 'Sticks', '<p>George took sticks of the same length and cut them randomly until all parts became at most 50 units long. Now he wants to return sticks to the original state, but he forgot how many sticks he had originally and how long they were originally. Please help him and design a program which computes the smallest possible original length of those sticks. All lengths expressed in units are integers greater than zero.</p>', '<p>The input file contains blocks of 2 lines. The first line contains the number of sticks parts after cutting. The second line contains the lengths of those parts separated by the space. The last line of the file contains zero.</p>', '<p>The output file contains the smallest possible length of original sticks, one per line.</p>', 'D:\\oj\\data\\2148', 'D:\\oj\\data\\2148', '9\r\n5 2 1 5 2 1 5 2 1\r\n4\r\n1 2 3 4\r\n0', '6\r\n5', '', '', '', '2011-06-10 19:40:18', 1000, 131072, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 1, 'power721'),
(2149, 'Tin Cutter', '<p>In a Tin Cutting factory there is a machine for cutting parts from tin plates. It has an extraordinarily sharp knife able to make horizontal or vertical segment cuts in the tin plates. Each cutting process consists of a sequence of such cuts. Each segment cut is given by its endpoints that are always located inside the tin plate. During the cutting process some parts of tin plate can fall out and so some holes in the plate can emerge.</p>\r\n<p></p>\r\n<p>Factory management needs to predict the number of holes in the plate at the end of the given sequence of cuts. Write a program that answers this question. Single segment cuts are not considered to be holes.</p>\r\n<p></p>\r\n<p>Here there are examples of some situations that can arise after cutting:</p>\r\n<p></p>\r\n<center><img src="images/problem/pic2149_0" alt="" /></center>\r\n<p>two holes two holes one hole one hole</p>', '<p>The input file consists of blocks of lines. Each block except the last describes one cutting process. In the first line of the block there is a number  <img align="MIDDLE" width="64" height="26" src="images/problem/pic2149_1" alt="tex2html_wrap_inline33" />  indicating the number of segment cuts in the cutting process. These cuts are defined by the following <i>N</i> lines. The line defining one segment cut has the form  <img align="MIDDLE" width="78" height="25" src="images/problem/pic2149_2" alt="tex2html_wrap_inline37" />  where  <img align="MIDDLE" width="46" height="25" src="images/problem/pic2149_3" alt="tex2html_wrap_inline39" />  and  <img align="MIDDLE" width="46" height="25" src="images/problem/pic2149_4" alt="tex2html_wrap_inline41" />  are the co-ordinates of the end points of the segment cut. They are separated by one space. The co-ordinates are integers and always define horizontal or vertical segment (i.e. segment parallel with <i>x</i> or <i>y</i> axis).</p>\r\n<p></p>\r\n<p>The last block consists of just one line containing 0.</p>\r\n<p></p>\r\n<h2><font color="#0070e8"><a name="SECTION0001002000000000000000"></a></font></h2>', '<p>The output file contains the lines corresponding to the blocks in the input file. Each such line contains the number of holes that remain in the tin plate after the execution of the corresponding cuts.</p>\r\n<p></p>\r\n<p>There is no line in the output file corresponding to the last ``null'''' block of the input file.</p>', 'D:\\oj\\data\\2149', 'D:\\oj\\data\\2149', '4\r\n0 1 1 1\r\n1 1 1 0\r\n1 0 0 0\r\n0 0 0 1\r\n2\r\n0 1 2 1\r\n1 2 1 0\r\n0', '1\r\n0', '', '', '', '2011-06-10 19:40:18', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 17, 'power721'),
(2150, 'FORCAL', '<p>FORCAL is the programming language well known to programmers who are interested in compiler construction and especially to students attending Dr. C. Ompiler class. The FORCAL syntax is defined as follows:</p>\r\n<ul>\r\n    <li>The only data type is integer.</li>\r\n    <li>All identifiers are implicitly declared and are not longer than 32 characters. Identifiers are composed of letters, digits and underscores. At least one character of the identifier is not a digit.</li>\r\n    <li>Literals are strings of at most 8 digits.</li>\r\n    <li>Comments begin with - and end at the end of the line in which they start.</li>\r\n    <li>Statement types are\r\n    <pre><tt> <br />Assignment:<br /></tt><p><br /><tt>	<img align="MIDDLE" width="5" height="27" src="images/problem/pic2150_0" alt="tex2html_wrap_inline42" /> identifier <img align="MIDDLE" width="4" height="27" src="images/problem/pic2150_1" alt="tex2html_wrap_inline44" />  :=  <img align="MIDDLE" width="5" height="27" src="images/problem/pic2150_0" alt="tex2html_wrap_inline42" /> expression <img align="MIDDLE" width="4" height="27" src="images/problem/pic2150_1" alt="tex2html_wrap_inline44" /> <br /></tt></p><p><br /><tt>	where expressions are constructed from identifiers, literals, operators +, -,<br /></tt></p><p><br /><tt>	and parentheses as follows:<br /></tt></p><p><br /><tt>	1) all identifiers and literals are expressions,<br /></tt></p><p><br /><tt>	2) if <i>a</i>, <i>b</i> are expressions then <i>a</i> + <i>b</i>, <i>a</i> - <i>b</i>, +<i>a</i>, -<i>a</i>, (<i>a</i>) are expressions.<br /></tt></p><p><br /><tt>Input/Output:<br /></tt></p><p><br /><tt>	<b>read</b>(List of identifiers);<br /></tt></p><p><br /><tt>	<b>write</b>(List of expressions)<br /></tt></p><p><br /><tt>	(Items in the list are separated by comma)<br /></tt></p><p></p></pre>\r\n    </li>\r\n    <li><b>begin</b>, <b>end</b>, <b>read</b>, and <b>write</b> are reserved words.</li>\r\n    <li>Each statement is terminated by a semicolon.</li>\r\n    <li>FORCAL is not case-sensitive, for example <b>BegIN</b> is the same keyword as <b>beGin</b>.</li>\r\n</ul>\r\n<p></p>\r\n<p>FORCAL tokens are defined to be: the identifiers or the literals or the symbols <tt>+ - ( ) := ; ,</tt> or the reserved words.</p>\r\n<p></p>\r\n<p></p>\r\n<p><b>NOTES:</b></p>\r\n<ul>\r\n    <li>the assign operator is to be considered one FORCAL token,</li>\r\n    <li>spaces, tabs, end-of-lines are allowed between the tokens,</li>\r\n    <li>no part of any comment is a token,</li>\r\n    <li>successive tokens that are either identifiers, literals or reserved words must be separated by a space or tab or end-of-line,</li>\r\n    <li>no token is allowed to contain a space or a tab or end-of-line.</li>\r\n</ul>\r\n<p></p>\r\n<p>Help the students of Dr. C. Ompiler to write a program which reads lines of text an recognizes the FORCAL tokens in them.</p>', '<p>The input file consists of several blocks of lines. Each block contains lines of text and is terminated by one empty line.</p>', '<p>The output file consists of blocks corresponding to the blocks in the input file. In the lines of each block there are successively stored the FORCAL tokens recognized by the program (just one token on each line). Each token must be written on the output line in exactly the same form as it appears in the input text. If the program encounters a string that is neither a FORCAL token, nor comment, nor space, tab, end-of-line, it is to write the string <tt>TOKEN ERROR</tt> on a new line and continues by processing the next block in the input file. The program writes one empty line after each block of the output file.</p>', 'D:\\oj\\data\\2150', 'D:\\oj\\data\\2150', 'A1:= A + (-B);\r\n\r\nA123 A123 )\r\n01.2 A B\r\nC\r\n\r\n:= A beGIn\r\n\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'A1\r\n:=\r\nA\r\n+\r\n(\r\n-\r\nB\r\n)\r\n;\r\n\r\nA123 A123\r\n)\r\n01\r\nTOKEN ERROR\r\n\r\n:=\r\nA\r\nbeGIn\r\n\r\nTOKEN ERROR', '', '', '', '2011-06-10 19:40:18', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 15, 'power721'),
(2151, 'L-system', '<p>A D0L (Deterministic Lindenmayer system without interaction) system consists of a finite set  <img align="BOTTOM" width="11" height="12" src="images/problem/pic2151_0" alt="tex2html_wrap_inline36" />  of symbols (the alphabet), a finite set <i>P</i> of productions and a starting string  <img align="BOTTOM" width="11" height="8" src="images/problem/pic2151_1" alt="tex2html_wrap_inline40" /> . The productions in <i>P</i> are of the form  <img align="BOTTOM" width="45" height="10" src="images/problem/pic2151_2" alt="tex2html_wrap_inline44" /> , where  <img align="MIDDLE" width="42" height="25" src="images/problem/pic2151_3" alt="tex2html_wrap_inline46" />  and  <img align="MIDDLE" width="52" height="29" src="images/problem/pic2151_4" alt="tex2html_wrap_inline48" />  (<i>u</i> is called the right side of the production),  <img align="BOTTOM" width="21" height="14" src="images/problem/pic2151_5" alt="tex2html_wrap_inline52" />  is the set of all strings of symbols from  <img align="BOTTOM" width="11" height="12" src="images/problem/pic2151_0" alt="tex2html_wrap_inline36" />  excluding the empty string. Such productions represent the transformation of the symbol <i>x</i> into the string <i>u</i>. For each symbol  <img align="MIDDLE" width="42" height="25" src="images/problem/pic2151_3" alt="tex2html_wrap_inline46" /> , <i>P</i> contains exactly one production of the form  <img align="BOTTOM" width="45" height="10" src="images/problem/pic2151_2" alt="tex2html_wrap_inline44" /> . Direct derivation from string  <img align="MIDDLE" width="15" height="17" src="images/problem/pic2151_6" alt="tex2html_wrap_inline66" />  to  <img align="MIDDLE" width="15" height="17" src="images/problem/pic2151_7" alt="tex2html_wrap_inline68" />  consists of replacing each occurrence of the symbol  <img align="MIDDLE" width="42" height="25" src="images/problem/pic2151_3" alt="tex2html_wrap_inline46" />  in  <img align="MIDDLE" width="15" height="17" src="images/problem/pic2151_6" alt="tex2html_wrap_inline66" />  by the string on the right side of the production for that symbol. The language of the D0L system consists of all strings which can be derived from the starting string  <img align="BOTTOM" width="11" height="8" src="images/problem/pic2151_1" alt="tex2html_wrap_inline40" />  by a sequence of the direct derivations.</p>\r\n<p></p>\r\n<p>Suppose that the alphabet consists of two symbols <tt><b>a</b></tt> and <tt>b</tt>. So the set of productions includes two productions of the form <tt>a</tt> <img align="BOTTOM" width="30" height="10" src="images/problem/pic2151_8" alt="tex2html_wrap_inline76" /> , <tt>b</tt> <img align="BOTTOM" width="30" height="10" src="images/problem/pic2151_9" alt="tex2html_wrap_inline78" /> , where <i>u</i> and  <img align="MIDDLE" width="82" height="33" src="images/problem/pic2151_10" alt="tex2html_wrap_inline82" /> , and the starting string  <img align="MIDDLE" width="85" height="33" src="images/problem/pic2151_11" alt="tex2html_wrap_inline84" /> . Can you answer whether there exists a string in the language of the D0L system of the form <i>xzy</i> for a given string <i>z</i>? (<i>x</i> and <i>y</i> are some strings from  <img align="BOTTOM" width="18" height="12" src="images/problem/pic2151_12" alt="tex2html_wrap_inline94" /> ,  <img align="BOTTOM" width="18" height="12" src="images/problem/pic2151_12" alt="tex2html_wrap_inline94" />  is the set of all strings of symbols from  <img align="BOTTOM" width="11" height="12" src="images/problem/pic2151_0" alt="tex2html_wrap_inline36" /> , including the empty string.). Certainly you can. Write the program which will solve this problem.</p>', '<p>The input file of the program consists of several blocks of lines. Each block includes four lines. There are no empty lines between any successive two blocks. The first line of a block contains the right side of the production for the symbol <tt>a</tt>. The second one contains the right side of the production for the symbol <tt>b</tt> and the third one contains the starting string  <img align="BOTTOM" width="11" height="8" src="images/problem/pic2151_1" alt="tex2html_wrap_inline40" />  and the fourth line the given string <i>z</i>. The right sides of the productions, the given string <i>z</i> and the starting string  <img align="BOTTOM" width="11" height="8" src="images/problem/pic2151_1" alt="tex2html_wrap_inline40" />  are at most 15 characters long.</p>', '<p>For each block in the input file there is one line in the output file containing <tt>YES</tt> or <tt>NO</tt> according to the solution of the given problem.</p>', 'D:\\oj\\data\\2151', 'D:\\oj\\data\\2151', 'aa\r\nbb\r\nab\r\naaabb\r\na\r\nb\r\nab\r\nba', 'YES\r\nNO', '', '', '', '2011-06-10 19:40:19', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 24, 'power721'),
(2152, 'Packets', '<p>A factory produces products packed in square packets of the same height <i>h</i> and of the sizes  <img align="MIDDLE" width="37" height="24" src="images/problem/pic2152_0" alt="tex2html_wrap_inline27" /> ,  <img align="MIDDLE" width="37" height="24" src="images/problem/pic2152_1" alt="tex2html_wrap_inline29" /> ,  <img align="MIDDLE" width="37" height="24" src="images/problem/pic2152_2" alt="tex2html_wrap_inline31" /> ,  <img align="MIDDLE" width="38" height="24" src="images/problem/pic2152_3" alt="tex2html_wrap_inline33" /> ,  <img align="MIDDLE" width="37" height="24" src="images/problem/pic2152_4" alt="tex2html_wrap_inline35" /> ,   <img align="MIDDLE" width="37" height="24" src="images/problem/pic2152_5" alt="tex2html_wrap_inline37" /> . These products are always delivered to customers in the square parcels of the same height <i>h</i> as the products have and of the size  <img align="MIDDLE" width="37" height="24" src="images/problem/pic2152_5" alt="tex2html_wrap_inline37" /> . Because of the expenses it is the interest of the factory as well as of the customer to minimize the number of parcels necessary to deliver the ordered products from the factory to the customer. A good program solving the problem of finding the minimal number of parcels necessary to deliver the given products according to an order would save a lot of money. You are asked to make such a program.</p>', '<p>The input file consists of several lines specifying orders. Each line specifies one order. Orders are described by six integers separated by one space representing successively the number of packets of individual size from the smallest size  <img align="MIDDLE" width="37" height="24" src="images/problem/pic2152_0" alt="tex2html_wrap_inline27" />  to the biggest size  <img align="MIDDLE" width="37" height="24" src="images/problem/pic2152_5" alt="tex2html_wrap_inline37" /> . The end of the input file is indicated by the line containing six zeros.</p>', '<p>The output file contains one line for each line in the input file. This line contains the minimal number of parcels into which the order from the corresponding line of the input file can be packed. There is no line in the output file corresponding to the last ``null'''' line of the input file.</p>\r\n<p></p>\r\n<h2><font color="#0070e8"><a name="SECTION0001003000000000000000"></a></font></h2>', 'D:\\oj\\data\\2152', 'D:\\oj\\data\\2152', '0 0 4 0 0 1\r\n7 5 1 0 0 0\r\n0 0 0 0 0 0', '2\r\n1', '', '', '', '2012-06-30 14:01:54', 1000, 131072, 'N', NULL, 1, 2, 50, 1, 50, 2, 1, 1000, 46, 'power721'),
(2153, 'Crosswords (II)', '<p>A crossword can be stored as a matrix  <img align="MIDDLE" width="46" height="18" src="images/problem/pic2153_0" alt="tex2html_wrap_inline26" />  of zeros and ones. Zero represents white squares and one represents black squares. Some squares of the crossword are numbered and assigned to these numbers are the descriptions of the words that should be written either ``across'''' or ``down'''' into the crossword. A square is numbered if it is a white square and either (a) the square below it is white and there is no white square immediately above, or (b) there is no white square immediately to its left and the square to its right is white. The squares are numbered from left to right, from the top line to the bottom line.</p>\r\n<p>From the matrix a crossword diagram can be drawn. In the diagram each square is represented by a box  <img align="MIDDLE" width="38" height="24" src="images/problem/pic2153_1" alt="tex2html_wrap_inline28" />  characters. Black square and white squares  (numbered and not numbered square) are represented as follows (where <tt>nnn</tt> is the number of the square):</p>\r\n<p></p>\r\n<pre>\r\n++++++                        ++++++         ++++++\r\n++++++                        +nnn +         +    +\r\n++++++                        +    +         +    +\r\n++++++                        ++++++         ++++++</pre>\r\n<p>The remaining characters of the box are spaces. If black squares are given at the edges, they should be removed from the diagram (see the example). Only use spaces as necessary filling characters. Don''t use any unnecessary spaces at the end of the line.</p>', '<p>The input file consists of several blocks of lines each representing a crossword. Each block starts with the line containing two integers <i>m</i> &lt; 25 and <i>n</i> &lt; 25 separated by one space. In each of the next <i>m</i> lines there are <i>n</i> numbers 0 or 1, separated by one space. The last block will be empty, <i>m</i> = <i>n</i> = 0.</p>', '<p>The output file contains the corresponding crossword diagram for each except the last block. After each diagram there is one empty line.</p>', 'D:\\oj\\data\\2153', 'D:\\oj\\data\\2153', '6 7\r\n1 0 0 0 0 1 1\r\n0 0 1 0 0 0 0\r\n0 0 0 0 1 0 0\r\n0 1 0 0 1 1 1\r\n0 0 0 1 0 0 0\r\n1 0 0 0 0 0 1\r\n5 3\r\n1 0 1\r\n0 0 0\r\n1 1 1\r\n0 0 0\r\n1 0 1\r\n0 0', '+++++++++++++++++++++\r\n     +001 +    +002 +003 +\r\n     +    +    +    +    +\r\n++++++++++++++++++++++++++++++++++++\r\n+004 +    ++++++005 +    +006 +007 +\r\n+    +    ++++++    +    +    +    +\r\n++++++++++++++++++++++++++++++++++++\r\n+008 +    +009 +    +    +010 +    +\r\n+    +    +    +    +    +    +    +\r\n+++++++++++++++++++++    +++++++++++\r\n+    ++++++011 +    +\r\n+    ++++++    +    +\r\n++++++++++++++++++++++++++++++++++++\r\n+012 +013 +    ++++++014 +015 +    +\r\n+    +    +    ++++++    +    +    +\r\n++++++++++++++++++++++++++++++++++++\r\n     +016 +    +    +    +    +\r\n     +    +    +    +    +    +\r\n     ++++++++++++++++++++++++++\r\n\r\n     ++++++\r\n     +001 +\r\n     +    +\r\n++++++++++++++++\r\n+002 +    +    +\r\n+    +    +    +\r\n++++++++++++++++\r\n\r\n\r\n++++++++++++++++\r\n+003 +004 +    +\r\n+    +    +    +\r\n++++++++++++++++\r\n     +    +\r\n     +    +\r\n     ++++++', '', '', '', '2011-06-10 19:40:19', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 18, 'power721'),
(2154, 'Intervals', '<p>In the ceiling in the basement of a newly open developers building a light source has been installed. Unfortunately, the material used to cover the floor is very sensitive to light. It turned out that its expected life time is decreasing dramatically. To avoid this, authorities have decided to protect light sensitive areas from strong light by covering them. The solution was not very easy because, as it is common, in the basement there are different pipelines under the ceiling and the authorities want to install the covers just on those parts of the floor that are not shielded from the light by pipes. To cope with the situation, the first decision was to simplify the real situation and, instead of solving the problem in 3D space, to construct a 2D model first.</p>\r\n<p>Within this model, the <i>x</i>-axis has been aligned with the level of the floor. The light is considered to be a point light source with integer co-ordinates  <img align="MIDDLE" width="46" height="28" src="images/problem/pic2154_0" alt="tex2html_wrap_inline36" /> . The pipes are represented by circles. The center of the circle <i>i</i> has the integer co-ordinates  <img align="MIDDLE" width="63" height="28" src="images/problem/pic2154_1" alt="tex2html_wrap_inline40" />  and an integer radius  <img align="MIDDLE" width="11" height="17" src="images/problem/pic2154_2" alt="tex2html_wrap_inline42" /> . As pipes are made from solid material, circles cannot overlap. Pipes cannot reflect the light and the light cannot go through the pipes. You have to write a program which will determine the non-overlapping intervals on the <i>x</i>-axis where there is, due to the pipes, no light from the light source.</p>\r\n<p></p>\r\n<center><img src="images/problem/pic2154_3" alt="" /></center>', '<p>The input file consists of blocks of lines, each of which except the last describes one situation in the basement. The first line of each block contains a positive integer number <i>N</i> &lt; 500 expressing the number of pipes. The second line of the block contains two integers  <img align="MIDDLE" width="14" height="25" src="images/problem/pic2154_4" alt="tex2html_wrap_inline48" />  and  <img align="MIDDLE" width="13" height="26" src="images/problem/pic2154_5" alt="tex2html_wrap_inline50" />  separated by one space. Each of the next <i>N</i> lines of the block contains integers  <img align="MIDDLE" width="23" height="17" src="images/problem/pic2154_6" alt="tex2html_wrap_inline54" />  ,  <img align="MIDDLE" width="21" height="17" src="images/problem/pic2154_7" alt="tex2html_wrap_inline56" />  and  <img align="MIDDLE" width="11" height="17" src="images/problem/pic2154_2" alt="tex2html_wrap_inline42" /> , where  <img align="MIDDLE" width="94" height="26" src="images/problem/pic2154_8" alt="tex2html_wrap_inline60" /> . Integers in individual lines are separated by one space. The last block consists of one line containing <i>n</i> = 0.</p>\r\n<p></p>\r\n<h2><font color="#0070e8"><a name="SECTION0001002000000000000000"></a></font></h2>', '<p>The output file consists of blocks of lines, corresponding to the blocks in the file (except the last one). One empty line must be put after each block in the output file. Each of the individual lines of the blocks in the output file will contain two real numbers, the endpoints of the interval where there is no light from the given point light source. The reals are exact to two decimal places and separated by one space. The intervals are sorted according to increasing <i>x</i>-coordinate.</p>', 'D:\\oj\\data\\2154', 'D:\\oj\\data\\2154', '6\r\n300 450\r\n70 50 30\r\n120 20 20\r\n270 40 10\r\n250 85 20\r\n220 30 30\r\n380 100 100\r\n1\r\n300 300\r\n300 150 90\r\n1\r\n300 300\r\n390 150 90\r\n0', '0.72 78.86\r\n88.50 133.94\r\n181.04 549.93\r\n\r\n75.00 525.00\r\n\r\n300.00 862.50', '', '', '', '2011-06-10 19:40:19', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 16, 'power721'),
(2155, 'Robot', '<p>The Robot Moving Institute is using a robot in their local store to transport different items. Of course the robot should spend only the minimum time necessary when travelling from one place in the store to another. The robot can move only along a straight line (track). All tracks form a rectangular grid. Neighbouring tracks are one meter apart. The store is a rectangle  <img align="MIDDLE" width="54" height="24" src="images/problem/pic2155_0" alt="tex2html_wrap_inline41" />  meters and it is entirely covered by this grid. The distance of the track closest to the side of the store is exactly one meter. The robot has a circular shape with diameter equal to 1.6 meter. The track goes through the center of the robot. The robot always faces north, south, west or east. The tracks are in the south-north and in the west-east directions. The robot can move only in the direction it faces. The direction in which it faces can be changed at each track crossing. Initially the robot stands at a track crossing. The obstacles in the store are formed from pieces occupying  <img align="MIDDLE" width="68" height="24" src="images/problem/pic2155_1" alt="tex2html_wrap_inline43" />  on the ground. Each obstacle is within a  <img align="MIDDLE" width="37" height="24" src="images/problem/pic2155_2" alt="tex2html_wrap_inline45" />  square formed by the tracks. The movement of the robot is controlled by two commands. These commands are <tt>GO</tt> and <tt>TURN</tt>.</p>\r\n<p></p>\r\n<p>The <tt>GO</tt> command has one integer parameter  <img align="MIDDLE" width="25" height="21" src="images/problem/pic2155_3" alt="tex2html_wrap_inline47" />  <tt>{1,2,3}</tt>. After receiving this command the robot moves <i>n</i> meters in the direction it faces.</p>\r\n<p></p>\r\n<p>The <tt>TURN</tt> command has one parameter which is either <tt>left</tt> or <tt>right</tt>. After receiving this command the robot changes its orientation by 90<sup>o</sup> in the direction indicated by the parameter.</p>\r\n<p></p>\r\n<p>The execution of each command lasts one second.</p>\r\n<p>Help researchers of RMI to write a program which will determine the minimal time in which the robot can move from a given starting point to a given destination.</p>', '<p>The input file consists of blocks of lines. The first line of each block contains two integers  <img align="MIDDLE" width="58" height="26" src="images/problem/pic2155_4" alt="tex2html_wrap_inline53" />  and  <img align="MIDDLE" width="55" height="26" src="images/problem/pic2155_5" alt="tex2html_wrap_inline55" />  separated by one space. In each of the next <i>M</i> lines there are <i>N</i> numbers one or zero separated by one space. One represents obstacles and zero represents empty squares. (The tracks are between the squares.) The block is terminated by a line containing four positive integers  <img align="MIDDLE" width="80" height="25" src="images/problem/pic2155_6" alt="tex2html_wrap_inline61" />  each followed by one space and the word indicating the orientation of the robot at the starting point.  <img align="MIDDLE" width="18" height="25" src="images/problem/pic2155_7" alt="tex2html_wrap_inline63" /> ,  <img align="MIDDLE" width="18" height="25" src="images/problem/pic2155_8" alt="tex2html_wrap_inline65" />  are the coordinates of the square in the north-west corner of which the robot is placed (starting point).  <img align="MIDDLE" width="18" height="25" src="images/problem/pic2155_9" alt="tex2html_wrap_inline67" /> ,  <img align="MIDDLE" width="18" height="25" src="images/problem/pic2155_10" alt="tex2html_wrap_inline69" />  are the coordinates of square to the north-west corner of which the robot should move (destination point). The orientation of the robot when it has reached the destination point is not prescribed. We use (row, column)-type coordinates, i.e. the coordinates of the upper left (the most north-west) square in the store are 0,0 and the lower right (the most south-east) square are <i>M</i> - 1, <i>N</i> - 1. The orientation is given by the words <tt>north</tt> or <tt>west</tt> or <tt>south</tt> or <tt>east</tt>. The last block contains only one line with <i>N</i> = 0 and <i>M</i> = 0.</p>', '<p>The output file contains one line for each block except the last block in the input file. The lines are in the order corresponding to the blocks in the input file. The line contains minimal number of seconds in which the robot can reach the destination point from the starting point. If there does not exist any path from the starting point to the destination point the line will contain -1.</p>\r\n<p></p>\r\n<center><img src="images/problem/pic2155_11" alt="" /></center>', 'D:\\oj\\data\\2155', 'D:\\oj\\data\\2155', '9 10\r\n0 0 0 0 0 0 1 0 0 0\r\n0 0 0 0 0 0 0 0 1 0\r\n0 0 0 1 0 0 0 0 0 0\r\n0 0 1 0 0 0 0 0 0 0\r\n0 0 0 0 0 0 1 0 0 0\r\n0 0 0 0 0 1 0 0 0 0\r\n0 0 0 1 1 0 0 0 0 0\r\n0 0 0 0 0 0 0 0 0 0\r\n1 0 0 0 0 0 0 0 1 0\r\n7 2 2 7 south\r\n0 0', '12', '', '', '', '2011-06-10 19:40:19', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 24, 'power721'),
(2156, 'Network', '<p>A Telephone Line Company (TLC) is establishing a new telephone cable network. They are connecting several places numbered by integers from 1 to <i>N</i>. No two places have the same number. The lines are bidirectional and always connect together two places and in each place the lines end in a telephone exchange. There is one telephone exchange in each place. From each place it is possible to reach through lines every other place, however it need not be a direct connection, it can go through several exchanges. From time to time the power supply fails at a place and then the exchange does not operate. The officials from TLC realized that in such a case it can happen that besides the fact that the place with the failure is unreachable, this can also cause that some other places cannot connect to each other. In such a case we will say the place (where the failure occured) is critical. Now the officials are trying to write a program for finding the number of all such critical places. Help them.</p>\r\n<p></p>\r\n<h2><font color="#0070e8"><a name="SECTION0001001000000000000000"></a></font></h2>', '<p>The input file consists of several blocks of lines. Each block describes one network. In the first line of each block there is the number of places <i>N</i> &lt; 100. Each of the next at most <i>N</i> lines contains the number of a place followed by the numbers of some places to which there is a direct line from this place. These at most <i>N</i> lines completely describe the network, i.e., each direct connection of two places in the network is contained at least in one row. All numbers in one line are separated by one space. Each block ends with a line containing just 0. The last block has only one line with <i>N</i> = 0.</p>\r\n<p></p>\r\n<h2><font color="#0070e8"><a name="SECTION0001002000000000000000"></a></font></h2>', '<p>The output contains for each block except the last in the input file one line containing the number of critical places.</p>', 'D:\\oj\\data\\2156', 'D:\\oj\\data\\2156', '5\r\n5 1 2 3 4\r\n0\r\n6\r\n2 1 3\r\n5 4 6 2\r\n0\r\n0', '1\r\n2', '', '', '', '2011-06-10 19:40:19', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721'),
(2157, 'Stars', '<p>On a clear moon-less night, you can see millions of stars glimmering in the sky. Faced with this overwhelming number, the Greeks started nearly 2,000 years ago to bring some order to the chaos. They identified groups of stars, called constellations, and gave them names, mostly from the Greek mythology, that are still in use today. Examples are ``Ursa Minor'''', ``Pisces'''', ``Cancer'''', and many others.</p>\r\n<p></p>\r\n<p>Given a sketch of the constellation, it is not easy for the amateur to actually find the constellation in the sky. Moreover, simple constellations, such as ``Triangulum'''' (triangle,) which consists of only three stars, may appear several times in the sky. Again, singling out the ``correct'''' occurrence is not easy.</p>\r\n<p>Traditionally, maps were printed for just this purpose. But in this problem, we will see how the computer can help us find constellations in the sky.</p>\r\n<p></p>\r\n<p>You will be given a star map; for simplicity this will be a collection of points in the plane, each having a certain brightness associated with it. Then, given a constellation, also as a set of points in the plane, you are to determine:</p>\r\n<p></p>\r\n<ul>\r\n    <li>the number of occurrences of the constellation in the star map, and</li>\r\n    <li>the position of the brightest occurrence, if one exists. (The rationale behind this is as follows: if a constellation seems to appear several times in the sky, the brightest one is most likely to be the real one, since it is the most eye-catching one.)</li>\r\n</ul>\r\n<p>An occurrence is a subset of stars from the map that forms a (possibly) arbitrarily rotated and/or scaled copy of the stars in the constellation.</p>\r\n<p>The brightness of an occurrence is the average brightness of the stars it consists of, i.e. the sum of individual brightnesses divided by the number of stars in the constellation.</p>', '<p>On a clear moon-less night, you can see millions of stars glimmering in the sky. Faced with this overwhelming number, the Greeks started nearly 2,000 years ago to bring some order to the chaos. They identified groups of stars, called constellations, and gave them names, mostly from the Greek mythology, that are still in use today. Examples are ``Ursa Minor'''', ``Pisces'''', ``Cancer'''', and many others.</p>\r\n<p></p>\r\n<p>Given a sketch of the constellation, it is not easy for the amateur to actually find the constellation in the sky. Moreover, simple constellations, such as ``Triangulum'''' (triangle,) which consists of only three stars, may appear several times in the sky. Again, singling out the ``correct'''' occurrence is not easy.</p>\r\n<p>Traditionally, maps were printed for just this purpose. But in this problem, we will see how the computer can help us find constellations in the sky.</p>\r\n<p></p>\r\n<p>You will be given a star map; for simplicity this will be a collection of points in the plane, each having a certain brightness associated with it. Then, given a constellation, also as a set of points in the plane, you are to determine:</p>\r\n<p></p>\r\n<ul>\r\n    <li>the number of occurrences of the constellation in the star map, and</li>\r\n    <li>the position of the brightest occurrence, if one exists. (The rationale behind this is as follows: if a constellation seems to appear several times in the sky, the brightest one is most likely to be the real one, since it is the most eye-catching one.)</li>\r\n</ul>\r\n<p>An occurrence is a subset of stars from the map that forms a (possibly) arbitrarily rotated and/or scaled copy of the stars in the constellation.</p>\r\n<p>The brightness of an occurrence is the average brightness of the stars it consists of, i.e. the sum of individual brightnesses divided by the number of stars in the constellation.</p>', '<p>For each star map first output the number of the map (<tt>`Map #1''</tt>, <tt>`Map #2''</tt>, etc.) on a line of its own.</p>\r\n<p>For each constellation, in the same order as in the input, output first its name and how many times it occurs in the map on one line, as shown in the output sample.</p>\r\n<p>If there is at least one occurrence, output the position of the brightest occurrence by listing the positions of the stars that form the brightest occurrence. The star positions have to be printed in ascending <i>x</i>-order. Positions having the same <i>x</i>-coordinates must be sorted in ascending <i>y</i>-order. If there are several equally bright solutions, output only one of them. Adhere to the format shown in the sample output.</p>\r\n<p>Output a blank line before each constellation and a line of 5 dashes (<tt>`-----''</tt>) after every star map.</p>', 'D:\\oj\\data\\2157', 'D:\\oj\\data\\2157', '6\r\n1 2 1\r\n2 1 4\r\n2 4 3\r\n3 2 1\r\n4 1 5\r\n4 3 2\r\n2\r\n3 Triangulum\r\n1 1\r\n3 1\r\n2 4\r\n4 Cancer\r\n1 3\r\n4 3\r\n6 1\r\n7 5\r\n\r\n0', 'Map #1\r\n\r\nTriangulum occurs 2 time(s) in the map.\r\nBrightest occurrence: (1,2) (4,1) (4,3)\r\n\r\nCancer occurs 0 time(s) in the map.\r\n-----', '', '', '', '2011-06-10 19:40:19', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721'),
(2158, 'Hexagon', '<p>Consider a game board consisting of 19 hexagonal fields, as shown in the figure below. We can easily distinguish three main directions in the shape of the board: from top to bottom, from top-left to bottom-right, and from top-right to bottom-left. For each of these primary directions, the board can be viewed as a series of rows, consisting of 3, 4, 5, 4, and 3 fields, respectively.</p>\r\n<p></p>\r\n<center><img src="images/problem/pic2158_0" alt="" /></center>\r\n<p>The game board has to be completely covered using a set of hexagonal pieces. Each piece carries three numbers, one for every primary board direction. Only three different numbers are used for each direction. Every possible combination of three numbers for all three directions is assigned to a piece, leading to a set of 27 unique pieces. (The board in the above figure is still in the process of being covered.)</p>\r\n<p></p>\r\n<p>The score of a board is calculated as the sum of all 15 row scores (5 rows for each primary direction). The row scores are calculated as follows: if all pieces in a row carry the same number for the direction of the row, the row score is this number multiplied by the number of pieces in the row. Otherwise (the pieces carry different numbers in the row direction) the row score is zero. Note that the pieces may not be rotated. For example, the score of the leftmost row in the figure is  <img align="BOTTOM" width="60" height="13" src="images/problem/pic2158_1" alt="tex2html_wrap_inline31" /> , the score of the row to its right is  <img align="BOTTOM" width="79" height="12" src="images/problem/pic2158_2" alt="tex2html_wrap_inline33" /> .</p>\r\n<p></p>\r\n<p>While in the real game the pieces are chosen randomly and the set of pieces is fixed, we are interested in the highest possible score for a given set of numbers for each direction, when all pieces in a row carry  the same number for the direction of the row. This means you have to  choose those 19 pieces that result in the highest score.</p>', '<p>The first line of the input file contains an integer <i>n</i> which indicates the number of test cases. Each test case consists of three lines containing three integers each. Each of these three line contains the numbers for a single primary direction. From these numbers the set of pieces is generated.</p>\r\n<p></p>\r\n<h2><font color="#0070e8"><a name="SECTION0001002000000000000000"></a></font></h2>', '<p>For each test case output a line containing the number of the case (<tt>`Test #1''</tt>, <tt>`Test #2''</tt>, etc.), followed by a line containing the highest possible score for the given numbers. Add a blank line after each test case.</p>', 'D:\\oj\\data\\2158', 'D:\\oj\\data\\2158', '1\r\n9 4 3\r\n8 5 2\r\n7 6 1', 'Test #1\r\n308', '', '', '', '2011-06-10 19:40:19', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 14, 'power721');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(2159, 'Domino Effect', '<p>Did you know that you can use domino bones for other things besides playing Dominoes? Take a number of dominoes and build a row by standing them on end with only a small distance in between. If you do it right, you can tip the first domino and cause all others to fall down in succession (this is where the phrase ``domino effect'''' comes from).</p>\r\n<p></p>\r\n<p>While this is somewhat pointless with only a few dominoes, some people went to the opposite extreme in the early Eighties. Using millions of dominoes of different colors and materials to fill whole halls with elaborate patterns of falling dominoes, they created (short-lived) pieces of art. In these constructions, usually not only one but several rows of dominoes were falling at the same time. As you can imagine, timing is an essential factor here.</p>\r\n<p></p>\r\n<p>It is now your task to write a program that, given such a system of rows formed by dominoes, computes when and where the last domino falls. The system consists of several ``key dominoes'''' connected by rows of simple dominoes. When a key domino falls, all rows connected to the domino will also start falling (except for the ones that have already fallen). When the falling rows reach other key dominoes that have not fallen yet, these other key dominoes will fall as well and set off the rows connected to them. Domino rows may start collapsing at either end. It is even possible that a row is collapsing on both ends, in which case the last domino falling in that row is somewhere between its key dominoes. You can assume that rows fall at a uniform rate.</p>', '<p>The input file contains descriptions of several domino systems. The first line of each description contains two integers: the number <i>n</i> of key dominoes ( <img align="MIDDLE" width="90" height="25" src="images/problem/pic2159_0" alt="tex2html_wrap_inline29" /> ) and the number <i>m</i> of rows between them. The key dominoes are numbered from 1 to <i>n</i>. There is at most one row between any pair of key dominoes and the domino graph is connected, i.e. there is at least one way to get from a domino to any other domino by following a series of domino rows.</p>\r\n<p>The following <i>m</i> lines each contain three integers <i>a</i>, <i>b</i>, and <i>l</i>, stating that there is a row between key dominoes <i>a</i> and <i>b</i> that takes <i>l</i> seconds to fall down from end to end.</p>\r\n<p></p>\r\n<p>Each system is started by tipping over key domino number 1.</p>\r\n<p></p>\r\n<p>The file ends with an empty system (with <i>n</i> = <i>m</i> = 0), which should not be processed.</p>', '<p>For each case output a line stating the number of the case (<tt>`System #1''</tt>, <tt>`System #2''</tt>, etc.). Then output a line containing the time when the last domino falls, exact to one digit to the right of the decimal point, and the location of the last domino falling, which is either at a key domino or between two key dominoes. Adhere to the format shown in the output sample. If you find several solutions, output only one of them. Output a blank line after each system.</p>', 'D:\\oj\\data\\2159', 'D:\\oj\\data\\2159', '2 1\r\n1 2 27\r\n3 3\r\n1 2 5\r\n1 3 5\r\n2 3 5\r\n0 0', 'System #1\r\nThe last domino falls after 27.0 seconds, at key domino 2.\r\n\r\nSystem #2\r\nThe last domino falls after 7.5 seconds, between key dominoes 2 and 3.', '', '', '', '2011-06-10 19:40:19', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721'),
(2160, 'Pendulum', '<p>Consider a pendulum hanging on a string from a hook on a wall. When pushed, this pendulum will swing back and forth. Now imagine other hooks on the wall, placed in the path of our pendulum''s string. The pendulum will bend around them, possibly even loop around them. In general, it will follow a much more complex path than before. After some time, the pendulum''s motion will repeat, the pendulum will follow a <i>periodic orbit</i>. What we would like you to do is to compute the distance travelled by the pendulum as it completes one cycle of the orbit.</p>\r\n<p></p>\r\n<p>More formally, we place a cartesian coordinate system on the wall. The pendulum''s string is affixed at the origin (0,0). As usual, the <i>x</i>-axis points to the right and the <i>y</i>-axis points upwards. The string of the pendulum has a length of <i>r</i>. The pendulum is released at position (-<i>r</i>,0) and therefore starts swinging to the right. Furthermore, there are <i>n</i> additional hooks distributed over the plane which may influence the path of the pendulum.</p>\r\n<p></p>\r\n<p>In our ideal world, the following assumptions are true:</p>\r\n<p></p>\r\n<ul>\r\n    <li>The diameters of the hooks and of the string are zero.</li>\r\n    <li>The pendulum loses no energy (e.g. by friction).</li>\r\n    <li>The pendulum will never hit a hook, only its string will.</li>\r\n    <li>The pendulum''s string is made of some futuristic material that only bends where it touches a hook but is otherwise rigid.</li>\r\n</ul>\r\n<p>Your program should simulate the movement of the pendulum and output the spatial length of the periodic orbit that it finally enters. As you may remember from physics: due to gravity, the pendulum will never reach a height greater than the one it started from! That is, it will never get above the <i>x</i>-axis. It will either reach its initial height again or circle endlessly around a hook in the wall.</p>', '<p>The input file contains several test cases. Each case begins with a line containing an integer <i>n</i> (the number of hooks,  <img align="MIDDLE" width="90" height="25" src="images/problem/pic2160_0" alt="tex2html_wrap_inline44" /> ) and a real <i>r</i> (the length of the pendulum''s string). The following <i>n</i> lines each contain two integers specifying the <i>x</i>- and <i>y</i>-coordinate of the corresponding hook.</p>\r\n<p>The file ends with a case having <i>r</i> = 0, which should not be processed.</p>', '<p>For each case output a line containing the number of the case (<tt>`Pendulum #1''</tt>, <tt>`Pendulum #2''</tt>, etc.).</p>\r\n<p>Then print a line that contains the distance which the pendulum travels for completing one cycle of its periodic orbit. Do not count the distance travelled to reach the starting point of the orbit. (Adhere to the format shown in the output sample.) The distance should be exact to two digits to the right of the decimal point.</p>\r\n<p>Output a blank line after each test case.</p>', 'D:\\oj\\data\\2160', 'D:\\oj\\data\\2160', '2 16.0\r\n3 -4\r\n-3 -4\r\n1 18.0\r\n5 -12\r\n0 0', 'Pendulum #1\r\nLength of periodic orbit = 87.66\r\n\r\nPendulum #2\r\nLength of periodic orbit = 31.42', '', '', '', '2011-06-10 19:40:19', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 15, 'power721'),
(2161, 'Border', '<p>You are to write a program that draws a border around a closed path into a bitmap, as displayed in the following figure:</p>\r\n<p></p>\r\n<center><img src="images/problem/pic2161_0" alt="" /></center>\r\n<p>The path is closed and runs along the grid lines, i.e. between the squares of the grid. The path runs counter-clockwise, so if following the path is considered as going ``forward'''', the border pixels are always to the ``right'''' of the path. The bitmap always covers 32 by 32 squares and has its lower left corner at (0,0). You can safely assume that the path never touches the bounding rectangle of the bitmap and never touches or crosses itself. Note that a bit gets set if it is on the outside of the area surrounded by the path and if at least one of its edges belongs to the path, but not if only one of its corners is in the path. (A look at the convex corners in the figure should clarify that statement.)</p>', '<p>The first line of the input file contains the number of test cases in the file. Each test case that follows consists of two lines. The first line of each case contains two integer numbers <i>x</i> and <i>y</i> specifying the starting point of the path. The second line contains a string of variable length. Every letter in the string symbolizes a move of length one along the grid. Only the letters <tt>`W''</tt> (``west''''), <tt>`E''</tt> (``east''''), <tt>`N''</tt> (``north''''), <tt>`S''</tt> (``south''''), and <tt>`.''</tt> (``end of path'''', no move) appear in the string. The end-of-path character (<tt>`.''</tt>) is immediately followed by the end of the line.</p>', '<p>For each test case, output a line with the number of the case (<tt>`Bitmap #1''</tt>, <tt>`Bitmap #2''</tt>, etc.). For each row of the bitmap from top to bottom, print a line where you print a character for every bit in that row from left to right. Print an uppercase <tt>`X''</tt> for set bits and a period <tt>`.''</tt> for unset bits. Output a blank line after each bitmap.</p>', 'D:\\oj\\data\\2161', 'D:\\oj\\data\\2161', '1\r\n2 1\r\nEENNWNENWWWSSSES.', 'Bitmap #1\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n.XXX............................\r\nX...X...........................\r\nX..X............................\r\nX...X...........................\r\n.X..X...........................\r\n..XX............................', '', '', '', '2011-06-10 19:40:19', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 15, 'power721'),
(2162, 'A+B Problem', 'Calculate a+b', 'Two integer a,b (0<=a,b<=10)', 'Output a+b', 'D:\\oj\\data\\2162', 'D:\\oj\\data\\2162', '1 2', '3', '', '', '', '2011-06-10 19:40:20', 1000, 131072, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 0, 'power721'),
(2163, 'Mincost', 'The cost of taking a taxi in Hangzhou is not a constant for each kilometer you travel: the first 4 kilometers costs 10 yuan (yuan is the monetary unit in China), even if you don''t finish it; the next 4 kilometers costs 2 yuan each and the price for the rest of the trip is 2.4 yuan per kilometer; the last part of the trip is regarded as 1 kilometer even if it''s shorter. A traveller may reduce the cost by reseting the meter at the middle of the trip if used wisely. For example, if the trip is 16 kilometers, he should cut it into two parts with the same length, each half will cost 18 yuan, with an overall cost of 36, less than the original price of 37.2. Now, given the length of the trip, find the minimum cost.', 'The input contains several cases, each has one positive integer in a seperate line, representing the length of the trip. All input data are less than 10000000. Proceed until a case with zero, which should be ignored.', 'For each case, output the minimum cost, leave one digit after decimal point if NECESSARY.', 'D:\\oj\\data\\2163', 'D:\\oj\\data\\2163', '3\r\n9\r\n16\r\n0', '10\r\n20.4\r\n36', '', 'ZOJ Monthly, November 2004', '', '2011-06-10 19:40:20', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 30, 'power721'),
(2164, 'T和Y的计划', 'ACM星球的程序艺术学院的T和Y相恋了。Y快要毕业了，为了前途，Y也许要去别的星球发展他的事业。于是，T和Y开始计划以后如何见面。T有个好主意，她跟Y约定在距离ACM星球和Future星球连线的中点最短的Heart星球见面，你能帮他们找出来浪漫的Heart星球吗？', '首行为一个数N,表示有N个星球。\r\n接下来N行，每行包括三个小数X,Y,Z，表示一个星球的坐标。\r\n第N+2行包括三个小数X,Y,Z，表示ACM星球的坐标。\r\n第N+3行包括三个小数X,Y,Z，表示Future星球的坐标。\r\nN<=5000,1<=X,Y,Z<=99999', 'Heart星球的坐标。（保留3位小数）', 'D:\\oj\\data\\2164', 'D:\\oj\\data\\2164', '5\r\n1062.961900 47382.348900 49636.324000\r\n21829.052500 75418.119200 6862.009300\r\n24339.931000 6028.722000 27365.733500\r\n20111.459200 22797.250400 42073.367900\r\n29601.644400 39841.340000 55461.667800\r\n21829.052500 75418.119200 6862.009300\r\n20111.459200 22797.250400 42073.367900', '21829.053 75418.119 6862.009', '', 'ZJCM CXY', '', '2011-06-10 22:23:34', 1000, 131072, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 1000, 66, 'power721'),
(2165, '骨牌铺方格', '在1×n的一个长方形方格中，用1×1、1×2、1×3的骨牌铺满方格，输入n ，输出铺放方案的总数。\r\n例如n=3时，为1× 3方格，骨牌的铺放方案有四种，如下图：\r\n<img src=http://acm.zj.cn/upload/2009/12/fhl-01134558.jpg></img>', '输入数据由多行组成，每行包含一个整数n，表示该测试实例的长方形方格的规格是1×n (0< n<=30)。当n=0时，表示输入结束，该行不做处理。', '对于每个测试实例，请输出铺放方案的总数，每个实例的输出占一行。', 'D:\\oj\\data\\2165', 'D:\\oj\\data\\2165', '1\r\n2\r\n3\r\n0', '1\r\n2\r\n4', '', 'ZJCM FHL', '', '2011-06-11 22:56:43', 1000, 131072, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 1000, 44, 'power721'),
(2166, 'Max Area', '又是这道题，请不要惊讶，也许你已经见过了，那就请你再来做一遍吧。这可是wolf最骄傲的题目哦。\r\n在笛卡尔坐标系正半轴（x>=0,y>=0）上有n个点，给出了这些点的横坐标和纵坐标，但麻烦的是这些点的坐标没有配对好，你的任务就是将这n个点的横坐标和纵坐标配对好，使得这n个点与x轴围成的面积最大。', '在数据的第一行有一个正整数m,表示有m组测试实例。接下来有m行，每行表示一组测试实例。每行的第一个数n，表示给出了n个点，接着给出了n个x坐标和y坐标。（给出的x轴的数据不会重复，y轴数据也不会重复）（m<5000,1<n<50）\r\n如：\r\n2\r\n4 x1 x2 x3 x4 y1 y2 y3 y4\r\n5 x1 x2 x3 x4 x5 y1 y2 y3 y4 y5', '输出所计算的最大面积，结果保留两位小数，每组数据占一行。', 'D:\\oj\\data\\2166', 'D:\\oj\\data\\2166', '2\r\n4 0 1 3 5 1 2 3 4\r\n6 14 0 5 4 6 8 1 5 6 2 4 3', '15.00\r\n59.00', '', 'ZJCM WL', '', '2011-06-10 19:40:20', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 47, 'power721'),
(2167, '素MM', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;">素数有很多神奇的性质，所以很美。我们知道一个日期将年、月、日按顺序连接在一起可以组成一个八位数，例如&lt;font face="DejaVu Serif, serif">2011</font>年&lt;font face="DejaVu Serif, serif">3</font>月&lt;font face="DejaVu Serif, serif">6</font>日可以写成&lt;font face="DejaVu Serif, serif">20110306</font>。我的某个&lt;font face="DejaVu Serif, serif">MM</font>的生日组成的数是一个素数。偶尔我叫她素&lt;font face="DejaVu Serif, serif">MM</font>，没人知道是啥意思，她自己也不知道。&lt;font face="DejaVu Serif, serif">O(&cap;_&cap;)O</font>哈哈<font face="DejaVu Serif, serif">~</font>我心里可是真的美美的<font face="DejaVu Serif, serif">(⊙o⊙)</font>哦！</p>\r\n<p style="margin-bottom: 0cm;"><font face="DejaVu Serif, serif">	</font>嗯，什么？你的生日也是素数？你也想做&amp;ldquo;素&lt;font face="DejaVu Serif, serif">MM&rdquo;</font>或者&amp;ldquo;素&lt;font face="DejaVu Serif, serif">GG&rdquo;</font>？那好吧，不过我可是很小气的哦！只有你出生在<font face="DejaVu Serif, serif">1988</font>年或者&lt;font face="DejaVu Serif, serif">1989</font>年我才让你做&ldquo;素&lt;font face="DejaVu Serif, serif">MM&rdquo;</font>或&amp;ldquo;素&lt;font face="DejaVu Serif, serif">GG&rdquo;</font>。要不然，你把这两年里日期组成的数是素数的找出来也可以&amp;mdash;&mdash;没准还带你到浙大去&amp;ldquo;旅游&rdquo;呢！</p>\r\n<p></p>', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style></p>\r\n<p style="margin-bottom: 0cm;">无&lt;/p>\r\n<p></p>', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style></p>\r\n<p style="margin-bottom: 0cm;"><font face="DejaVu Serif, serif">1988</font>年与<font face="DejaVu Serif, serif">1989</font>年，这两年里的日期所组成的素数。每个素数占一行。&lt;/p>\r\n<p></p>', 'D:\\oj\\data\\2167', 'D:\\oj\\data\\2167', '', '19880101\r\n19880111\r\n19880117\r\n19880129\r\n19880221\r\n……', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style></p>\r\n<p style="margin-bottom: 0cm;">&ldquo;&hellip;&hellip;&rdquo;代表后面还有素数没有输出。你输出时也要将后面的素数输出。&lt;/p>\r\n<p><style type="text/css">p { margin-bottom: 0.21cm; }\r\n\r\n\r\n	\r\n	\r\n	\r\n	\r\n\r\n\r\n“……”代表后面还有素数没有输出。你输出时也要将后面的素数输出。&lt;/style></p>', '浙江传媒学院2011校赛', '', '2011-06-12 08:39:38', 1000, 131072, 'Y', NULL, 1, 1, 100, 0, 0, 1, 1, 1000, 10, 'power721'),
(2168, '区间交交', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style></p>\r\n<p align="CENTER" style="margin-bottom: 0cm;"><font color="#000000"><font face="黑体, SimHei"><font size="6" style="font-size: 22pt;"><b>念奴娇&lt;/b></font></font><font face="黑体, SimHei"><font size="6" style="font-size: 22pt;"><b>&middot;</b></font></font><font face="黑体, SimHei"><font size="6" style="font-size: 22pt;"><b>赤壁怀古&lt;/b></font></font></font></p>\r\n<p align="CENTER" style="margin-bottom: 0cm;"></p>\r\n<p align="CENTER" style="margin-bottom: 0cm; line-height: 0.64cm;"><font color="#000000"><b>大江东去</b></font><font face="DejaVu Serif, serif"><font color="#000000"><font face="Arial, sans-serif"><b>,</b></font></font></font></p>\r\n<p align="CENTER" style="text-indent: 0.74cm; margin-bottom: 0cm; line-height: 0.64cm;"><font color="#000000"><b>浪淘尽，</b></font></p>\r\n<p align="CENTER" style="text-indent: 0.74cm; margin-bottom: 0cm; line-height: 0.64cm;"><font color="#000000"><b>千古风流人物。&lt;/b></font></p>\r\n<p align="CENTER" style="text-indent: 0.74cm; margin-bottom: 0cm; line-height: 0.64cm;"><font color="#000000"><b>故垒西边，&lt;/b></font></p>\r\n<p align="CENTER" style="text-indent: 0.74cm; margin-bottom: 0cm; line-height: 0.64cm;"><font color="#000000"><b>人道是，</b></font></p>\r\n<p align="CENTER" style="text-indent: 0.74cm; margin-bottom: 0cm; line-height: 0.64cm;"><font color="#000000"><b>三国周郎赤壁。&lt;/b></font></p>\r\n<p align="CENTER" style="text-indent: 0.74cm; margin-bottom: 0cm; line-height: 0.64cm;"><font color="#000000"><b>乱石穿空，&lt;/b></font></p>\r\n<p align="CENTER" style="text-indent: 0.74cm; margin-bottom: 0cm; line-height: 0.64cm;"><font color="#000000"><b>惊涛拍岸，&lt;/b></font></p>\r\n<p align="CENTER" style="text-indent: 0.74cm; margin-bottom: 0cm; line-height: 0.64cm;"><font color="#000000"><b>卷起千堆雪。&lt;/b></font></p>\r\n<p align="CENTER" style="text-indent: 0.74cm; margin-bottom: 0cm; line-height: 0.64cm;"><font color="#000000"><b>江山如画，&lt;/b></font></p>\r\n<p align="CENTER" style="text-indent: 0.74cm; margin-bottom: 0cm; line-height: 0.64cm;"><font color="#000000"><b>一时多少豪杰。&lt;/b></font></p>\r\n<p align="CENTER" style="text-indent: 0.74cm; margin-bottom: 0cm; line-height: 0.64cm;"></p>\r\n<p align="CENTER" style="text-indent: 0.74cm; margin-bottom: 0cm;"><font color="#000000"><b>遥想公瑾当年，&lt;/b></font></p>\r\n<p align="CENTER" style="text-indent: 0.74cm; margin-bottom: 0cm;"><font color="#000000"><b>小乔初嫁了，</b></font></p>\r\n<p align="CENTER" style="text-indent: 0.74cm; margin-bottom: 0cm;"><font color="#000000"><b>雄姿英发。&lt;/b></font></p>\r\n<p align="CENTER" style="text-indent: 0.74cm; margin-bottom: 0cm;"><font color="#000000"><b>羽扇纶巾，&lt;/b></font></p>\r\n<p align="CENTER" style="text-indent: 0.74cm; margin-bottom: 0cm;"><font color="#000000"><b>谈笑间，</b></font></p>\r\n<p align="CENTER" style="text-indent: 0.74cm; margin-bottom: 0cm;"><font color="#000000"><b>樯橹灰飞烟灭。&lt;/b></font></p>\r\n<p align="CENTER" style="text-indent: 0.74cm; margin-bottom: 0cm;"><font color="#000000"><b>故国神游，&lt;/b></font></p>\r\n<p align="CENTER" style="text-indent: 0.74cm; margin-bottom: 0cm;"><font color="#000000"><b>多情应笑我，</b></font></p>\r\n<p align="CENTER" style="text-indent: 0.74cm; margin-bottom: 0cm;"><font color="#000000"><b>早生华发。&lt;/b></font></p>\r\n<p align="CENTER" style="text-indent: 0.74cm; margin-bottom: 0cm;"><font color="#000000"><b>人生如梦，&lt;/b></font></p>\r\n<p align="CENTER" style="text-indent: 0.74cm; margin-bottom: 0cm;"><font color="#000000"><b>一尊还酹江月。&lt;/b></font></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;"></p>\r\n<p style="margin-bottom: 0cm;"><font face="DejaVu Serif, serif">	</font>刘备今年终于进入浙江传媒学院了，想当年在高中的那场数学之战真是惊心动魄。为了能够顺利借到东风，诸葛亮将两组区间放在一起。将它们共同的部分提取出来，然后向上苍祷告。于是玉皇大帝就命令风神助卧龙一臂之力了。&lt;/p>\r\n<p style="margin-bottom: 0cm;"><font face="DejaVu Serif, serif">	</font>如今，刘备问卧龙，曰：&amp;ldquo;军师，&lt;font face="DejaVu Serif, serif">How long </font>你提取出的区间？&rdquo;卧龙笑而不语，羽扇一扇便说，他的学生可以告诉刘备！你可以将这两组区间相交的部分在数轴上线段的长度告诉刘备么？</p>\r\n<p></p>', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style></p>\r\n<p style="text-indent: 0.74cm; margin-bottom: 0cm;">数据只有两行代表当年诸葛亮用来提取的两组区间。每行的第一个自然数<font face="DejaVu Serif, serif">N (0&lt;=N&lt;100)</font>表示该组区间的数量，接着<font face="DejaVu Serif, serif">N</font>对小数&lt;font face="DejaVu Serif, serif">si,ei</font>表示区间的开始和结束。&lt;/p>\r\n<p style="margin-bottom: 0cm;"></p>\r\n<p></p>', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style></p>\r\n<p style="margin-bottom: 0cm;">输出区间交集的长度输出来，结果保留三位小数。&lt;/p>\r\n<p></p>', 'D:\\oj\\data\\2168', 'D:\\oj\\data\\2168', '2 1 10 14 17\r\n3 3 7 9 15 16 18', '7.000', '<p><style type="text/css">p { margin-bottom: 0.21cm; }</style></p>\r\n<p style="margin-bottom: 0cm;"><font face="DejaVu Serif, serif">Sample</font>中的结果是这样求出的：&lt;font face="DejaVu Serif, serif">(7-3) + (10-9) + (15-14) + (17-16) = 7</font>。&lt;/p>\r\n<p style="margin-bottom: 0cm;"></p>\r\n<p></p>', '浙江传媒学院2011校赛', '', '2011-06-10 19:40:22', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 50, 'power721'),
(2169, '子网掩码', '<p>子网掩码计算方法 <br />\r\n&nbsp;<br />\r\n子网掩码是用来判断任意两台计算机的IP地址是否属于同一子网络的根据。&lt;/p>\r\n<p>最为简单的理解就是两台计算机各自的IP地址与子网掩码进行AND运算后，如果得出的结果是相同的，则说明这两台计算机是处于同一个子网络上的，可以进行直接的通讯。就这么简单。&lt;/p>\r\n<p>请看以下示例：&lt;/p>\r\n<p>运算演示之一：aa <br />\r\nI P 地址　 192.168.0.1 <br />\r\n子网掩码　 255.255.255.0 <br />\r\nAND运算</p>\r\n<p>转化为二进制进行运算： <br />\r\nI P 地址　11010000.10101000.00000000.00000001 <br />\r\n子网掩码　11111111.11111111.11111111.00000000 <br />\r\nAND运算</p>\r\n<p>　　　　　11010000.10101000.00000000.00000000 <br />\r\n转化为十进制后为：&lt;/p>\r\n<p>　　　　　　192.168.0.0</p>\r\n<p><br />\r\n运算演示之二： <br />\r\nI P 地址　 192.168.0.254 <br />\r\n子网掩码　 255.255.255.0 <br />\r\nAND运算</p>\r\n<p>转化为二进制进行运算： <br />\r\nI P 地址　11010000.10101000.00000000.11111110 <br />\r\n子网掩码　11111111.11111111.11111111.00000000 <br />\r\nAND运算</p>\r\n<p>　　　　　11010000.10101000.00000000.00000000 <br />\r\n转化为十进制后为：&lt;/p>\r\n<p>　　　　　　192.168.0.0</p>\r\n<p><br />\r\n运算演示之三： <br />\r\nI P 地址　 192.168.0.4 <br />\r\n子网掩码　 255.255.255.0 <br />\r\nAND运算</p>\r\n<p>转化为二进制进行运算： <br />\r\nI P 地址　11010000.10101000.00000000.00000100 <br />\r\n子网掩码　11111111.11111111.11111111.00000000 <br />\r\nAND运算</p>\r\n<p>　　　　　11010000.10101000.00000000.00000000 <br />\r\n转化为十进制后为：&lt;/p>\r\n<p>　　　　　　192.168.0.0</p>\r\n<p><br />\r\n通过以上对三组计算机IP地址与子网掩码的AND运算后，我们可以看到它运算结果是一样的。均为192.168.0.0</p>\r\n<p>　　所以计算机就会把这三台计算机视为是同一子网络。&lt;/p>', '<p>第一行是本机IP地址</p>\r\n<p>第二行是子网掩码</p>\r\n<p>第三行整数N，表示后面有N个IP地址</p>\r\n<p>第1个IP地址</p>\r\n<p>......</p>\r\n<p>第N个IP地址</p>', '<p>计算并输出N个IP地址是否与本机在同一子网内。&lt;/p>\r\n<p>对于在同一子网的输出&amp;quot;INNER"</p>\r\n<p>对于在不同子网的输出&ldquo;OUTER&rdquo;</p>', 'D:\\oj\\data\\2169', 'D:\\oj\\data\\2169', '192.168.0.1\r\n255.255.255.0\r\n3\r\n192.168.0.2\r\n192.168.0.254\r\n192.168.1.2', 'INNER\r\nINNER\r\nOUTER', '', '浙江传媒学院2011校赛', '', '2011-06-10 19:40:22', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 33, 'power721'),
(2170, '月份牌', '<p>这里有一份2011年的月份牌可以参考&lt;/p>\r\n<pre>\r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31\r\n30 31\r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30\r\n                                                                               \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30\r\n31\r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31\r\n\r\n</pre>\r\n<pre>\r\n请编程实现输出给定年份（1-2050），给定月份(1-12)的月份牌。\r\n</pre>\r\n<pre>\r\n\r\n</pre>', '<p>两个数 N M,表示公元N年，M月。&lt;/p>', '<p>该月的月份牌，注意格式。&lt;/p>', 'D:\\oj\\data\\2170', 'D:\\oj\\data\\2170', '2012 12', 'Su Mo Tu We Th Fr Sa\r\n                   1\r\n 2  3  4  5  6  7  8\r\n 9 10 11 12 13 14 15\r\n16 17 18 19 20 21 22\r\n23 24 25 26 27 28 29\r\n30 31', '', '浙江传媒学院2011校赛', '', '2011-06-10 19:40:22', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 29, 'power721'),
(2171, '进程跟踪', '<p></p>\r\n<div class="index_main_left_1_top">\r\n<div class="index_main_left_1_top2">\r\n<p>linux程序调试strace命令详解</p>\r\n</div>\r\n</div>\r\n<p><br />\r\nstrace 命令是一种强大的工具，它能够显示所有由用户空间程序发出的系统调用。 <br />\r\nstrace 显示这些调用的参数并返回符号形式的值。strace 从内核接收信息，而且不需要以任何特殊的方式来构建内核。&lt;/p>\r\n<p>strace 的输出如下：</p>\r\n<p>brk(0) = 0&times;8062aa8 <br />\r\nbrk(0&times;8063000) = 0&times;8063000 <br />\r\nmmap2(NULL, 4096, PROT_READ, MAP_PRIVATE, 3, 0&times;92f) = 0&times;40016000&nbsp;</p>\r\n<p><br />\r\n每一行都是一条系统调用，等号左边是系统调用的函数名及其参数，右边是该调用的返回值。&lt;/p>', '<p>strace的输出结果&lt;/p>', '<p>将所有被调用过的系统调用名整理出来，去掉重复，按照字母排序。&lt;/p>', 'D:\\oj\\data\\2171', 'D:\\oj\\data\\2171', 'brk(0) = 0×8062aa8\r\nbrk(0×8063000) = 0×8063000\r\nmmap2(NULL, 4096, PROT_READ, MAP_PRIVATE, 3, 0×92f) = 0×40016000', 'brk\r\nmmap2', '', '浙江传媒学院2011校赛', '', '2011-06-10 19:40:22', 1000, 131072, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 33, 'power721'),
(2172, 'A+B Problem', 'Calculate a+b', 'Two integer a,b (0<=a,b<=10)', 'Output a+b', 'D:\\oj\\data\\2172', 'D:\\oj\\data\\2172', '1 2', '3', 'Q: Where are the input and the output?\r\n\r\nA: Your program shall always <font color=red>read input from stdin (Standard Input) and write output to stdout (Standard Output)</font>. For example, you can use ''scanf'' in C or ''cin'' in C++ to read from stdin, and use ''printf'' in C or ''cout'' in C++ to write to stdout.\r\n\r\nYou <font color=red>shall not output any extra data</font> to standard output other than that required by the problem, otherwise you will get a "Wrong Answer".\r\n\r\nUser programs are not allowed to open and read from/write to files. You will get a "Runtime Error" or a "Wrong Answer" if you try to do so. \r\n\r\nHere is a sample solution for problem 1000 using C++/G++:\r\n<pre>\r\n#include &lt;iostream&gt;\r\nusing namespace std;\r\nint  main()\r\n{\r\n    int a,b;\r\n    cin >> a >> b;\r\n    cout << a+b << endl;\r\n    return 0;\r\n}</pre>\r\nIt''s important that the return type of main() must be int when you use G++/GCC,or you may get compile error.\r\n\r\nHere is a sample solution for problem 1000 using C/GCC:\r\n<pre>\r\n#include &lt;stdio.h&gt;\r\n\r\nint main()\r\n{\r\n    int a,b;\r\n    scanf("%d %d",&a, &b);\r\n    printf("%d\\n",a+b);\r\n    return 0;\r\n}</pre>\r\nHere is a sample solution for problem 1000 using PASCAL:\r\n<pre>\r\nprogram p1000(Input,Output); \r\nvar \r\n  a,b:Integer; \r\nbegin \r\n   Readln(a,b); \r\n   Writeln(a+b); \r\nend.</pre>\r\nHere is a sample solution for problem 1000 using JAVA:\r\n\r\nNow java compiler is jdk 1.5, next is program for 1000\r\n<pre>\r\nimport java.io.*;\r\nimport java.util.*;\r\npublic class Main\r\n{\r\n            public static void main(String args[]) throws Exception\r\n            {\r\n                    Scanner cin=new Scanner(System.in);\r\n                    int a=cin.nextInt(),b=cin.nextInt();\r\n                    System.out.println(a+b);\r\n            }\r\n}</pre>\r\nOld program for jdk 1.4\r\n<pre>\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Main\r\n{\r\n    public static void main (String args[]) throws Exception\r\n    {\r\n        BufferedReader stdin = \r\n            new BufferedReader(\r\n                new InputStreamReader(System.in));\r\n\r\n        String line = stdin.readLine();\r\n        StringTokenizer st = new StringTokenizer(line);\r\n        int a = Integer.parseInt(st.nextToken());\r\n        int b = Integer.parseInt(st.nextToken());\r\n        System.out.println(a+b);\r\n    }\r\n}</pre>', 'POJ', '', '2011-06-10 19:40:23', 1000, 10240, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000000, 3, 'power721'),
(2173, 'Home Work', '<p>临近开学了，大家都忙着收拾行李准备返校，但I_Love_C却不为此担心! 因为他的心思全在暑假作业上：目前为止还未开动(-_-!!还以为他有多冷静呢)。&lt;br />\r\n暑假作业是很多张试卷，我们这些从试卷里爬出来的人都知道，卷子上的题目有选择题、填空题、简答题、证明题等。 而做选择题的好处就在于工作量很少，但又因为选择题题目都普遍很长。 如果有5张试卷，其中4张是选择题，最后一张是填空题，很明显做最后一张所花的时间要比前4张长很多。 但如果你只做了选择题，虽然工作量很少，但表面上看起来也已经做了4/5的作业了。 I_Love_C决定就用这样的方法来蒙混过关。&lt;br />\r\n他统计出了做完每一张试卷所需的时间以及它做完后能得到的价值（按上面的原理，选择题越多价值当然就越高咯）。 现在就请你帮他安排一下，用他仅剩的一点时间来做最有价值的作业。&lt;/p>', '<p>测试数据包括多组。 每组测试数据以两个整数M，N(1&le;M&le;20, 1&le;N&le;10000)开头，分别表示试卷的数目和I_Love_C剩下的时间。 接下来有M行，每行包括两个整数T，V(1&le;T&le;N,0&lt;V&lt;10000)，分别表示做完这张试卷所需的时间以及做完后能得到的价值！ 输入以0 0结束。&lt;/p>', '<p>对应每组测试数据输出I_Love_C能获得的最大价值。&lt;br />\r\n保留小数点2位&lt;/p>', 'D:\\oj\\data\\2173', 'D:\\oj\\data\\2173', '4 20\r\n4 10\r\n5 22\r\n10 3\r\n1 2\r\n0 0', '37.00', '<p>float的精度可能不够。 你应该使用double类型。 报告参见http://acm.zjgsu.edu.cn/Report/1001/1001.html</p>', '陆泽西', '', '2011-06-12 11:45:42', 1000, 65536, 'Y', NULL, 1, 2, 50, 1, 50, 1, 1, 1000000, 19, 'power721'),
(2174, 'Redraiment的遭遇', '<p>Redraiment的老家住在工业区，日耗电量非常大。是政府的眼中钉肉中刺，但又没办法，这里头住的可都是纳税大户呀。 今年7月，又传来了不幸的消息，政府要在7、8月对该区进行拉闸限电。但迫于压力，限电制度规则不会太抠门，政府决定从7月1日停电，然后隔一天到7月3日再停电，再隔两天到7月6日停电，一次下去，每次都比上一次晚一天。 Redraiment可是软件专业的学生，怎么离得开计算机。如果停电，就&amp;ldquo;英雄无用武之地&amp;rdquo;了。呵呵。 所以他开始盘算起自己回家的日子了，他想知道自己到家后到底要经历多少天倒霉的停电。你能帮他算一算吗？&lt;/p>', '<p>输入包括多组数据。 每组数据包括一行:redraiment到家的日期。 输入以0/0结束。&lt;/p>', '<p>对应每个输入包括一个输出。&lt;br />\r\n为redraiment回家后停电的天数(包括到家那天)。&lt;/p>', 'D:\\oj\\data\\2174', 'D:\\oj\\data\\2174', '8/31\r\n0/0', '0', '<p>报告参见http://acm.zjgsu.edu.cn/Report/1002/1002.html</p>', 'Redraiment', '', '2011-06-11 17:33:18', 1000, 131072, 'Y', NULL, 1, 1, 100, 0, 0, 1, 1, 1000000, 10, 'power721'),
(2175, '1、2、3、4、5...', '<p><img align="right" src="Image/1003/1.jpg" alt="" /> 浙江工商大学校园里绿树成荫，环境非常舒适，因此也引来一批动物朋友来此居住。&lt;br />\r\n童心未泯的redraiment就经常带些碎面包什么的去广场喂鸽子和兔子，并和它们玩耍。一点也不像大学生，还是一副老不正经的样子，呵呵。&lt;br />\r\n随着鸽子和兔子数目的增多，redraiment带的那点食物已经不够它们瓜分了。为了能让自己的好朋友吃的饱饱的，redraiment决定统计一下有多少只鸽子和有多少只兔子，以便带来足够的食物。一、二、三、四、五...他开始数了。&lt;br />\r\n现在，他已经知道有这些鸽子和兔子一共有n个头和m只脚。请你帮他写个程序计算一下一共有多少只鸽子和兔子。&lt;/p>', '<p>输入包括多组数据。 每行包括2个数据：n、m(代表上面题目中提到的意思1&le;n, m&le;2<sup>30</sup>)。 n、m都是整数。 输入以0 0作为结束。&lt;/p>', '<p>每组数据的输出都只有一行，分别是鸽子的数量和兔子数量。 如果输入的测试数据不能求得结果，那肯定是redraiment这个马大哈数错了，就输出"Error"提示他。&lt;/p>', 'D:\\oj\\data\\2175', 'D:\\oj\\data\\2175', '35 94\r\n1 3\r\n0 0', '23 12\r\nError', '<p>报告参见http://acm.zjgsu.edu.cn/Report/1003/1003.html</p>', 'Redraiment', '', '2011-06-11 13:09:36', 1000, 65536, 'Y', NULL, 0, 1, 0, 1, 100, 1, 0, 1000000, 15, 'power721'),
(2176, '渊子赛马', '<p>赛马是一古老的游戏，早在公元前四世纪的中国，处在诸侯割据的状态，历史上称为&amp;ldquo;战国时期&rdquo;。在魏国作官的孙膑，因为受到同僚庞涓的迫害，被齐国使臣救出后，到达齐国国都。  赛马是当时最受齐国贵族欢迎的娱乐项目。上至国王，下到大臣，常常以赛马取乐，并以重金赌输赢。田忌多次与国王及其他大臣赌输赢，屡赌屡输。一天他赛马又输了，回家后闷闷不乐。孙膑安慰他说：&ldquo;下次有机会带我到马场看看，也许我能帮你。&amp;rdquo;   孙膑仔细观察后发现，田忌的马和其他人的马相差并不远，只是策略运用不当，以致失败。 比赛前田忌按照孙膑的主意，用上等马鞍将下等马装饰起来，冒充上等马，与齐王的上等马比赛。第二场比赛，还是按照孙膑的安排，田忌用自己的上等马与国王的中等马比赛，在一片喝彩中，只见田忌的马竟然冲到齐王的马前面，赢了第二场。关键的第三场，田忌的中等马和国王的下等马比赛，田忌的马又一次冲到国王的马前面，结果二比一，田忌赢了国王。 就是这么简单，现在渊子也来赛一赛马。假设每匹马都有恒定的速度，所以速度大的马一定比速度小的马先到终点（没有意外！！）。不允许出现平局。最后谁赢的场数多于一半(不包括一半)，谁就是赢家(可能没有赢家)。渊子有N(1&le;N&le;1000)匹马参加比赛。对手的马的数量与渊子马的数量一样，并且知道所有的马的速度。聪明的你来预测一下这场世纪之战的结果，看看渊子能否赢得比赛。&lt;/p>', '<p>输入有多组测试数据。 每组测试数据包括3行： 第一行输入N(1&le;N&le;1000)。表示马的数量。 第二行有N个整型数字，即渊子的N匹马的速度。 第三行有N个整型数字，即对手的N匹马的速度。 当N为0时退出。&lt;/p>', '<p>若通过聪明的你精心安排，如果渊子能赢得比赛，那么输出&amp;ldquo;YES&rdquo;。 否则输出&ldquo;NO&rdquo;。&lt;/p>', 'D:\\oj\\data\\2176', 'D:\\oj\\data\\2176', '5\r\n2 3 3 4 5\r\n1 2 3 4 5\r\n4\r\n2 2 1 2\r\n2 2 3 1\r\n0', 'YES\r\nNO', '<p>报告参见http://acm.zjgsu.edu.cn/Report/1004/1004.html</p>', '王晓渊', '', '2011-06-12 12:07:09', 1000, 65536, 'Y', NULL, 1, 1, 100, 0, 0, 1, 1, 1000000, 62, 'power721'),
(2177, 'Hero In Maze', '<p>500年前，Jesse是我国最卓越的剑客。他英俊潇洒，而且机智过人^_^。&lt;br />\r\n突然有一天，Jesse心爱的公主被魔王困在了一个巨大的迷宫中。Jesse听说这个消息已经是两天以后了，他知道公主在迷宫中还能坚持T天，他急忙赶到迷宫，开始到处寻找公主的下落。 时间一点一点的过去，Jesse还是无法找到公主。最后当他找到公主的时候，美丽的公主已经死了。从此Jesse郁郁寡欢，茶饭不思，一年后追随公主而去了。T_T 500年后的今天，Jesse托梦给你，希望你帮他判断一下当年他是否有机会在给定的时间内找到公主。&lt;br />\r\n他会为你提供迷宫的地图以及所剩的时间T。请你判断他是否能救出心爱的公主。&lt;/p>', '<p>题目包括多组测试数据。 每组测试数据以三个整数N,M,T(0&lt;n, m&le;20, t&gt;0)开头，分别代表迷宫的长和高，以及公主能坚持的天数。 紧接着有M行，N列字符，由&amp;quot;."，&amp;quot;*"，&amp;quot;P"，&amp;quot;S"组成。其中 "." 代表能够行走的空地。 "*" 代表墙壁，Jesse不能从此通过。 "P" 是公主所在的位置。 "S" 是Jesse的起始位置。 每个时间段里Jesse只能选择&ldquo;上、下、左、右&rdquo;任意一方向走一步。 输入以0 0 0结束。&lt;/p>', '<p>如果能在规定时间内救出公主输出&amp;ldquo;YES&rdquo;，否则输出&amp;ldquo;NO&rdquo;。&lt;/p>', 'D:\\oj\\data\\2177', 'D:\\oj\\data\\2177', '4 4 10\r\n....\r\n....\r\n....\r\nS**P\r\n0 0 0', 'YES', '<p>报告参见http://acm.zjgsu.edu.cn/Report/1005/1005.html</p>', '陆泽西', '', '2011-06-12 17:44:58', 1000, 65536, 'Y', NULL, 0, 1, 0, 1, 100, 1, 0, 1000000, 11, 'power721'),
(2178, 'Redraiment猜想', '<p>redraiment在家极度无聊，于是找了张纸开始统计素数的个数。 设函数f(n)返回从1-&gt;n之间素数的个数。 redraiment发现:  f(1)   = 0 f(10)  = 4 f(100) = 25 ...  满足g(m) = 17 * m<sup>2</sup> / 3 - 22 * m / 3 + 5 / 3 其中m为n的位数。 他很激动，是不是自己发现了素数分布的规律了！ 请你设计一个程序，求出1-&gt;n范围内素数的个数，来验证redraiment是不是正确的，也许还可以得诺贝尔奖呢。^_^</p>', '<p>输入包括多组数据。 每组数据仅有一个整数n (1&le;n&le;100000000)。 输入以０结束</p>', '<p>对于每组数据输入，输出一行，为1-&gt;n(包括n)之间的素数的个数。&lt;/p>', 'D:\\oj\\data\\2178', 'D:\\oj\\data\\2178', '1\r\n10\r\n65\r\n100\r\n0', '0\r\n4\r\n18\r\n25', '<p>报告参见http://acm.zjgsu.edu.cn/Report/1006/1006.html</p>', 'Redraiment', '', '2011-06-10 19:40:23', 1000, 10240, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000000, 5, 'power721'),
(2179, '童年生活二三事', '<p>Redraiment小时候走路喜欢蹦蹦跳跳，他最喜欢在楼梯上跳来跳去。 但年幼的他一次只能走上一阶或者一下子蹦上两阶。 现在一共有N阶台阶，请你计算一下Redraiment从第0阶到第N阶共有几种走法。&lt;/p>', '<p>输入包括多组数据。 每组数据包括一行:N(1&le;N&le;40)。 输入以0结束。&lt;/p>', '<p>对应每个输入包括一个输出。 为redraiment到达第n阶不同走法的数量。&lt;/p>', 'D:\\oj\\data\\2179', 'D:\\oj\\data\\2179', '1\r\n2\r\n0', '1\r\n2', '<p>报告参见http://acm.zjgsu.edu.cn/Report/1007/1007.html</p>', 'Redraiment', '', '2011-06-10 22:30:53', 1000, 65536, 'Y', NULL, 4, 4, 100, 0, 0, 3, 4, 1000000, 19, 'power721'),
(2180, 'University', '<pre>\r\n在大学里，很多单词都是一词多义，偶尔在文章里还要用引申义。这困扰Redraiment很长的时间。\r\n他开始搜集那些单词的所有意义。他发现了一些规律，例如\r\n“a”能用“e”来代替, “c”能用“f”来代替……\r\n现在他给出了字母的替换规则，如下所示，A被E替换，B被C替换，依次类推。\r\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\r\nE C F A J K L B D G H I V W Z Y M N O P Q R S T U X\r\na b c d e f g h i j k l m n o p q r s t u v w x y z\r\ne r w q t y g h b n u i o p s j k d l f a z x c v m\r\n</pre>', '本题包括多组测试数据。\r\n每组测试数据为一行：为仅由字母和空格组成的字符串(空格不变)。\r\n输入以单行“#”结束。', '对应每组测试数据，替换后输出它的引申义。', 'D:\\oj\\data\\2180', 'D:\\oj\\data\\2180', 'Ilttabaje zaujljg\r\n#', 'Different meaning', '报告参见http://acm.zjgsu.edu.cn/Report/1008/1008.html', '陆泽西', '', '2011-06-10 22:42:35', 1000, 65536, 'Y', NULL, 2, 2, 100, 0, 0, 2, 2, 1000000, 13, 'power721'),
(2181, '目标柏林', '<img src="Image/1009/1.jpg" align=right>\r\n1945年初，苏军和英美联军已从东西两面攻入德国国境。\r\n4月初，在苏军和英美联军的夹击下，德军只能龟缩在以柏林为中心的德国东部的狭长地带，成了瓮中之鳖。\r\n但希特勒困兽犹斗，一方面发出摧毁一切设施，实行“焦土”政策的指令；\r\n另一方面下令把德国分为南北两个行政区，各自作战，他自己则固守柏林。\r\n在这一天，苏军结果一份传自柏林的加密电文。经初步破译，显示希特勒要调集100万兵力，\r\n在柏林周围筑起了三层防卫圈，并集中3300架飞机，1500多辆坦克，1万门火炮和迫击炮，准备死守柏林。\r\n形势很危机，我们需要马上破译所有密码。请你来遍个程序帮忙破译。&lt;br>\r\n苏军知道德军用的加密方法是这样的：\r\n1.获得一段文字后，求出它的长度(包括空格)len。\r\n2.进入加密运算的第1步:把所有下标是1倍数的字符做顺时针旋转。\r\n3.进入加密运算的第2步:把所有下标是2倍数的字符做逆时针旋转。\r\n4.进入加密运算的第3步:把所有下标是3倍数的字符做顺时针旋转。\r\n5.按上面的规则，第奇数步按顺时针旋转，偶数步按逆时针旋转，一直到第len步为止。&lt;br>\r\n比如原文是:abcde\r\n1.获得长度len = 5\r\n2.1的倍数有1、2、3、4、5，所以把这5个字符按顺时针旋转，得到eabcd。\r\n3.2的倍数有2、4，所以把这2个字符按逆时针旋转，得到ecbad。\r\n4.3的倍数有3，所以把这1个字符按顺时针旋转，得到ecbad。\r\n5.4的倍数有4，所以把这1个字符按逆时针旋转，得到ecbad。\r\n6.5的倍数有5，所以把这1个字符按顺时针旋转，得到ecbad。\r\n最后的结果是ecbad。&lt;br>\r\n现在给你加密后的文章，让你还原成原来的文章。\r\n</img>', '输入一篇加密后的文章，每行为一段。每段不超过1000个字符。\r\n输入以文件结束(EOF)为止。', '输出解密后的文章。\r\n每段一行。', 'D:\\oj\\data\\2181', 'D:\\oj\\data\\2181', 'ecbad', 'abcde', '<pre>\r\nC and C++ language can use :\r\n\r\nchar input[1001];\r\nwhile(gets(input))\r\n{\r\n	...\r\n}\r\n\r\n报告参见http://acm.zjgsu.edu.cn/Report/1009/1009.html\r\n</pre>', 'Redraiment', '', '2011-06-10 19:40:23', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000000, 5, 'power721');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(2182, 'Rails', '<p>There is a famous railway station in PopPush City. Country there is incredibly hilly. The station was built in last century. Unfortunately, funds were extremely limited that time. It was possible to establish only a surface track. Moreover, it turned out that the station could be only a dead-end one (see picture) and due to lack of available space it could have only one track.</p>\r\n<center><img alt="" src="http://acm.zjgsu.edu.cn/JudgeOnline/Image/1010/1.jpg" /></center>\r\n<p>The local tradition is that every train arriving from the direction A continues in the direction B with coaches reorganized in some way. Assume that the train arriving from the direction A has N &lt;= 1000 coaches numbered in increasing order 1, 2, ..., N. The chief for train reorganizations must know whether it is possible to marshal coaches continuing in the direction B so that their order will be a1, a2, ..., aN. Help him and write a program that decides whether it is possible to get the required order of coaches. You can assume that single coaches can be disconnected from the train before they enter the station and that they can move themselves until they are on the track in the direction B. You can also suppose that at any time there can be located as many coaches as necessary in the station. But once a coach has entered the station it cannot return to the track in the direction A and also once it has left the station in the direction B it cannot return back to the station.</p>', '<p>The input consists of blocks of lines. Each block except the last describes one train and possibly more requirements for its reorganization. In the first line of the block there is the integer N described above. In each of the next lines of the block there is a permutation of 1, 2, ..., N. The last line of the block contains just 0.   The last block consists of just one line containing 0.</p>', '<p>The output contains the lines corresponding to the lines with permutations in the input. A line of the output contains Yes if it is possible to marshal the coaches in the order required on the corresponding line of the input. Otherwise it contains No. In addition, there is one empty line after the lines corresponding to one block of the input. There is no line in the output corresponding to the last ``null'''' block of the input.</p>', 'D:\\oj\\data\\2182', 'D:\\oj\\data\\2182', '5\r\n1 2 3 4 5\r\n5 4 1 2 3\r\n0\r\n6\r\n6 5 4 3 2 1\r\n0\r\n0', 'Yes\r\nNo\r\n\r\nYes', '', 'ZJGSU warmup 1', '', '2011-06-10 19:40:23', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 1000000, 2, 'power721'),
(2183, 'Shoot-out', '<img src="images/problem/pic2183_0" align="right">\r\nThis is back in the Wild West where everybody is fighting everybody. \r\nIn particular, there are n cowboys, each with a revolver. These are rather civilized cowboys, so they have decided to take turns firing their guns until only one is left standing. Each of them has a given probability of hitting his target, and they all know each other’s probability. Furthermore, they are geniuses and always know which person to aim at in order to maximize their winning chance, so they are indeed peculiar cowboys. If there are several equally good targets, one of those will be chosen at random. Note that a cowboy’s code of ethics forces him to do his best at killing one of his opponents, even if intentionally missing would have increased his odds (yes, this can happen!) \r\n</img>', 'On the first line of the input is a single positive integer t, telling the number of test cases \r\nto follow. Each case consists of one line with an integer 2 ≤ n ≤ 13 giving the number \r\nof cowboys, followed by n positive integers giving hit percentages for the cowboys in \r\nthe order of their turns.', 'For each test case, output one line with the percent probabilities for each of them \r\nsurviving, in the same order as the input. The numbers should be separated by a \r\nspace and be correctly rounded to two decimal places.', 'D:\\oj\\data\\2183', 'D:\\oj\\data\\2183', '5\r\n2 1 100\r\n3 100 99 98\r\n3 50 99 100\r\n3 50 99 99\r\n3 50 99 98', '1.00 99.00\r\n2.00 0.00 98.00\r\n25.38 74.37 0.25\r\n25.38 49.50 25.12\r\n25.63 24.63 49.74', '', '', '', '2011-06-10 19:40:23', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 18, 'power721'),
(2184, 'Tour Guide', '<img src="images/problem/pic2184_0" align="right">\r\nYou are working as a guide on a tour bus for retired people, and today you have taken your regular Nordic seniors to The Gate of Heavenly Peace. You let them have a lunch break where they could do whatever they like. Now you have to get them back to the bus, but they are all walking in random directions. You try to intersect them, and send them straight back to the bus. Minimize the time before the last person is in the bus. You will always be able to run faster than any of the tour guests, and they walk with constant speed, no matter what you tell them. The seniors walk in straight lines, and the only way of changing their direction is to give them promises of camphor candy. A senior will neither stop at nor enter the bus before given such a promise. \r\n</img>', 'A number of test cases consisting of: A line with an integer 1 ≤ n ≤ 8, the number of people on the tour. A line with an floating point number 1 < v ≤ 100, your maximum speed (you start in the bus at the origin). Then follow n lines, each containing four floating point numbers xi yi vi ai, the starting coordinates (&#8722;10<sup>6</sup> ≤ xi, yi ≤ 10<sup>6</sup>), speed (1 ≤ vi < 100) and direction (0 ≤ ai < 2π) of each of the tour guests. \r\n\r\nThe input is terminated by a case with n = 0, which should not be processed. All floating point numbers in the input will be written in standard decimal notation, and have no more than 10 digits.', 'For each test case, print a line with the time it takes before everybody is back in the bus (the origin). Round the answer to the nearest integer. The answer will never be larger than 10<sup>6</sup>.', 'D:\\oj\\data\\2184', 'D:\\oj\\data\\2184', '1\r\n50.0\r\n125.0 175.0 25.0 1.96\r\n3\r\n100.0\r\n40.0 25.0 20.0 5.95\r\n-185.0 195.0 6.0 2.35\r\n30.0 -80.0 23.0 2.76\r\n0', '20\r\n51', 'Q: Should 2.5000000000 be rounded to 3? \r\nA: We have constructed the test cases such that it does not matter.', '', '', '2011-06-10 19:40:23', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721'),
(2185, 'Card Trick', '<img src="images/problem/pic2185_0" align="right">\r\nThe magician shuffles a small pack of cards, holds it face down and performs the following procedure: \r\n<ul>\r\n<li>The top card is moved to the bottom of the pack. The new top card is dealt face up onto the table. It is the Ace of Spades. \r\n<li>Two cards are moved one at a time from the top to the bottom. The next card is dealt face up onto the table. It is the Two of Spades. \r\n<li>Three cards are moved one at a time… \r\n<li>This goes on until the nth and last card turns out to be the n of Spades. \r\n</ul>\r\nThis impressive trick works if the magician knows how to arrange the cards beforehand (and knows how to give a false shuffle). Your program has to determine the initial order of the cards for a given number of cards, 1 ≤ n ≤ 13. \r\n</img>', 'On the first line of the input is a single positive integer, telling the number of test cases to follow. Each case consists of one line containing the integer n.', 'For each test case, output a line with the correct permutation of the values 1 to n, space separated. The first number showing the top card of the pack, etc…', 'D:\\oj\\data\\2185', 'D:\\oj\\data\\2185', '2\r\n4\r\n5', '2 1 4 3\r\n3 1 4 5 2', '', '', '', '2011-06-10 19:40:23', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 39, 'power721'),
(2186, 'Necklace Decomposition', '<img src="images/problem/pic2186_0" align="right">\r\nThe set of cyclic rotations of a string are the strings obtained by embedding the string clockwise on a ring, with the first character following on the last, starting at any character position and moving clockwise on the ring until the character preceeding the starting character is reached. A string is a necklace if it is the lexicographically smallest among all its cyclic rotations. For instance, for the string 01011 the cyclic rotations are (10110,01101,11010,10101,01011), and furthermore 01011 is the smallest string and hence, a necklace. \r\nAny string S can be written in a unique way as a concatenation S = T1T2 . . . Tk of necklaces Ti such that Ti+1 < Ti for all i = 1, . . . , k - 1, and TiTi+1 is not a necklace for any i = 1, . . . , k - 1. This representation is called the necklace decomposition of the string S, and your task is to find it. \r\nThe relation < on two strings is the lexicographical order and has the usual interpretation: A < B if A is a proper prefix of B or if A is equal to B in the first j - 1 positions but smaller in the jth position for some j. For instance, 001 < 0010 and 1101011 < 1101100. \r\n</img>', 'On the first line of the input is a single positive integer n, telling the number of test scenarios to follow. Each scenario consists of one line containing a non-empty string of zeros and ones of length at most 100.', 'For each scenario, output one line containing the necklace decomposition of the string. The necklaces should be written as ''('' necklace '')''.', 'D:\\oj\\data\\2186', 'D:\\oj\\data\\2186', '5\r\n0\r\n0101\r\n0001\r\n0010\r\n11101111011', '(0)\r\n(0101)\r\n(0001)\r\n(001)(0)\r\n(111)(01111)(011)', '', '', '', '2011-06-10 19:40:23', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 18, 'power721'),
(2187, 'Crashing Robots', 'In a modernized warehouse, robots are used to fetch the goods. Careful planning is needed to ensure that the robots reach their destinations without crashing into each other. Of course, all warehouses are rectangular, and all robots occupy a circular floor space with a diameter of 1 meter. Assume there are N robots, numbered from 1 through N. You will get to know the position and orientation of each robot, and all the instructions, which are carefully (and mindlessly) followed by the robots. Instructions are processed in the order they come. No two robots move simultaneously; a robot always completes its move before the next one starts moving. \r\n\r\nA robot crashes with a wall if it attempts to move outside the area of the warehouse, and two robots crash with each other if they ever try to occupy the same spot.', 'The first line of input is K, the number of test cases. Each test case starts with one line consisting of two integers, 1 <= A, B <= 100, giving the size of the warehouse in meters. A is the length in the EW-direction, and B in the NS-direction. \r\n\r\nThe second line contains two integers, 1 <= N, M <= 100, denoting the numbers of robots and instructions respectively. \r\nThen follow N lines with two integers, 1 <= Xi <= A, 1 <= Yi <= B and one letter (N, S, E or W), giving the starting position and direction of each robot, in order from 1 through N. No two robots start at the same position. \r\n<center><img src="Image/1020/1.jpg"></img>\r\nFigure 1: The starting positions of the robots in the sample warehouse</center>\r\n\r\nFinally there are M lines, giving the instructions in sequential order. \r\nAn instruction has the following format: \r\n< robot #> < action> < repeat> \r\n\r\nWhere is one of \r\n<ul>\r\n<li>L: turn left 90 degrees, \r\n<li>R: turn right 90 degrees, or \r\n<li>F: move forward one meter,\r\n</ul>\r\nand 1 <= < repeat> <= 100 is the number of times the robot should perform this single move.', 'Output one line for each test case: \r\n<ul>\r\n<li>Robot i crashes into the wall, if robot i crashes into a wall. (A robot crashes into a wall if Xi = 0, Xi = A + 1, Yi = 0 or Yi = B + 1.) \r\n<li>Robot i crashes into robot j, if robots i and j crash, and i is the moving robot. \r\n<li>OK, if no crashing occurs.\r\n</ul>\r\nOnly the first crash is to be reported.', 'D:\\oj\\data\\2187', 'D:\\oj\\data\\2187', '4\r\n5 4\r\n2 2\r\n1 1 E\r\n5 4 W\r\n1 F 7\r\n2 F 7\r\n5 4\r\n2 4\r\n1 1 E\r\n5 4 W\r\n1 F 3\r\n2 F 1\r\n1 L 1\r\n1 F 3\r\n5 4\r\n2 2\r\n1 1 E\r\n5 4 W\r\n1 L 96\r\n1 F 2\r\n5 4\r\n2 3\r\n1 1 E\r\n5 4 W\r\n1 F 4\r\n1 L 1\r\n1 F 20', 'Robot 1 crashes into the wall\r\nRobot 1 crashes into robot 2\r\nOK\r\nRobot 1 crashes into robot 2', '', '', '', '2011-06-10 19:40:24', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 19, 'power721'),
(2188, 'Electrical Outlets', '<img src="images/problem/pic2188_0" align="right">\r\nRoy has just moved into a new apartment. Well, actually the apartment itself is not very new, even dating back to the days before people had electricity in their houses. Because of this, Roy''s apartment has only one single wall outlet, so Roy can only power one of his electrical appliances at a time. \r\n\r\nRoy likes to watch TV as he works on his computer, and to listen to his HiFi system (on high volume) while he vacuums, so using just the single outlet is not an option. Actually, he wants to have all his appliances connected to a powered outlet, all the time. The answer, of course, is power strips, and Roy has some old ones that he used in his old apartment. However, that apartment had many more wall outlets, so he is not sure whether his power strips will provide him with enough outlets now. \r\n\r\nYour task is to help Roy compute how many appliances he can provide with electricity, given a set of power strips. Note that without any power strips, Roy can power one single appliance through the wall outlet. Also, remember that a power strip has to be powered itself to be of any use. \r\n</img>', 'Input will start with a single integer 1 <= N <= 20, indicating the number of test cases to follow. Then follow N lines, each describing a test case. Each test case starts with an integer 1 <= K <= 10, indicating the number of power strips in the test case. Then follow, on the same line, K integers separated by single spaces, O1 O2 . . . OK, where 2 <= Oi <= 10, indicating the number of outlets in each power strip.', 'Output one line per test case, with the maximum number of appliances that can be powered.', 'D:\\oj\\data\\2188', 'D:\\oj\\data\\2188', '3\r\n3 2 3 4\r\n10 4 4 4 4 4 4 4 4 4 4\r\n4 10 10 10 10', '7\r\n31\r\n37', '', '', '', '2011-06-21 20:31:55', 1000, 65536, 'Y', NULL, 1, 1, 100, 0, 0, 1, 1, 1000, 10, 'power721'),
(2189, 'Watchdog', 'A company (name withheld) has an office building in the center of Lund. The building has a perfectly square roof with a number of hatches. Because of a series of burglaries where the perpetrators have entered through these hatches, it was decided to use a watchdog to guard the hatches. A particularly vicious but rather stupid breed of dog was chosen, and unfortunately the dog fell off the roof on its third watch. \r\nA new dog has been procured and it has been decided to attach a leash to its collar and attach the other end at some point on the roof. However, if the leash is too short the dog cannot reach all hatches, but if it is too long then the dog will fall off the building again. The leash has hooks at both ends, so no part of it is used to tie knots. The company wants the dog to reach the center of each hatch (the dog can reach exactly as far as the leash could reach if it were lying flat on the roof), but it does not want the leash to extend beyond the edge of the roof (to the edge is OK). They hope that by carefully choosing the length of the leash and where to attach it, the dog will be able to reach all hatches without risking falling off the building. A leash can only be attached at a point with integer coordinates (if the building is 10 by 10 meters, then the south-west corner of the building has coordinates (0, 0) and the north-east corner has coordinates (10, 10)). A leash cannot be attached at a point where there is a hatch. \r\nIf there is no place where you can attach a leash, reach all hatches but not reach beyond the edge of the roof, it is impossible to use this breed of dog, and the company will instead use a poodle (which is a less vicious type of dog, but also less prone to falling off buildings).', 'On the first line of the input is a single positive integer N, telling the number of test cases to follow. Each case starts with one line with two integers S H, where S is even, 2 <= S <= 40,and 1 <= H <= 50. S is the side of the square roof in meters and H is the number of hatches. \r\nThe following H lines each contain two integers X and Y. These are the coordinates of the hatches. Hatches will never lie outside the roof or on the roof''s perimeter. No two hatches will occupy the same position', 'For each test case, output one line containing the coordinates X Y at which to fasten the leash (if there are several possible points, output the one with smallest X, and if there are still several possibilities select the one with smallest Y among those with smallest X) such that a leash of suitable length allows access to all hatches without extending beyond the edge of the roof. If there is no such point, output "poodle" for that test case.', 'D:\\oj\\data\\2189', 'D:\\oj\\data\\2189', '3\r\n10 2\r\n6 6\r\n5 4\r\n20 2\r\n1 1\r\n19 19\r\n10 3\r\n1 1\r\n1 2\r\n1 3', '3 6\r\npoodle\r\n2 2', '', '', '', '2011-06-10 19:40:24', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 21, 'power721'),
(2190, 'Taxi Cab Scheme', 'Running a taxi station is not all that simple. Apart from the obvious demand for a centralised coordination of the cabs in order to pick up the customers calling to get a cab as soon as possible,there is also a need to schedule all the taxi rides which have been booked in advance.Given a list of all booked taxi rides for the next day, you want to minimise the number of cabs needed to carry out all of the rides. \r\nFor the sake of simplicity, we model a city as a rectangular grid. An address in the city is denoted by two integers: the street and avenue number. The time needed to get from the address a, b to c, d by taxi is |a - c| + |b - d| minutes. A cab may carry out a booked ride if it is its first ride of the day, or if it can get to the source address of the new ride from its latest,at least one minute before the new ride''s scheduled departure. Note that some rides may end after midnight.', 'On the first line of the input is a single positive integer N, telling the number of test scenarios to follow. Each scenario begins with a line containing an integer M, 0 < M < 500, being the number of booked taxi rides. The following M lines contain the rides. Each ride is described by a departure time on the format hh:mm (ranging from 00:00 to 23:59), two integers a b that are the coordinates of the source address and two integers c d that are the coordinates of the destination address. All coordinates are at least 0 and strictly smaller than 200. The booked rides in each scenario are sorted in order of increasing departure time.', 'For each scenario, output one line containing the minimum number of cabs required to carry out all the booked taxi rides.', 'D:\\oj\\data\\2190', 'D:\\oj\\data\\2190', '2\r\n2\r\n08:00 10 11 9 16\r\n08:07 9 16 10 11\r\n2\r\n08:00 10 11 9 16\r\n08:06 9 16 10 11', '1\r\n2', '', '', '', '2011-06-10 19:40:24', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 24, 'power721'),
(2191, 'Pseudo-random Numbers', 'Access to high-quality randomness is very important for many applications, especially in cryptography. Radioactive decay is somtimes used as a source of "true randomness", but this is a fairly slow procedure for getting random numbers. Also, in many applications it is important that the same “random” sequence can be produced in two different places. For these reasons one often uses a pseudo-random sequence instead. A pseudo-random sequence is a sequence that is, in fact, not random, but very hard to distinguish from a truly random sequence. A pseudo-random sequence should also be difficult to predict, i.e., given the first few elements of the sequence it should be difficult do determine some later, yet unseen, number in the sequence. \r\nThe Association of Cryptographic Machinery (ACM) has devised an algorithm for generating pseudo-random number sequences, but they have no idea how good it really is. Therefore they want you to test it. \r\nThe algorithm to generate a sequence of integers, where each integer is between 0 and B - 1 inclusive, is as follows: \r\n<ol>\r\n<li type="1">Start with any number (the seed) in base B. This number can contain hundreds of base B digits. \r\n<li type="1">The last digit (least significant) is output as the next element of the sequence. \r\n<li type="1">Create a new number by writing down the sum of all neighbouring digits from left to right. E.g., with B = 10, the number 845 would yield the number 129 (since 8 + 4 = 12 and 4 + 5 = 9). \r\n<li type="1">Repeat steps 2 and 3 as many times as needed, or until the number has only one base B digit. You get one more pseudo-random digit between 0 and B - 1 each time. \r\n</ol>\r\nIf we have B = 10 and the seed number is 845, then the next numbers will be 129, 311 (1 + 2 = 3, 2 + 9 = 11), 42 (3 + 1 = 4, 1 + 1 = 2), and 6 (4 + 2 = 6). As 6 is a single digit base 10 number, the algorithm terminates. The pseudo-random digits generated are 5, 9, 1, 2 and 6. \r\nYou will be testing the generator as follows. You will be given the first L elements output by the generator and an integer T > L. You are supposed to decide if the first T elements are completely determined by the first L elements. To check the robustness of your testing procedure the ACM have slipped in some impossible sequences, i.e. sequences that cannot be generated by any initial seed.', 'On the first line of the input is a single positive integer N, telling the number of test cases to follow. The first line of each test case consists of one integer B (2 <= B <= 1 000), the base. The second line consists of an integer L (1 <= L <= 100), followed by the L first elements of some sequence (the elements are written in base 10 and are between 0 and B - 1 inclusive). The third line consists of an integer T, (L < T <= 100 000), the element of the sequence to predict.', 'For each test case output, on a line of its own: \r\n\r\n"impossible" if no seed number can produce the given sequence. \r\n"unpredictable" if there exists a seed number that produces the given sequence but the first T elements are not completely determined by the first L elements. \r\n\r\nThe T:th element of the sequence in base 10, otherwise.', 'D:\\oj\\data\\2191', 'D:\\oj\\data\\2191', '3\r\n10\r\n5 5 9 6 7 0\r\n7\r\n16\r\n4 11 7 8 4\r\n12\r\n2\r\n5 0 1 1 1 0\r\n10', '8\r\nunpredictable\r\nimpossible', '', '', '', '2011-06-10 19:40:24', 3000, 29696, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 3000, 36, 'power721'),
(2192, 'Card Game Cheater', 'Adam and Eve play a card game using a regular deck of 52 cards. The rules are simple. The players sit on opposite sides of a table, facing each other. Each player gets k cards from the deck and, after looking at them, places the cards face down in a row on the table. Adam''s cards are numbered from 1 to k from his left, and Eve''s cards are numbered 1 to k from her right (so Eve''s i:th card is opposite Adam''s i:th card). The cards are turned face up, and points are awarded as follows (for each i ∈ {1, . . . , k}): \r\n\r\nIf Adam''s i:th card beats Eve''s i:th card, then Adam gets one point. \r\n\r\nIf Eve''s i:th card beats Adam''s i:th card, then Eve gets one point. \r\n\r\nA card with higher value always beats a card with a lower value: a three beats a two, a four beats a three and a two, etc. An ace beats every card except (possibly) another ace. \r\n\r\nIf the two i:th cards have the same value, then the suit determines who wins: hearts beats all other suits, spades beats all suits except hearts, diamond beats only clubs, and clubs does not beat any suit. \r\n\r\nFor example, the ten of spades beats the ten of diamonds but not the Jack of clubs. \r\nThis ought to be a game of chance, but lately Eve is winning most of the time, and the reason is that she has started to use marked cards. In other words, she knows which cards Adam has on the table before he turns them face up. Using this information she orders her own cards so that she gets as many points as possible. \r\nYour task is to, given Adam’s and Eve’s cards, determine how many points Eve will get if she plays optimally.', 'There will be several test cases. The first line of input will contain a single positive integer N giving the number of test cases. After that line follow the test cases. \r\nEach test case starts with a line with a single positive integer k <= 26 which is the number of cards each player gets. The next line describes the k cards Adam has placed on the table, left to right. The next line describes the k cards Eve has (but she has not yet placed them on the table). A card is described by two characters, the first one being its value (2, 3, 4, 5, 6, 7, 8 ,9, T, J, Q, K, or A), and the second one being its suit (C, D, S, or H). Cards are separated by white spaces. So if Adam''s cards are the ten of clubs, the two of hearts, and the Jack of diamonds, that could be described by the line \r\nTC 2H JD', 'For each test case output a single line with the number of points Eve gets if she picks the optimal way to arrange her cards on the table.', 'D:\\oj\\data\\2192', 'D:\\oj\\data\\2192', '3\r\n1\r\nJD\r\nJH\r\n2\r\n5D TC\r\n4C 5H\r\n3\r\n2H 3H 4H\r\n2D 3D 4D', '1\r\n1\r\n2', '', '', '', '2011-06-10 19:40:24', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 24, 'power721'),
(2193, 'Investment', 'John never knew he had a grand-uncle, until he received the notary''s letter. He learned that his late grand-uncle had gathered a lot of money, somewhere in South-America, and that John was the only inheritor. \r\nJohn did not need that much money for the moment. But he realized that it would be a good idea to store this capital in a safe place, and have it grow until he decided to retire. The bank convinced him that a certain kind of bond was interesting for him. \r\nThis kind of bond has a fixed value, and gives a fixed amount of yearly interest, payed to the owner at the end of each year. The bond has no fixed term. Bonds are available in different sizes. The larger ones usually give a better interest. Soon John realized that the optimal set of bonds to buy was not trivial to figure out. Moreover, after a few years his capital would have grown, and the schedule had to be re-evaluated. \r\nAssume the following bonds are available: \r\n\r\nValue Annualinterest \r\n4000 400 \r\n3000 250 \r\n\r\nWith a capital of e10 000 one could buy two bonds of $4 000, giving a yearly interest of $800. Buying two bonds of $3 000, and one of $4 000 is a better idea, as it gives a yearly interest of $900. After two years the capital has grown to $11 800, and it makes sense to sell a $3 000 one and buy a $4 000 one, so the annual interest grows to $1 050. This is where this story grows unlikely: the bank does not charge for buying and selling bonds. Next year the total sum is $12 850, which allows for three times $4 000, giving a yearly interest of $1 200. \r\nHere is your problem: given an amount to begin with, a number of years, and a set of bonds with their values and interests, find out how big the amount may grow in the given period, using the best schedule for buying and selling bonds.', 'The first line contains a single positive integer N which is the number of test cases. The test cases follow. \r\nThe first line of a test case contains two positive integers: the amount to start with (at most $1 000 000), and the number of years the capital may grow (at most 40). \r\nThe following line contains a single number: the number d (1 <= d <= 10) of available bonds. \r\nThe next d lines each contain the description of a bond. The description of a bond consists of two positive integers: the value of the bond, and the yearly interest for that bond. The value of a bond is always a multiple of $1 000. The interest of a bond is never more than 10% of its value.', 'For each test case, output ? on a separate line ? the capital at the end of the period, after an optimal schedule of buying and selling.', 'D:\\oj\\data\\2193', 'D:\\oj\\data\\2193', '1\r\n10000 4\r\n2\r\n4000 400\r\n3000 250', '14050', '', '', '', '2011-06-10 19:40:24', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 22, 'power721'),
(2194, 'Pipes', 'The construction of office buildings has become a very standardized task. Pre-fabricated modules are combined according to the customer''s needs, shipped from a faraway factory, and assembled on the construction site. However, there are still some tasks that require careful planning, one example being the routing of pipes for the heating system. \r\nA modern office building ismade up of squaremodules, one on each floor being a service module from which (among other things) hot water is pumped out to the other modules through the heating pipes. Each module (including the service module) will have heating pipes connecting it to exactly two of its two to four neighboring modules. Thus, the pipes have to run in a circuit, from the service module, visiting each module exactly once, before finally returning to the service module. Due to different properties of the modules, having pipes connecting a pair of adjacent modules comes at different costs. For example, some modules are separated by thick walls, increasing the cost of laying pipes. Your task is to, given a description of a floor of an office building, decide the cheapest way to route the heating pipes.', 'The first line of input contains a single integer, stating the number of floors to handle. Then follow n floor descriptions, each beginning on a new line with two integers, 2 <= r <= 10 and 2 <= c <= 10, defining the size of the floor ? r-by-c modules. Beginning on the next line follows a floor description in ASCII format, in total 2r + 1 rows, each with 2c + 2 characters, including the final newline. All floors are perfectly rectangular, and will always have an even number of modules. All interior walls are represented by numeric characters, ''0'' to ''9'', indicating the cost of routing pipes through the wall (see sample input).', 'For each test case, output a single line with the cost of the cheapest route.', 'D:\\oj\\data\\2194', 'D:\\oj\\data\\2194', '3\r\n4 3\r\n#######\r\n# 2 3 #\r\n#1#9#1#\r\n# 2 3 #\r\n#1#7#1#\r\n# 5 3 #\r\n#1#9#1#\r\n# 2 3 #\r\n#######\r\n4 4\r\n#########\r\n# 2 3 3 #\r\n#1#9#1#4#\r\n# 2 3 6 #\r\n#1#7#1#5#\r\n# 5 3 1 #\r\n#1#9#1#7#\r\n# 2 3 0 #\r\n#########\r\n2 2\r\n#####\r\n# 1 #\r\n#2#3#\r\n# 4 #\r\n#####', '28\r\n45\r\n10', '', '', '', '2011-06-10 19:40:24', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 24, 'power721'),
(2195, 'SETI', 'For some years, quite a lot of work has been put into listening to electromagnetic radio signals received from space, in order to understand what civilizations in distant galaxies might be trying to tell us. One signal source that has been of particular interest to the scientists at Universit&acute;e de Technologie Spatiale is the Nebula Stupidicus. \r\nRecently, it was discovered that if each message is assumed to be transmitted as a sequence of integers a0, a1, ...an-1 the function f (k) = ∑0<=i<=n-1aiki (mod p) always evaluates to values 0 <= f (k) <= 26 for 1 <= k <= n, provided that the correct value of p is used. n is of course the length of the transmitted message, and the ai denote integers such that 0 <= ai < p. p is a prime number that is guaranteed to be larger than n as well as larger than 26. It is, however, known to never exceed 30 000. \r\nThese relationships altogether have been considered too peculiar for being pure coincidences, which calls for further investigation. \r\nThe linguists at the faculty of Langues et Cultures Extraterrestres transcribe these messages to strings in the English alphabet to make the messages easier to handle while trying to interpret their meanings. The transcription procedure simply assigns the letters a..z to the values 1..26 that f (k) might evaluate to, such that 1 = a, 2 = b etc. The value 0 is transcribed to ''*'' (an asterisk). While transcribing messages, the linguists simply loop from k = 1 to n, and append the character corresponding to the value of f (k) at the end of the string. \r\nThe backward transcription procedure, has however, turned out to be too complex for the linguists to handle by themselves. You are therefore assigned the task of writing a program that converts a set of strings to their corresponding Extra Terrestial number sequences.', 'On the first line of the input there is a single positive integer N, telling the number of test cases to follow. Each case consists of one line containing the value of p to use during the transcription of the string, followed by the actual string to be transcribed. The only allowed characters in the string are the lower case letters ''a''..''z'' and ''*'' (asterisk). No string will be longer than 70 characters.', 'For each transcribed string, output a line with the corresponding list of integers, separated by space, with each integer given in the order of ascending values of i.', 'D:\\oj\\data\\2195', 'D:\\oj\\data\\2195', '3\r\n31 aaa\r\n37 abc\r\n29 hello*earth', '1 0 0\r\n0 1 0\r\n8 13 9 13 4 27 18 10 12 24 15', '', '', '', '2012-03-31 22:31:39', 1000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 1000, 23, 'power721'),
(2196, 'Minimax Triangulation', 'Triangulation of surfaces has applications in the Finite Element Method of solid mechanics. The objective is to estimate the stress and strain on complex objects by partitioning them into small simple objects which are considered incompressible. It is convenient to approximate a plane surface with a simple polygon, i.e., a piecewise-linear, closed curve in the plane on m distinct vertices, which does not intersect itself. A chord is a line segment between two non-adjacent vertices of the polygon which lies entirely inside the polygon, so in particular, the endpoints of the chord are the only points of the chord that touch the boundary of the polygon. A triangulation of the polygon, is any choice of m - 3 chords, such that the polygon is divided into triangles. In a triangulation, no two of the chosen chords intersect each other, except at endpoints, and all of the remaining (unchosen) chords cross at least one of the chosen chords. Fortunately, finding an arbitrary triangulation is a fairly easy task, but what if you were asked to find the best triangulation according to some measure? \r\n<center><img src="images/problem/pic2196_0"></img></center>', 'On the first line of the input is a single positive integer n, telling the number of test scenarios to follow. Each scenario begins with a line containing one positive integer 2 < m < 50, being the number of vertices of the simple polygon. The following m lines contain the vertices of the polygon in the order they appear along the border, going either clockwise or counter clockwise, starting at an arbitrary vertex. Each vertex is described by a pair of integers x y obeying 0 <= x <= 10 000 and 0 <= y <= 10 000.', 'For each scenario, output one line containing the area of the largest triangle in the triangulation of the polygon which has the smallest largest triangle. The area should be presented with one fractional decimal digit.', 'D:\\oj\\data\\2196', 'D:\\oj\\data\\2196', '1\r\n6\r\n7 0\r\n6 2\r\n9 5\r\n3 5\r\n0 3\r\n1 1', '9.0', '', '', '', '2011-06-10 19:40:24', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 26, 'power721'),
(2197, 'Unequalled Consumption', '<img src="images/problem/pic2197_0" align="right">\r\nThe Association of Candy Makers is preparing to launch a new product. Its idea is old with a novel twist: it simply \r\nsells boxes of candies. But since people are what they consume and everyone wants to be unique these days, the ACM \r\nwants every candy box to be unique, in the sense that no two boxes should contain the same composition of candy types. \r\nThe ACM is only able to make a small number n of different types of candy, but while limited in imagination, it is virtually limitless in resources, so it is able to produce as many as it wants of each type of candy. Furthermore, the candy types have different weights (though some may weigh the same), and in order to simplify pricing matters, the ACM wants all candy boxes to have the same total weight. \r\n\r\nWith these restrictions, the ACM will only be able to make a limited number of boxes. For instance, if there are three types of candy, weighing 5, 5 and 10 grams respectively, 4 different boxes can be made with total weight 10 grams (using either two of type 1, or two of type 2, or one of type 3, or one each of types 1 and 2). The ACM would like to be able to make at least one box for everyone in the cosmos. So, given queries in the form of the number of people P in the cosmos, your job is to find the smallest possible total weight w such that P different boxes containing exactly w grams of candies can be made. \r\n</img>', 'The input consists of several data sets (at most 20). Each data set consists of four lines. The first line contains an integer 1 ≤ n ≤ 5, the number of candy types. The next line contains n integers w1, ..., wn, where 1 ≤ wi ≤ 10 is the weight (in grams) of the i:th candy type. The third line contains an integer 1 ≤ q ≤ 10, the number of queries. The last line of a data set contains q integers P1, ..., Pq, where 1 ≤ Pj ≤ 1015 is the j:th query. Input is terminated by an incomplete data set where n = 0, which should not be processed.', 'For the i:th data set, write a line "Set i", followed by q lines giving, for each query Pj, the minimal possible positive weight Wj (in grams) of a candy box. If there is no weight Wj such that at least Pj candy boxes can be made, print "no candy for you" for that query. You may assume that Wj, if it exists, will be at most 100 ? Pj.', 'D:\\oj\\data\\2197', 'D:\\oj\\data\\2197', '3\r\n5 5 10\r\n1\r\n4\r\n4\r\n3 1 4 2\r\n2\r\n142 700\r\n1\r\n10\r\n1\r\n100\r\n0', 'Set 1\r\n10\r\nSet 2\r\n23\r\n42\r\nSet 3\r\nno candy for you', '', '', '', '2011-06-10 19:40:25', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 31, 'power721'),
(2198, 'Declaration of Content', '<img src="images/problem/pic2198_0" align="right">\r\nMost food you can buy at your local grocery store has a declaration of content. The declaration of content lists the ingredients of the product. It does not necessarily tell you the exact amount of every ingredient, only the ordering of the ingredients, from most common to least common. For some ingredients, an exact percentage might be given, either required by law or because the producer wants you to know how much of the fine expensive ingredients they have used. Given a set of different products and their respective declarations of content you should determine which contain the most or the least of some given ingredients. For simplicity, we assume in this problem that the percentage of each ingredient always is an integer. \r\n</img>', 'The input consists of several test cases. Each test case consists of two parts. \r\n\r\nThe first part of a test case begins with an integer P, 1 ≤ P ≤ 10, the number of different products in this test case, on a line of its own. Then follows the description of the P products. Each product description consists of a line giving the name of the product, followed by a line containing an integer n, 1 ≤ n ≤ 100, giving the number of ingredients in this product. Then follow n lines, the i:th of which contains the name of the i:th most common ingredient of the product. In case of ties, the ingredients will be listed in arbitrary order. Optionally, every ingredient name can be followed by space, an integer p, 0 ≤ p ≤ 100 and a percentage sign. If this is present, it specifies the exact amount of this ingredient in the product. Otherwise, because all percentages in this problem are integers, the ingredient makes up at least one percent of the total product. \r\n\r\nThe second part of a test case begins with an integer Q, 1 ≤ Q ≤ 100, the number of queries. Then follow Q lines, each containing a query. A query is of the form "least X", or "most X", where X is the name of an ingredient. In the "most X" case, the ingredient X is guaranteed to be present in at least one of the products. \r\n\r\nA name of a product or an ingredient is a string of alphabetic characters (A-Z and a-z), digits (0-9) and underscore. Case is significant. No name will be longer than 30 characters. You may assume that each declaration of content is valid. \r\n\r\nThe last test case to be processed is followed by a line consisting of the integer 0.', 'The output consists of one line for every query in the input data. For each query, output the name of the product containing the most or the least of ingredient X, as indicated by the query. If there are several possible such products, output all of them, in the same order as the products were presented in the test case input data. The product names should be separated by a single space.', 'D:\\oj\\data\\2198', 'D:\\oj\\data\\2198', '3\r\nProduct_1\r\n3\r\nA\r\nB\r\nC\r\nProduct_2\r\n3\r\nC\r\nB\r\nA\r\nProduct_3\r\n2\r\nB\r\nC 35%\r\n4\r\nmost A\r\nmost B\r\nmost C\r\nleast D\r\n0', 'Product_1\r\nProduct_3\r\nProduct_2 Product_3\r\nProduct_1 Product_2 Product_3', '', '', '', '2011-06-10 19:40:25', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 22, 'power721'),
(2199, 'Laserbox', '<img src="images/problem/pic2199_0" align="right">\r\nA laserbox is a game involving some optical equipment. The game board is a square n×n grid. On each grid point, a gadget called a right-turner can be placed and several such gadgets are included. Finally, there is a ruby laser, and if the laser is mounted at the bottom end of a column, the beam will be directed northwards through that column. Analogously, the laser beam may be directed southwards from the top of a column, eastwards from the start of a row or westwards from the end of the row. \r\nThe game starts with some right-turners being spread out on some grid points and the laser (switched off) being mounted somewhere along the border of the rectangle. The player then tries to deduce where the beam will emerge when the laser is switched on. The effect of a right-turner is to deflect the beam ninety degrees to the right, regardless of from which of the four directions it enters. \r\n\r\nYour program must do exactly what the player is supposed to do. \r\n</img>', 'On the first line of the input is a single positive integer, telling the number of test cases to follow. The first line of each test case consists of two integers n r, where 1 ≤ n ≤ 50 is the size of the board and 1 ≤ r ≤ 50 the number of right-turners. The following r lines contain the coordinates x y of the right-turners. No two right-turners will have the same coordinates. \r\n\r\nFinally, a line with two integers indicating the laser position follows. The bottom of column six is denoted by 6 0 and the start of row seven by 0 7. If the zeroes are replaced by n+1, the laser is placed at the top of column six and the end of row seven, respectively.', 'For each test case, output one line containing the coordinates X Y of the beam as it leaves the board. The same rules as for the laser apply, so X may equal 0 or n+1 or else Y equal 0 or n+1. If the beam gets caught and does not leave the board, the output should be 0 0.', 'D:\\oj\\data\\2199', 'D:\\oj\\data\\2199', '2\r\n2 3\r\n1 1\r\n1 2\r\n2 2\r\n3 1\r\n3 6\r\n1 1\r\n1 3\r\n2 2\r\n2 3\r\n3 1\r\n3 2\r\n2 0', '2 0\r\n0 2', '', '', '', '2011-06-10 19:40:25', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 20, 'power721'),
(2200, 'Bowlstack', 'Baking bread is my favourite spare-time pursuit. I have a number of stainless steel mixing bowls with straight sides, a circular bottom and a wider circular top opening. Geometrically, my bowls are truncated circular cones and for this problem, the thickness of the metal may be disregarded. \r\n\r\nI store these bowls stacked in the natural way, that is with a common vertical axis, and I stack them in an order that minimises the total height of the stack. Finding this minimum is the purpose of your program.', 'On the first line of the input is a positive integer, telling the number of test cases to follow. Each case starts with one line containing an integer n, the number of bowls (2 ≤ n ≤ 9). The following n lines each contain three positive integers h, r, R, specifying the height, the bottom radius and the top radius of the bowl, and r < R holds true. You may also assume that h, r, R < 1000.', 'For each test case, output one line containing the minimal stack height, truncated to an integer (note: truncated, not rounded). \r\n<img src="Image/1033/1.jpg"></img>', 'D:\\oj\\data\\2200', 'D:\\oj\\data\\2200', '2\r\n2\r\n60 20 30\r\n40 10 50\r\n3\r\n50 30 80\r\n35 25 70\r\n40 10 90', '70\r\n55', '', '', '', '2011-07-18 12:13:25', 1000, 65536, 'N', NULL, 0, 2, 0, 2, 100, 1, 0, 1000, 47, 'power721'),
(2201, 'Pesky Heroes', '<img src="images/problem/pic2201_0" align="right">\r\n"Pesky Heroes!" -- the evil mage stormed into his throneroom ? "They don''t have respect for us evil masterminds anymore. They''ve gone and invaded my cave again, and while the traps were down for maintenance! And they''ve set up their camp in the cave! The nerve!" \r\n"But, milord, then surely they will be doomed when the traps have been re-activated," were the last words of a servant, uttered milliseconds before he... well, you get the picture. "Not necessarily, I may have to teleport my trained orcs to seal their fate. You there, figure out where I should send them. Now!" \r\n\r\nInspired by the fate of the last servant to speak, you hurry off with a map of the cave. The map is a complete map of the cave, with the positions of all traps marked, and you see that the cave has a single entrance. On the map, there are n strategic key points which have been marked with the numbers 1 to n. All passages in the cave connect two key points. All traps have been placed at key points, and all dead ends are key points. Your mathematically inclined mind quickly discovers that for every key point there are at most three passages connecting to it. \r\n\r\nYour master can open a magic gateway from the throneroom to any passage (but not to key points), and the trained orcs will be sent in. Despite their long training, the orcs are still not too bright. When they''ve gone through the gateway, they will begin walking away from the light coming from the entrance (there will always be a unique path from each point in the cave to the entrance). In each intersection, they will normally always choose the left path, and when they come back to the gateway, they will come back to the throneroom, ready to be teleported to a new location, if necessary. \r\n\r\nThese orcs have been trained, so they''re smarter than the average bear, erm, orc. You can give them a number t when they walk in, and the t:th time they are at an intersection, they will turn right instead of left. Despite their eight years of training, they can still only be trusted to remember one number until they return. \r\n\r\n"Oh, and one last thing. I saw the heroes in my crystal ball, they''ve set up camp in a dead-end.", the mage shouts after you. \r\n\r\nTo maximize your chances of survival, you want your master to have to work as little as possible (i.e. to open as few gateways as possible), but you must have the orcs search every dead-end in the cave which can reach the entrance without passing any traps. The orcs are very dear to your master, so you better make sure they don''t walk into any traps! \r\n</img>', 'The input will consist of several data sets. Each set will start with a line consisting of two numbers, n, m where 2 ≤ n ≤ 50000 is the number of key points on the map and 0 ≤ m ≤ 500 is the number of traps. \r\nThe next n lines will consist of 2 to 4 space-separated integers. Line i contains an integer ni, 1 ≤ ni ≤ 3, the number of passages connecting to key point i, followed by a list of the ni key points that the passages lead to, in clockwise order. The next m lines consist of single integers, the key points at which there are traps. Key points are labelled 1, ..., n and key point 1 is the (implicit) entrance to the outside world. Key point 1 is guaranteed to always have exactly one passage. \r\nThe last case will be followed by a line with m = n = 0, which should not be processed.', 'For each case, output the minimum number of gateways required, on a line by itself.', 'D:\\oj\\data\\2201', 'D:\\oj\\data\\2201', '5 1\r\n1 2\r\n3 1 4 3\r\n1 2\r\n2 2 5\r\n1 4\r\n3\r\n4 1\r\n1 2\r\n2 1 3\r\n2 2 4\r\n1 3\r\n4\r\n0 0', '1\r\n0', '', '', '', '2011-06-10 19:40:25', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 28, 'power721');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(2202, 'Reduced ID Numbers', 'T. Chur teaches various groups of students at university U. Every U-student has a unique Student Identification Number (SIN). A SIN s is an integer in the range 0 ≤ s ≤ MaxSIN with MaxSIN = 10<sup>6</sup>-1. T. Chur finds this range of SINs too large for identification within her groups. For each group, she wants to find the smallest positive integer m, such that within the group all SINs reduced modulo m are unique.', 'On the first line of the input is a single positive integer N, telling the number of test cases (groups) to follow. Each case starts with one line containing the integer G (1 ≤ G ≤ 300): the number of students in the group. The following G lines each contain one SIN. The SINs within a group are distinct, though not necessarily sorted.', 'For each test case, output one line containing the smallest modulus m, such that all SINs reduced modulo m are distinct.', 'D:\\oj\\data\\2202', 'D:\\oj\\data\\2202', '2\r\n1\r\n124866\r\n3\r\n124866\r\n111111\r\n987651', '1\r\n8', '', '', '', '2011-09-16 21:29:13', 2000, 65536, 'N', NULL, 2, 2, 100, 0, 0, 2, 2, 2000, 67, 'power721'),
(2203, 'Tantrix', '<img src="images/problem/pic2203_0" align="right">\r\nTantrix is a two player game played with 56 hexagonal tiles. Each tile contains three links in different colours. Both players have five tiles in hand and take turns in placing them on the playing field. The figure to the right shows how the game could have progressed after nine played tiles. \r\nThere are four different link colours: red, green, yellow and blue. No two tiles are identical, and no tile is rotation symmetric. A tile will be described in the input as a six letter string, specifying the link colours in clockwise direction. The uppercase letters ''R'', ''G'', ''Y'' and ''B'' will be used for red, green, yellow and blue, respectively. \r\n\r\nIn this problem, a move is defined as placing one of the tiles in hand somewhere on the playing field, subject to these rules: \r\n<ol>\r\n<li>A tile must always be placed next to tiles already played. \r\n<li>The links in all touching tiles must match colour. \r\n<li>An empty space which is surrounded by three tiles is called a forced space. If the player can place one of his tiles in a forced space, he must do so. If there are several forced spaces, and several ways to place a tile in a forced space, he may select any of those. \r\n<li>It''s not allowed to place a tile so that a forced space is created containing three links of the same colour (since no tile could ever be placed there). \r\n<li>The two sides along a forced space are called controlled sides. It''s not allowed to place a tile along a controlled side. \r\n</ol>\r\nIf there are one or more forced spaces and the player can''t place any of his tiles in hand in those spaces, he will have to play any other legal move. Note that a player may not be allowed to place a tile in a forced space due to rule 4. \r\nThe figure on the right illustrates these rules. There are three forced spaces. The interposed tile may not be placed in the lower left forced space, as that would create a new forced space with three red links. The dark gray spaces lie on controlled sides created by the forced spaces; no tiles may be placed there. If the player to move can''t place a tile in any of the three forced spaces, he must place a tile in any of the white spaces. \r\n\r\nYour task is to count the number of legal moves the player to move has, given the position and orientation of already played tiles and the tiles in hand for the player to move. If a tile can be placed at several locations, or in several orientations, each such combination is counted as a distinct move.\r\n</img>', '<img src="Image/1036/2.png" align="right">\r\nThe first line in the input will contain the number of cases (at most 50). \r\nEach case begins with a single line containing an integer n (1 ≤ n ≤ 20), the number of tiles that have already been played. Then follow n lines containing the coordinates and description of these tiles. The first character in the tile description belongs to the link facing up; the remaining colours follow as per usual in clockwise direction. Then follows a line with the description of the five tiles in hand, the tile descriptions being separated with a single space. \r\n\r\nThe mapping between the spaces and the coordinates is shown in the figure below (note that the playing field is infinite and not restricted to these coordinates). All tiles in the input will be valid and distinct. The layout will represent a position that could have arisen from a legal game. One of the played tiles will have coordinates 0,0 \r\n</img><br clear=all>', 'For each test case, output a single line containing an integer: the number of legal moves. \r\n<img src="Image/1036/3.png"></img><br clear=all>', 'D:\\oj\\data\\2203', 'D:\\oj\\data\\2203', '2\r\n6\r\n0 0 BRYRBY\r\n1 0 GRGBRB\r\n-1 1 GGYBYB\r\n0 1 YYBBGG\r\n-2 2 YYBGBG\r\n-3 3 BYGYGB\r\nBBRRGG GBYBYG RBRBGG GYBGBY GRBBRG\r\n4\r\n0 0 BYYGBG\r\n-1 1 GRGBBR\r\n1 0 YRBRYB\r\n2 0 YGGRRY\r\nRBBRYY GBGYBY YBBRYR YBYBRR RBBRGG', '46\r\n2', '', '', '', '2011-06-10 19:40:25', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 32, 'power721'),
(2204, 'Guardian of Decency', 'Frank N. Stein is a very conservative high-school teacher. He wants to take some of his students on an excursion, but he is afraid that some of them might become couples. While you can never exclude this possibility, he has made some rules that he thinks indicates a low probability two persons will become a couple: <ul><li>Their height differs by more than 40 cm. <li>They are of the same sex. <li>Their preferred music style is different. <li>Their favourite sport is the same (they are likely to be fans of different teams and that would result in fighting). </ul>So, for any two persons that he brings on the excursion, they must satisfy at least one of the requirements above. Help him find the maximum number of persons he can take, given their vital information', 'The first line of the input consists of an integer T ≤ 100 giving the number of test cases. The first line of each test case consists of an integer N ≤ 500 giving the number of pupils. Next there will be one line for each pupil consisting of four space-separated data items: <ul><li>an integer h giving the height in cm; <li>a character ''F'' for female or ''M'' for male; <li>a string describing the preferred music style; <li>a string with the name of the favourite sport. </ul>No string in the input will contain more than 100 characters, nor will any string contain any whitespace.', 'For each test case in the input there should be one line with an integer giving the maximum number of eligible pupils.', 'D:\\oj\\data\\2204', 'D:\\oj\\data\\2204', '2\r\n4\r\n35 M classicism programming\r\n0 M baroque skiing\r\n43 M baroque chess\r\n30 F baroque soccer\r\n8\r\n27 M romance programming\r\n194 F baroque programming\r\n67 M baroque ping-pong\r\n51 M classicism programming\r\n80 M classicism Paintball\r\n35 M baroque ping-pong\r\n39 F romance ping-pong\r\n110 M romance Paintball', '3\r\n7', '', '', '', '2011-06-10 19:40:25', 3000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 3000, 40, 'power721'),
(2205, 'Up the Stairs', '<img src="images/problem/pic2205_0" align="right">\r\nJohn is moving to the penthouse of a tall sky-scraper. He packed all his stuff in boxes and drove them to the entrance \r\nof the building on the ground floor. Unfortunately the elevator is out of order, so the boxes have to be moved up the stairs. \r\nLuckily John has a lot of friends that want to help carrying his boxes up. They all walk the stairway at the same speed of 1 floor per minute, regardless of whether they carry a box or not. The stairway however is so narrow that two persons can''t pass each other on it. Therefore they deciced to do the following: someone with a box in his hands is always moving up and someone empty-handed is always moving down. When two persons meet each other somewhere on the stairway, the lower one (with a box) hands it over to the higher one (without a box). (And then the lower one walks down again and the higher one walks up.) The box exchange is instantaneous. When someone is back on the ground floor, he picks up a box and starts walking up. When someone is at the penthouse, he drops the box and walks down again. \r\n\r\nAfter a while the persons are scattered across the stairway, some of them with boxes in their hands and some without. There are still a number of boxes on the ground floor and John is wondering how much more time it will take before all the boxes are up. Help him to find out! \r\n</img>', 'One line with a positive number: the number of test cases. Then for each test case: \r\n<ul><li>One line with three numbers N, F, B with 1 ≤ N,F ≤ 1000 and 1 ≤ B ≤ 1000000: the number of persons, the number of floors (0=ground floor, F=penthouse) and the number of boxes that are still on the ground floor. \r\n<li>N lines with two numbers fi and bi with 0 ≤ fi ≤ F and bi = 0 or bi = 1: the floors where the persons are initially and whether or not they have a box in their hands (1=box, 0=no box).</ul>', 'One line with the amount of time (in minutes) it will take to get all the remaining boxes to the penthouse.', 'D:\\oj\\data\\2205', 'D:\\oj\\data\\2205', '2\r\n3 10 5\r\n0 0\r\n0 0\r\n0 0\r\n2 5 1\r\n2 1\r\n3 0', '30\r\n8', '', '', '', '2011-06-10 19:40:25', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 44, 'power721'),
(2206, 'Sudoku', '<img src="images/problem/pic2206_0" align="right">\r\nOh no! Bill just realized that the sudoku puzzle he had spent the last ten minutes trying to solve essentially was last week''s puzzle, only rotated counterclockwise. How cheap! Couldn''t the magazine afford to make a new one every week? Of course, he had no way of knowing about this before he started to solve it, as the holes to fill with digits were other than last week. Nevertheless, realizing that this week''s puzzle was a simple derivative of last week''s certainly took the fun out of solving the rest of it. \r\n\r\nThe sudoku board consists of 9×9 cells. These can be grouped into 3×3 regions of 3×3 cells each. Some of the cells are filled with a digit 1 through 9 while the rest of them are left empty. The aim of the game is to fill each empty cell with a digit 1 ... 9 so that every row, every column and every region contains each of the numbers 1 ... 9 exactly once. A proper sudoku puzzle always has exactly one solution. \r\n\r\nHelp Bill avoid unpleasant surprises by creating a program that checks whether an unsolved sudoku puzzle is in fact derived from an earlier puzzle by simple operations. \r\n\r\nThe allowed operations are: \r\n<ol>\r\n<li>Rotating the entire puzzle clockwise or counterclockwise. \r\n<li>Swapping two columns within a 3 × 9 column segment. \r\n<li>Swapping two rows within a 9 × 3 row segment. \r\n<li>Swapping entire row or column segments. \r\n<li>Applying a permutation f of the digits 1 ... 9 to every cell (i.e. replace x by f(x) in every cell).\r\n</ol>An operation is considered being performed on the sudoku solution (rather than on the unsolved puzzle) and always guarantees that if the board before the transformation was a solution to a sudoku puzzle, it still is afterwards. \r\n</img>', 'The input starts with the number of test cases 0 ≤ N ≤ 50 on a single line. \r\n\r\nThen for every test case follow nine lines describing last week''s puzzle solution, from top to bottom. Each line corresponds to a row in the puzzle and consists of nine digits (1 ... 9), describing the contents of the cell from left to right. \r\n\r\nLast week''s solution is followed by nine lines describing this week''s unsolved puzzle. Here, also, every line corresponds to a puzzle row and every digit (0 ... 9) describes the contents of a cell. 0 indicates that the cell is empty. The rows are presented ordered from top to bottom, and within each row, the cells are ordered from left to right. \r\n\r\nAfter every test case except the last one follows a blank line. Every unsolved puzzle is guaranteed to be uniquely solvable and last week''s solution is always a proper sudoku solution.', 'For every test case, output Yes if the sudoku puzzle can be derived from the given solved puzzle using the allowed operations, or No if this is not possible.', 'D:\\oj\\data\\2206', 'D:\\oj\\data\\2206', '2\r\n963174258\r\n178325649\r\n254689731\r\n821437596\r\n496852317\r\n735961824\r\n589713462\r\n317246985\r\n642598173\r\n060104050\r\n200000001\r\n008305600\r\n800407006\r\n006000300\r\n700901004\r\n500000002\r\n040508070\r\n007206900\r\n\r\n534678912\r\n672195348\r\n198342567\r\n859761423\r\n426853791\r\n713924856\r\n961537284\r\n287419635\r\n345286179\r\n010900605\r\n025060070\r\n870000902\r\n702050043\r\n000204000\r\n490010508\r\n107000056\r\n040080210\r\n208001090', 'Yes\r\nNo', '', '', '', '2011-06-10 19:40:25', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 37, 'power721'),
(2207, '1 VS 1', 'Alice and Bob are playing the game SanguoSha 1VS1.If Alice take a card or use a card (it may be slash,missed,peach,duel,sabotage or theft and so on) or discard (sometimes he does not need to throw any card) we will write down an uppercase ''A'', if Bob does this, of course, we will write down the letter "B''. Tell me the length of the longest operation combo performed by either player.', 'There are several test cases, each test case contains only a string composed of uppercaser ''A'' and ''B''.The input will finish with the end of file.The length of the string is no more than 1000.', 'For each the case, output an integer indicate for the length.', 'D:\\oj\\data\\2207', 'D:\\oj\\data\\2207', 'AAABBAAAAA\r\nAABBBBAA\r\nAAAAAAAA', '5\r\n4\r\n8', '', 'swust20095862', '', '2012-03-22 12:57:39', 1000, 65536, 'N', NULL, 32, 51, 63, 15, 36, 28, 27, 30000, 378, ''),
(2208, 'Count the Number of Cycles', 'In information theory, a low-density parity-check (LDPC) code is a linear error correcting code, a method of transmitting a message over a noisy transmission channel, and is constructed using a sparse bipartite graph. LDPC codes are capacity-approaching codes, which means that practical constructions exist that allow the noise threshold to be set very close (or even arbitrarily close on the BEC) to the theoretical maximum (the Shannon limit) for a symmetric memory-less channel.\r\nLDPC codes are defined by a sparse parity-check matrix. This parity-check matrix is often randomly generated and the elements in it are 0 or 1. If we want use LDPC codes, we should make the parity-check matrix have no cycles. When four vertices of the rectangle in the matrix are 1, we say that the matrix has one cycle. Now we want to know how many cycles are in the matrix.\r\nFor a given matrix, you are to count the number of cycles in the matrix.', 'There are several test cases, each test case starts with a line containing two positive integers M and N. M and N is the size of the matrix (1<=M<=100, 1<=N<=100). Next follow a matrix which contains only number 0 and 1. The input will finish with the end of file.', 'For each the case, your program will output the number of cycles in the given matrix on separate line.', 'D:\\oj\\data\\2208', 'D:\\oj\\data\\2208', '1 3\r\n1 1 1\r\n2 3\r\n1 0 1\r\n0 1 1\r\n3 3\r\n1 0 1\r\n0 1 1\r\n1 1 1', '0\r\n0\r\n2', '', 'swust20095862', '', '2012-08-19 16:32:19', 1000, 65536, 'N', NULL, 19, 30, 63, 5, 36, 10, 9, 30000, 297, ''),
(2209, 'Changlong''s bother', 'Changlong is a handsome and clever boy and he is admired by many beautiful girls. Every day he received tens of thousands of letters form girls which express their intense desire to be his life companion. You see, Changlong is very tired of this and one day he get an idea to avoid this bother. He declares:\r\nOnly those clever girls who can solve the problem below have the qualification to be his wife.\r\nChanglong''s problem can be formulated like this:\r\nThere is one interesting sequence of numbers a1,a2,...an, this sequence has a very attractive property that every number appears exactly p times except a particular number t, which occurs q times. How to extract this particular number t from this sequence? In order to let this problem more mysterious, Changlong assumes that the involved number p, q in his problem are prime to each other, i.e., gcd(p, q)=1.\r\nChanglong''s method works very well. After his declaration, the number of received letter has decrease sufficiently. The girls are beginning to think over the problem with continuous strenuous effort, no sooner later they find this problem is beyond their ability. So most of them give up, but there is still a beautiful girl who is persistent in this problem. One day this girl comes across you and she invites you to help her.', 'At the first line of the input is a integer k(0< k<=100), the number of test cases.\r\nFor each test case, there will be a line containing three integers: n(0< n<=10^7), p, q(p!=q,1< p, q<200, gcd(p,q)=1) and a line containing n elements ai(0< ai<10^7) of the sequence.', 'For each test case, you should first output a line with“Case #:”,where # is the id of the test case, then you should output the particular number t, i.e., the number which occurs q times in the sequence.', 'D:\\oj\\data\\2209', 'D:\\oj\\data\\2209', '2\r\n8 3 2\r\n1 2 1 2 1 2 3 3\r\n7 4 3\r\n1 1 1 1 2 2 2', 'Case 1:\r\n3\r\nCase 2:\r\n2', '', 'swust20095862', '', '2012-02-09 18:40:23', 2000, 100, 'N', NULL, 6, 39, 15, 24, 89, 6, 3, 30000, 462, ''),
(2210, 'Knight Match Play', 'There are two knight teams, they have N and M knights respectively. The knights are numbered from 1 to N and 1 to M in their own team. They are trapped in an W*H grid puzzle. The puzzle only has four exituses which are the four corners of the puzzle. Only the directions up,down,left,right could the knight move to and the time move from one grid to the adjacent is fixed. They can form a "fight partner" if two knights sufficing the following conditions: 1, The two knights come from different teams. 2, Both of them can arrive to one of the exituses. 3, The least time need to arrive to one of the exituses is same. So how many "fight partners" they can form? For this action, the leader gives the follow directives: 1, Each team renumbering the knights with their least time need to use to get out of the puzzle. So the one who use the least time will get the ID 1 and the one use the most time will get the ID N or M. If some of them use the same time, then whose original ID is lower, who will get a lower ID. 2, The chosen knights from the same team should have the continuous ID. 3, Form "fight partners" according to the IDs one by one. That is to say the one has the lowest ID should form with the one has the lowest ID in another team, and so on.', 'There are several test cases.The input of every test case are described as below. First line, there are four integers N,M,W,H. (0< N,M<300, 10< W,H<50).\r\nThen there are H lines, each line with W characters indicate for the puzzle.A character of ''.'' indicate the grid is empty, every empty grid could contain infinitely of knights. A character of ''#'' means the grid has a barrier and none knight can step into it. The four corners are empty. \r\nThen there N+M lines, each line with a pair of integers (x,y)(0<=x<H,0<=y<W) indicate for the knight is in the xth line and yth column originally.\r\nThe input will finish with the end of file.', 'An integer indicate for the maximal number of "fight partner" they can form.', 'D:\\oj\\data\\2210', 'D:\\oj\\data\\2210', '4 3 7 6\r\n.#...#.\r\n..#....\r\n.......\r\n..#....\r\n....##.\r\n.##....\r\n1 3\r\n4 2\r\n2 2\r\n1 5\r\n3 5\r\n4 3\r\n3 0', '3', '', 'swust20095862', '', '2011-06-10 22:37:18', 2000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 88, ''),
(2211, 'Province Region Competition Team Play', 'As we know, ACM competition is not only based on personal talents, but also team works. A team can be outstanding once it combines these two factors.\r\nA school has N ACM contest candidates. The coach wants to select K candidates from N candidates and sends them to Hunan Province Region Competition. We suppose every team has 3 members and every member has a value A that represents the personal skills. Every pair of members has a value W that shows the teamwork skills for that pair. There are 3 members a, b, c in a team then the integral skills of this team represents as following formula: \r\nA[a]+A[b]+A[c]+W[a][b]+W[a][c]+W[b][c];\r\nIn the rules of Province Region Competition, team score is very important. A coach hope to set K teams up and the total team score is maximum.\r\nCan you figure out what the maximum score of K teams if reasonably choosing team members from contest candidates?', 'The first line has a integer T (T <=10) represents the number of cases. For each test cases, the first line has two numbers K, N (1 <= K <= 6, 3*K<=N<=18) which show the number of teams and the number of candidates. The second line has N integers A1.. An ,(0<=Ai<=100000) which represents the personal talent or personal skills for each candidates. The following N lines, every line has N integers which is a matrix Wnn. Wij describe the teamwork skill between team member i and j, 0<=Wij<=100000，and Wij=Wji.', 'For every case, output a integer which is maximum score for K teams.', 'D:\\oj\\data\\2211', 'D:\\oj\\data\\2211', '1\r\n1 4\r\n10 10 10 11\r\n0 15 5 0\r\n15 0 15 15\r\n5 15 0 5\r\n0 15 5 0', '66', '', 'swust20095862', '', '2011-06-11 14:57:51', 1000, 65536, 'N', NULL, 0, 2, 0, 2, 100, 2, 0, 30000, 134, ''),
(2212, 'Fly or not fly', 'Welcome to Mars! Your first mission is to send letters to K cities A1, A2, …, AK in order. Mars consists of N cities connected by roads, different roads may have different lengths, in city i there are Pi UFOs which you can take to increase your speed, let’s assume that the road’s length is x, so if you walk through this road, you’ll spend 5x minutes, but if you fly (by UFO of course), you’ll only spend x minutes. However, you must have this mission done in minimal time, and each UFO can only be used once, it disappears when you leave it, you can’t send letters when you are in the UFO, so you must leave it in order to send a letter.', 'There are several test cases, end with EOF. For each test case, the first line contains two  integers N <= 100, and K <= N, the second line is N integers, P1, P2, …, PN.( Pi<=10), Next N lines is an N * N matrix G1..N,1..N for the lengths between every two cities(Gi,j<=100), it is guaranteed that Gi,j=Gj,i and Gi,i=0, if Gi,j=-1, it means that there is no road between city i and j. The last line of each case is K integers A1, A2, …, AK. You are in city A1 at first.', 'For each the case, output the minimal time.', 'D:\\oj\\data\\2212', 'D:\\oj\\data\\2212', '3 3\r\n0 0 1\r\n0 -1 1\r\n-1 0 1\r\n1 1 0\r\n1 3 2\r\n3 3\r\n2 0 0\r\n0 -1 1\r\n-1 0 100\r\n1 100 0\r\n1 3 2', '6\r\n107', 'Case 1: First walk 1->3 (spend 5 minutes), and take UFO in 3, fly 3->2 (spend 1 minute), total 6 minutes.\r\nCase 2: First take UFO in 1, fly 1->3 (spend 1 minute), walk back 3->1 (spend 5 minutes) and take UFO in 1 again, fly 1->2 (spend 101 minutes), total 107 minutes.', 'swust20095862', '', '2011-06-20 19:07:42', 1000, 65536, 'N', NULL, 4, 6, 67, 1, 50, 1, 1, 30000, 111, ''),
(2213, 'Monitoring System', 'BCBC is a large bank. To ensure safety, they have set many cameras to monitor the total bank. Recently, they have found some problems in the monitoring system. In the current system, a camera can monitor a rectangle region. Some regions can be monitored by three or more cameras, which is waste; some regions can only be monitored by just one camera, which is not safe. So the manage intends to improve the system. Now he wants to know how many regions are monitored by just two cameras..\r\n<img src=images/problem/2213.png />', 'There are multiple test cases. Each test case begins with an integer n (1<=n<=100000) standing for the number of cameras. Then n lines follow. Each line has four integers x1, y1, x2, y2 (1< x1, x2, y1, y2<10^9). The four integer descript the rectangle region one camera can monitor, (x1, y1) is the left bottom coordinate and (x2, y2) is the right up coordinate.', 'Each test case output one integer that is the area of regions covered by just exactly two cameras, the result occupied one line.', 'D:\\oj\\data\\2213', 'D:\\oj\\data\\2213', '3\r\n1 1 3 3\r\n2 2 4 4\r\n1 2 3 4', '2', '', 'swust20095862', '', '2012-02-18 22:11:35', 1000, 65536, 'N', NULL, 0, 12, 0, 12, 100, 2, 0, 30000, 112, ''),
(2214, 'HaHa''s Morning', 'HaHa is so happy today, he is going to participate the 7th Hunan University Programming Contest. He woke up in the morning, and wanted to reach Hunan University as soon as possible, but he realized that he still has N things to do before going on his journey.\r\nAt first, HaHa thought there must have N! (the factorial of N) ways to get everything done, however, he soon found that this was impossible at all, for the work has some annoying restrictions: some things must be done before getting some other things done. Now HaHa is interested in the number of ways to get everything done, and he asks you for help, so your task is to find how many ways are there to finish his work.', 'There are several test cases, each case contains several lines, the first line of each case is two natural numbers N (that described above) and M ≤ 400 (for the total restrictions for the work).\r\nThe next M lines describes the restrictions, for each line, there is two positive integers A, B, for the A-th thing must be done before the B-th thing.\r\nThe input will finish with the end of file, input is guaranteed that 1 ≤ A, B ≤ N ≤ 17.', 'For each the case, output one number: the ways to finish the work.', 'D:\\oj\\data\\2214', 'D:\\oj\\data\\2214', '3 2\r\n1 3\r\n2 3\r\n2 2\r\n1 2\r\n2 1', '2\r\n0', 'Way 1: The order to do things is 1, 2, 3.\r\nWay 2: The order to do things is 2, 1, 3.', 'swust20095862', '', '2012-05-07 20:46:43', 1000, 65536, 'N', NULL, 2, 6, 33, 4, 80, 3, 1, 30000, 145, ''),
(2215, 'Planting Tree', 'Novel-Supertv Digital TV Technology Co., Ltd is one of the leading digital TV technology solution providers in China. Novel-Supertv offers customized solutions for cable, satellite, terrestrial, IPTV, and handset TV networks. We often hold some competitions, games and other activities, like playing ping pang ball, basket ball, climbing mounting, live battle CS and so on. Last year we organized a planting tree activity, a colleague think out a very interesting question. The question is:\r\nThere are N (N>=2) trees, you can plant into several lines. If a line have and only have M (2<=M<=N) trees, we called it “M trees line”. We wonder the maximum lines of “M trees line” that it can be planted with the N trees. Now, can you make a program and tell us the answer?\r\nFor example: \r\n<img src=images/problem/22151.jpg />\r\n<img src=images/problem/22152.jpg />\r\n<img src=images/problem/22153.jpg />', 'The input contains several lines. Each line contains two integer N and M separating with several blank characters . (2<=N<=10, 2<=M<=N).', 'For each input line, you should output a line contains the maximum lines of “M trees line” that it can be planted.', 'D:\\oj\\data\\2215', 'D:\\oj\\data\\2215', '3 2\r\n4 2\r\n4 3', '3\r\n6\r\n1', '', 'swust20095862', '', '2011-06-11 21:41:49', 1000, 65536, 'N', NULL, 2, 7, 29, 4, 67, 2, 2, 30000, 147, ''),
(2216, 'Job!Job!Job!', 'Foreverlin is working in a company. In order to make boss happier, he must work as hard as possible,there are n projects on the todolist. Now is time 1, after time m ,foreverlin has to go back to the school .each project has two properties , the finally completion time and the value you can make if you finish this project . At every unit of time ,he can choose a project to finish . However, he can only choose one project to do in one unit time, that means in one unit time ,he can choose a project to do and finish in this unit time. As the best friend of him ,can you help him to find out how to arrange these projects so that he can make the biggest values.', 'There are several test cases,in each test case, there are two numbers n,m(1<=n<=100000,1<=m<=1000000) . The next n lines each contains two number D[i],V[i] (1<=D[i]<=100000,1<=V[i]<=10000) (1<=i<=n ,D[i] means if you choose to do project i ,you can not do this after time D[i],V[i] means the value of project i ) The input will finish with the end of file.', 'For each the case ouput a number means the biggest values.', 'D:\\oj\\data\\2216', 'D:\\oj\\data\\2216', '4 10\r\n1 8\r\n1 3\r\n2 10\r\n5 12', '30', '', 'swust20095862', '', '2011-07-30 12:32:27', 1000, 65536, 'N', NULL, 1, 18, 6, 17, 94, 4, 1, 30000, 216, ''),
(2217, 'Pocky', 'Pocky is a popular chocolate bar. And also to make an unlucky butler to get one hardly ... But we can get a lot to eat easily.\r\nApart from the taste, the boring student L likes to take out one by one to make a regular polygon.\r\nAnd after that, he would like to know the area of the regular polygon.\r\n<img src=images/problem/2217.png />', 'One line for each case, only one positive integer N (N <= 32768).  Indicate the number of the regular polygon''s edges. And the length of every regular polygon''s edge is 1 permanently.\r\nThe case N < 3, indicate the end of input, and no output for it.', 'A real number for each case, indicate the area of the regular polygon. Retained two digits after the decimal point.', 'D:\\oj\\data\\2217', 'D:\\oj\\data\\2217', '4	\r\n716\r\n30703\r\n1', '1．00\r\n40795.61\r\n75015629.78', 'Please to use 3.1415926535897932384626433832795 for π.', 'swust20095862', '', '2012-02-09 19:32:03', 1000, 65536, 'N', NULL, 11, 27, 41, 16, 67, 8, 8, 30000, 220, ''),
(2218, '技巧类数学题', '求n^n的最高位', '多组数据输入，每组输入一个数n\r\nn的范围很大，但是不超过int', '输出n^n的最高位是什么', 'D:\\oj\\data\\2218', 'D:\\oj\\data\\2218', '3\r\n4', '2\r\n2', '3^3=27最高位为2\r\n4^4=256最高位还是2', 'bingshen', '', '2012-05-02 21:48:31', 1000, 65536, 'N', NULL, 21, 53, 40, 31, 65, 18, 17, 30000, 334, ''),
(2219, 'A^B == B^A?', 'Solve the equation in the name of this problem.', 'There are several cases. Each of them has a single real number as the smaller one of a and b in the equation on a separate line. You may assume it''s no smaller than 1.1. Proceed until the end of file.', 'For each case, print the other number on a single line. Keep 5 digits after decimal point. If no such number exists, print -1.', 'D:\\oj\\data\\2219', 'D:\\oj\\data\\2219', '2\r\n10', '4.00000\r\n-1', '仔细读题~', 'bingshen', '', '2012-06-04 22:22:39', 1000, 65536, 'N', NULL, 3, 24, 13, 21, 91, 4, 2, 30000, 187, ''),
(2220, '变换序列', '<img src=images/problem/2220.jpg />', '第一行包含一个整数N，表示序列的长度。接下来的一行包含N个整数Di，其中Di表示i和Ti之间的距离。', '如果至少存在一个满足要求的变换序列T，则输出文件中包含一行N个整数，表示你计算得到的字典序最小的T；否则输出”No Answer”（不含引号）。注意：输出文件中相邻两个数之间用一个空格分开，行末不包含多余空格。', 'D:\\oj\\data\\2220', 'D:\\oj\\data\\2220', '5\r\n1 1 2 2 1', '1 2 4 0 3', '20%的数据中N≤50；\r\n60%的数据中N≤500；\r\n100%的数据中N≤10000。', 'NOI2009', '', '2011-06-21 20:28:03', 1000, 65536, 'N', NULL, 4, 14, 29, 3, 75, 1, 1, 1000, 95, 'power721'),
(2221, '二叉查找树', '已知一棵特殊的二叉查找树。根据定义，该二叉查找树中每个结点的数据值都比它左子树结点的数据值大，而比它右子树结点的数据值小。\r\n另一方面，这棵查找树中每个结点都有一个权值，每个结点的权值都比它的儿子结点的权值要小。\r\n已知树中所有结点的数据值各不相同；所有结点的权值也各不相同。这时可得出这样一个有趣的结论：如果能够确定树中每个结点的数据值和权值，那么树的形态便可以唯一确定。因为这样的一棵树可以看成是按照权值从小到大顺序插入结点所得到的、按照数据值排序的二叉查找树。\r\n一个结点在树中的深度定义为它到树根的距离加1。因此树的根结点的深度为1。\r\n每个结点除了数据值和权值以外，还有一个访问频度。我们定义一个结点在树中的访问代价为它的访问频度乘以它在树中的深度。整棵树的访问代价定义为所有结点在树中的访问代价之和。\r\n	现在给定每个结点的数据值、权值和访问频度，你可以根据需要修改某些结点的权值，但每次修改你会付出K的额外修改代价。你可以把结点的权值改为任何实数，但是修改后所有结点的权值必须仍保持互不相同。现在你要解决的问题是，整棵树的访问代价与额外修改代价的和最小是多少？', '输入文件第一行包含两个正整数N和K。N为结点的个数，K为每次修改所需的额外修改代价。\r\n接下来一行包含N个非负整数，是每个结点的数据值。\r\n再接下来一行包含N个非负整数，是每个结点的权值。\r\n再接下来一行包含N个非负整数，是每个结点的访问频度。\r\n所有的数据值、权值、访问频度均不超过400000。每两个数之间都有一个空格分隔，且行尾没有空格。', '输出文件只有一个数字，即你所能得到的整棵树的访问代价与额外修改代价之和的最小值。', 'D:\\oj\\data\\2221', 'D:\\oj\\data\\2221', '4 10\r\n1 2 3 4\r\n1 2 3 4\r\n1 2 3 4', '29', '输入的原图是下图，它的访问代价是1×1+2×2+3×3+4×4=30。最佳的修改方案是把输入中的第3个结点的权值改成0，得到右图，访问代价是1×2+2×3+3×1+4×2=19，加上额外修改代价10，一共是29。\r\n<img src=images/problem/2221.jpg />\r\n\r\n\r\n40%的数据满足N ≤ 30;\r\n70%的数据满足N ≤ 50;\r\n100%的数据满足N ≤ 70, 1 ≤ K ≤ 30000000。', 'NOI2009', '', '2012-04-04 12:18:11', 10000, 65536, 'N', NULL, 0, 1, 0, 1, 100, 1, 0, 1000, 80, 'power721'),
(2222, '植物大战僵尸', 'Plants vs. Zombies（PVZ）是最近十分风靡的一款小游戏。Plants（植物）和Zombies（僵尸）是游戏的主角，其中Plants防守，而Zombies进攻。该款游戏包含多种不同的挑战系列，比如Protect Your Brain、Bowling等等。其中最为经典的，莫过于玩家通过控制Plants来防守Zombies的进攻，或者相反地由玩家通过控制Zombies对Plants发起进攻。\r\n现在，我们将要考虑的问题是游戏中Zombies对Plants的进攻，请注意，本题中规则与实际游戏有所不同。游戏中有两种角色，Plants和Zombies，每个Plant有一个攻击位置集合，它可以对这些位置进行保护；而Zombie进攻植物的方式是走到植物所在的位置上并将其吃掉。\r\n游戏的地图可以抽象为一个N行M列的矩阵，行从上到下用0到N–1编号，列从左到右用0到M–1编号；在地图的每个位置上都放有一个Plant，为简单起见，我们把位于第r行第c列的植物记为Pr, c。\r\nPlants分很多种，有攻击类、防守类和经济类等等。为了简单的描述每个Plant，定义Score和Attack如下：\r\n<table><tr><td width=15%>Score[Pr, c]</td> <td>Zombie击溃植物Pr, c可获得的能源。若Score[Pr, c]为非负整数，则表示击溃植物Pr, c可获得能源Score[Pr, c]，若为负数表示击溃Pr, c需要付出能源 -Score[Pr, c]。&lt;/td></tr>\r\n<tr><td width=15%>Attack[Pr, c]</td>	<td>植物Pr, c能够对Zombie进行攻击的位置集合。\r\nZombies必须从地图的右侧进入，且只能沿着水平方向进行移动。Zombies攻击植物的唯一方式就是走到该植物所在的位置并将植物吃掉。因此Zombies的进攻总是从地图的右侧开始。也就是说，对于第r行的进攻，Zombies必须首先攻击Pr, M-1；若需要对Pr, c（0≤c< M-1）攻击，必须将Pr,M-1, Pr, M-2 … Pr, c+1先击溃，并移动到位置(r, c)才可进行攻击。&lt;/td></tr></table>\r\n在本题的设定中，Plants的攻击力是无穷大的，一旦Zombie进入某个Plant的攻击位置，该Zombie会被瞬间消灭，而该Zombie没有时间进行任何攻击操作。因此，即便Zombie进入了一个Plant所在的位置，但该位置属于其他植物的攻击位置集合，则Zombie会被瞬间消灭而所在位置的植物则安然无恙（在我们的设定中，Plant的攻击位置不包含自身所在位置，否则你就不可能击溃它了）。\r\nZombies的目标是对Plants的阵地发起进攻并获得最大的能源收入。每一次，你可以选择一个可进攻的植物进行攻击。本题的目标为，制定一套Zombies的进攻方案，选择进攻哪些植物以及进攻的顺序，从而获得最大的能源收入。', '第一行包含两个整数N, M，分别表示地图的行数和列数。\r\n接下来N×M行描述每个位置上植物的信息。第r×M + c + 1行按照如下格式给出植物Pr, c的信息：第一个整数为Score[Pr, c], 第二个整数为集合Attack[Pr, c]中的位置个数w，接下来w个位置信息（r’, c’），表示Pr, c可以攻击位置第r’ 行第c’ 列。', '输出仅包含一个整数，表示可以获得的最大能源收入。注意，你也可以选择不进行任何攻击，这样能源收入为0。', 'D:\\oj\\data\\2222', 'D:\\oj\\data\\2222', '3 2\r\n10 0\r\n20 0\r\n-10 0\r\n-5 1 0 0\r\n100 1 2 1\r\n100 0', '25', '在样例中, 植物P1,1可以攻击位置(0,0), P2, 0可以攻击位置(2,1)。\r\n一个方案为，首先进攻P1,1, P0,1，此时可以攻击P0,0 。共得到能源收益为(-5)+20+10 = 25。注意, 位置(2,1)被植物P2,0保护，所以无法攻击第2行中的任何植物。\r\n\r\n\r\n【大致数据规模】\r\n约20%的数据满足1 ≤ N, M ≤ 5；\r\n约40%的数据满足1 ≤ N, M ≤ 10；\r\n约100%的数据满足1 ≤ N ≤ 20，1 ≤ M ≤ 30，-10000 ≤ Score ≤ 10000', 'NOI2009', '', '2011-06-21 16:01:32', 20000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 2000, 112, 'power721'),
(2223, '管道取珠', '管道取珠是小X很喜欢的一款游戏。在本题中，我们将考虑该游戏的一个简单改版。游戏画面如图1所示：\r\n<img src=images/problem/22231.jpg />\r\n游戏初始时，左侧上下两个管道分别有一定数量的小球（有深色球和浅色球两种类型），而右侧输出管道为空。每一次操作，可以从左侧选择一个管道，并将该管道中最右侧的球推入右边输出管道。\r\n例如，我们首先从下管道中移一个球到输出管道中，将得到图2所示的情况。\r\n<img src=images/problem/22232.jpg />\r\n假设上管道中有n个球, 下管道中有m个球，则整个游戏过程需要进行n + m次操作，即将所有左侧管道中的球移入输出管道。最终n + m个球在输出管道中从右到左形成输出序列。\r\n爱好数学的小X知道，他共有C(n+m, n)种不同的操作方式，而不同的操作方式可能导致相同的输出序列。举个例子，对于图3所示的游戏情形：\r\n<img src=images/problem/22233.jpg />\r\n我们用A表示浅色球，B表示深色球。并设移动上管道右侧球的操作为U, 移动下管道右侧球的操作为D，则共有C(2+1,1)=3种不同的操作方式, 分别为UUD, UDU, DUU；最终在输出管道中形成的输出序列（从右到左）分别为BAB，BBA，BBA。可以发现后两种操作方式将得到同样的输出序列。\r\n假设最终可能产生的不同种类的输出序列共有K种，其中第i种输出序列的产生方式(即不同的操作方式数目)有ai个。聪明的小X早已知道，\r\n<img src=images/problem/22234.jpg />\r\n你能帮助他计算这个值么？由于这个值可能很大，因此只需要输出该值对1024523的取模即可(即除以1024523的余数)。\r\n说明：文中C(n + m, n)表示组合数。组合数C(a, b)等价于在a个不同的物品中选取b个的选取方案数。', '输入第一行包含两个整数n, m，分别表示上下两个管道中球的数目。\r\n	第二行为一个AB字符串，长度为n，表示上管道中从左到右球的类型。其中A表示浅色球，B表示深色球。\r\n	第三行为一个AB字符串，长度为m，表示下管道中的情形。', '输出文件ball.out仅包含一行，即为 sum(ai^2)除以1024523的余数。', 'D:\\oj\\data\\2223', 'D:\\oj\\data\\2223', '2 1\r\nAB\r\nB', '5', '【样例说明】\r\n样例即为文中(图3)。共有两种不同的输出序列形式，序列BAB有1种产生方式，而序列BBA有2种产生方式，因此答案为5。\r\n【大致数据规模】\r\n约30%的数据满足 n, m ≤ 12；\r\n约100%的数据满足n, m ≤ 500。', 'NOI2009', '', '2011-06-21 16:06:38', 20000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 2000, 78, 'power721'),
(2224, '假面舞会', '一年一度的假面舞会又开始了，栋栋也兴致勃勃的参加了今年的舞会。\r\n今年的面具都是主办方特别定制的。每个参加舞会的人都可以在入场时选择\r\n一个自己喜欢的面具。每个面具都有一个编号，主办方会把此编号告诉拿该面具的人。\r\n为了使舞会更有神秘感，主办方把面具分为k (k≥3)类，并使用特殊的技术将每个面具的编号标在了面具上，\r\n只有戴第i 类面具的人才能看到戴第i+1 类面具的人的编号，戴第k 类面具的人能看到戴第1 类面具的人的编号。\r\n参加舞会的人并不知道有多少类面具，但是栋栋对此却特别好奇，他想自己算出有多少类面具，于是他开始在人群中收集信息。\r\n栋栋收集的信息都是戴第几号面具的人看到了第几号面具的编号。如戴第2号面具的人看到了第5 号面具的编号。\r\n栋栋自己也会看到一些编号，他也会根据自己的面具编号把信息补充进去。\r\n由于并不是每个人都能记住自己所看到的全部编号，因此，栋栋收集的信息不能保证其完整性。\r\n现在请你计算，按照栋栋目前得到的信息，至多和至少有多少类面具。\r\n由于主办方已经声明了k≥3，所以你必须将这条信息也考虑进去。', '输入第一行包含两个整数n, m，用一个空格分隔，n 表示主办\r\n方总共准备了多少个面具，m 表示栋栋收集了多少条信息。\r\n接下来m 行，每行为两个用空格分开的整数a, b，表示戴第a 号面具的人看到了第b 号面具的编号。\r\n相同的数对a, b 在输入文件中可能出现多次。', '输出包含两个数，第一个数为最大可能的面具类数，第二个数为最小可能的面具类数。\r\n如果无法将所有的面具分为至少3 类，使得这些信息都满足，则认为栋栋收集的信息有错误，输出两个-1。', 'D:\\oj\\data\\2224', 'D:\\oj\\data\\2224', '【输入样例一】\r\n6 5\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n3 5\r\n\r\n【输入样例二】\r\n3 3\r\n1 2\r\n2 1\r\n2 3', '【输出样例一】\r\n4 4\r\n\r\n【输出样例二】\r\n-1 -1', '【数据规模和约定】\r\n50%的数据，满足n ≤ 300, m ≤ 1000；\r\n100%的数据，满足n ≤ 100000, m ≤ 1000000。', 'NOI2008', '', '2011-06-21 16:28:09', 10000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 1000, 31, 'power721'),
(2225, '设计路线', 'Z 国坐落于遥远而又神奇的东方半岛上，在小Z 的统治时代公路成为这里主\r\n要的交通手段。Z 国共有n 座城市，一些城市之间由双向的公路所连接。非常神\r\n奇的是Z 国的每个城市所处的经度都不相同，并且最多只和一个位于它东边的\r\n城市直接通过公路相连。Z 国的首都是Z 国政治经济文化旅游的中心，每天都有\r\n成千上万的人从Z 国的其他城市涌向首都。\r\n为了使Z 国的交通更加便利顺畅，小Z 决定在Z 国的公路系统中确定若干条\r\n规划路线，将其中的公路全部改建为铁路。\r\n我们定义每条规划路线为一个长度大于1 的城市序列，每个城市在该序列中\r\n最多出现一次，序列中相邻的城市之间由公路直接相连(待改建为铁路)。并且，\r\n每个城市最多只能出现在一条规划路线中，也就是说，任意两条规划路线不能有\r\n公共部分。\r\n当然在一般情况下是不可能将所有的公路修建为铁路的，因此从有些城市出\r\n发去往首都依然需要通过乘坐长途汽车，而长途汽车只往返于公路连接的相邻的\r\n城市之间，因此从某个城市出发可能需要不断地换乘长途汽车和火车才能到达首\r\n都。\r\n我们定义一个城市的“不便利值”为从它出发到首都需要乘坐的长途汽车的\r\n次数，而Z 国的交通系统的“不便利值”为所有城市的不便利值的最大值，很明\r\n显首都的“不便利值”为0。小Z 想知道如何确定规划路线修建铁路使得Z 国的\r\n交通系统的“不便利值”最小，以及有多少种不同的规划路线的选择方案使得“不\r\n便利值”达到最小。当然方案总数可能非常大，小Z 只关心这个天文数字mod Q\r\n后的值。\r\n注意：规划路线1-2-3 和规划路线3-2-1 是等价的，即将一条规划路线翻转\r\n依然认为是等价的。两个方案不同当且仅当其中一个方案中存在一条规划路线不\r\n属于另一个方案。', '输入第一行包含三个正整数N、M、Q，其中N 表示城市个数，\r\nM 表示公路总数，N 个城市从1~N 编号，其中编号为1 的是首都。Q 表示上文\r\n提到的设计路线的方法总数的模数。接下来M 行，每行两个不同的正数ai、bi (1≤\r\nai , bi ≤ N)表示有一条公路连接城市ai 和城市bi。 输入数据保证一条公路只出现\r\n一次。', '输出应包含两行。第一行为一个整数，表示最小的“不便利值”。 \r\n第二行为一个整数，表示使“不便利值”达到最小时不同的设计路线的方法总数 mod Q 的值。\r\n如果某个城市无法到达首都，则输出两行-1。', 'D:\\oj\\data\\2225', 'D:\\oj\\data\\2225', '5 4 100\r\n1 2\r\n4 5\r\n1 3\r\n4 1', '1\r\n10', '【样例说明】\r\n以下样例中是 10 种设计路线的方法：\r\n(1) 4-5\r\n(2) 1-4-5\r\n(3) 4-5, 1-2\r\n(4) 4-5, 1-3\r\n(5) 4-5, 2-1-3\r\n(6) 2-1-4-5\r\n(7) 3-1-4-5\r\n(8) 1-4\r\n(9) 2-1-4\r\n(10) 3-1-4\r\n【数据规模和约定】\r\n对于 20%的数据，满足N,M ≤ 10。\r\n对于50%的数据，满足N,M ≤ 200。\r\n对于60%的数据，满足N,M ≤ 5000。\r\n对于100%的数据，满足1 ≤ N,M ≤ 100000，1 ≤ Q ≤ 120000000。', 'NOI2008', '', '2011-06-21 16:29:33', 20000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 2000, 35, 'power721'),
(2226, '志愿者招募', '申奥成功后，布布经过不懈努力，终于成为奥组委下属公司人力资源部门的主管。\r\n布布刚上任就遇到了一个难题：为即将启动的奥运新项目招募一批短期志愿者。\r\n经过估算，这个项目需要N 天才能完成，其中第i 天至少需要Ai 个人。\r\n布布通过了解得知，一共有M 类志愿者可以招募。其中第i 类可以从第Si 天工作到第Ti 天，招募费用是每人Ci 元。\r\n新官上任三把火，为了出色地完成自己的工作，布布希望用尽量少的费用招募足够的志愿者，但这并不是他的特长！\r\n于是布布找到了你，希望你帮他设计一种最优的招募方案。', '输入的第一行包含两个整数N, M，表示完成项目的天数和可以招募的志愿者的种类。\r\n接下来的一行中包含N 个非负整数，表示每天至少需要的志愿者人数。\r\n接下来的M 行中每行包含三个整数Si, Ti, Ci，含义如上文所述。为了方便起见，我们可以认为每类志愿者的数量都是无限多的。', '输出中仅包含一个整数，表示你所设计的最优方案的总费用。', 'D:\\oj\\data\\2226', 'D:\\oj\\data\\2226', '3 3\r\n2 3 4\r\n1 2 2\r\n2 3 5\r\n3 3 2', '14', '【样例说明】\r\n招募 3 名第一类志愿者和4 名第三类志愿者。\r\n【数据规模和约定】\r\n30%的数据中，1 ≤ N, M ≤ 10，1 ≤ Ai ≤ 10；\r\n100%的数据中，1 ≤ N ≤ 1000，1 ≤ M ≤ 10000，题目中其他所涉及的数据均不超过2<sup>31</sup>-1。', 'NOI2008', '', '2011-06-21 16:31:02', 20000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 2000, 62, 'power721');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(2227, 'The Almost Lucky Numbers', 'John and Brus believe that the digits 4 and 7 are lucky and all others are not. \r\nAccording to them, an almost lucky number is a number that contains at most one non-lucky digit in its decimal representation.\r\nCan you count the total number of almost lucky numbers between a and b, inclusive.', 'There are several test cases,in each test case, there are two numbers a,b.\r\n- a will be between 1 and 10^50, inclusive. \r\n- b will be between a and 10^50, inclusive.', 'For each the case ouput the total number of almost lucky numbers between a and b, inclusive.', 'D:\\oj\\data\\2227', 'D:\\oj\\data\\2227', '4 7\r\n8 19\r\n28 33\r\n12345678900 98765432100', '4\r\n4\r\n0\r\n91136', '', 'SRM510', '', '2012-02-09 20:41:40', 1000, 65536, 'N', NULL, 1, 2, 50, 1, 50, 2, 1, 30000, 153, 'power721'),
(2228, 'Avalon', 'The King Arthur have a sword Excalibur. It make King Arthur win many battle. Also He have a strong defense treasure which is his scabbard, named Avalon.\r\nHis scabbard can make a magic graph(simple polygon) named avalon, if avalon is mirror symmetry the King Arthur can stand in it and will not be hurt by anything.\r\nNow the King Arthur using his scabbard, you must judge if it is Avalon.', 'There are multiple test case in input, each test case include many rows. first row is a number N means the graph have N points(3<=N<=500),next N rows, each row have two integer x, y, means one of the graph''s point, the graph is simple polygon and the points will be sorted by clockwise.', 'Output only one string, if the graph is Avalon puts "YES" else puts "NO".', 'D:\\oj\\data\\2228', 'D:\\oj\\data\\2228', '3\r\n-1 0\r\n0 1\r\n1 0\r\n4\r\n-1 1\r\n0 1\r\n2 0\r\n-1 0', 'YES\r\nNO', '<a href=../gongju/5.zip>题目</a>', 'HNU Contest', '', '2012-03-24 21:29:28', 1000, 65536, 'N', NULL, 10, 22, 45, 10, 77, 5, 3, 30000, 178, 'power721'),
(2229, 'Be a good snooker player--need SPJ', 'Snooker is a very popular billiard game, ZZ is very interested in it, but he is not very good at it, he always loses when playing with others, now he wants to improve his skills, he wants you to help him solving this problem.\r\nThe game is considered playing in an 2D-plane, balls can be assumed as circles with radius R, table is a W * H rectangle, the left-down corner of the table is (0, 0), x-coordinate increases when you go right, and y-coordinate-up. There are also six holes which can be regarded as circles with radius r, and their positions are: (0, 0), (W / 2, 0), (W, 0), (0, H), (W / 2, H), (W, H), for simplicity, whenever a ball touches the hole (i.e., the intersection is not empty set, even only a point), it falls down into it immediately. ZZ hits the cue ball (white ball) with initial velocity (Vx, Vy), he wants to calculate every balls'' position when all balls are stopped.\r\nSomething you should consider or pay attention to:\r\n* Gravity between the earth and the balls (the gravity accerlation g is given), no other gravities should be considered (e.g., gravity between two balls, balls and the table, etc.);\r\n* The friction between balls and table (the friction coefficient μ is given), no other frictions should be considered;\r\n* The initial velocity of cue ball (Vx, Vy);\r\n* Rebound (when hitting the table border, just assume the mass of the table is infinity), collision (between two balls) and fall into hole;\r\n* The width of the table border should be ignored.\r\n* You can just use classical mechanics (i.e., Newton mechanics) to solve the problem, no theory of relativity is needed.\r\n* No considering electric/magnetic fields.\r\n* In brief, just keep it simple, stupid.', 'There are several test cases, each case contains several lines, the first line of each case is two real numbers R (ball radius) and g (the gravity accerlation), the second line contains an integer 2<=N<=20 for the amount of balls, and real numbers W, H (width and height), r (hole radius), μ (friction coefficient), and Vx, Vy (initial velocity of the cue ball).\r\nNext N lines describe the balls, for each line, there is two real numbers x, y for the position and an integer c for the color, (c = 0 for the cue ball, and c > 0 for other balls, and there is always one and only one ball with c = 0).\r\nThe input will finish with the end of file, input is guaranteed that the number of test cases is not more than 20.', 'For each the case, output N lines, the final position of every balls, specially, if one ball is in the hole, output "-1 -1" in corresponding line, you should output newlines between cases.', 'D:\\oj\\data\\2229', 'D:\\oj\\data\\2229', '1 9.8\r\n2 20 20 1 0.1 10 10\r\n4 4 0\r\n10 10 1\r\n\r\n1 9.8\r\n2 20 20 1 0.1 10 10\r\n4 4 0\r\n10 10 1', '8.585786 8.585786\r\n-1 -1\r\n\r\n8.585786 8.585786\r\n-1 -1', 'Q: Is there a special meaning when c > 0?\r\nA: Snooker has 2 kinds of balls besides the cue ball: the red ball (c = 1) and the color ball (c > 1), there are six color balls: yellow (c = 2), green (c = 3), brown (c = 4), blue (c = 5), pink (c = 6) and black (c = 7), but it is meaningless is this problem.\r\n\r\nQ: What should I do when colliding or rebounding, is there any laws of conservation to handle this?\r\nA: Sorry, but this is also a part of the problem.\r\n\r\nQ: Why you don''t give us the mass of the balls?\r\nA: All balls (including the cue ball) have the same mass, and you ... (Stop! This hint is enough!)\r\n\r\nQ: Why the two cases in the sample is the same?\r\nA: Just to remind you to output a newline between every two cases and there might be newlines between cases in the input.', 'HNU Contest', '', '2011-06-22 22:17:05', 1000, 262144, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 78, 'power721'),
(2230, 'Rubik''s Cube', 'The Rubik''s Cube is a 3-D mechanical puzzle invented in 1974 by Hungarian sculptor and professor of architecture Emo Rubik. Originally called the "Magic Cube", the puzzle was licensed by Rubik to be sold by Ideal Toy Corp. in 1980 and won the German Game of the Year special award for Best Puzzle that year. As of January 2009, 350 million cubes have sold worldwide making it the world''s top-selling puzzle game. It is widely considered to be the world''s best-selling toy.\r\n\r\nIn a classic Rubik''s Cube, each of the six faces is covered by nine stickers, among six solid colours (traditionally white, red, blue, orange, green, and yellow).A pivot mechanism enables each face to turn independently, thus mixing up the colours. For the puzzle to be solved, each face must be a solid colour. Similar puzzles have now been produced with various numbers of stickers, not all of them by Rubik. The original 3 × 3 × 3 version celebrated its thirtieth anniversary in 2010.\r\n<img src=images/problem/22300.jpg />\r\nA Rubik''s Cube always has 8 corner blocks, 12 arris blocks and 6 center blocks. The relative position of center blocks are immovable.\r\nWe can change the cube''s state with the operation below:\r\n<img src=images/problem/22301.jpg />\r\nR : turn the right side with clockwise\r\nr : turn the right side with counterclockwise\r\nL : turn the left side with clockwise\r\nl : turn the left side with counterclockwise\r\nF : turn the front side with clockwise\r\nf : turn the l front side with counterclockwise\r\nB : turn the back side with clockwise\r\nb : turn the back side with counterclockwise\r\nU : turn the up side with clockwise\r\nu : turn the up side with counterclockwise\r\nD : turn the down side with clockwise\r\nd : turn the down side with counterclockwise\r\n\r\nI like put a cube like this: the white side is below, the orange side is front, the blue side is on the right. So if we spread the cube, we can get this:\r\n<img src=images/problem/2230.jpg />\r\nFinally, the question is coming. Give you a cube, can you restitute it in 5 steps?', 'There will have no more than 1000 test cases.\r\nEvery test case contains two parts. First 9 lines indicate the color of the stickers on the six sides with the format below. \r\n<img src=images/problem/22302.jpg />\r\nThen a string with 3 characters, if the string is "###", it means the end of input.', 'For each test case, if you can restitute the cube in five steps, output the least steps you need, OR, just output -1.', 'D:\\oj\\data\\2230', 'D:\\oj\\data\\2230', 'B B B\r\n      R R R\r\n      R R R\r\nR G G W W W B B O Y Y Y\r\nR G G W W W B B O Y Y Y\r\nR G G W W W B B O Y Y Y\r\n      O O O\r\n      O O O\r\n      G G G\r\n***\r\n      B B W\r\n      R R W\r\n      R R W\r\nR G G W W O B B B R Y Y\r\nR G G W W O B B B R Y Y\r\nR G G W W G O O O B Y Y\r\n      O O Y\r\n      O O Y\r\n      G G Y\r\n###', '1\r\n2', '', 'HNU Contest', '', '2011-06-22 22:17:25', 5000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 88, 'power721'),
(2231, 'Digit Wave', 'Tracy love music very much,he always uses "qianqianjingting" for listening songs.Follow picture is the screenshot of listening to music.Also,he is intereasted in the waves about the right picture.He want to discribe it as Digit Wave. To Digit Wave,the height of each strip in the right picture must be as Non-negative integer less than ten.Then,we can use a digit string to represent each music wave as the right picture.\r\n  \r\n<img src=images/problem/2231.jpg  />\r\n\r\nThe digit string of follow picture is 98767468932828,it looks like a wave very much,and there are three crest in the wave discribed as follow picture.A crest is defined as a strip that the heights of its preview strip and next strip are less than its height.\r\n \r\n<img src=images/problem/22311.jpg  />\r\n\r\nNow,we can know the crest number of a digit string.Tracy want know the number of digit strings which have C crests between a inteval [A,B],A and B are the represented integers value of two digit strings and without leading zeros,B is no less than A.', 'There are several test cases,end with EOF.For each test case ,the first two strings mean the digit string of interval [A,B],A is the first one ,B is the second one,the length of all string are less than 100.Following Non-nagetive integer is the C which described as above and less than 30.', 'For each the case, just output as "Case T: A",T is the number of the testcase marked from 1,A is the number of strings which meet the condition of the problem.', 'D:\\oj\\data\\2231', 'D:\\oj\\data\\2231', '328 328 1\r\n121 151 1\r\n1415926 1415927 2', 'Case 1: 0\r\nCase 2: 10\r\nCase 3: 2', 'For case 2,the meeted strings are 121,130,131,132,140,141,142,143,150,151.', 'HNU Contest', '', '2012-04-09 11:11:57', 4000, 65536, 'N', NULL, 1, 19, 5, 18, 95, 3, 1, 30000, 140, 'power721'),
(2232, 'ElGamal Decryption', 'In cryptography, the ElGamal encryption system is an asymmetric key encryption algorithm. It was described by Taher Elgamal in 1984.\r\nElGamal encryption consists of three components: the key generator, the encryption algorithm, and the decryption algorithm.\r\nKey generation\r\n\r\nThe key generator works as follows:\r\n1.Alice picks up a prime number p.\r\n2.Alice generates a number g, which is a primitive root of prime p.\r\n3.Alice chooses a random number x from {0,...,p-1}.\r\n4.Alice computes h=gx (mod p).\r\n5.Alice publishes h, along with the description of p, g, as her public key. Alice retains x as her private key which must be kept secret.\r\n\r\nEncryption\r\nThe encryption algorithm works as follows: to encrypt a message m (0<=m<=p-1) to Alice under her public key h, p, g,\r\n1.Bob chooses a random y from {0,...,p-1},y and (p-1) are relative prime, then calculates a=gy (mod p).\r\n2.Bob calculates the shared secret s=hy (mod p). Since a new s is computed for every message is also called an ephemeral key.\r\n3.Bob calculates b=m*s (mod p).\r\n4.Bob sends the ciphertext (a, b) to Alice.\r\nChris is hacker who intercepts the ciphertext (a, b), can you figure out what the message is?', 'On the first line a positive integer T (T<=50): the number of test cases.\r\nEach test case has one line, consists of five integers, p, h, g, a, b. Integer p is in the range of [2, 109], other integers are in the range of [0, p-1].', 'For each test case, output one line with one integer: The message m from Bob to Alice. (0<=m<=p-1)', 'D:\\oj\\data\\2232', 'D:\\oj\\data\\2232', '2\r\n7 2 3 5 1\r\n10007 4118 5 9141 6413', '2\r\n1320', '', 'HNU Contest', '', '2011-06-22 22:17:36', 5000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 57, 'power721'),
(2233, 'The Least Palindromic Number', 'Palindromic numbers are digital strings that read the same both forwards and backwards. For example, 121, 44 and 3 are Palindromic numbers, 175, 36 are not;\r\n\r\nFor a given integer N, you are to find a palindromic number P that satisfy P>N. However, there are many such palindromic numbers. Your task is to find the least one.', 'There are several test cases, each test case contains only one positive integer N in one line. The number of digits of N is not exceeding 10,000, and N has not lead zeroes.\r\nThe input will finish with the end of file.', 'For each the case, your program will output the least palindromic number P (P > N) on separate line.', 'D:\\oj\\data\\2233', 'D:\\oj\\data\\2233', '44\r\n3\r\n175', '55\r\n4\r\n181', '', 'HNU Contest', '', '2012-05-13 13:08:31', 5000, 65536, 'N', NULL, 5, 27, 19, 21, 81, 6, 5, 30000, 186, 'power721'),
(2234, 'GCD depth', 'In mathematics, the greatest common divisor (gcd), also known as the greatest common factor (gcf), or highest common factor (hcf), of two or more non-zero integers, is the largest positive integer that divides the numbers without a remainder. For example, the GCD of 8 and 12 is 4.\r\n------ From Wikipedia\r\n\r\nIn this problem,we will introduce a new value related to GCD,which is GCD depth. To GCD depth,follow function will discribe it clearly.\r\n\r\nint GCD_depth( int x , int y ) {\r\nif ( y == 0 ) return 0;\r\nelse return GCD_depth( y , x%y ) + 1; \r\n}\r\n\r\nAnd we define the GCD depth of y with x is GCD_depth(x,y).For example , GCD depth of 5 with 3 is 4.You can find the GCD depth of two numbers easily ,but LH wants know that: for a number x, how many numbers meet the condition that the GCD depth with x equals to d in the interval [y0,y1]? So please help LH to find the answer quickly.', 'There are several test cases, each test case contains four Non-negative integers x( 0 <= x <= 200000) , d( 0 <= d <= 30 ),y0 ,y1(0 <= y0 <= y1 <= 10^9),which descripted as above. \r\nThe input will finish with the end of file.', 'For each the case, just output a integer which represent the number of integers meeted the discripted condition.', 'D:\\oj\\data\\2234', 'D:\\oj\\data\\2234', '7 2 0 5\r\n3 0 0 1\r\n11 1 2 8', '2\r\n1\r\n0', '', 'HNU Contest', '', '2011-06-24 17:37:27', 5000, 65536, 'N', NULL, 1, 9, 11, 8, 89, 2, 1, 30000, 141, 'power721'),
(2235, 'DIY Necklace', 'Necklace is so popular in the world of programmer,because not only can you give it to your girl friend as a present,but also use it as the background of a problem''s description.Here,we will also discuss a problem with necklace.One day,HeHe go to a gift shop to buy a necklace,but he find the styles of necklaces in the shop are limited.So he buys one necklace and wants to DIY his own style.First,he remove the beans of the necklace and put them as one line with the original order.Second,he will choose some beans which not less than one from left to right.Because beans of necklace may have different color,so HeHe wants to know how many styles can he DIY his own necklace.We say two styles of necklace are different with follow two situations:\r\n\r\na) the number of beans in two necklace are different;\r\nb) the number of beans in two necklace are same,but at least exists one i that the ith bean of necklace A are different color with the ith bean of necklace B,i may be 1 to the number of beans(assume we consider the first bean as 1th bean)\r\n\r\nFor example,the orginal necklace has three beans with blue,orange and blue,so he may has six way to choose which describe as follow figure: \r\n \r\n<img src=images/problem/2235.jpg />\r\n\r\nNow give you a necklace,please tell HeHe the total styles he can DIY.', 'There are several test cases,end with EOF.For each test case ,the first line is two integers n(0 < n <= 500000),m(0 < m < 109),n means the number of beans in the original necklace,m means that you should output the answer mod m.Follow line will have n Non-negative integers less than 100000,every integer will represent a kind of color,same integer with same color.', 'For each the case, just output a integer which represent the total number of styles which HeHe can DIY by mod m.', 'D:\\oj\\data\\2235', 'D:\\oj\\data\\2235', '3 100\r\n1 888 1\r\n4 100\r\n1 2 3 4\r\n1 1\r\n0', '6\r\n15\r\n0', '', 'HNU Contest', '', '2012-05-12 22:06:41', 5000, 65536, 'N', NULL, 1, 3, 33, 2, 67, 2, 1, 30000, 105, 'power721'),
(2236, 'Distinct Numbers', '<img src=images/problem/2236.jpg />', 'The first line contains a number T <= 200, which indicates the number of test case. Then it follows T lines, each line is two positive numbers n, m.(n,m<109).', 'For each test case, you should first output a line with"Case #:",where # is the id of the test case, then you should output a line containing the particular number t, i.e., the least integer such that there are m different integers in the sequence  , <img src=images/problem/22361.jpg /> .', 'D:\\oj\\data\\2236', 'D:\\oj\\data\\2236', '2\r\n2 3\r\n3 2', 'Case 1:\r\n3\r\nCase 2:\r\n2', '', 'HNU Contest', '', '2011-07-09 08:35:26', 1000, 65536, 'N', NULL, 0, 5, 0, 5, 100, 2, 0, 30000, 97, 'power721'),
(2237, 'Word Counting', 'Each year on May the graduate students are busy writing thesis, and the graduation thesis needs thousands of words. It''s not a simple matter. Counting the words correctly become an interesting job.\r\n\r\nWe all know that the thesis may include English words, numbers, punctuation marks, images, formulas, and so on. During the word count, we assume that English words, a string of meaningful numbers and punctuation mark is valid statistics word. The single character in English words or numbers can not be counted as a word. For example, the word "acm" count as one word instead of three words, number "2011" counted as a word. Of course, such space and carriage returns(Enter) can''t be considered a word. Write a program to help graduates to test whether the number of words under the thesis requirement.', 'There are multiple test case in input, each test case end with a single line "###", the input may contain english character, numbers, punctuation e.g. '':'' , '','' , ''+'' , ''-'', and space, Enter.', 'Output the number of word for each test case, and a separate line for each case.', 'D:\\oj\\data\\2237', 'D:\\oj\\data\\2237', 'A simple test\r\n###\r\nHunan University 2011 the 7th Programming Contest.\r\n###\r\nThe 5th Central South China Programming Contest.\r\n###', '3\r\n8\r\n8', '', 'HNU Contest', '', '2012-07-25 00:07:54', 1000, 65536, 'N', NULL, 8, 41, 20, 22, 79, 7, 6, 30000, 236, 'power721'),
(2238, 'Blocks', 'Mr Black is design a program to display contents on a special screen which is divided into small square blocks and can refresh only parts of them once a time. In order to save resource, he wants to refresh as few blocks as possible when drawing on the screen, so he need to find out which blocks should be refreshed when new windows need to be drew on the screen.', 'The first and second line of input file are the width and height of the screen, (0 < width <= 1280, 0 < height <= 720) The third line is the block size, 1 < block size < 105 (notice that the width and height may not divide exactly by block size). The rest lines are the position description of the windows, one line for each window with its coordinates of the upper-left conner and the lower right conner(The coordinates of the upper-left conner of the screen is x,y(0,0), the bottom-right conner of the screen is (width-1,height-1), windows may be partly or totally outside the screen). The number of windows is no more than 50.', 'The output should be a two-dimensional array, use ''*'' to indicate the is changed and ''.'' for not.', 'D:\\oj\\data\\2238', 'D:\\oj\\data\\2238', '300\r\n90\r\n10\r\n30,10,69,19,\r\n20,20,29,39,\r\n40,40,59,49,\r\n70,50,79,69,\r\n30,70,69,79,\r\n70,20,79,29,\r\n20,60,29,69,\r\n110,10,179,19,\r\n140,10,149,79,\r\n210,10,219,49,\r\n270,10,279,49,\r\n220,50,229,59,\r\n230,60,239,69,\r\n240,70,249,79,\r\n250,60,259,69,\r\n260,50,269,59,', '..............................\r\n...****....*******...*.....*..\r\n..*....*......*......*.....*..\r\n..*...........*......*.....*..\r\n....**........*......*.....*..\r\n.......*......*.......*...*...\r\n..*....*......*........*.*....\r\n...****.......*.........*.....\r\n..............................', '', 'HNU Contest', '', '2011-06-24 15:19:52', 5000, 65536, 'N', NULL, 0, 6, 0, 6, 100, 1, 0, 30000, 74, 'power721'),
(2239, 'Easy math', 'In this problem,you will be give three positive integers,and you are to calculate a<sup>b<sup>c</sup></sup>%1000000007.', 'Each line of input will contain three positive integers:a,b,c<=1000000000.', 'For each case, print a number index the answer.', 'D:\\oj\\data\\2239', 'D:\\oj\\data\\2239', '2 2 2\r\n2 3 2', '16\r\n512', '', '', '', '2012-05-11 15:38:23', 1000, 65536, 'N', NULL, 8, 31, 26, 22, 79, 9, 6, 30000, 276, 'power721'),
(2240, 'How many primes', 'The branch of mathematics called number theory is about properties of numbers. One of the areas that has captured the interest of number theoreticians for thousands of years is the question of primality. A prime number is a number that is has no proper factors (it is only evenly divisible by 1 and itself). The first prime numbers are 2,3,5,7 but they quickly become less frequent. One of the interesting questions is how dense they are in various ranges. Adjacent primes are two numbers that are both primes, but there are no other prime numbers between the adjacent primes. For example, 2,3 are the only adjacent primes that are also adjacent numbers. \r\nYour program is given 2 numbers: L and U (2<=L< U<2^31), and you are to find how many primes between L and U.', 'Each line of input will contain two positive integers, L and U, with L < U. <b>The difference between L and U will not exceed 1,000,000.</b>', 'For each L and U, print a number index the number of primes between L and U.', 'D:\\oj\\data\\2240', 'D:\\oj\\data\\2240', '2 5\r\n2 1000000', '3\r\n78498', '', '', '', '2012-05-10 15:25:09', 2000, 65536, 'N', NULL, 8, 34, 24, 23, 85, 9, 4, 30000, 252, 'power721'),
(2241, 'Building Roads', 'Farmer John最近得到了一些新的农场，他想新修一些道路使得他的所有农场可以经过原有的或是新修的道路互达（也就是说，从任一个农场都可以经过一些首尾相连道路到达剩下的所有农场）。有些农场之间原本就有道路相连。 所有N(1 <= N <= 1,000)个农场（用1..N顺次编号）在地图上都表示为坐标为(X_i, Y_i)的点(0 <= X_i <= 1,000,000；0 <= Y_i <= 1,000,000)，两个农场间道路的长度自然就是代表它们的点之间的距离。现在Farmer John也告诉了你农场间原有的M(1 <= M <= 1,000)条路分别连接了哪两个农场，他希望你计算一下，为了使得所有农场连通，他所需建造道路的最小总长是多少。', '* 第1行: 2个用空格隔开的整数：N 和 M * 第2..N+1行: 第i+1行为2个用空格隔开的整数：X_i、Y_i * 第N+2..N+M+2行: 每行用2个以空格隔开的整数i、j描述了一条已有的道路， 这条道路连接了农场i和农场j', '* 第1行: 输出使所有农场连通所需建设道路的最小总长，保留2位小数，不必做 任何额外的取整操作。为了避免精度误差，计算农场间距离及答案时 请使用64位实型变量', 'D:\\oj\\data\\2241', 'D:\\oj\\data\\2241', '4 1\r\n1 1\r\n3 1\r\n2 3\r\n4 3\r\n1 4\r\n\r\n输入说明:\r\n\r\nFJ一共有4个坐标分别为(1,1)，(3,1)，(2,3)，(4,3)的农场。农场1和农场\r\n4之间原本就有道路相连。', '4.00\r\n\r\n输出说明:\r\n\r\nFJ选择在农场1和农场2间建一条长度为2.00的道路，在农场3和农场4间建一\r\n条长度为2.00的道路。这样，所建道路的总长为4.00，并且这是所有方案中道路\r\n总长最小的一种。', '', 'USACO 2007', '', '2012-01-02 22:33:39', 5000, 65536, 'N', NULL, 3, 5, 60, 2, 40, 3, 3, 30000, 140, 'power721'),
(2242, '素数筛选A', 'The Problem is  : Give you a Ineteger N,Could you tell me the number of prime number between 1 to N.', 'There are several cases.\r\neach case , only one integer N (N<=100000000)', 'For each case ,output the answer for a line.', 'D:\\oj\\data\\2242', 'D:\\oj\\data\\2242', '10', '4', '', 'swust20095862', '', '2012-07-26 17:20:56', 1000, 65536, 'N', NULL, 9, 61, 15, 27, 87, 18, 4, 30000, 534, 'swust20095862'),
(2243, '<a href=http://acm.uestc.edu.cn/problem.php?pid=1479>Finding Nemo</a>', '', '', '', 'D:\\oj\\data\\2243', 'D:\\oj\\data\\2243', '', '', '', '', '', '2011-07-10 11:24:13', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 53, 'power721'),
(2244, 'The Bovine Fire Drill', 'The N (3 <= N <= 250) cows (conveniently labeled cow_1..cow_N) sat\r\nin a perfect circle  around the camp fire in chairs numbered\r\nchair_1..chair_N as Farmer John told them stories of the old days\r\n(cow_i sits in chair_i, of course). At the conclusion of one story,\r\nFJ suggested they perform a Bovine Fire Drill.\r\n\r\nIn a Bovine Fire Drill, one cow at a time walks around the circle\r\nfrom her chair to a potentially new chair while the other cows chant\r\n"Fire, fire, fire." When it is cow_i''s turn to move, she rises and\r\nmoves clockwise to the i''th chair encountered in that direction (so\r\nif it was cow_3''s turn, she would rise from chair_3 and move to\r\nchair_6 if N >= 6).\r\n\r\nWhen cow_i arrives at her new chair, she taps any cow sitting there\r\non the shoulder; that cow rises to make room for cow_i, who sits\r\ndown. This process continues until a cow lands in an empty chair\r\nor until a cow is asked to move for a second time. In either of\r\nthose cases, the game ends. Cow 1 always starts, so it is her chair\r\nthat will be the empty one.\r\n\r\nOnly rarely do all the cows get to participate, as the game termination\r\nconditions arise naturally and frequently from the properties of\r\nwhole numbers. The final cow to move (whether she ends the game by\r\nsitting in cow_1''s chair or by tapping the shoulder of a cow who\r\nhas already moved) receives a special treat of extra tender grass.\r\n\r\nHelp FJ plan in advance to learn which cow will get the tender\r\ngrass.\r\n\r\nFor example, consider five cows sitting around the blazing campfire:\r\n\r\n  2   -   3\r\n (         )\r\n  1 - 5 - 4\r\n\r\nFirst, cow 1 walks one space and taps cow 2, who rises. (The *\r\ndenotes the empty chair.)\r\n\r\n    2\r\n 1   -   3\r\n (         )\r\n  * - 5 - 4\r\n\r\nCow 2 walks two spaces and taps cow 4, who begins her journey:\r\n\r\n  1   -    3\r\n (         )\r\n  * -  5 - 2\r\n          4\r\n\r\nCow 4 will walk four spaces and tap cow 3:\r\n             3\r\n  1   -    4  \r\n (         )\r\n  * -  5 - 2\r\n          \r\nFinally, cow 3 will walk three spaces to chair_1, which is empty and thus\r\nterminates\r\nthe drill.\r\n             \r\n  1   -    4  \r\n (         )\r\n  3 -  5 - 2\r\n\r\nCow 3 receives tender spring grass as the other cows clap and cheer.', '* Line 1: A single integer: N', '* Line 1: The number of the cow who ends the drill', 'D:\\oj\\data\\2244', 'D:\\oj\\data\\2244', '5', '3', '', 'USACO', '', '2011-07-14 11:28:28', 1000, 65536, 'N', NULL, 5, 5, 100, 0, 0, 5, 5, 30000, 71, 'power721'),
(2245, 'Skewed Sorting', 'Farmer John has 2^N (1 <= N <= 10) cows, each conveniently labeled\r\nwith paint on her flank with a number in the range 1..2^N. They are\r\nstanding in a line in some random order. The first cow in line is\r\ncow_1; the second cow in line is cow_2; and so on (1 <= cow_i <=\r\n2^N). Of course, cow_1 is unlikely to carry the painted label 1.\r\n\r\nHe performs the following algorithm to put them in order.\r\n\r\n    1. If there is more than one cow, then partition the cows into\r\n       two equal-sized sub-groups. Sort the first sub-group using\r\n       this algorithm and then sort the second sub-group, also using\r\n       this algorithm.\r\n\r\n    2. Consider the current set of cows to be sorted as an equal-length\r\n       pair of (potentially huge) base 2^N numbers. If the second\r\n       number is smaller than the first one, then swap all the\r\n       elements of the second one with those elements of the first\r\n       one.\r\n\r\nThe cows would like to know how much distance they cover while\r\nmoving around during this ''sorting'' procedure.\r\n\r\nGiven the initial configuration of the cows, process the list\r\naccording to the algorithm above and then print out:\r\n\r\n    * the sum of the total distances traveled by all cows and\r\n\r\n    * the final configuration of the cows after this ''sorting''\r\n      procedure.\r\n\r\nBy way of example, consider this line of 2^3=8 cows:\r\n\r\n        8 5 2 3 4 7 1 6\r\n\r\nFirst, Farmer John will sort each half of the line separately:\r\n\r\n        8 5 2 3 | 4 7 1 6\r\n\r\nSince each half still has more than one cow, Farmer John will sort\r\nthose halves separately; starting with the ''first'' half:\r\n\r\n        8 5 | 2 3\r\n\r\nPartitioning again, FJ makes\r\n\r\n        8 | 5      and        2 | 3\r\n\r\neach of which can be sorted by second rule, ultimately yielding:\r\n\r\n        5 | 8      and        2 | 3 (<--unchanged)\r\n\r\nThe distance traveled by each cow during the first subgroup''s sort\r\nis 1, so total_distance_moved becomes 2. The second half is already\r\nsorted, so the total_distance_moved stays at 2. The new configuration\r\nof this sub-group is:\r\n\r\n        5 8 | 2 3\r\n\r\nFor step 2 of the algorithm on the subgroup above, we compare the\r\ntwo sides lexicographically (5 8 vs. 2 3). Since the 2 comes before\r\n5, we swap the two elements of the first half with the corresponding\r\nelements of the second half, yielding:\r\n\r\n        2 3 5 8\r\n\r\nEach of the four cows moved two spaces in this swap, contributing\r\na total of 8 moves, so total_distance_moved becomes 10.\r\n\r\nConsider the other half of the cows; we divide the list of four\r\ninto two sub-groups:\r\n\r\n        4 7 | 1 6\r\n\r\nEach pair (4, 7) and (1, 6) is already sorted.\r\n\r\nComparing (4 7) to (1 6), since 1 comes before 4, we must swap the\r\ntwo sub-groups:\r\n\r\n        1 6 4 7\r\n\r\nwhich contributes a total of 8 more moves, bringing total_distanced_move\r\nto 18.\r\n\r\nAfter the operations above, the list looks like this (and it''s time\r\nfor step 2 to be performed on the two groups of 4):\r\n\r\n        2 3 5 8 | 1 6 4 7\r\n\r\nSince 1 comes before 2, we must swap the halves, this yielding this\r\nconfiguration:\r\n\r\n        1 6 4 7 2 3 5 8\r\n\r\nSince each of 8 cows moved four units, this contributes a total of\r\n32 more moves, making total_distance_moved become 50\r\n\r\nTherefore, the answer is 50 and 1 6 4 7 2 3 5 8.', '* Line 1: A single integer: N\r\n\r\n* Lines 2..2^N + 1: Line i+1 contains a single integer: cow_i', '* Line 1: One integer, the total distance traveled by all the cows\r\n\r\n* Lines 2..2^N + 1: Line i+1 will contain one integer: the ith cow in\r\n        the final configuration', 'D:\\oj\\data\\2245', 'D:\\oj\\data\\2245', '3\r\n8\r\n5\r\n2\r\n3\r\n4\r\n7\r\n1\r\n6', '50\r\n1\r\n6\r\n4\r\n7\r\n2\r\n3\r\n5\r\n8', '', 'USACO', '', '2011-07-12 09:56:40', 1000, 65536, 'N', NULL, 4, 4, 100, 0, 0, 4, 4, 30000, 56, 'power721'),
(2246, '3D Space Exploration', 'Farmer John''s cows have finally blasted off from earth and are now\r\nfloating around space in their Moocraft. The cows want to reach\r\ntheir fiery kin on Io, a moon of Jupiter, but to do so they first\r\nmust navigate the dangerous asteroid belt.\r\n\r\nBessie is piloting the craft and must guide it through this treacherous\r\nN x N x N (1 <= N <= 100) sector of space. All asteroids in this\r\nsector comprise some number of 1 x 1 x 1 blocks of space-rock\r\nconnected along their faces (two blocks sharing only a vertex or\r\nonly an edge count as two distinct asteroids).\r\n\r\nPlease help Bessie by counting the number of distinct asteroids in\r\nthe field.\r\n\r\nConsider a 3 x 3 x 3 space where the first slice of space looks\r\nlike this, with ''M'' indicating the starting location of the Moocraft\r\n(1,1,1) and ''D'' is the destination at (3,3,3). In these maps, these\r\nmarkers serve mostly as map orientation rather than providing useful\r\ninformation to solve the problem.\r\n\r\nIn these diagrams and also in the input file, the *''s represent\r\nasteroid chunks and each ''.'' represents a vast void of empty space.\r\n\r\n   Close slice    Middle slice     Far Slice     Assembled with overlaps\r\n     +---+            +---+          +---+                  +---+ Far\r\n     |M..|            |..*|          |...|                  |...|\r\n     |.*.|            |.*.|          |.*.|                +---+.|\r\n     |...|            |*..|          |..D|                |..*|D|\r\n     +---+            +---+          +---+              +---+.|-+\r\n                                                        |M..|.|\r\n                                                        |.*.|-+\r\n                                                        |...|\r\n                                                  Close +---+\r\n\r\nVisual inspection shows three asteroids, including a long one through\r\nthe middle of the map. Here''s a map with the asteroid pieces labelled:\r\n\r\n                                  +---+ Far\r\n                                 /|...|\r\n                                / |.1.|\r\n                               /  |...|\r\n                              /   +---+\r\n                             +---+   /\r\n                            /|..3|  /  \r\n                           / |.1.| /\r\n                          /  |2..|/\r\n                         /   +---+\r\n                        +---+   /\r\n                        |...|  /\r\n                        |.1.| /\r\n                        |...|/\r\n                  Close +---+', '* Line 1: A single integer: N\r\n\r\n* Lines 2..N^2+1: Line i-1 contains line 1 + ((k+1)%N) of slice int (\r\n        (i+N-1)/N ): N characters', '* Line 1: A single integer indicating the number of asteroids in the\r\n        field', 'D:\\oj\\data\\2246', 'D:\\oj\\data\\2246', '3\r\n...\r\n.*.\r\n...\r\n..*\r\n.*.\r\n*..\r\n...\r\n.*.\r\n...', '3', '', 'USACO', '', '2011-07-15 09:11:40', 1000, 65536, 'N', NULL, 8, 9, 89, 1, 14, 6, 6, 30000, 67, 'power721'),
(2247, 'String Function Encoding', 'Bessie discovered a new function that the entire herd can apply to\r\nits character strings.\r\n\r\nGiven both a number N (1 <= N <= 15) and a string S, with length\r\nstrictly greater than N, define f(N, S) as a new string composed\r\nof the concatenation of the substring from character N (zero based\r\n-- first character is number 0) through the end of S and the string\r\nS itself.\r\n\r\nFor example, with N = 2, and S = "COW", f(N, S) = "W" + "COW" =\r\n"WCOW". Also, f(3, "USACO") = "CO" + "USACO" = "COUSACO".\r\n\r\nBessie is enthralled with this function and wants to iterate it\r\nseveral times. For example, if she iterates the function once for\r\n"COW" and N = 2, she will get "WCOW". If she applies the function\r\nwith N = 2 again to that string, she will get "OWWCOW", and if she\r\napplies it one more time with N = 2, she will get "WCOWOWWCOW".\r\n\r\nHelp Bessie encode a total of Z (1 <= Z <= 100) strings, str_1,\r\nstr_2, and so on.  Each str_i has length in the range 2..100 and\r\ncontains only upper case letters. Each string is presented with its\r\nown N_i (0 <= N_i < length(str_i), and iteration count C_i (1 <= C_i\r\n<= 12).', '* Line 1: A single integer: Z\r\n\r\n* Lines 2..Z+1: Line i+1 contains two space-separated integers, a\r\n        space, and string to be encoded: N_i, C_i, and str_i', '* Lines 1..Q: Line j contains the iterated, encoded version of str_j', 'D:\\oj\\data\\2247', 'D:\\oj\\data\\2247', '2\r\n2 3 COW\r\n3 2 USACO', 'WCOWOWWCOW\r\nSACOCOUSACO', 'The arrow denotes an iteration of the function\r\nCOW -> WCOW -> OWWCOW -> WCOWOWWCOW\r\nUSACO -> COUSACO -> SACOCOUSACO', 'USACO', '', '2011-07-12 09:20:34', 1000, 65536, 'N', NULL, 4, 6, 67, 2, 33, 4, 4, 30000, 68, 'power721'),
(2248, 'Corn Maze', 'This past fall, Farmer John took the cows to visit a corn maze. But\r\nthis wasn''t just any corn maze: it featured several gravity-powered\r\nteleporter slides, which cause cows to teleport instantly from one\r\npoint in the maze to another. The slides work in both directions:\r\na cow can slide from the slide''s start to the end instantly, or\r\nfrom the end to the start. If a cow steps on a space that hosts\r\neither end of a slide, she must use the slide.\r\n\r\nThe outside of the corn maze is entirely corn except for a single\r\nexit.\r\n\r\nThe maze can be represented by an N x M (2 <= N <= 300; 2 <= M\r\n<= 300) grid. Each grid element contains one of these items:\r\n\r\n   * Corn (corn grid elements are impassable)\r\n\r\n   * Grass (easy to pass through!)\r\n\r\n   * A slide endpoint (which will transport a cow to the other\r\n     endpoint)\r\n\r\n   * The exit\r\n\r\nA cow can only move from one space to the next if they are adjacent\r\nand neither contains corn. Each grassy space has four potential\r\nneighbors to which a cow can travel. It takes 1 unit of time to\r\nmove from a grassy space to an adjacent space; it takes 0 units of\r\ntime to move from one slide endpoint to the other.\r\n\r\nCorn-filled spaces are denoted with an octothorpe (#). Grassy spaces\r\nare denoted with a period (.). Pairs of slide endpoints are denoted\r\nwith the same uppercase letter (A-Z), and no two different slides\r\nhave endpoints denoted with the same letter. The exit is denoted\r\nwith the equals sign (=).\r\n\r\nBessie got lost. She knows where she is on the grid, and marked her\r\ncurrent grassy space with the ''at'' symbol (@). What is the minimum\r\ntime she needs to move to the exit space?\r\n\r\nConsider the following grid, with N=5 and M=6:\r\n\r\n            ###=##\r\n            #.W.##\r\n            #.####\r\n            #.@W##\r\n            ######\r\n\r\nA single slide has endpoints denoted by an uppercase W. Her optimal\r\nstrategy is to move right to the slide endpoint in 1 time, take the\r\nslide in 0 time to the other endpoint, and move right and up in 2\r\nmore time to end on the exit.  This requires a total of 3 time, the\r\nminimum.', '* Line 1: Two space separated integers: N and M\r\n\r\n* Lines 2..N+1: Line i+1 describes row i of the maze: M characters (no\r\n        spaces)', '* Line 1: An integer, corresponding to the shortest time that Bessie\r\n        needs to exit the maze.', 'D:\\oj\\data\\2248', 'D:\\oj\\data\\2248', '5 6\r\n###=##\r\n#.W.##\r\n#.####\r\n#.@W##\r\n######', '3', '', 'USACO', '', '2011-07-12 09:22:57', 1000, 65536, 'N', NULL, 2, 4, 50, 2, 50, 2, 2, 30000, 67, 'power721'),
(2249, 'Cow Checkers', 'One day, Bessie decides to challenge Farmer John to a game of ''Cow\r\nCheckers''. The game is played on an M*N (1 <= M <= 1,000,000; 1 <=\r\nN <= 1,000,000) checkerboard that initially contains a single checker\r\npiece on the checkboard square coordinates (X, Y) (0 <= X < M; 0\r\n<= Y < N). The bottom leftmost square of the checkerboard has\r\ncoordinates (0, 0), and the top rightmost square has coordinates\r\n(M-1, N-1). Bessie always moves first, and then the two players\r\nalternate turns.  Each turn comprises one of three types of moves:\r\n\r\n1) Move the checker piece to any square on the same row to the left\r\n   of its current position.\r\n\r\n2) Move the checker piece to any square on the same column below its\r\n   current position.\r\n\r\n3) Move the checker piece to any spot k squares below and k squares\r\n   to the left of the current square (where k is any positive integer\r\n   such that this new spot is still on the checkerboard).\r\n\r\nThe first player unable to make a move (i.e., because the checker\r\nis at (0, 0)) loses. Given that Bessie always goes first, determine\r\nwho will win the game if both play optimally.\r\n\r\nPlay and report the winner for T games (1 <= T <= 1,000) reading\r\nin a new X,Y starting value for each new game.', '* Line 1: Two space-separated integers: M and N\r\n\r\n* Line 2: A single integer: T\r\n\r\n* Lines 3..T+2: Two space-separated integers: X and Y', '* Lines 1..T: Should contain either "Farmer John" or "Bessie"\r\n        depending on who wins each  game.', 'D:\\oj\\data\\2249', 'D:\\oj\\data\\2249', '3 3\r\n1\r\n1 1', 'Bessie', 'Farmer John and Bessie are playing one game on a 3*3 checkerboard with the \r\nchecker piece initially at (1, 1) (i.e. at the center of the board).\r\nBessie initially can only move the checker piece to either (1, 0) or (0, \r\n1), or (0, 0). Bessie can immediately win by moving the piece to (0, 0).', 'USACO', '', '2011-07-11 08:40:19', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 55, 'power721'),
(2250, 'Forgotten Password', 'As has happened to so many of us, Bessie has forgotten her cowtube\r\npassword. She does, however, remember some handy bits of information\r\nabout it.\r\n\r\nFirst, she remembers that her password (denoted as variable P) has\r\nlength L (1 <= L <= 1,000) roman characters and can be split into\r\none or more words (not necessarily unique) from a dictionary composed\r\nof NW (1 <= NW <= 1,000) unique words.  A word W_i is defined as a\r\nsequence of 1..20 lowercase letters of the Roman alphabet (''a''..''z'').\r\n\r\nShe also remembers certain letters from her password along with\r\ntheir positions.\r\n\r\nConsider the following example. Bessie knows that her password looks\r\nlike "a??l?ban???????" (''?'' represents a letter she cannot remember),\r\nand her dictionary has the following words:\r\n\r\napple\r\ncow\r\nfarmer\r\nbanana\r\nbananas\r\npies\r\n\r\nThe two possible passwords for Bessie to have are "applebananapies" and \r\n"applebananascow".\r\n\r\nGiven the dictionary, and the letters that Bessie remembers, please\r\nfind her password. If more than one password is valid, find the\r\nlexicographically least string that works.', '* Line 1: Two space-separated integers: L and NW\r\n\r\n* Line 2: A string of length L: P\r\n\r\n* Lines 3..NW+2: Line i+2 contains the ith word in the dictionary: W_i', '* Line 1: The lexicographically least password that fits', 'D:\\oj\\data\\2250', 'D:\\oj\\data\\2250', '15 6\r\na??l?ban???????\r\napple\r\ncow\r\nfarmer\r\nbanana\r\nbananas\r\npies', 'applebananapies', '', 'USACO', '', '2011-07-11 08:41:24', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 32, 'power721'),
(2251, 'Mowing the Lawn', 'After winning the annual town competition for best lawn a year ago,\r\nFarmer John has grown lazy; he has not mowed the lawn since then\r\nand thus his lawn has become unruly. However, the competition is\r\nonce again coming soon, and FJ would like to get his lawn into\r\ntiptop shape so that he can claim the title.\r\n\r\nUnfortunately, FJ has realized that his lawn is so unkempt that he\r\nwill need to get some of his N (1 <= N <= 100,000) cows, who are\r\nlined up in a row and conveniently numbered 1..N, to help him. Some\r\ncows are more efficient than others at mowing the lawn; cow i has\r\nefficiency E_i (0 <= E_i <= 1,000,000,000).\r\n\r\nFJ has noticed that cows near each other in line often know each\r\nother well; he has also discovered that if he chooses more than K\r\n(1 <= K <= N) consecutive (adjacent) cows to help him, they will\r\nignore the lawn and start a party instead. Thus, FJ needs you to\r\nassist him: determine the largest total cow efficiency FJ can obtain\r\nwithout choosing more than K consecutive cows.', '* Line 1: Two space-separated integers: N and K\r\n\r\n* Lines 2..N+1: Line i+1 contains the single integer: E_i', '* Line 1: A single integer that is the best total efficiency FJ can\r\n        obtain.', 'D:\\oj\\data\\2251', 'D:\\oj\\data\\2251', '5 2\r\n1\r\n2\r\n3\r\n4\r\n5', '12', 'FJ has 5 cows whose efficiencies are 1, 2, 3, 4, and 5, in that\r\norder. He wants to choose some of the cows such that their total\r\nefficiency is maximized, but he cannot choose more than 2 consecutive\r\ncows.\r\nFJ chooses all cows but the third. The total efficiency of the cows is thus\r\n1 + 2 + 4 + 5 = 12.', 'USACO', '', '2011-09-17 10:31:35', 1000, 65536, 'N', NULL, 0, 1, 0, 1, 100, 1, 0, 30000, 32, 'power721'),
(2252, 'Soldering', 'The cows are playing with wires! They have learned a technique\r\ncalled soldering, in which they connect two pieces of wire together\r\nby attaching the endpoint of one wire to a location along the length\r\nof the other. (Soldering endpoint to endpoint is not allowed.) There\r\ncan be multiple solder junctions at the same point.\r\n\r\nThe cows have a plan for an Amazing Structure they would like to\r\nbuild. It is in the form of a graph with N (1 <= N <= 50,000) nodes\r\nand N-1 edges of unit length so that each pair of nodes is connected.\r\nEach edge is described by a pair of integers, A and B (1 <= A <=\r\nN; 1 <= B <= N; A != B).\r\n\r\nThe cows are able to buy wire from a local store; however longer\r\nwire is more expensive. In particular the cows can buy a wire of\r\nlength L with cost L*L, but they cannot cut wires or join wires\r\ntogether.\r\n\r\nGiven the plan, the cows would like solder wires together to build\r\ntheir Amazing Structure. Please help them find the minimum possible\r\ncost!\r\n\r\nTest data worth at least 50% of the points will have N <= 2,000.\r\n\r\nPartial feedback will be provided on your first 50 submissions to this problem.', '* Line 1: A single integer: N\r\n\r\n* Lines 2..N: Two space-separated integers describing an edge: A and B', '* Line 1: A single integer, the cost of soldering the tree together.\r\n        Note that this number may not always fit in a 32-bit integer.', 'D:\\oj\\data\\2252', 'D:\\oj\\data\\2252', '6\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6', '7', 'Since all nodes in the structure are connected to node 1, we only need to\r\nbuy one wire of length 2 and three of length 1, for a total cost of 2 * 2 +\r\n1 * 1 + 1 * 1 + 1 * 1 = 7.', 'USACO', '', '2011-07-11 08:46:10', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 29, 'power721'),
(2253, 'http://acm.hdu.edu.cn/showproblem.php?pid=2899', '', '', '', 'D:\\oj\\data\\2253', 'D:\\oj\\data\\2253', '', '', '', '', '', '2011-07-15 08:58:13', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 7, 'bingshen'),
(2254, 'Calculate S(n)', 'Calculate S(n).\r\n\r\nS(n)=1<sup>3</sup>+2<sup>3</sup> +3<sup>3</sup> +......+n<sup>3</sup> .', 'Each line will contain one integer N(1 < n < 1000000000). Process to end of file.', 'For each case, output the last four dights of S(N) in one line.', 'D:\\oj\\data\\2254', 'D:\\oj\\data\\2254', '1\r\n2', '0001\r\n0009', '', '', '', '2012-04-14 16:35:25', 1000, 65536, 'N', NULL, 8, 19, 42, 11, 61, 7, 7, 30000, 117, 'power721'),
(2255, 'test', 'test', 'test', 'test', 'D:\\oj\\data\\2255', 'D:\\oj\\data\\2255', 'test', '', 'test', 'bingshen', '', '2011-07-17 18:30:32', 1000, 65536, 'Y', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 5, 'bingshen');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(2256, 'children’s books', 'Do you know the famous series of children’s books named “Where’s Wally”? Each of the books\r\ncontains a variety of pictures of hundreds of people. Readers are challenged to find a person\r\ncalled Wally in the crowd.\r\nWe can consider “Where’s Wally” as a kind of pattern matching of two-dimensional graphical\r\nimages. Wally’s figure is to be looked for in the picture. It would be interesting to write\r\na computer program to solve “Where’s Wally”, but this is not an easy task since Wally in\r\nthe pictures may be slightly different in his appearances. We give up the idea, and make the\r\nproblem much easier to solve. You are requested to solve an easier version of the graphical\r\npattern matching problem.\r\nAn image and a pattern are given. Both are rectangular matrices of bits (in fact, the pattern is\r\nalways square-shaped). 0 means white, and 1 black. The problem here is to count the number\r\nof occurrences of the pattern in the image, i.e. the number of squares in the image exactly\r\nmatching the pattern. Patterns appearing rotated by any multiples of 90 degrees and/or turned\r\nover forming a mirror image should also be taken into account.', 'The input is a sequence of datasets each in the following format.\r\nw h p\r\nimage data\r\npattern data\r\nThe first line of a dataset consists of three positive integers w, h and p. w is the width of the\r\nimage and h is the height of the image. Both are counted in numbers of bits. p is the width and\r\nheight of the pattern. The pattern is always square-shaped. You may assume 1 ≤ w ≤ 1000,\r\n1 ≤ h ≤ 1000, and 1 ≤ p ≤ 100.\r\nThe following h lines give the image. Each line consists of w/6 (which is equal to (w+5)/6)\r\ncharacters, and corresponds to a horizontal line of the image. Each of these characters represents\r\nsix bits on the image line, from left to right, in a variant of the BASE64 encoding format. The\r\nencoding rule is given in the following table. The most significant bit of the value in the table\r\ncorresponds to the leftmost bit in the image. The last character may also represent a few bits\r\nbeyond the width of the image; these bits should be ignored.\r\n\r\ncharacter value (six bits)\r\nA–Z 0–25\r\na–z 26–51\r\n0–9 52–61\r\n+ 62\r\n/ 63\r\nThe last p lines give the pattern. Each line consists of p/6 characters, and is encoded in the\r\nsame way as the image.\r\nA line containing three zeros indicates the end of the input. The total size of the input does not\r\nexceed two megabytes.', 'For each dataset in the input, one line containing the number of matched squares in the image\r\nshould be output. An output line should not contain extra characters.\r\nTwo or more matching squares may be mutually overlapping. In such a case, they are counted\r\nseparately. On the other hand, a single square is never counted twice or more, even if it matches\r\nboth the original pattern and its rotation, for example.', 'D:\\oj\\data\\2256', 'D:\\oj\\data\\2256', '48 3 3\r\ngAY4I4wA\r\ngIIgIIgg\r\nw4IAYAg4\r\ng\r\ng\r\nw\r\n153 3 3\r\nkkkkkkkkkkkkkkkkkkkkkkkkkg\r\nSSSSSSSSSSSSSSSSSSSSSSSSSQ\r\nJJJJJJJJJJJJJJJJJJJJJJJJJI\r\ng\r\nQ\r\nI\r\n1 1 2\r\nA\r\nA\r\nA\r\n384 3 2\r\nABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\r\nBCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/A\r\nCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/AB\r\nA\r\nA\r\n0 0 0', '8\r\n51\r\n0\r\n98', '', 'swust20095862', '', '2011-07-25 13:37:10', 5000, 65000, 'N', NULL, 8, 15, 53, 2, 50, 2, 2, 30000, 97, 'swust20095862'),
(2257, 'Nim<sub>k</sub>取石子游戏', '有N堆石子，其中第i堆有Pi颗石子，每次可以从最多K堆中选出若干石子去掉（但不能不去石子），两人轮流取石（双方都使用最优策略），谁不能继续取谁就输了。\r\n现在你先取，你需要判断自己是否有必胜策略。', '每组数据第一行是两个整数N和K（K<=N<=10000）。\r\n第二行有n个整数ai（ai<=10^6）。', '如果有必胜策略输出&quot;yes"否则输出"no".', 'D:\\oj\\data\\2257', 'D:\\oj\\data\\2257', '4 2\r\n3 5 10 15\r\n4 2\r\n7 10 13 15', 'yes\r\nno', '', '', '', '2011-07-26 14:07:33', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 44, 'power721'),
(2258, 'camelot', '<a href="../gongju/ioi1998/camelot.pdf"><span style="color:#ff0000;">Download</span></a>', '', '', 'D:\\oj\\data\\2258', 'D:\\oj\\data\\2258', '', '', '', 'swust20095862', '', '2011-07-31 20:25:59', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 67, 'swust20095862'),
(2259, 'contact', '<a href="..//gongju/ioi1998/contact.pdf"><span style="color:#ff0000;">Download</span></a>', '', '', 'D:\\oj\\data\\2259', 'D:\\oj\\data\\2259', '', '', '', 'swust20095862', '', '2012-05-08 20:37:47', 1000, 65536, 'N', NULL, 0, 5, 0, 5, 100, 1, 0, 30000, 70, 'swust20095862'),
(2260, 'party', '<a href="..//gongju/ioi1998/party.pdf"><span style="color:#ff0000;">Download</span></a>', '', '', 'D:\\oj\\data\\2260', 'D:\\oj\\data\\2260', '', '', '', 'swust20095862', '', '2011-07-31 20:26:58', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 51, 'swust20095862'),
(2261, 'picture', '<a href="..//gongju/ioi1998/picture.pdf"><span style="color:#ff0000;">Download</span></a>', '', '', 'D:\\oj\\data\\2261', 'D:\\oj\\data\\2261', '', '', '', 'swust20095862', '', '2011-08-02 10:06:40', 1000, 65536, 'N', NULL, 2, 7, 29, 5, 71, 2, 2, 30000, 138, 'swust20095862'),
(2262, 'polygon', '<a href="..//gongju/ioi1998/polygon.pdf"><span style="color:#ff0000;">Download</span></a>', '', '', 'D:\\oj\\data\\2262', 'D:\\oj\\data\\2262', '', '', '', 'swust20095862', '', '2011-07-31 20:27:32', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 65, 'swust20095862'),
(2263, 'starry', '<a href="..//gongju/ioi1998/starry.pdf"><span style="color:#ff0000;">Download</span></a>', '', '', 'D:\\oj\\data\\2263', 'D:\\oj\\data\\2263', '', '', '', 'swust20095862', '', '2011-07-31 20:27:51', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 52, 'swust20095862'),
(2264, 'CutTheNumbers', 'Manao has a board filled with digits represented as vector <string> board. The j-th character of the i-th element of board represents the digit written in cell in row i, column j of the board. The rows are numbered from top to bottom and the columns are numbered from left to right. \r\n\r\n\r\n\r\nManao is going to cut it into several non-overlapping fragments. Each of the fragments will be a horizontal or vertical strip containing 1 or more elements. A strip of length N can be interpreted as an N-digit number in base 10 by concatenating the digits on the strip in order. The horizontal strips are read from left to right and the vertical strips are read from top to bottom. The picture below shows a possible cutting of a 4x4 board: \r\n\r\n<img src=http://www.topcoder.com/contest/problem/CutTheNumbers/CutTheNumbers_1.jpg />\r\n\r\nThe sum of the numbers on the fragments in this picture is 493 + 7160 + 23 + 58 + 9 + 45 + 91 = 7879. \r\n\r\nManao wants to cut the board in such a way that the sum of the numbers on the resulting fragments is the maximum possible. Compute and return this sum.', 'Multi data.\r\nThe first line has two integers n and m.n*m<=16.\r\nThe next n lines each has m integers which is in range of 0-9.', 'Output the maximum number.', 'D:\\oj\\data\\2264', 'D:\\oj\\data\\2264', '2 3\r\n123\r\n312\r\n2 2\r\n99\r\n11', '435\r\n182', '', 'TopCoder SRM 513', '', '2011-08-02 20:21:54', 2000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 34, 'power721'),
(2265, 'Beiju', 'Tclsm is a beiju guy, so is the beiju he has just bought. The shape he bought beiju (or cup) is not a regular cylinder, but a container with zigzag wall, as the figure shows. Tclsm wanted to know how much water the beiju can hold. As a sophisticated programmer, you are asked to help him. Placing the beiju on the floor without constraint and pour water into it slowly, the moment water streams out from the beiju, or the beiju falls down,the volume of the water reaches the maximum. To simplify the problem, you can assume the beiju in 2-dimensional case. There are two walls of the beiju &ndash; the left one and the right one. The bottom of the beiju is entirely on the floor.<br />\r\n<img alt="" src="problem-images/2265_1.jpg" style="width: 180px; height: 180px;" /><br />', 'The first line of the input is T, the number of test cases. Each case has thee lines. First line has two integers &ndash; m n, 1 &lt; m, n &lt; 100. the number of break point of the left wall and the right wall. Second line has 2m integers, p0x p0y p1x p1y&hellip;&hellip;pm-1x pm-1y, describing the coordinate of the break points in the left wall, from the bottom to top. Third line has 2n integers, q0x q0y q1x q1y&hellip;&hellip;qn-1x qn-1y, describing the coordinate of the break points in the right wall, from the bottom to top. You can assume: p0y &lt; p1y &lt;&hellip;&hellip;&lt; pm-1y，q0y &lt; q1y &lt;&hellip;&hellip;&lt; qm-1y，p0y = q0y, p0x &lt; q0x The two walls do not touch or intersect. The two walls have zero thickness. All the numbers in the input are in the range [0, 1000].', 'For each case out put one line containing the maximum height of water the beiju can hold, rounding to the thousands.', 'D:\\oj\\data\\2265', 'D:\\oj\\data\\2265', '2<br />\r\n3 3<br />\r\n0 0 1 1&nbsp; 2 2<br />\r\n1 0 2 1 3 2<br />\r\n2 2<br />\r\n0 0 0 2<br />\r\n1 0 1 2', '1.000<br />\r\n2.000', '', 'swust20095862', '', '2011-10-24 13:56:35', 1000, 65536, 'N', NULL, 0, 2, 0, 2, 100, 1, 0, 30000, 58, 'swust20095862'),
(2266, 'temp', '', '', '', 'D:\\oj\\data\\2266', 'D:\\oj\\data\\2266', '', '', '', 'bingshen', '', '2011-08-17 21:46:44', 2000, 65536, 'N', NULL, 2, 4, 50, 2, 67, 2, 1, 30000, 47, 'bingshen'),
(2267, 'test', '', '', '', 'D:\\oj\\data\\2267', 'D:\\oj\\data\\2267', '', '', '', '', '', '2011-08-18 10:19:01', 5000, 65536, 'Y', NULL, 1, 1, 100, 0, 0, 1, 1, 5000, 4, 'swust_20096046'),
(2268, 'test', '', '', '', 'D:\\oj\\data\\2268', 'D:\\oj\\data\\2268', '', '', '', '', '', '2011-08-18 10:32:47', 5000, 65536, 'Y', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 3, 'swust_20096046'),
(2269, 'test2', '', '', '', 'D:\\oj\\data\\2269', 'D:\\oj\\data\\2269', '', '', '', '', '', '2011-08-18 10:55:58', 5000, 65536, 'Y', NULL, 1, 2, 50, 1, 50, 1, 1, 30000, 6, 'swust_20096046'),
(2270, 'test3', '', '', '', 'D:\\oj\\data\\2270', 'D:\\oj\\data\\2270', '', '', '', '', '', '2011-08-18 11:00:17', 1000, 65536, 'Y', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 8, 'swust_20096046'),
(2271, '救救阿毛吧', '去日本旅游一直是信息学院ACM集训队队员阿毛的梦想，他一直认为，去过日本的人，此生无憾....为此,他茶饭不思...郁郁寡欢....我们集训队是很团结的一个团体,最后大家商量，采用最古老也是最有效的方法来赞助阿毛，大家“逗钱”来实现他的梦想...可是悲剧的事情发生了，他一到日本，日本就发生了特大地震，福岛核电站的辐射严重影响了激动的阿毛的出行... 现在身处险境的阿毛,只能请求在国内的队友帮他了. 为了简化问题,我们把地平面看成是一个二维的地图，而且地图分成无数的小格， ..中国救援队在辐射比较严重的地方(ox,oy)放置了一个能够很有效的防止辐射的设备，在这个地方的方圆L里的"Z"范围内，都不会遭到辐射（称为安全地带，如图1）.阿毛已经吓得尿裤子了,现在只有请你来帮他找出一条道路，能够最快的到达安全地带。注意：由于紧张，阿毛已经不会走路了，他只能在相邻的两个格子之间行走，每次只能走一步。即：（x-1,y）,(x,y-1),(x+1,y),(x,y+1)。&lt;br />\r\n<img alt="" src="problem-images/2271.PNG" />&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;&#160;<img alt="" src="problem-images/1.png" style="width: 240px; height: 312px; " /><br />\r\n&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; （L=3）（L=4）&lt;br />\r\n&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;注释：蓝色为设备安置点，红蓝色区域为安全地带（着色区域为Z区域） &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;&#160;', '每组测试数据只有一行，包含5个整数 X,Y,OX,OY,L<br />\r\n(x,y) 表示阿毛现在所处的位置，&lt;br />\r\n（ox,oy）表示仪器安放点，L为区域宽度 输入到 EOF结束。&lt;br />\r\n所有的数据的绝对值都小于1000000,(测试数据最多1000组)', '对于每组数据，输出只有一行，即阿毛需要走的最短步数。', 'D:\\oj\\data\\2271', 'D:\\oj\\data\\2271', '1 1 3 3 2', '2', '', 'swust20095862', '', '2011-08-26 13:31:35', 1000, 65536, 'N', NULL, 2, 8, 25, 6, 75, 3, 2, 30000, 241, 'swust20095862'),
(2272, '最大序列', '给你一个序列，a[i] (1<=i<=N),你的工作是对这个序列重新排序，使其当1<=i<=N/2时a[i]<=a[i*2]并且a[i]<=a[i*2+1]。', '输入有多组测试数据。\r\n	每组测试数据有两行，第一行是整数N，可以认为N一定满足N=2^m-1（m为正整数），第二行为无序序列a[i].\r\n	1 <= N <= 65535, a[i] <= 1,000,000,000', '输出题目要求的序列。很显然输出的结果会有很多种，为了简单起见，只需要输出字典序最大的那个序列', 'D:\\oj\\data\\2272', 'D:\\oj\\data\\2272', '3\r\n1 2 3', '1 3 2', '', 'swust20095862', '', '2011-11-29 19:49:04', 3000, 65536, 'N', NULL, 6, 16, 38, 7, 58, 9, 5, 30000, 305, 'swust20095862'),
(2273, '无懈可击之高手如林', '最近有一部热播的都市电视连续剧《无懈可击之高手如林》，在里面男一号是由 胡歌饰演的徐然，他是一个商业奇才，女一号是由唐嫣饰演的汤七七。。她的生活简单， 思想单纯，\r\n\r\n	虽然有时候傻傻的，但是她的纯情，单纯深深的打动了Bearboy。特别是这里面 出现最多的一个场景: 在整部戏里面，徐然和汤七七相处最多的地方就是“甜品店”，在这个甜品店里面，他们从相识到相知，再到最好的相爱....都是那么的让人陶醉，和向往..... 傻傻的汤七七，每次做决定的时候，都要到“甜品店”，等候徐然，让徐然为她扔“硬币”，让徐然帮他做决定，天真的她把她的一切都交给了徐然....... Bearboy很喜欢这个场景，唐嫣饰演的简单，清纯的汤七七给Bearboy留下了很深刻的印象，看完整部片子，Bearboy记录下了汤七七和徐然在甜品店里面相遇的时间表，但是现在的Bearboy还深深地沉寂在汤七七的角色里面。他现在正在赶紧的去看唐嫣饰演的其他影视作品，所以他想让你帮他整理下这张时间表，统计他们每天约会的时间比例.<br />\r\n	<img alt="" src="problem-images/22731.png" style="width: 500px; height: 300px; " />', '数据的第一行是整数t表示测试数据的组数 对于每组测试数据，有一个整数N，表示有N天，<br />\r\n接下来是他们这N天约会的时间表 对于每天的时间表来说，&lt;br />\r\n以一个整数K开头，表示他们在这天约会了K次，<br />\r\n接下来是K段时间段[a,b]，表示他们在这个时间段内在甜品店内约会。&lt;br />\r\n(任何两个时间段之间无相交，且1&lt;=a&lt;=b&lt;=1440)', '对于每组测试数据，首先第一行输出“Cases id：”，<br />\r\nid从1开始到t 然后对于每一天的约会，&lt;br />\r\n输出他们约会的时间比例（输出如样例，保留一位小数，<b><font color=red>后面的舍去,不是四舍五入</font></b>）&lt;br />\r\n每两组测试数据之间用一个空行隔开。&lt;br />\r\n<span style="color:#ff0000;">注意：在整个计算过程中不做任何的进位处理。&lt;/span>', 'D:\\oj\\data\\2273', 'D:\\oj\\data\\2273', '1<br />\r\n3<br />\r\n1<br />\r\n1 1440<br />\r\n2<br />\r\n1 740<br />\r\n741 1440<br />\r\n1<br />\r\n1 1439', 'Cases 1:<br />\r\nday 1: 100.0%<br />\r\nday 2: 100.0%<br />\r\nday 3: 99.9%', '', 'swust20095862', '', '2012-04-23 23:45:45', 1000, 65536, 'N', NULL, 21, 121, 17, 49, 74, 22, 17, 30000, 751, 'swust20095862'),
(2274, '哥德巴赫猜想', '根据哥德巴赫猜想，每一个偶数都可以拆分为两个奇质数之和，那么现在毛哥遇到了一个比哥德巴赫猜想要简单得多的问题：一个数能不能表示为两个整数立方的和呢？', '多组测试数据，每一行输入一个数n，数据保证n的大小不会超过100万且n>0\r\n当输入n=0的时候结束输入。', '对于每一个输入的n\r\n计算并输出满足方程：x^3+y^3=n的x和y\r\n当然如果有多组x,y都满足方程，那么就输出x最小的那个一\r\n当然方程也可能无解，此时请输出“Impossible”', 'D:\\oj\\data\\2274', 'D:\\oj\\data\\2274', '1\r\n2\r\n3\r\n1000000', '0 1\r\n1 1\r\nImpossible\r\n0 100', '', 'bingshen', '', '2012-04-07 10:22:37', 1000, 65536, 'N', NULL, 14, 111, 13, 17, 61, 18, 11, 30000, 784, 'swust20095862'),
(2275, '愚蠢的bingshen', '现在有3个数组，分别是A,B,C，他们的长度分别是l,m,n（都小于等于500）\r\nbingshen现在遇到了一个问题:他想知道对于一个数X，能否从这3个数组中找到3个数，满足：A[i]+B[j]+C[k]=X，bingshen没学过算法，不知道如何处理，现在来求救聪明的你，你能帮杯具的bingshen吗？', '多组数据输入，每一组数据的第一行输入三个数l,m,n，分别代表A,B,C三个数组的长度，然后紧接着3行，分别输入l,m,n个数字，代表A,B,C三个数组中的元素。（每一个元素值小于1000）然后第四行输入一个数Q，代表bingshen的询问次数，接下来Q行，每行输入一个数X', '对于每一组输入数据，首先输出Case&#160;d:\r\n（d代表是第几组数据）\r\n然后对于Q个询问，如果能够找到A[i]+B[j]+C[k]=X就输出YES\r\n反之就输出NO', 'D:\\oj\\data\\2275', 'D:\\oj\\data\\2275', '3 3 3 \r\n1 2 3 \r\n1 2 3 \r\n1 2 3 \r\n3\r\n1 \r\n4 \r\n10', 'Case 1: \r\nNO \r\nYES \r\nNO', '', 'bingshen', '', '2011-09-26 22:27:02', 2000, 65536, 'N', 1088, 8, 55, 15, 47, 85, 17, 8, 30000, 457, 'swust20095862'),
(2276, '猫和老鼠1', '看过猫和老鼠的同学都知道，Tom总是被Jerry“欺负”。而作为人类，我们应该坚定不移的除四害，所以请帮帮可怜的Tom吧。\r\n      现在Tom就遇到了一个头疼的问题。由于Jerry一直躲在洞里不愿出来，而Tom如果抓不到Jerry，主人就不准它吃饭。经过长年观察，Tom发现Jerry如果看到了它喜欢的奶酪就一定会出来，并且奔向奶酪。于是Tom将奶酪放到离洞口距离为L的位置上，从洞口到奶酪可以看成一条直线，洞口的位置记为0，奶酪的位置记为L。在这条直线上，Tom布置了N个陷阱(0和L处不会有陷阱)，坐标分别为a1、a2、...、aN。但是Jerry却准备了秘密武器-弹簧，装上弹簧后Jerrt就只能跳着走，跳的距离最近为S，最远为T(假设当前Jerry在坐标x处，则下一次只能选择坐标x+S至x+T之间任意位置为目的地)，且Jerry如果不遇到陷阱一定会到L坐标处(Jerry只能向前跳，所以不会超过L坐标)。请你帮助Tom分析一下它布置的陷阱是否一定能抓住Jerry，既在Jerry跳到L前是否必须经过至少一个陷阱。', '第一行输入一个t(t<=100)代表有t组数据。\r\n     对于每一组数据共两行：\r\n     第一行有四个整数分别为\r\n     L(0< L<=10000)、N(0<=N<=10000)、S、T(1<=S<=T<=L)\r\n     如果N>0，则第二行有N个整数(大于0，小于L)代表放置陷阱的位置(可能重复)\r\n     Jerry最开始在0位置。', '输出共一行，如果Jerry在不考虑陷阱的前提下也不可能到达L，输出“OH MY GOD!”；\r\n否则，如果Tom一定能抓住Jerry，输出“GOOD!”，不能抓住输出“OH NO!”。', 'D:\\oj\\data\\2276', 'D:\\oj\\data\\2276', '3\r\n10 9 2 4\r\n1 2 3 4 5 6 7 8 9\r\n1 0 2 4\r\n10 2 2 4\r\n4 7', 'GOOD!\r\nOH MY GOD!\r\nOH NO!', '', 'liuyin', '', '2011-12-28 15:57:48', 1000, 65536, 'N', NULL, 4, 16, 25, 11, 92, 3, 1, 30000, 257, 'swust20095862'),
(2277, '猫和老鼠2', '正如剧情中所说，尽管Tom布置下了天罗地网，Jerry还是跑掉了。Jerry自从有了上一次的教训后将自己的洞扩大了，并且设计了N个出口以便偷食物，任何两个出口间必定有至少一条通路，但不一定直接相连。Jerry会按照一定出口的顺序去偷食物。幸运的是，Tom掌握了Jerry偷食物的顺序，它必须比Jerry先到达或同时到达那个出口去保护食物。但是由于家里家具较多，有时候Tom只能绕道走。现在分别给你Jerry和Tom可以走的通路和每条通路花费的时间，开始时Tom和Jerry都在1号洞口。如果Tom先到下一个洞口，当Jerry到达时便不敢出来偷食物从而去下一个洞口，如果Jerry先到洞口，为了嘲笑Tom，他会等Tom到达时再去下一个洞口，如果同时到达，Jerry也不敢出来，直接去下一洞口。所以不管怎样它们总是同时出发去下一个洞口。请你帮Tom计算一下，它最多能保护多少食物。', '第一行输入一个t代表有t组数据。\r\n     对于每一组数据：\r\n     第一行有三个整数分别为\r\n     N(1<=N<=1000)、M1、M2(N-1<=M1、M2<=10000)\r\n     接下来M1行每行三个整数代表Jerry能走的通路\r\n     s、e(1<=s、e<=N)、v(0<=v<=1000)分别代表路径的两端和花费时间\r\n     接下来M2行每行三个整数代表Tom能走的通路，与上面类似。\r\n     最后一行有一个序列代表Jerry的偷食物路线，以-1结束，路线总长度不超过20', '输出共一行，Tom最多能保护的食物数量。', 'D:\\oj\\data\\2277', 'D:\\oj\\data\\2277', '1\r\n5 10 5\r\n1 2 2\r\n1 3 1\r\n1 4 1\r\n1 5 1\r\n2 3 1\r\n2 4 1\r\n2 5 1\r\n3 4 1\r\n3 5 1\r\n4 5 1\r\n1 2 2\r\n1 3 1\r\n1 4 1\r\n1 5 1\r\n1 2 1\r\n1 5 3 4 1 2 3 -1', '4', '1 可能会有重边，但保证图的连通性。\r\n2 样例中Jerry第一个到达的点是1，因为Tom和Jerry开始都在1，所以可以理解为同时到达。', 'liuyin', '', '2012-03-25 01:49:51', 1000, 65536, 'N', NULL, 3, 8, 38, 5, 71, 2, 2, 30000, 151, 'swust20095862'),
(2278, '猫和老鼠3', '虽然在上面的故事中，Tom没能抓住Jerry，但是保护了一部分食物。作为奖励主人给它放了一天的假。既然是度假Tom当然不会忘记带上它的girl friend。它们来到湖边准备开始野炊，突然Jerry出现在它们面前要求和Tom公平比试以赢得食物，为了在MM面前展现绅士风度，Tom决定接受比试。它们的比试内容很简单，谁先从当前所在位置到达湖对面插红旗处就算谁赢。Tom认为自己一定会赢，因为他的速度是Jerry的两倍，但当比试开始后才发现，Jerry会游泳，它不会。Tom只能绕着湖跑或者去找一条船。\r\n     为了简化问题，我们假设Tom和Jerry的比赛地图是有n*m个格子构成的，它们从左上角(0,0)处出发，每一次可以向上、向下、向左、向右四个方向移动，目标是右下角坐标(n-1,m-1)处。Tom移动一格需要1个单位的时间，Jerry则需要2个单位的时间。地图中"*"表示空地可以自由通行，&quot;#"表示障碍不能通行，&quot;R"表示湖，Jerry可以自由通行，Tom有船的话可以自由通行，否则无法通行。&quot;S"表示船的位置，Tom一但到达该格自动获得船。还有很重要的一点，由于Jerry身材矮小，船对它也是障碍不能通行。如果有一方没法到达终点则算另一方赢，如果都无法到达或同时到达则算平手。', '第一行输入一个t代表有t组数据。\r\n     对于每一组数据：\r\n     第一行有两个整数分别为\r\n     N(1<=N<=100)、M(1<=M<=100)\r\n     接下来N行每行M个字符，只包含&quot;*"、&quot;#"、&quot;S"、&quot;R"含义与题目相同', '输出共一行，如果Tom胜则输出"Tom"、Jerry胜则输出"Jerry"，平手则输出"Equal"。', 'D:\\oj\\data\\2278', 'D:\\oj\\data\\2278', '4\r\n5 10\r\n**********\r\n**********\r\nRRRRRRRRRR\r\n**********\r\nS*********\r\n5 10\r\n*********S\r\n*#########\r\nRRRRRRRRRR\r\n**********\r\n**********\r\n5 10\r\n*********S\r\n*#########\r\nRRRRRRRRRR\r\nSSSSSSSSSS\r\n**********', 'Jerry\r\nJerry\r\nTom', '', 'liuyin', '', '2011-08-19 20:21:15', 1000, 65536, 'N', NULL, 2, 3, 67, 1, 50, 1, 1, 30000, 114, 'swust20095862'),
(2279, '兑换宝物', 'power历经千辛万苦终于找到传说中卡布界主留下的城堡，power正要进入城堡寻找宝物，这时突然出现一个巨大的虚拟影像，自称雾大人。雾大人告诉power想要得到宝物必须拿雷霆石来换，雷霆石是卡布世界独有的物质。包含雷霆石的区域被分成一个n*n的矩阵，有些格子有一定数量的雷霆石，另外一些格子没有雷霆石。每一行最多只能选一个格子挖雷霆石，每一列也是如此，挖多了卡布世界就会崩溃。雾大人还给出了一个兑换列表，不同数量的雷霆石可以兑换不同的宝物(每个宝物只能兑换一次)。这些宝物很多都是外面世界没有的，power对每一个宝物进行了估价。现在power想让你帮他计算下最多能得到多少价值的宝物。', '多组数据。\r\n每组数据第一行是一个整数n(1<=n<=100)。\r\n下面有n行，每行n个整数aij（0<=aij<=100），表示每个格子包含的雷霆石数量，0表示没有雷霆石。\r\n下面一行是一个整数m表示宝物数量。\r\n后面m(m<=100)行是宝物兑换列表，\r\n每一行第一个是宝物名称（长度小于15），中间是兑换需要的雷霆石数量，最后是宝物的价值。', '输出最大价值。', 'D:\\oj\\data\\2279', 'D:\\oj\\data\\2279', '3\r\n1 2 0\r\n3 0 2\r\n0 1 3\r\n2\r\nsword 7 10\r\ncrystal 8 9', '10', '第一行的二个格子\r\n第二行第一个格子\r\n第三行第三个格子\r\n2+3+3=8\r\n兑换sword', 'power', '', '2012-02-14 10:43:32', 1000, 65536, 'N', NULL, 8, 14, 57, 4, 50, 4, 4, 30000, 153, 'power721'),
(2280, 'Image copy detection', 'The success of the Internet and cost-effective digital storage device has made it possible to replicate, transmit, and distribute digital content in an effortless way. Thus, the protection of intellectual Property right (IPR) has become a crucial legal issue. Detecting copies of digital media(images, audio and video) is a basic requirement for IPR protection (or copyright protection).The applications of copydetection include usage tracking and copyright violation enforcement.<br />\r\n	For those above purposes, the image copy detection system came out.It aggregated all the images which were viewed as a copy of original image.In this system,an image is partitioned into m×n equalsized blocks,which makes the system independent of input image sizes,and an m×n sub-image is calculated by taking the average value of each block(see Figure.1(b)), This array is converted to a rank matrix as shown in Fig.1(c).Suppose that the intensity values in Fig.1(b) are changed in the copied image so that its sub-image has values:{{30, 60, 40}, {70, 90, 110}, {50, 100, 80}}. Nevertheless,its rank matrix is identical to that shown in Fig. 1(c) and thus perfect matching with original image can be achieved.<br />\r\n	<br />\r\n	<center>\r\n		<img src="http://acm.hdu.edu.cn/data/images/C299-1007-1.jpg" /></center>\r\n	<br />\r\n	<br />\r\n	Fig.1 (a)An image is divided into m×n blocks (3×3 in this example),(b)average values of blocks, and(c)rank matrix of (b). Let T and Q represent test image and original image,N represent the matrix size;there exists N tuples (t1,q1),…,( tn,qn),…,( tN,qN)(the order of the rank matrix:from left to right and from top to bottom).Now we define D(T,Q) = <img src="http://acm.hdu.edu.cn/data/images/C299-1007-2.jpg" />measures the distance between the two images(it’s obvious that if D(T,Q) gets smaller while the probability of the test image is considered as a copy of original image by the system becomes larger). Since there are M original images in the image copy detection system(Q1…QM). And the distance between T and some original images is given by D(T,Q1…QM)= <img src="http://acm.hdu.edu.cn/data/images/C299-1007-3.jpg" /> To make it simple,we want to find an image which owns least D(T,Q1…QM).', 'The first line of input should give the number of cases, T (at most 100). T test cases follow. The first line of each test case contains two integer n (1 ≤ n ≤ 100) and m(1 ≤ m ≤ 100) indicating the size of rank matrix and number of original images. The following m lines each contains a sequence of n different integers denotes the rank matrix.', 'For each test case, output one line containing "Case #x: y", where x is the case number (starting from 1) and y is the least distance D(T,Q1…QM).', 'D:\\oj\\data\\2280', 'D:\\oj\\data\\2280', '2<br />\r\n3 2<br />\r\n1 2 3<br />\r\n1 3 2<br />\r\n9 3<br />\r\n1 4 2 5 7 9 3 8 6<br />\r\n2 1 4 5 9 3 7 6 8<br />\r\n9 8 7 6 5 4 3 2 1', 'Case #1: 2<br />\r\nCase #2: 58', '', '2010 ACM-ICPC Multi-University Training Contest（9）——Host by HNU', '', '2011-09-19 12:55:53', 2000, 65536, 'N', NULL, 3, 3, 100, 0, 0, 1, 1, 30000, 93, 'power721'),
(2281, 'Up-up', 'The Up-up of a number a by a positive integer b, denoted by a↑↑b, is recursively defined by:\r\na↑↑1 = a,\r\na↑↑(k+1) = a (a↑↑k)\r\nThus we have e.g. 3↑↑2 = 33 = 27, hence 3↑↑3 = 327= 7625597484987 and 3↑↑4 is roughly 103.6383346400240996*10^12\r\nThe problem is give you a pair of a and k,you must calculate a↑↑k ,the result may be large you can output the answer mod 100000000 instead', 'A pair of a and k .a is a positive integer and fit in __int64 and 1<=k<=200', 'a↑↑k mod 100000000', 'D:\\oj\\data\\2281', 'D:\\oj\\data\\2281', '3 2\r\n3 3', '27\r\n97484987', '', 'bingshen', '', '2011-09-09 21:59:09', 10000, 65536, 'N', NULL, 6, 11, 55, 1, 33, 2, 2, 10000, 104, 'bingshen'),
(2282, '冰神的胡思乱想', 'bingshen是一个非常爱yy的ACMer\r\n一天他又yy出一个奇怪的问题：\r\n对一个给定的自然数M，求出所有的连续的自然数段，这些连续的自然数段中的全部数之和为M。\r\n例子：1998+1999+2000+2001+2002 = 10000，所以从1998到2002的一个自然数段为M=10000的一个解。', '多组数据输入\r\n每一个输入仅仅一个m\r\n(10<=m<=2000000)', '每一组样例先输出一个Case #t:\r\nt代表第t组数据\r\n输出所有可能的情况，详见样例', 'D:\\oj\\data\\2282', 'D:\\oj\\data\\2282', '10000', 'Case #1:\r\n18 142\r\n297 328\r\n388 412\r\n1998 2002', '水题', 'bingshen', '', '2012-04-27 19:14:32', 1000, 65536, 'N', NULL, 12, 43, 28, 30, 75, 12, 10, 30000, 267, 'bingshen'),
(2283, '阶乘取模', '计算 \r\n(0! + 1! + 2! + 3! + 4! + ... + n!)%m', '第一行输入t，表示测试数据组数\r\n每组数据输入两个数n和m\r\n\r\n0 < T <= 20\r\n0 <= n < 10^100 (没有前导零)\r\n0 < m < 1000000', '输出(0! + 1! + 2! + 3! + 4! + ... + n!)%m的答案', 'D:\\oj\\data\\2283', 'D:\\oj\\data\\2283', '1\r\n10 861017', '593846', '', 'bingshen', '', '2012-05-20 11:17:14', 1000, 65536, 'N', NULL, 33, 100, 33, 61, 72, 25, 24, 30000, 629, 'bingshen'),
(2284, 'The Boss on Mars', 'On Mars, there is a huge company called ACM (A huge Company on Mars), and it’s owned by a younger boss.\r\n\r\nDue to no moons around Mars, the employees can only get the salaries per-year. There are n employees in ACM, and it’s time for them to get salaries from their boss. All employees are numbered from 1 to n. With the unknown reasons, if the employee’s work number is k, he can get k^4 Mars dollars this year. So the employees working for the ACM are very rich.\r\n\r\nBecause the number of employees is so large that the boss of ACM must distribute too much money, he wants to fire the people whose work number is co-prime with n next year. Now the boss wants to know how much he will save after the dismissal.', 'The first line contains an integer T indicating the number of test cases. (1 ≤ T ≤ 1000) Each test case, there is only one integer n, indicating the number of employees in ACM. (1 ≤ n ≤ 10^8)', 'For each test case, output an integer indicating the money the boss can save. Because the answer is so large, please module the answer with 1,000,000,007.', 'D:\\oj\\data\\2284', 'D:\\oj\\data\\2284', '2 \r\n4 \r\n5', '82 \r\n354', 'Case1: sum=1+3*3*3*3=82\r\nCase2: sum=1+2*2*2*2+3*3*3*3+4*4*4*4=354', 'bingshen', '', '2011-10-03 11:59:12', 2000, 65536, 'N', NULL, 2, 3, 67, 0, 0, 1, 1, 30000, 107, 'bingshen'),
(2285, 'WSN 的线段树', '给你一个仅由小写字母（''a''--''z''）组成的字符串，长度N<=100000\r\n现在有两种操作：\r\n   Q  l  r   : 求出区间[l,r]中最长连续不下降子序列的长度。(''a''<''b''<..''z'')\r\n   C  l  r  col: 将区间[l,r]中每个字符都变成col,(''a''<=col<=''z'')\r\n   其中，1<=l,r<=N', '（sample）', '（sample）', 'D:\\oj\\data\\2285', 'D:\\oj\\data\\2285', '1              // 样例数\r\nabcdef         //  长度为N的字符串  \r\n5             // 操作数 <=100000\r\nQ 1 6         \r\nC 3 4 b\r\nQ 1 3\r\nC 4 5 c\r\nQ 2 5', '6\r\n3\r\n4', '19870305', 'swust2095862', '', '2011-11-08 18:41:57', 1000, 65536, 'N', NULL, 15, 50, 30, 32, 82, 7, 7, 30000, 333, 'swust20095862'),
(2286, '回文质数', 'xiaoou33对既是素数又是回文的数特别感兴趣。比如说151既是素数又是个回文。现在bingshen想要你帮助他找出某个范围内的素数回文数，请你写个程序找出 a 跟b 之间满足条件的数。(2 <= a < b <= 100,000,000);', '这里有许多组数据，每组包括两组数据a跟b。', '对每一组数据,按从小到大输出a，b之间所有满足条件的素数回文数（包括a跟b）(如果不存在就不输出)。', 'D:\\oj\\data\\2286', 'D:\\oj\\data\\2286', '5 500', '5\r\n7\r\n11\r\n101\r\n131\r\n151\r\n181\r\n191\r\n313\r\n353\r\n373\r\n383', '不要用cin，cout', 'bingshen', '', '2012-09-13 20:14:35', 2000, 65536, 'N', NULL, 20, 101, 20, 55, 81, 19, 13, 30000, 1018, 'bingshen'),
(2287, 'My Games', 'Playing games is the most fun if other people take part. But other players are not always available if you need them, which led to the invention of single-player games. One of the most well-known examples is the infamous ``Solitaire&#39;&#39; packaged with Windows, probably responsible for more wasted hours in offices around the world than any other game.&nbsp;<br />\r\nThe goal of a single-player game is usually to make ``moves&#39;&#39; until one reaches a final state of the game, which results in a win or loss, or a score assigned to that final state. Most players try to optimize the result of the game by employing good strategies. In this problem we are interested in what happens if one plays randomly. After all, these games are mostly used to waste time, and playing randomly achieves this goal as well as any other strategy.&nbsp;<br />\r\n<br />\r\nGames can very compactly represented as (possibly infinite) trees. Every node of the tree repre- sents a possible game state. The root of the tree corresponds to the starting position of the game. For an inner node, its children are the game states to which one can move in a single move. The leaf nodes are the final states, and every one of them is assigned a number, which is the score one receives when ending up at that leaf.&nbsp;<br />\r\n<br />\r\nTrees are defined using the following grammar.&nbsp;<br />\r\n<center>\r\n	<img alt="" src="problem-images/2287.jpg" style="width: 338px; height: 211px; " /><br />\r\n	Definition ::= Identifier "=" RealTree&nbsp;<br />\r\n	RealTree ::= "("Tree<sup>+</sup>")"&nbsp;<br />\r\n	Tree ::= Identifier | Integer | "("Tree<sup>+</sup>")"&nbsp;<br />\r\n	Identifier ::= a|b|...|z&nbsp;<br />\r\n	Integer &isin; {...,-3,-2,-1,0,1,2,3,...,}&nbsp;</center>\r\n<br />\r\nBy using a Definition, the RealTree on the right-hand side of the equation is assigned to the Identifier on the left. A RealTree consists of a root node and one or more children, given as a sequence enclosed in brackets. And a Tree is either&nbsp;<br />\r\n<br />\r\n. the tree represented by a given Identifier, or&nbsp;<br />\r\n<br />\r\n. a leaf node, represented by a single Integer, or&nbsp;<br />\r\n<br />\r\n. an inner node, represented by a sequence of one or more Trees (its children), enclosed in brackets.&nbsp;<br />\r\n<br />\r\nYour goal is to compute the expected score, if one plays randomly, i.e. at each inner node selects one of the children uniformly at random. This expected score is well-defined even for the infinite trees definable in our framework as long as the probability that the game ends (playing randomly) is 1.&nbsp;', 'The input file contains several gametree descriptions. Each description starts with a line containing the number n of identifiers used in the description. The identifiers used will be the first n lowercase letters of the alphabet. The following n lines contain the definitions of these identifiers (in the order a, b, ...). Each definition may contain arbitrary whitespace (but of course there will be no spaces within a single integer). The right hand side of a definition will contain only identifiers from the first n lowercase letters. The inputs ends with a test case starting with n = 0. This test case should not be processed.', 'For each gametree description in the input, first output the number of the game. Then, for all n identifiers in the order a, b, ..., output the following. If an identifier represents a gametree for which the probability of finishing the game is 1, print the expected score (when playing randomly). This value should be exact to three digits to the right of the decimal point.&nbsp;<br />\r\n<br />\r\nIf the game described by the variable does not end with probability 1, print ``Expected score of id undefined&#39;&#39; instead. Output a blank line after each test case.', 'D:\\oj\\data\\2287', 'D:\\oj\\data\\2287', '<pre class="sio" style="font-family: ''Courier New'', Courier, monospace; font-size: 12pt; ">\r\n1\r\na = ((1 7) 6 ((8 3) 4))\r\n2\r\na = (1 b)\r\nb = (4 a)\r\n1\r\na = (a a a)\r\n0</pre>', '<pre class="sio" style="font-family: ''Courier New'', Courier, monospace; font-size: 12pt; ">\r\nGame 1\r\nExpected score for a = 4.917\r\n\r\nGame 2\r\nExpected score for a = 2.000\r\nExpected score for b = 3.000\r\n\r\nGame 3\r\nExpected score for a undefined</pre>', '', '', '', '2011-10-26 16:40:16', 1000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 39, 'swust20095862'),
(2288, '子串', '定义一个字符串s(s[0],s[1]...s[n-1])的子串为按顺序选择的字符(其下标为0~n-1的子序列)组成的字符串。\r\n比如字符串abc\r\n其子串有\r\na\r\nb\r\nc\r\nab\r\nac\r\nbc\r\nabc\r\n现在给你一个字符串s（只包含小写字母，长度小于等于15），按字典序输出其所有子串。', '每行一个字符串s（只包含小写字母，长度小于等于15）。', '按字典序输出其所有子串。', 'D:\\oj\\data\\2288', 'D:\\oj\\data\\2288', 'abc\r\nccc', 'a\r\nb\r\nc\r\nab\r\nac\r\nbc\r\nabc\r\nc\r\ncc\r\nccc', '迭代加深搜索', 'power', '', '2011-10-26 20:08:18', 1000, 65536, 'N', NULL, 3, 3, 100, 0, 0, 1, 1, 30000, 64, 'power721'),
(2289, 'PowerSQL', '<a href=http://en.wikipedia.org/wiki/Database target=blank>数据库（Database）&lt;/a>是按照数据结构来组织、存储和管理数据的仓库，它产生于距今五十年前，随着信息技术和市场的发展，特别是二十世纪九十年代以后，数据管理不再仅仅是存储和管理数据，而转变成用户所需要的各种数据管理的方式。数据库有很多种类型，从最简单的存储有各种数据的表格到能够进行海量数据存储的大型数据库系统都在各个方面得到了广泛的应用。\r\n数据库的表由n行m列数据组成，每列有一个列名代表实体的一种属性，每一行称为数据库的记录，有m个属性。\r\n\r\n<a href=http://en.wikipedia.org/wiki/Sql target=blank>SQL(Structured Query Language)结构化查询语言</a>，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。\r\nPowerSQL语言主要有如下几种操作：\r\n1.插入\r\ninsert into values(VLAUES1,VLAUES2...)，插入记录，括号中按列的顺序给出每个属性的值。\r\n比如insert into values("abc","123",456)\r\n2.更新\r\nupdate set COLUMN_NAME=VALUE where COLUMN_NAME1=VALUE1 更新某条满足条件COLUMN_NAME1=VALUE1的记录的值COLUMN_NAME=VALUE \r\n比如update set COLUMN_NAME="QQ" where SID=10000\r\n3.删除\r\ndelete from where COLUMN_NAME=VALUE 删除满足条件 COLUMN_NAME=VALUE 的记录。\r\n比如delete from where COLUMN_NAME="QQ"\r\n4.查询\r\nselect COLUMN_NAME1,COLUMN_NAME2... where COLUMN_NAME=VALUE 选择并显示满足条件COLUMN_NAME=VALUE 的记录的 COLUMN_NAME1,COLUMN_NAME2... 列\r\n比如select SID,SID where NAME="Dagger"\r\n\r\n以上命令的条件表达式中若列的类型为数字则等号=操作符可以替换为>或者&lt;操作符\r\n比如select SID,NAME,PRIZE where PRIZE>100\r\n\r\n列的数据类型只有两种整型INT和字符串STR\r\n对命令和值不区分大小写，比如SELECT SID,NAME where NAME="QQ"等同于select SID,NAME WHERE NAME="qq"。', '第一行三个整数n(n<=10000)、m(m<15)、q(q<10000)。分别表示当前数据库的表有n行记录，m列属性，需要进行q次操作。\r\n下面m行，每行是两个字符串分别表示列的名称和类型。\r\n下面n行，每行有m个字符串表示数据。\r\n下面q行是SQL命令，如果是select操作在屏幕上输出显示结果。\r\n具体输出格式见样例。\r\n\r\n每行输入长度小于100，列名和字符串值长度小于20.\r\n数字长度小于10，可能有前导零。', '如果是select操作在屏幕上输出显示结果。\r\n每次输出后再输出一个空行。', 'D:\\oj\\data\\2289', 'D:\\oj\\data\\2289', '3 10 28\r\nSID INT\r\nNAME STR\r\nPRIZE INT\r\n1000 Potion 50\r\n1001 Phoenix_Down 150\r\n1002 Remedy 300\r\n1003 Dagger 320\r\n1004 Rod 260\r\n1005 Flame_Staff 1100\r\n1006 Broad_Sword 330\r\n1007 Fork 1100\r\n1008 Javelin 880\r\n1009 Cats_Claws 4000\r\nselect SID,NAME,PRIZE where PRIZE>100\r\nselect SID,SID where NAME="Dagger"\r\nselect PRIZE where NAME="Rod"\r\nselect SID,NAME,PRIZE where NAME="Excalibur"\r\ninsert into values(123,"Excalibur",456)\r\nselect SID,NAME,PRIZE where NAME="Excalibur"\r\nupdate set SID=999 where NAME="Excalibur"\r\nselect SID,NAME,PRIZE where NAME="Excalibur"\r\ndelete from where NAME="Excalibur"\r\nselect SID,NAME,PRIZE where NAME="Excalibur"\r\ninsert into values(123,"Excalibur",456)\r\ninsert into values(17,"Excalibur",36)\r\nselect SID,NAME,PRIZE where NAME="Excalibur"\r\ninsert into values(137,"QQ",10000)\r\nselect SID,NAME,PRIZE where PRIZE>100\r\nupdate set SID=15 where NAME="qq"\r\nselect SID,NAME,PRIZE where PRIZE>100\r\nDELETE from where NAME="Excalibur"\r\nselect SID,NAME,PRIZE where NAME="Excalibur"\r\nselect PRIZE,SID where NAME="ACM"\r\nINSERT into values(2011,"ACM_ICPC_2011",999999)\r\nselect SID,NAME,PRIZE where SID=2011\r\nupdate set SID=2012 where NAME="ACM_ICPC_2011"\r\nselect SID,NAME,PRIZE where PRIZE>100\r\ndelete where NAME="Qq"\r\nSELECT SID,NAME where NAME="QQ"', '+-----------------------------+\r\n| SID  |     NAME     | PRIZE |\r\n|------|--------------|-------|\r\n| 1001 | Phoenix_Down |  150  |\r\n| 1002 |    Remedy    |  300  |\r\n| 1003 |    Dagger    |  320  |\r\n| 1004 |     Rod      |  260  |\r\n| 1005 | Flame_Staff  | 1100  |\r\n| 1006 | Broad_Sword  |  330  |\r\n| 1007 |     Fork     | 1100  |\r\n| 1008 |   Javelin    |  880  |\r\n| 1009 |  Cats_Claws  | 4000  |\r\n+-----------------------------+\r\n\r\n+-------------+\r\n| SID  | SID  |\r\n|------|------|\r\n| 1003 | 1003 |\r\n+-------------+\r\n\r\n+-------+\r\n| PRIZE |\r\n|-------|\r\n|  260  |\r\n+-------+\r\n\r\n+--------------------+\r\n| SID | NAME | PRIZE |\r\n|-----|------|-------|\r\n+--------------------+\r\n\r\n+-------------------------+\r\n| SID |   NAME    | PRIZE |\r\n|-----|-----------|-------|\r\n| 123 | Excalibur |  456  |\r\n+-------------------------+\r\n\r\n+-------------------------+\r\n| SID |   NAME    | PRIZE |\r\n|-----|-----------|-------|\r\n| 999 | Excalibur |  456  |\r\n+-------------------------+\r\n\r\n+--------------------+\r\n| SID | NAME | PRIZE |\r\n|-----|------|-------|\r\n+--------------------+\r\n\r\n+-------------------------+\r\n| SID |   NAME    | PRIZE |\r\n|-----|-----------|-------|\r\n| 123 | Excalibur |  456  |\r\n| 17  | Excalibur |  36   |\r\n+-------------------------+\r\n\r\n+-----------------------------+\r\n| SID  |     NAME     | PRIZE |\r\n|------|--------------|-------|\r\n| 1001 | Phoenix_Down |  150  |\r\n| 1002 |    Remedy    |  300  |\r\n| 1003 |    Dagger    |  320  |\r\n| 1004 |     Rod      |  260  |\r\n| 1005 | Flame_Staff  | 1100  |\r\n| 1006 | Broad_Sword  |  330  |\r\n| 1007 |     Fork     | 1100  |\r\n| 1008 |   Javelin    |  880  |\r\n| 1009 |  Cats_Claws  | 4000  |\r\n| 123  |  Excalibur   |  456  |\r\n| 137  |      QQ      | 10000 |\r\n+-----------------------------+\r\n\r\n+-----------------------------+\r\n| SID  |     NAME     | PRIZE |\r\n|------|--------------|-------|\r\n| 1001 | Phoenix_Down |  150  |\r\n| 1002 |    Remedy    |  300  |\r\n| 1003 |    Dagger    |  320  |\r\n| 1004 |     Rod      |  260  |\r\n| 1005 | Flame_Staff  | 1100  |\r\n| 1006 | Broad_Sword  |  330  |\r\n| 1007 |     Fork     | 1100  |\r\n| 1008 |   Javelin    |  880  |\r\n| 1009 |  Cats_Claws  | 4000  |\r\n| 123  |  Excalibur   |  456  |\r\n|  15  |      QQ      | 10000 |\r\n+-----------------------------+\r\n\r\n+--------------------+\r\n| SID | NAME | PRIZE |\r\n|-----|------|-------|\r\n+--------------------+\r\n\r\n+-------------+\r\n| PRIZE | SID |\r\n|-------|-----|\r\n+-------------+\r\n\r\n+-------------------------------+\r\n| SID  |     NAME      | PRIZE  |\r\n|------|---------------|--------|\r\n| 2011 | ACM_ICPC_2011 | 999999 |\r\n+-------------------------------+\r\n\r\n+-------------------------------+\r\n| SID  |     NAME      | PRIZE  |\r\n|------|---------------|--------|\r\n| 1001 | Phoenix_Down  |  150   |\r\n| 1002 |    Remedy     |  300   |\r\n| 1003 |    Dagger     |  320   |\r\n| 1004 |      Rod      |  260   |\r\n| 1005 |  Flame_Staff  |  1100  |\r\n| 1006 |  Broad_Sword  |  330   |\r\n| 1007 |     Fork      |  1100  |\r\n| 1008 |    Javelin    |  880   |\r\n| 1009 |  Cats_Claws   |  4000  |\r\n|  15  |      QQ       | 10000  |\r\n| 2012 | ACM_ICPC_2011 | 999999 |\r\n+-------------------------------+\r\n\r\n+------------+\r\n| SID | NAME |\r\n|-----|------|\r\n+------------+\r\n\r\n+------------+\r\n| SID | NAME |\r\n|-----|------|\r\n+------------+\r\n\r\n+------------+\r\n| SID | NAME |\r\n|-----|------|\r\n+------------+', 'stringstream是处理字符串分割的利器。\r\n头文件:\r\n#include&lt;string>\r\n#include&lt;sstream>\r\nusing namespace std;\r\n\r\n用法：\r\nchar s[]="abc 123 d",t[5];\r\nstringstream in;\r\nin<&lt;s;\r\nwhile(in>>t)\r\n    printf("%s\\n",t);', 'power', '', '2011-10-26 22:27:15', 1000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 69, 'power721');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(2290, 'Network', 'A Telephone Line Company (TLC) is establishing a new telephone cable network. They are connecting several places numbered by integers from 1 to N . No two places have the same number. The lines are bidirectional and always connect together two places and in each place the lines end in a telephone exchange. There is one telephone exchange in each place. From each place it is \r\npossible to reach through lines every other place, however it need not be a direct connection, it can go through several exchanges. From time to time the power supply fails at a place and then the exchange does not operate. The officials from TLC realized that in such a case it can happen that besides the fact that the place with the failure is unreachable, this can also cause that some other places cannot connect to each other. In such a case we will say the place (where the failure \r\noccured) is critical. Now the officials are trying to write a program for finding the number of all such critical places. Help them.', 'The input file consists of several blocks of lines. Each block describes one network. In the first line of each block there is the number of places N < 100. Each of the next at most N lines contains the number of a place followed by the numbers of some places to which there is a direct line from this place. These at most N lines completely describe the network, i.e., each direct connection of two places in the network is contained at least in one row. All numbers in one line are separated \r\nby one space. Each block ends with a line containing just 0. The last block has only one line with N = 0;', 'The output contains for each block except the last in the input file one line containing the number of critical places.', 'D:\\oj\\data\\2290', 'D:\\oj\\data\\2290', '5\r\n5 1 2 3 4\r\n0\r\n6\r\n2 1 3\r\n5 4 6 2\r\n0\r\n0', '1\r\n2', 'You need to determine the end of one line.In order to make it''s easy to determine,there are no extra blank before the end of each line.', 'Central Europe 1996', '', '2011-10-27 21:11:44', 1000, 65536, 'N', NULL, 3, 4, 75, 1, 33, 2, 2, 30000, 53, 'power721'),
(2291, '坑爹数论', 'Find a minimal interger K which is merely comprised of N and can be divided by M. \r\n\r\nFor example,11 is the minimal number that and be divided by 11, and it is comprised of two ''1''s, and 111111 can be divided by 13 which is comprised of six ''1''s.', 'On each line of input , there will be two positive integer, N and M. N is a digit number, M is no more than 10000.', 'On each single line, output the number of N, if no such K, output zero.', 'D:\\oj\\data\\2291', 'D:\\oj\\data\\2291', '1 5\r\n1 11\r\n1 13', '1: 0\r\n2: 2\r\n3: 6', '数据规模比较庞大。\r\n建议使用scanf', 'bingshen', '', '2011-11-01 11:09:59', 2000, 65536, 'N', NULL, 7, 27, 26, 7, 64, 3, 4, 300000, 187, 'bingshen'),
(2292, '筛法运用', 'In 1949 the Indian mathematician D.R. Kaprekar discovered a class of numbers called self-numbers. For any positive integer n, define d(n) to be n plus the sum of the digits of n. (The d stands for digitadition, a term coined by Kaprekar.) For example, d(75) = 75 + 7 + 5 = 87. Given any positive integer n as a starting point, you can construct the infinite increasing sequence of integers n, d(n), d(d(n)), d(d(d(n))), .... For example, if you start with 33, the next number is 33 + 3 + 3 = 39, the next is 39 + 3 + 9 = 51, the next is 51 + 5 + 1 = 57, and so you generate the sequence \r\n33, 39, 51, 57, 69, 84, 96, 111, 114, 120, 123, 129, 141, ...\r\n\r\nThe number n is called a generator of d(n). In the sequence above, 33 is a generator of 39, 39 is a generator of 51, 51 is a generator of 57, and so on. Some numbers have more than one generator: for example, 101 has two generators, 91 and 100. A number with no generators is a self-number. There are thirteen self-numbers less than 100: 1, 3, 5, 7, 9, 20, 31, 42, 53, 64, 75, 86, and 97. \r\n\r\n\r\nWrite a program to output all positive self-numbers less than or equal 1000000 in increasing order, one per line.', '', '', 'D:\\oj\\data\\2292', 'D:\\oj\\data\\2292', '', '1\r\n3\r\n5\r\n7\r\n9\r\n20\r\n31\r\n42\r\n53\r\n64\r\n|\r\n| <-- a lot more numbers\r\n|\r\n9903\r\n9914\r\n9925\r\n9927\r\n9938\r\n9949\r\n9960\r\n9971\r\n9982\r\n9993\r\n|\r\n|\r\n|', '', 'bingshen', '', '2012-04-10 22:07:06', 1000, 65536, 'N', NULL, 2, 5, 40, 3, 60, 2, 2, 30000, 75, 'bingshen'),
(2293, '数列转换', '有一个序列a1,a2,a3...an。每次可以从中任意选3个相邻的数a<sub>i-1</sub>,a<sub>i</sub>,a<sub>i+1</sub>，进行如下操作：\r\n(a<sub>i-1</sub>,a<sub>i</sub>,a<sub>i+1</sub>)-->(a<sub>i-1</sub>+a<sub>i</sub>,-a<sub>i</sub>,a<sub>i</sub>+a<sub>i+1</sub>，)。(0&lt;i&lt;n-1)\r\n给定初始序列和目标序列，是否能通过以上操作将初始序列转换为目标序列？\r\n例如：初始序列1,2,3,4可以通过如下操作转换为目标序列6,-5,2,7\r\n(1,2,<u><b>3</b></u>,4)->(1,<u><b>5</b></u>,-3,7)->(6,-5,2,7)', '多组数据。\r\n第一行一个整数n表示两个序列的长度。\r\n下面两行分别是n个整数，表示初始序列和目标序列。', '如果能通过以上操作将初始序列转换为目标序列，输出&quot;YES"，否则输出&quot;NO"。', 'D:\\oj\\data\\2293', 'D:\\oj\\data\\2293', '4\r\n1 2 3 4\r\n6 -5 2 7\r\n3\r\n1 2 3\r\n1 3 2', 'YES\r\nNO', '', '', '', '2011-10-31 21:50:51', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 88, 'power721'),
(2294, '直角三角形', '平面上给定N个两两不同的整点，统计以给定的点为顶点，且直角边平行于坐标轴的直角三角形数。', '第一行为一个整数N。以下N行，每行给出一个点的坐标。', '输出一个整数表示统计结果。', 'D:\\oj\\data\\2294', 'D:\\oj\\data\\2294', '4<br />\r\n0 0<br />\r\n0 1<br />\r\n1 0<br />\r\n1 1', '4', '【数据规模和约定】 30%的数据满足 N &le; 100； 50%的数据满足 N &le; 1000； 100%的数据满足0 &lt; N &le; 100000，所有坐标不超过32位整数范围。', '19870305', '', '2011-11-02 14:36:23', 2000, 65536, 'N', NULL, 8, 13, 62, 4, 50, 5, 4, 30000, 105, 'swust20095862'),
(2295, '调整排列', '给你一个正整数N,再给你两个N的全排列，现在你的任务是用最少的步骤把一个全排列调整为另一个全排列。调整的时候，可以把一个元素移动到该排列的任何一个位置。\r\n比如N=4,下面给出两个N的全排列。1 2 3 4和 1 2 4 3，可以把第一个排列中的4移动到3前面，这样就变成了1 2 4 3和第二个排列一样了，那么答案就是1。', '第一行包含一个数T(1<=T<=20)，代表下面共有T组测试数据。\r\n针对每组测试数据：\r\n第一部分输入一个数N，代表序列长度。（1<=N<=100000）\r\n第二部分两行，分别为N的两个全排列。', '针对每组测试数据，输出最少的移动步骤。', 'D:\\oj\\data\\2295', 'D:\\oj\\data\\2295', '1\r\n4\r\n1 2 3 4\r\n1 2 4 3', '1', '', '', '', '2012-05-08 21:31:04', 1000, 65536, 'N', NULL, 0, 13, 0, 13, 100, 3, 0, 30000, 137, 'jiushini'),
(2296, '机器人', '有一个机器人，在一个神秘的小屋里走着，上面有一些开关。现在这个机器人需要将这些开关全部打开，但是由于机器人程序问题，每次走到开关位置时，都会去改变一下开关的状态（由开变关，或由关变开），如果这个开关开启之后再关上那么会有意想不到的后果，为了避免这种情况出现，所以机器人只能走到每一个开关上有且只有一次。而且这个机器人高度智能化，从现在所处的位置到下一个开关处最多只会拐一次弯（如果两点的坐标x，y其中之一相同，则不会拐弯，否则只拐一次弯）\r\n我们想知道机器人打开所有开关用的最长步数是多少？比如从位置（x,y）到（x,y+1）算一步，聪明的你肯定懂一步的其他几种情况。', '第一行输入T，表示有T个case，每个case中：\r\n第一行输入一个数n，表示开关个数(n<=15)\r\n接下来有n行，每行两个整数x，y表示开关坐标0<=x,y<=1000\r\n机器人的起始位置可以任意设置，但是必须在某一开关处。', '每个样例输出一个数，表示最长的步数', 'D:\\oj\\data\\2296', 'D:\\oj\\data\\2296', '2\r\n2\r\n1 1\r\n2 2\r\n3\r\n1 1\r\n2 2\r\n3 3', '2\r\n6', '', '', '', '2011-11-03 20:56:25', 1000, 65536, 'N', NULL, 2, 14, 14, 12, 86, 3, 2, 30000, 161, 'jiushini'),
(2297, '逆序数', '话说我们都会算全排列的逆序数。\r\n例如：1 4 3 2，逆序数为3，因为有3对（4,3）（4,2）（3,2）\r\n但是我们总喜欢逆向思维，也就是对长度为4，逆序数为3的全排列个数感兴趣，现在请你帮忙解决下这个问题。', '第一行输入T，case数\r\n每个case输入两个数，n<=1000，k<=10000，表示全排列的长度和逆序对数', '输出一个数，表示满足的全排列个数，数字太大，模1000000007后输出。', 'D:\\oj\\data\\2297', 'D:\\oj\\data\\2297', '1\r\n4 3', '6', '', '', '', '2011-12-09 15:29:04', 2000, 65536, 'N', NULL, 8, 37, 22, 29, 88, 5, 4, 30000, 263, 'jiushini'),
(2298, '数木棒', '假设在一水平线上有N根木棒，木棒高度的取值区间为[1,N]，且这N根木棒的所有取值能构成[1,2,..N]的一个排列。\r\n现在假设你从左边看去能看见X根木棒，从右边看去能看见Y根木棒，举个例子：\r\n比如N=4，假设木棒按照高度的一个排列为  1 4 2 3  ，那么从左看去能看见高度为1 4 的两根木棒，（高度为2，3的看不到，因为其被高度为4的挡住了）。从右看去能看见高度为3 4的两根木棒(高度为2的木棒看不到，因为其被高度为3的木棒挡住了，同理高度1的被高度4的木棒挡住了)。所以在这种情况下： \r\nX=2,Y=2。\r\n当然这只是满足条件的一个排列，也可能还存在其他满足条件的高度排列。\r\n现在你的任务是：给定如上所述的N,X,Y。求满足条件的排列的方案数。结果可能会很大，所以只需要输出对1000000007取模的值即可。', '第一行输入一个数T，代表下面共有T组测试数据。（T<=100000）\r\n针对每组测试数据：首先输入三个数 N  M  P （1<=N<=100,1<=M,P<=1000000000）\r\nX=SOLVE(M)%N+1\r\nY=SOLVE(P)%N+1  (%为取模运算符)，其中SOLVE函数的定义如下：\r\nint SOLVE(int m)\r\n{\r\n     if(m==1)\r\n                  return 0;\r\n     if(m%2==0)\r\n          return SOLVE(m/2)+1;\r\n     else\r\n          return SOLVE(3*m+1)+1;\r\n}', '针对每组测试数据，输出相应的答案。', 'D:\\oj\\data\\2298', 'D:\\oj\\data\\2298', '2\r\n1 2 2\r\n1 1 1', '1\r\n1', '', '', '', '2011-11-03 19:51:58', 1000, 65536, 'N', NULL, 0, 5, 0, 5, 100, 1, 0, 30000, 122, 'jiushini'),
(2299, '数字根', '话说我们定义一个数的“数字根”R(n)，表示将该数所有位数反复求和，直到剩下小于10的数，例如R(29876)=R(32)=R(5)。\r\n现在输入一个数n，求F(n)的数字根，其中F(n)定义如下\r\nF(n)=0                      n=0\r\nF(n)=1                      n=1\r\nF(n)=F(n-1)+F(n-2)            n>1', '第一行输入T<10000，表示case数。每个case输入一个数n，0<=n<=10^18。', '输出一个数，表示R(F(n))', 'D:\\oj\\data\\2299', 'D:\\oj\\data\\2299', '2\r\n1\r\n10', '1\r\n1', '', '', '', '2012-04-19 22:25:11', 1000, 65536, 'N', NULL, 11, 35, 31, 24, 69, 13, 11, 30000, 285, 'jiushini'),
(2300, '数字和', '输入A，B，S，求出区间[A,B]间有多少数满足各位数字之和等于S。', '第一个数为T，表示case数，之后每个case输入A,B<10^15,S<=135', '输出一个数，表示间[A,B]间有多少数满足各位数字之和等于S', 'D:\\oj\\data\\2300', 'D:\\oj\\data\\2300', '2\r\n1 9 5\r\n1 100 10', '1\r\n9', '', '', '', '2012-02-07 02:23:24', 1000, 65536, 'N', NULL, 0, 6, 0, 6, 100, 4, 0, 30000, 299, 'jiushini'),
(2301, '钟点数', '话说小A在圣诞节收到了圣诞老人的礼物，打开一看，是N个画角的仪器，每个仪器都有一个角度，只能画这个角度的角，这时候，小A想，能不能用这些仪器画出其他角度的角。当然，其他角度可以由这些角度相加或者相减得来，当然也可以多次用同一个画角器,，而且大于180°的都可以转化成锐角或钝角。', '第一行输入T，表示case数。\r\n每个case输入两个数,0 < n <= 10,0 < m < 100，表示收到了n个画角器，并想要进行m个查询。\r\n下一行输入n个数，表示n个画角器的角度(角度在0--180之间，取不到0，180)。\r\n再下一行输入m个数，表示想要进行查询的角度（角度在0--180之间，取不到0，180）。', '对于每个查询，如果角度能够画出，输出Yes，否则输出No。', 'D:\\oj\\data\\2301', 'D:\\oj\\data\\2301', '2\r\n2 2\r\n30 40\r\n10 5\r\n1 1\r\n70\r\n30', 'Yes\r\nNo\r\nYes', '第2组样例中，30=(70+70+70)%180。', '', '', '2012-02-11 09:00:49', 1000, 65536, 'N', NULL, 16, 26, 62, 8, 42, 11, 11, 30000, 311, 'jiushini'),
(2302, '最多1', '这是一个很简单的问题，给你一个N*M的01矩阵，现在你需要去找最长斜相邻1的长度，和这样最长斜相邻的组数。\r\n斜相邻是指，如果当前点坐标是(x,y)，那么(x+1,y+1),(x-1,y-1)都与其相邻。', '第一行包含一个数T(1<=T<=20)，代表下面共有T组测试数据。\r\n针对每组测试数据：\r\n第一部分 N M，代表01矩阵的大小。（1<=N,M<=2000）\r\n第二部分 一个N*M的01矩阵。', '针对每组测试数据，每行输出相应的最长斜相邻1的长度，及相应的组数。', 'D:\\oj\\data\\2302', 'D:\\oj\\data\\2302', '2\r\n5 5\r\n1 1 1 1 1\r\n1 0 0 1 1\r\n0 1 1 1 1 \r\n0 1 0 1 0\r\n0 0 0 1 1\r\n\r\n2 3\r\n1 1 1\r\n1 1 1', '3 2\r\n2 2', '', '', '', '2012-03-06 15:23:48', 5000, 65536, 'N', NULL, 15, 31, 48, 15, 56, 13, 12, 30000, 314, 'jiushini'),
(2303, '最佳旅游路线', '有N个城市,编号从1到N，他们之间通过N-1条双向道路相连，虽然只有N-1条道路，却能保证任何两个城市能相互到达。现在SA来到了标号为X的城市，他手里有张地图，地图上是一个城市集m1,m2,m3…mj，其中每个城市都是不同的，并且与X也不同。现在SA想从X开始访问完所有的城市，当然正如你说想的那样，每条道路都有一个花费，现在的问题当然是想让总的花费最小。\r\n即将参加ChengDu Regional的童鞋们，能帮忙解决这个问题么？', '第一行包含两个数N，X，意义如上所述。（2<= N<=50000，1 <=X<=N）\r\n接下来下面N-1行，每行包含3个整数 A B C，代表A城市和B城市直接相连，费用为C。（1<= A,B<= N，1<= C<= 1000）\r\n	接下来一个数j（1<= j <= N - 1），代表城市集上共有j个城市。\r\n接下来一行，包含j个不同的整数m1,m2,m3…mj，代表SA想去的城市。\r\n注意：SA的访问顺序不一定按照m1,m2,m3…mj的顺序进行。', '输出最小费用', 'D:\\oj\\data\\2303', 'D:\\oj\\data\\2303', '4 2\r\n1 2 1\r\n4 2 2\r\n2 3 3\r\n2\r\n1 3', '5', '', '', '', '2011-11-09 11:08:15', 1000, 65536, 'N', NULL, 6, 20, 30, 14, 70, 6, 6, 30000, 235, 'jiushini'),
(2304, 'test', '', '', '', 'D:\\oj\\data\\2304', 'D:\\oj\\data\\2304', '', '', '', '', '', '2011-11-11 13:53:40', 5000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 15, 'swust_20096046'),
(2305, 'a+b', '64位数a+b测试', '', '', 'D:\\oj\\data\\2305', 'D:\\oj\\data\\2305', '', '', '', '', '', '2012-04-16 21:38:26', 100000, 65536, 'N', NULL, 10, 12, 83, 2, 20, 8, 8, 30000, 281, 'power721'),
(2306, 'Min distance', '设平面上一共有N个整数点(xi,yi)(0< =i< N),现在从中任选出M(M< =N)个点，再从中任意选择一个点(x,y)，你能计算出点(x,y)和这M个点距离之和的最小值吗?\r\n其中，点(x,y)和点(xi,yi)之间的距离定义为：|x-xi|+|y-yi|', '首先输入一个数cas，代表下面共有cas组测试数据。\r\n对于每组数据首先输入数N，M，(1< =N< =100)。代表共有N个点，并选择其中的M个。然后接下来N行，依次输入这N个点的坐标(xi,yi)(0< =i< N)。', '输出距离和的最小值，输出一组后换行输出另一组。(所有结果都在int范围内)', 'D:\\oj\\data\\2306', 'D:\\oj\\data\\2306', '2\r\n3 2\r\n1 0\r\n10 0\r\n12 0\r\n\r\n3 2\r\n1 1\r\n2 2\r\n4 4', '', '2\r\n2', 'bingshen', '', '2012-04-18 16:16:28', 1000, 65536, 'N', NULL, 5, 7, 71, 2, 29, 6, 5, 30000, 142, 'bingshen'),
(2307, '跳马游戏', '肥猫最近发明了一个3*3的棋盘上的跳马游戏\r\n这个棋盘以(行,列)的方式进行编号, 左上角的坐标为(0,0)\r\n开始时肥猫会将四个马摆在棋盘的四个角落, 初始局面:\r\n*.*\r\n...\r\n#.#\r\n\r\n*表示黑马, #表示白马, 马的移动规则与国际象棋的马相同(马跳日), 每一步在垂直的两个方向分别移动2和1的距离\r\n肥猫每次只能选择一匹马, 并按马的移动规则走一步, 移动过程中马不能重叠, 不能走出棋盘\r\n若肥猫将左下角的白马(2,0)移动到(0,1), 初始局面将变成:\r\n*#*\r\n...\r\n..#\r\n若肥猫继续将右上角的黑马(0,2)移动到(1,0), 局面将变成\r\n*#.\r\n*..\r\n..#\r\n\r\n玩着玩着, 肥猫突然有了一个全新的idea:\r\n那就是从初始局面开始:\r\n*.*\r\n...\r\n#.#\r\n用最少移动次数的步骤交换黑白马的位置, 将局面变成:\r\n#.#\r\n...\r\n*.*\r\n\r\n但是一只猫想不明白这么复杂的问题, 你懂的\r\n于是肥猫找到了你, 一位非常专业的程序员, 来帮它解决这个问题', 'no input', '输出能交换黑白马位置的最少行走次数的步骤\r\n每行用空格隔开的四个整数, 行末无多余空格\r\nx1 y1 x2 y2\r\n表示将(x1, y1)的马移动到(x2, y2)\r\n若存在多种方案, 输出字典序最小的 (输出序列连接成的十进制整数最小)\r\n若不能将黑白马的位置交换, 输出一行&quot;I can''t help you" (不含""号, 仅为了阅读方便)', 'D:\\oj\\data\\2307', 'D:\\oj\\data\\2307', 'no sample input', 'no sample output', '', 'neko13', '', '2012-02-03 15:12:40', 1000, 65536, 'N', NULL, 2, 5, 40, 3, 60, 4, 2, 30000, 101, 'bingshen'),
(2308, '阶乘相关', '题目很简明:\r\n令S[n]=1*1!+2*2!+3*3!+4*4!+....+n*n!\r\n求S[n]%10000007', '多组测试数据\r\n每组一个n\r\nn的范围:1<=n<=1000000', '输出:S[n]%10000007', 'D:\\oj\\data\\2308', 'D:\\oj\\data\\2308', '1\r\n2', '1\r\n5', '', 'bingshen', '', '2012-08-25 17:35:19', 1000, 65536, 'N', NULL, 17, 31, 55, 10, 48, 11, 11, 30000, 212, 'bingshen'),
(2309, 'Finding shortest path', 'I guess every contestant knows how to find a shortest path in a bidirectional graph, so this problem is intended to be a bit more difficult than that.\r\n\r\nGiven a bidirectional graph G=(V,E) with n vertices and m edges, it’s easy to find the shortest path between vertex S and T. Your task is to delete a set of edges with minimum cost, such that the shortest path in new graph is longer than the original one.', 'The input consists of multiple test cases.\r\n\r\nThe first line of each test case contains two integers n and m, which specify the number of vertices and edges. (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000). The second line consists of two integer S and T, indicating the source and the sink. (1 ≤ S,T ≤ n, S ≠ T) The next m lines each contains four integers ui, vi, wi and ci, indicating that there’s an edge between vertex ui and vi with length wi, and the cost of deleting it is ci. (1 ≤ ui,vi ≤ n, 0 ≤ wi,ci ≤ 1000)\r\n\r\nA test case with n=m=0 indicates the end of input.', 'For each test case, output “Case x: ” first, where x is the case number. Then output the minimum cost to increase the length the shortest path between S and T. The cost is counted as the sum of deleted edges’ cost.\r\n\r\nIt is guaranteed that shortest path in initial graph always exists, and length of the shortest path between S and T is regarded as infinity if they are not connected.', 'D:\\oj\\data\\2309', 'D:\\oj\\data\\2309', '2 3\r\n1 2\r\n1 2 2 3\r\n1 2 2 4\r\n1 2 3 5\r\n4 5\r\n1 4\r\n1 2 1 1\r\n2 3 1 1\r\n3 4 1 1\r\n1 4 3 2\r\n2 2 2 3\r\n4 5\r\n2 3\r\n1 2 3 2\r\n2 4 3 4\r\n1 3 2 3\r\n3 4 2 3\r\n1 4 0 1\r\n0 0', 'Case 1: 7\r\nCase 2: 3\r\nCase 3: 6', '', '', '', '2012-05-07 09:28:41', 4000, 65536, 'N', NULL, 9, 32, 28, 5, 63, 3, 3, 30000, 325, 'swust_20096046'),
(2310, '', '', '', '', 'D:\\oj\\data\\2310', 'D:\\oj\\data\\2310', '', '', '', '', '', '2012-02-17 09:54:16', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 6, 'swust_20096046'),
(2311, 'Unhappy dots', 'There are k dots living on an n × m grid. A dot is happy if and only if he has at least two neighbors. Otherwise, he’s lonely and thus unhappy.\r\n\r\nTwo dots are neighbors means that the manhattan distance between them is not greater than 1.\r\n\r\nGiven the locations of all dots, your task to count the number unhappy dots.', 'The input consists of multiple test cases. The first line of each test case contains three integers k, n and m, which are described above. Next k lines each contains two integers xi and yi, indicating the location of a dot. (1 ≤ k ≤ 105, 1 ≤ xi ≤ m ≤ 109, 1 ≤ yi ≤ n ≤ 109)\r\n\r\nA test case begins with “0 0 0” indicates the end of input.', 'For each test case, output “Case x: ” first, where x is the case number. Then output the number unhappy dots.', 'D:\\oj\\data\\2311', 'D:\\oj\\data\\2311', '2 2 2\r\n1 1\r\n1 2\r\n4 2 2\r\n1 1\r\n1 2\r\n2 1\r\n2 2\r\n5 2 2\r\n1 1\r\n1 1\r\n1 2\r\n2 1\r\n2 2\r\n0 0 0', 'Case 1: 2\r\nCase 2: 0\r\nCase 3: 0', '这题过不过，看人品。。。', '', '', '2012-04-21 16:17:07', 1000, 65536, 'N', NULL, 28, 109, 26, 74, 89, 11, 9, 30000, 405, 'swust_20096046'),
(2312, 'Collision detection', 'In movie The Terminator, the Terminator, a cyborg is sent back in time to assassinate Sarah Connor. In fact, there are n terminators in total. Due to the wrong record of destination, most of them got stuck in big rocks, and only the one looks like Arnold Schwarzenegger survived.\r\n\r\nSince the assassination has failed, the Skynet decides to sent n more Terminators. Given descriptions of all possible rocks, your task is to detect whether each Terminator would collide the rocks.\r\n\r\nTo simplify the problem, the Terminator is regarded as a single point and each rock is described as a convex polyhedron', 'The input contains only one test case. The first line consists of two integers n and m, which specify the number Terminators and rocks. (1 ≤ n,m ≤ 60)\r\n\r\nNext n lines each contains three integers (x,y,z), indicating the location of Terminators.\r\n\r\nThe rest of input contains m blocks, which describe the m rocks. In each block, the first line contains two integers k and e, indicating the number of vertices and edges. (4 ≤ k ≤ 20, 6 ≤ e ≤ 60) Next k lines each contains three integers, indicating the location of vertices. The last e lines each describes an edge by two integers u and v. (1 ≤ u,v ≤ k, u ≠ v)\r\n\r\nAll coordinates are non-negative and less than 1000. It is guaranteed that no two rocks intersect with each other.', 'Output should contain exactly n lines. Print “Terminator i: ” in the ith line, and then output “ready” if ith Terminator won’t get stuck in any rocks, or “oops” otherwise.\r\n\r\nTerminator would get stuck if he lies on the surface of a rock.', 'D:\\oj\\data\\2312', 'D:\\oj\\data\\2312', '6 1\r\n0 0 0\r\n1 1 0\r\n0 0 10\r\n3 4 5\r\n6 5 5\r\n6 6 6\r\n8 12\r\n1 1 1\r\n1 1 6\r\n1 6 1\r\n1 6 6\r\n6 1 1\r\n6 1 6\r\n6 6 1\r\n6 6 6\r\n1 2\r\n3 4\r\n5 6\r\n7 8\r\n1 3\r\n1 5\r\n3 7\r\n5 7\r\n2 4\r\n2 6\r\n4 8\r\n6 8', 'Terminator 1: ready\r\nTerminator 2: ready\r\nTerminator 3: ready\r\nTerminator 4: oops\r\nTerminator 5: oops\r\nTerminator 6: oops', '', '', '', '2012-02-17 10:41:20', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 77, 'swust_20096046'),
(2313, 'Hashing reversed', 'The following code implements a simple hashing function for strings. \r\n\r\nunsigned int hash(const char *str)\r\n{\r\n    unsigned int res=0;\r\n    for(;*str;++str)\r\n    {\r\n        res*=1000000007;\r\n        res+=*str;\r\n    }\r\n    return res;\r\n}\r\nGiven a hash value h, your task is to find the shortest original string which contains only lowercase letters(’a’..’z’).', 'The input consists of multiple test cases. Each test case contains exactly one integer h, which is described above.\r\n\r\nA test case with h=0 indicates the end of input and should not be processed.', 'For each test case, output the answer after “Case x: ”, where x is the case number. If there’re multiple possible answers, output the lexicographically smallest one. You may assume the answer always exists and contains no more than 8 characters.', 'D:\\oj\\data\\2313', 'D:\\oj\\data\\2313', '3403101377\r\n446150741\r\n3017941386\r\n863509366\r\n2321877736\r\n0', 'Case 1: xyz\r\nCase 2: ustc\r\nCase 3: ustcif\r\nCase 4: hash\r\nCase 5: acmicpc', '', '', '', '2012-04-07 00:28:43', 1000, 65536, 'N', NULL, 2, 5, 40, 0, 0, 1, 1, 30000, 122, 'swust_20096046'),
(2314, 'Large bitmap', 'Rectangle is the most beautiful shape in the world!\r\n\r\nYour task is to designed a tool to draw rectangles on a large bitmap.\r\n\r\nThe bitmap is initially white(r=g=b=255). Your tool should draw n rectangles in given order. Since the bitmap is too large to output, you are only required to output the color of a few pixels.', 'The input consists of multiple test cases.\r\n\r\nFor each test case, the first line contains two integers n and m, indicating the number rectangles and pixels(0 ≤ n,m ≤ 1000). The next n lines each contains 7 integers x1, y1, x2, y2, r, g, b, indicating that pixel (x,y) should be painted with color RGB(r,g,b), where 0 ≤ x1 ≤ x ≤ x2 < 232, 0 ≤ y1 ≤ y ≤ y2 < 232 and 0 ≤ r,g,b ≤ 255. The last m lines each contains two integers x and y, indicating the pixel queried.\r\n\r\nA test case with n=m=0 indicates the end of input.', 'For each test case, output “Case x:” in a single line first, where x is the case number. Then output m lines, each of which contains three integers separated by exact one space, indicating the RGB color of queried pixels.\r\n\r\nOutput a blank line after each test case.', 'D:\\oj\\data\\2314', 'D:\\oj\\data\\2314', '1 2\r\n0 0 2 3 127 196 200\r\n1 2\r\n3 0\r\n2 3\r\n8 16 32 64 0 255 128\r\n8 48 32 64 255 0 0\r\n12 47\r\n13 48\r\n14 64\r\n0 0', 'Case 1:\r\n127 196 200\r\n255 255 255\r\n\r\nCase 2:\r\n0 255 128\r\n255 0 0\r\n255 0 0', '', '', '', '2012-02-17 16:42:42', 1000, 65536, 'N', NULL, 10, 28, 36, 18, 64, 10, 10, 30000, 188, 'swust_20096046'),
(2315, 'Oh my dear trees', 'Given a weighted graph G with n vertices, G’s spanning tree is a connected subgraph of G which contains all vertices of G and exactly n&#8722;1 edges. The variance of a spanning tree T is defined as below: \r\n\r\n<img height="129" src="problem-images\\2315.JPG" width="315" /> <br /> \r\n\r\nThis problem requires you to find a spanning tree T with minimum variance.', 'The input contains multiple test cases. Each test case begins with a line containing two integers n and m, specifying the number of vertices and number of edges. Next m lines each contains three integers u, v and w, indicating there’s an edge between u and v weighted w. (1 ≤ u,v ≤ n ≤ 50, n&#8722;1 ≤ m ≤ 1000, 0 ≤ w ≤ 50)\r\n\r\nThe input ends with n=m=0.\r\n\r\nIt is guaranteed that the spanning tree always exists.', 'For each test case, output the minimum variance after “Case x: ”, where x is the case number. The answer should be rounded to 0.01.', 'D:\\oj\\data\\2315', 'D:\\oj\\data\\2315', '4 5\r\n1 2 1\r\n2 3 2\r\n3 4 2\r\n4 1 1\r\n2 4 3\r\n4 6\r\n1 2 1\r\n2 3 2\r\n3 4 3\r\n4 1 1\r\n2 4 3\r\n1 3 3\r\n0 0', 'Case 1: 0.22\r\nCase 2: 0.00', '', '', '', '2012-02-17 10:42:44', 3000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 118, 'swust_20096046'),
(2316, 'Verifying CRC polynomial', 'Cyclic redundancy check(CRC) is an error-detecting code commonly used many fields.\r\n\r\nA common misconception is that the “best” CRC polynomials are derived from either an irreducible polynomial or an irreducible polynomial times the factor (1 + x), which adds to the code the ability to detect all errors affecting an odd number of bits. (Wikipedia)\r\n\r\nIf you don’t know what I am talking about, please read the web page in above hyperlink.\r\n\r\nGiven a polynomial of 33 or less bits, please check if it satisfies above condition.', 'The input consists of multiple test cases. Each test case contains a single string of length n. The (n&#8722;i)th character indicates the coefficient of xi, and xn’s coefficient is always 1. (2 ≤ n ≤ 32)\r\n\r\nThe input ends with “0”.', 'For each test case, output “Case x: ” first, where x is the test case number. Then print “Yes” if above condition holds, or “No” otherwise.', 'D:\\oj\\data\\2316', 'D:\\oj\\data\\2316', '01\r\n0011\r\n1011\r\n00000100110000010001110110110111\r\n0', 'Case 1: Yes\r\nCase 2: Yes\r\nCase 3: No\r\nCase 4: Yes', '', '', '', '2012-02-17 14:07:04', 1000, 65536, 'N', NULL, 0, 3, 0, 3, 100, 1, 0, 30000, 98, 'swust_20096046'),
(2317, 'Elite VIP', 'Very Important Pig (VIP) is an interesting game played on an n × m grid.\r\n\r\nThere are 4 types of cells in the grid: empty(“.”), dirt(“*”), ladder(“#”) and rock(“@”).\r\n\r\nOur VIP(“P”) is running according to following rules: \r\n\r\n&#8226;If the VIP is on a ladder: \r\n&#9702;He will move to the right cell if it’s empty or a ladder. \r\n&#9702;Or move to the top cell if it’s empty or a ladder. He won’t do this if the right cell is empty or a ladder. \r\n&#9702;Otherwise, the VIP will stay where he was. \r\n&#8226;If the VIP is NOT on a ladder: \r\n&#9702;He will fall into the below cell if it’s empty. \r\n&#9702;Or move to the right cell if it’s empty or a ladder. He won’t do this if the below cell is empty. \r\n&#9702;Otherwise, the VIP will stay where he was. \r\nThe goal of game is to help our VIP go back home(“H”) by digging the dirt. A dirt cell becomes empty after digging, and rocks can’t be destroyed. Your task is to dig the minimum number of cells to achieve the goal.', 'The input consists of multiple test cases. Each case begins with two integers n and m, indicating height and width of the grid. The next n lines each contains m characters, describing the game map. The characters might be “.”, “*”, “#”, “@”, “P” and “H”, which are explained above. You may assume VIP’s initial position(“P”) and home(“H”) are in empty cells, and there’s exactly one “P” and one “H” in the map. (2 ≤ n,m ≤ 1000)\r\n\r\nThe input ends with n=m=0.', 'For each test case, output the minimum number of cells to be dug after “Case x: ”, where x is the case number. If it is impossible to accomplish the game, output “oops” instead.', 'D:\\oj\\data\\2317', 'D:\\oj\\data\\2317', '1 3\r\nP*H\r\n3 5\r\n*#@.H\r\n*#**#\r\nP#***\r\n4 6\r\nP@*#.*\r\n*@#@.H\r\n*@#@.#\r\n*.#@.#\r\n4 5\r\nP....\r\n****@\r\n#*#..\r\n****H\r\n1 2\r\nHP\r\n2 3\r\n@H*\r\nP#.\r\n2 3\r\n@H*\r\nP#*\r\n0 0', 'Case 1: 1\r\nCase 2: 2\r\nCase 3: 4\r\nCase 4: 1\r\nCase 5: oops\r\nCase 6: oops\r\nCase 7: 0', 'Following figure shows VIP’s path(“o”) in case 2: \r\n\r\n*#@.o\r\n*oooo\r\noo***', '', '', '2012-02-23 22:13:50', 1000, 65536, 'N', NULL, 2, 7, 29, 5, 71, 4, 2, 30000, 161, 'swust_20096046'),
(2318, 'Counting DNAs', 'Scientists have discovered a new species whose DNA is quite special.\r\n\r\nThe structure of DNA comprises 2m helical chains each coiled round the same axis. Every chain contains exactly n nucleotides.\r\n\r\nLet’s denote the jth nucleotide in ith chain as x(i,j). There are k pairs of nucleotides, denoted as (A,a), (B,b), (C,c), …Any pair of corresponding nucleotides in ith and (i+m)th chains are held tightly together. That means, x(i,j) and x(i+m,j) are always a pair of nucleotides, for any 1 ≤ i ≤ m and 1 ≤ j ≤ n.\r\n\r\nTwo DNAs A and B are considered same if B can be constructed by rotating A along the axis.\r\n\r\nYour task is to to write a program to calculate the number different DNAs.', 'The input consists of multiple test cases. Each test case contains only three integers n, m and k in a single line, which are explained above. (1 ≤ n,m,k ≤ 109)\r\n\r\nThe input ends with “0 0 0”.', 'For each test case, output “Case x: ” first, where x is the test case number. Then output the answer mod 1,000,000,007.', 'D:\\oj\\data\\2318', 'D:\\oj\\data\\2318', '1 2 2\r\n1 2 3\r\n1 3 2\r\n1 3 3\r\n2 2 2\r\n0 0 0', 'Case 1: 4\r\nCase 2: 9\r\nCase 3: 12\r\nCase 4: 38\r\nCase 5: 16', 'The 4 different DNAs in test case 1 are: ABab, BAba, AAaa, BBbb.\r\n\r\nThe 9 different DNAs in test case 2 are: ABab, BAba, ACac, CAca, BCbc, CBcb, AAaa, BBbb, CCcc.', '', '', '2012-02-17 10:43:45', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 84, 'swust_20096046'),
(2319, 'Yet another counting problem', 'Bejeweled is a popular computer game played with k kinds of jewels. The game board consists of an n × m grid, which is filled with nm jewels. The goal of game is to erase as many jewels as possible by swapping consecutive jewels. When the player swaps any two consecutive jewels, the game: \r\n\r\n1.erases consecutive jewels of the same kind in a single line, if there are 3 or more of such jewels. \r\n2.moves jewels in each column down to the empty cells. \r\n3.repeats this process until no more jewels get erased. \r\nThe goal of game is to erase as many jewels as possible by swapping consecutive jewels. Player can swap any two consecutive jewels if 3 or more jewels get erased after swapping.\r\n\r\nYou task is to count the number of different game board in which no jewels get erased, i.e. there’s no 3 consecutive jewels of same kind in a single line.', 'The input consists of multiple test cases. Each test case contains only three integers n, m and k in a single line, which are explained above. (1 ≤ n,m ≤ 6, 1 ≤ k ≤ 4)\r\n\r\nThe input ends with “0 0 0”.', 'For each test case, output “Case x: ” first, where x is the test case number. Then output the answer mod 1,000,000,007.', 'D:\\oj\\data\\2319', 'D:\\oj\\data\\2319', '1 4 2\r\n3 2 3\r\n4 4 3\r\n4 4 4\r\n0 0 0', 'Case 1: 10\r\nCase 2: 576\r\nCase 3: 8484138\r\nCase 4: 703632757', 'The 10 possible game boards in case 1 are: AABA, AABB, ABAA, ABAB, ABBA, BAAB, BABA, BABB, BBAA, BBAB.', '', '', '2012-02-17 10:44:00', 1000, 65536, 'N', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 105, 'swust_20096046'),
(2320, '!!! Good luck & have fun !!!', 'Output "Happy Spring Festival!" in a single line and you will get an accept.', 'Nothing', 'Happy Spring Festival!', 'D:\\oj\\data\\2320', 'D:\\oj\\data\\2320', '', 'Happy Spring Festival!', '', '', '', '2012-04-16 17:54:42', 1000, 65536, 'N', NULL, 30, 34, 88, 3, 10, 26, 27, 30000, 216, 'swust_20096046'),
(2321, 'The Castle', '以一个几乎超乎想像的运气，农民约翰在他的生日收到了一张爱尔兰博彩的奖券。\r\n这一张奖券成为了唯一中奖的奖券。\r\n农民约翰嬴得爱尔兰的乡下地方的一个传说中的城堡。\r\n吹牛在他们威斯康辛州不算什么，农民约翰想告诉他的牛所有有关城堡的事。\r\n他想知道城堡有多少房间，而且最大的房间有多大。\r\n事实上，他想去掉一面墙来制造一个更大的房间。\r\n\r\n你的任务是帮助农民约翰去了解正确房间数目和大小。\r\n城堡的平面图被分为 M(wide)*N(1 <=M,N<=50)个小正方形。\r\n每个这样的小正方形有0到4面墙。\r\n城堡在它的外部边缘总是有墙壁的，好遮挡风雨。\r\n\r\n考虑这注解了一个城堡的平面图：\r\n     1   2   3   4   5   6   7\r\n   #############################\r\n 1 #   |   #   |   #   |   |   #\r\n   #####---#####---#---#####---#   \r\n 2 #   #   |   #   #   #   #   #\r\n   #---#####---#####---#####---#\r\n 3 #   |   |   #   #   #   #   #   \r\n   #---#########---#####---#---#\r\n 4 # ->#   |   |   |   |   #   #   \r\n   ############################# \r\n\r\n# =墙壁   -,| = 没有墙壁\r\n-> =移除这面墙能使得到的新房间最大\r\n\r\n例子的城堡的大小是7 x 4。\r\n\r\n一个 "房间"是平面图上有连接的&quot;小正方形"的集合。\r\n这个平面图包含五个房间。(它们的大小是9,7,3,1, 和 8 排列没有特别的顺序)。\r\n\r\n移除被箭作记号的墙壁来合并两个房间来制造最大的可能房间(移除一面墙所能产生的)。\r\n城堡总是至少有二个房间并且总是有一面墙壁以可能被移除。', '地图以一个表格来储存，每个数字描述一个小正方形，N行每行M个数来描述这个平面图。\r\n输入顺序符合那个在上面例子的编号方式。\r\n每个描述小正方形的数字说明小正方形的四面的墙的分布情况，它是下面4个数的和：\r\n\r\n1: 在西面有墙 \r\n2: 在北面有墙 \r\n4: 在东面有墙 \r\n8: 在南面有墙 \r\n\r\n内部的墙壁是会被定义两次；小正方形(1,1)南面的墙也被指出是小正方形(2,1)北面的墙。\r\n\r\n\r\n第 1 行: 二个被空格分开的整数: M 和 N \r\n第 2 到 N+1 行:  M x N 个整数,每行M个。', '输出包含一些行:\r\n\r\n第 1 行:  城堡的房间数目。 \r\n第 2 行:  最大的房间的大小 \r\n第 3 行:  移除一面墙能得到的最大的房间的大小  \r\n第 4 行:  移除哪面墙 \r\n\r\n选择最佳的墙来移除，(选择最靠西的，如果仍然不能确定，再选择最靠南的。编者注：墙的位置应该由它的中点来定义)\r\n原文：\r\nChoose the optimal wall to remove from the set of optimal walls by choosing the module farthest to the west (and then, if still tied, farthest to the south). If still tied, choose ''N'' before ''E''. Name that wall by naming the module that borders it on either the west or south, along with a direction of N or E giving the location of the wall with respect to the module.', 'D:\\oj\\data\\2321', 'D:\\oj\\data\\2321', '7 4\r\n11 6 11 6 3 10 6\r\n7 9 6 13 5 15 5\r\n1 10 12 7 13 7 5\r\n13 11 10 8 10 12 13', '5\r\n9\r\n16\r\n4 1 E', '注意Output最后一句话', 'I Moo', '', '2012-03-13 17:45:32', 1000, 65536, 'N', NULL, 1, 22, 5, 21, 95, 2, 1, 30000, 282, 'swust_20096046'),
(2322, '分数线划定', '世博会志愿者的选拔工作正在 A 市如火如荼的进行。为了选拔最合适的人才，A 市对所有报名的选手进行了笔试，笔试分数达到面试分数线的选手方可进入面试。面试分数线根据计划录取人数的150%划定，即如果计划录取m名志愿者，则面试分数线为排名第m*150%（向下取整）名的选手的分数，而最终进入面试的选手为笔试成绩不低于面试分数线的所有选手。\r\n现在就请你编写程序划定面试分数线，并输出所有进入面试的选手的报名号和笔试成绩。', '有多组输入，对于每一组输入:第一行，两个整数n，m（5 ≤ n ≤ 5000，3 ≤ m ≤ n），中间用一个空格隔开，其中n 表示报名参加笔试的选手总数，m 表示计划录取的志愿者人数。输入数据保证m*150%向下取整后小于等于n。第二行到第 n+1 行，每行包括两个整数，中间用一个空格隔开，分别是选手的报名号k（1000 ≤ k ≤9999）和该选手的笔试成绩s（1 ≤ s ≤ 100）。数据保证选手的报名号各不相同。', '第一行，有两个整数，用一个空格隔开，第一个整数表示面试分数线；第二个整数为进入面试的选手的实际人数。从第二行开始，每行包含两个整数，中间用一个空格隔开，分别表示进入面试的选手的报名号和笔试成绩，按照笔试成绩从高到低输出，如果成绩相同，则按报名号由小到大的顺序输出。', 'D:\\oj\\data\\2322', 'D:\\oj\\data\\2322', '6 3\r\n1000 90\r\n3239 88\r\n2390 95\r\n7231 84\r\n1005 95\r\n1001 88', '88 5\r\n1005 95\r\n2390 95\r\n1000 90\r\n1001 88\r\n3239 88', 'm*150% = 3*150% = 4.5，向下取整后为4。保证4 个人进入面试的分数线为88，但因为88\r\n\r\n有重分，所以所有成绩大于等于88 的选手都可以进入面试，故最终有5 个人进入面试。', 'liuyin', '', '2012-04-23 23:18:28', 1000, 65536, 'N', NULL, 12, 50, 24, 38, 76, 13, 12, 30000, 279, 'swust_20096046'),
(2323, '数列求值', '对于一个含有n+2个元素的数列A<sub>0</sub>,A<sub>1</sub>,…A<sub>i</sub>,…A<sub>n+1</sub>（0<=n<=1000,-1000<=A<sub>i</sub><=1000）,满足这样一个公式A<sub>i</sub>=(A<sub>i-1</sub>+A<sub>i+1</sub>)/2-C<sub>i</sub>  (i=1,2,3,…,n)。\r\n现在给出A<sub>0</sub>,A<sub>n+1</sub>,C<sub>1</sub>,C<sub>2</sub>,…,C<sub>n</sub> 的值，要求计算出A<sub>1</sub>的值。', '多组数据输入，每次先输出一个n，第二行输入两个数A<sub>0</sub>和A<sub>n+1</sub>，接着是n个数据分别是C<sub>1</sub>，C<sub>2</sub>，…C<sub>n</sub>。所有的数据均是有两位小数的浮点数。', '输出A<sub>1</sub>的值，结果保留两位小数', 'D:\\oj\\data\\2323', 'D:\\oj\\data\\2323', '1\r\n50.50 25.50\r\n10.15\r\n\r\n2\r\n-756.89 52.52\r\n172.22 67.17', '27.85\r\n-761.49', '', 'duanxian', '', '2012-05-04 21:01:44', 1000, 65536, 'N', NULL, 12, 28, 43, 15, 56, 12, 12, 30000, 346, 'swust_20096046'),
(2324, '求和', '求N 个高精度数的和。。', '有很多组测试数据（大约有 3000 组）。\r\n第一行输入N，表示有N个高精度数。（1 <= N <= 20)\r\n接下来的每一行输入一个高精度数（不超过100位的非负整数）', '只有一行，输出结果就OK 。。', 'D:\\oj\\data\\2324', 'D:\\oj\\data\\2324', '1\r\n5241052\r\n2\r\n22222\r\n33333\r\n6\r\n55555\r\n4444\r\n333\r\n22\r\n1\r\n0', '5241052\r\n55555\r\n60355', '', 'chenyanhua', '', '2012-05-06 20:06:31', 1000, 65536, 'N', NULL, 16, 52, 31, 36, 72, 16, 14, 30000, 286, 'swust_20096046'),
(2325, 'AC_mm玩war3', '大家都知道AC_mm比较喜欢玩游戏，特别是擅长war3这款经典游戏。某天AC_mm来到了VS平台上 ，准备去虐菜鸟，正巧一个不小心将我们ACM队长虐了 ^_^，我们的队长这下可不高兴了，说要出一道难题让AC_mm难堪一下。题目描述是这样的，给一个正整数n，n在二进制表示的情况下（不含前导0和符号位）有a个1和b个0，求斐波拉契数列的第a*b项对1314520取模后的值ans。', '输入：有多组测试数据,输入一个正整数n(n<1000000000);', '输出：ans的值。', 'D:\\oj\\data\\2325', 'D:\\oj\\data\\2325', '12\r\n6', '5\r\n2', '斐波拉契数列：\r\nf[0]=1,f[1]=1;\r\nf[n]=f[n-1]+f[n-2]  n>=2;', 'AC_mm', '', '2012-04-16 19:30:14', 1000, 65536, 'N', NULL, 14, 31, 45, 17, 57, 14, 13, 30000, 294, 'swust_20096046'),
(2326, '逆序数', '在一个排列中，如果一对数的前后位置与大小顺序相反，即前面的数大于后面的数，那么它们就称为一个逆序。一个排列中逆序的总数就称为这个排列的逆序。如2431中，21，43，41，31是逆序，逆序数是4。 　　也就说，对于n个不同的元素，先规定各元素之间有一个标准次序（例如n个 不同的自然数，可规定从小到大为标准次序），于是在这n个元素的任一排列中，当某两个元素的先后次序与标准次序不同时，就说有1个逆序。一个排列中所有逆序总数叫做这个排列的逆序数。\r\n   我们定义一组数的标准次序为从小到大(即如果i<j,则a[i]<=a[j])，请你输出这组数的逆序数', '第一行输入一个整数t，t为测试组数，每组测试数据第一行为一个整数（1<=n<=200);第二行为n个不同的整数ai(ai<=1000000);', '输出每组数的逆序数，每组输出占一行。', 'D:\\oj\\data\\2326', 'D:\\oj\\data\\2326', '1\r\n4\r\n2 4 3 1', '4', '', 'chenwei', '', '2012-05-06 20:11:26', 1000, 65536, 'N', NULL, 19, 36, 53, 17, 53, 15, 15, 30000, 231, 'swust_20096046'),
(2327, '硬币', 'Mary上课睡觉被老师抓住了，老师给她出了一道难题，如果她做出来就不惩罚她，现在她需要你们的帮助。问题是这样的：有n个人玩游戏，每个人手上都有一个数字，这个数字代表他们的价值，现在有很多个硬币，每个人只能将硬币传给价值比他低的人，要使每个人都接触过硬币，那么最少需要多少个硬币。', '多组样例输入。\r\n每组输入第一行有一个数n(n<=3000)；\r\n接下来n行每行一个数（每个数不超过30位数字）；', '每组样例输出一行，输出为最少的硬币数。', 'D:\\oj\\data\\2327', 'D:\\oj\\data\\2327', '4\r\n10 \r\n20 \r\n30 \r\n04 \r\n5 \r\n2 \r\n3 \r\n4 \r\n3 \r\n4', '1 \r\n2', '', 'liuyan', '', '2012-09-11 23:21:28', 1000, 65536, 'N', NULL, 22, 72, 31, 44, 75, 18, 15, 30000, 559, 'swust_20096046'),
(2328, 'SaSet', 'Saya defines a set consists of square numbers({i|i=x^2,x∈N} or {0,1,4,9,16…}) called Saya Set(SaSet for short).\r\nThe addition on this set is defined by Saya:(min(S) here is a function which returns the minimum element in the given set S. \r\nFor example, min(SaSet)=0.)Examples:0+1=1,1+1=4,4+1=9… \r\n<img height="85" src="problem-images\\2328.jpg" width="426" /><br />\r\n\r\n（max(S) here is a function which returns the maximum element in the given set S.)\r\nExample:1-1=0,4-1=1,9-1=4…\r\nExample:4+4=4+1+(4-1)=9+1=16', 'There is only one integer T(1<=T<=50) in the first line, which denotes the number of test cases.\r\nThen T lines follows, each line will consists of two integers a and b(0<=a+b<=400,a,b∈SaSet). You are asked to calculate the answer of a+b.', 'For each case, output an integer, which denotes the result of a+b according to the definitions above.', 'D:\\oj\\data\\2328', 'D:\\oj\\data\\2328', '2\r\n0 0\r\n4 4', '0\r\n16', '', 'gongjing', '', '2012-03-14 11:59:17', 1000, 65536, 'N', NULL, 10, 14, 71, 4, 29, 10, 10, 30000, 249, 'swust_20096046'),
(2329, '公司合并', 'I Moo被M国政府聘请做经济规划专家，现在M国马上给了I Moo新任务：\r\n在华尔街有N家公司，现在面对经济危机不得不进行公司合并，使这些公司合并成一个大公司从而存活下来。现在政府将这N家公司上一季度的盈利率告诉I Moo，并且规定合并后的公司盈利率为上季度各公司盈利率的平均值，现在要求I Moo使用最优的合并方法使这家大公司盈利率最大。例如：有3家公司，盈利率分别为r<sub>0</sub>= 5,r<sub>1</sub>= -7 (负数表示上一季度亏损),r<sub>2</sub>= 3，那么最优方法是将r<sub>1</sub>与r<sub>2</sub>合并，再将合并后的公司与r<sub>0</sub>合并，所以最大盈利率为1.50(结果保留2位小数)。', '测试数据包含多组。\r\n第一行输入一个正整数N，表示初始公司个数。(N<=50)\r\n第二行输入N个整数，表示N家公司上一季度的盈利率r<sub>0</sub>,r<sub>1</sub>,···r<sub>n-1</sub>。(-1000<=r<sub>i</sub><=1000)', '每组测试数据输出一行，即合并后得到的最大盈利率。(保留2位小数)', 'D:\\oj\\data\\2329', 'D:\\oj\\data\\2329', '3\r\n5 -7 3\r\n5\r\n12 12 12 12 12', '1.50\r\n12.00', '', 'I Moo', '', '2012-05-07 20:42:13', 1000, 65536, 'N', NULL, 17, 24, 71, 7, 30, 16, 16, 30000, 303, 'swust_20096046'),
(2330, 'Catch the Mouse', 'A cat find a mouse in the sitting room, cat try to catch the mouse, Your task is to model their behavior.\r\nThe sitting room is a 10 by 10 planar grid. Squares can be empty or they can contain:\r\n. Empty square\r\n* Obstacle\r\nC cat\r\nM mouse\r\nFor example:\r\n*...*.....\r\n......*...\r\n...*...*..\r\n..........\r\n...*.C....\r\n*.....*...\r\n...*......\r\n..M......*\r\n...*.*....\r\n.*.*......\r\n\r\nThe mouse wander around the sitting room in a fixed way. Each minute, they either move forward or rotate. Normally, they move one square in the direction they are facing. If there is an obstacle in the way or they would leave the board by walking `forward'', then they spend the entire minute rotating 90 degrees clockwise.\r\n\r\ncat wise in the ways of mouse, moves in exactly the same way.\r\n\r\nThe cat and the mouse can be considered to move simultaneously during each minute. If the cat and the mouse pass each other while moving, they are not considered to have met. The chase ends when the cat and the mouse occupy the same square at the end of a minute.\r\n\r\nCalculate the number of minutes until the cat and the mouse meet. Assume both the cows and farmer begin the simulation facing in the `north'' direction. Print 0 if they will never meet.', 'Lines 1-10: Ten lines of ten characters each, as explained above', 'A single line with the integer number of minutes until the cat and the mouse meet. Print 0 if they will never meet.', 'D:\\oj\\data\\2330', 'D:\\oj\\data\\2330', '*...*.....\r\n......*...\r\n...*...*..\r\n..........\r\n...*.C....\r\n*.....*...\r\n...*......\r\n..M......*\r\n...*.*....\r\n.*.*......', '49', '', '', '', '2012-04-22 15:52:31', 1000, 65536, 'N', NULL, 9, 27, 33, 11, 79, 5, 3, 30000, 205, 'swust_20096046');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(2331, 'Artificial Intelligence', 'Artificial Intelligence (AI) is the area of computer science focusing on creating machines that can engage on behaviors that humans consider intelligent. The ability to create intelligent machines has intrigued humans since ancient times and today with the advent of the computer and 50 years of research into AI programming techniques, the dream of smart machines is becoming a reality.\r\n\r\nThe basic problem is whether the machines can learn. Considering a program P with two parameters a and b, for example, describing as “ax2^b a b”, you should compute the calculation of program “ax2^b” by the following operations. \r\n\r\nThere are 4 operations to describe a program, and 3 registers may be used for supporting them.\r\n\r\nRegisters(immovably in lower-case):\r\nax, bx: used for computing.\r\ncx: used for operation REPEAT indicating the number that how many times will the operations between REPEAT and ENDREPEAT be executed. \r\n\r\nOperations(immovably in upper-case)::\r\nMOV p1 p2: copy the value of p2 to p1. p1, p2 could be register or parameter(a or b). And p2 may be instead by an integer.\r\nREPEAT/ENDREPEAT: those operations between REPEAT and ENDREPEAT will be executed cx times.  If cx is negative, those operations won''t be excuted. We promise that there is no nested loop. After ENDREPEAT, cx would be valued with 0(no matter whether the loop has been excuted or not).\r\nADD p1 p2: value p1 with p1 plus p2. p1, p2 could be register or parameter(a or b). And p2 may be instead by an integer. \r\nPRINT p1: print the value of p1 in one line.', 'There is ONLY ONE TESTCASE.\r\nThe first line of input is the name of the program(no blank space in it) with immovable “a” and “b”, separated by a blank space.\r\nThen one line “BEGIN” followed indicating the beginning of the program.\r\nThen several lines followed, each line is an operation.\r\nAfter all the operations have been inputted, one line “END” followed.\r\nEach of the next following lines is a query describing as “P va vb”, (P:name of the program, va: value of a, vb: value of b). In the end, one line “EXIT” followed.', 'For each query, you should put va,vb into program P and excute. For each executing, ax,bx,cx will be initially valued with 0.', 'D:\\oj\\data\\2331', 'D:\\oj\\data\\2331', 'ax2^b a b\r\nBEGIN\r\nMOV ax a\r\nMOV cx b\r\nREPEAT\r\nADD ax ax\r\nENDREPEAT\r\nPRINT ax\r\nEND\r\nax2^b 4 2\r\nax2^b 3 2\r\nax2^b 11 3\r\nax2^b 12 3\r\nax2^b 1 1\r\nEXIT', '16\r\n12\r\n88\r\n96\r\n2', '', '', '', '2012-03-26 13:38:37', 1000, 65536, 'N', NULL, 2, 3, 67, 0, 0, 2, 2, 30000, 209, 'swust_20096046'),
(2332, 'This is not only a problem', 'Do you remember the story about the race between the rabbit and the tortoise ? The pitiful rabbit lost the game , but he could not accept this result. So , today the rabbit is coming to the beach with all of his families , and he wants to compete with the tortoise and all of his families , and the rabbits give the tortoises one month to prepare. The tortoises exercise day and night , and with the help of the "Gao Fu Shuai"--Bearboy , they can run as fast as rabbit.\r\nIn order to compete fair , there are N rabbits and N tortoises on the runway ,  and they will start at the same time.\r\nNow , the pompous rabbits let tortoises chose their starting point(may not at point ''0'') , and the rabbits'' starting point are also chosen by tortoise! How generous the rabbits are~ We can guarantee that the runway is a infinite long runway , and the rules are as follows:\r\nFirst: if x tortoises catch up with y rabbits at the same time, the tortoises get x*y scores.\r\nSecond: if x rabbits catch up with y tortoises at the same time, the rabbits get x*y scores.\r\nNow , can you calculate the scores of the tortoises ?', 'There are multiple test cases.\r\nFor each case , there is an integer N (1<=N<=100000)represents the number of the rabbits and tortoises.Then 2*N lines follow , each line contains two integers Si , Vi (Si represents the starting point of i-th rabbit or tortoise,the starting point of the runway is ''0'' , Vi(1<=Vi<=100000) represents the speed of i-th rabbit or tortoise). The second line to the (N+1)-th line are informations about the rabbits , and the (N+2) line to the (2*N+1) are informations about the tortoises.(All of the Si will not be the same)', 'Only one integer , represents the score of tortoises(The answer should be mod 2012).', 'D:\\oj\\data\\2332', 'D:\\oj\\data\\2332', '3\r\n3 5\r\n7 6\r\n8 2\r\n1 7\r\n2 6\r\n5 8\r\n2\r\n4 2\r\n5 2\r\n3 4\r\n2 4', '7\r\n4', '', 'Bearboy', '', '2012-06-09 17:36:57', 2000, 65536, 'N', NULL, 2, 3, 67, 1, 33, 2, 2, 30000, 112, 'swust_20096046'),
(2333, 'Collision detection', 'Give you a rectangle,and the upper left point is(0,0),the lower right point is (n,m).There is one ball at (x0,y0) in the rectangle,and its'' initial speed use   the given x and y direction speed to represent, were the xv and yv.(per second)\r\nNow, we want to know where is the ball after t seconds. We can guarantee  the ball will occurred a perfect elastic collision with the wall.', 'Multiple test cases.\r\nFirst line , input two integers n , m (10<=n,m<=500)\r\nSecond line , input two integers x0 , y0 represent the coordinate of the ball.(1<=x0<=n , 1<=y0<=m)\r\nThird line , there are two integers xv , yv represent the speed in x direction and the speed in y direction .(0<=xv<=n , 0<=yv<=m)\r\nIn the last line , there is a integer t stand for the time.\r\nAll of the input value are integer.', 'Two integers , represent the coordinate of the ball after t seconds.', 'D:\\oj\\data\\2333', 'D:\\oj\\data\\2333', '10 10\r\n1 1\r\n4 6\r\n3', '7 1', 'If the ball just crashed into the corner ,  it will go back in the \r\nreverse direction', 'bingshen', '', '2012-03-29 20:13:54', 1000, 65536, 'N', NULL, 9, 11, 82, 2, 18, 9, 9, 30000, 167, 'swust_20096046'),
(2334, 'Stupid I Moo', 'There is a stupid who named I Moo, he can''t even solve the "A+B"problem!\r\n	As usual, he brings some stupid problems to ask ''Cow''s for help. Stupid always has many problems, like Graph, Dynamic Programming, Search, Number Theory,and of course "A+B"···\r\n	As we all know there are so many ''Cow''s : Power, Dearway, Micheal, Bingshen, Liuyin···But every ''Cow'' has his own dominant field, so they will spend different time to solve a same peoblem.\r\n	The stupid I Moo wants to solve all the peoblems, but he won''t disturb any ''Cow'' more than once,so one ''Cow'' only solve one problem(We can guarantee the number of ''Cow''  non''t less than the problems''). \r\n	Now I Moo needs to determine to ask which ''Cow'' to solve which problem , and minimize the difference between the maximun and minimun of the time asked to solve a problem .\r\n	Can you help the stupid I Moo?', 'Each test case will begin with a line containing two integers N,M(1 <=N<=M<=100).\r\nThen N lines follow, each line contains M integers . The integer C[i][j] in row i (1<=i<=N), column j (1<=j<=M)  represents the time asked for the j-th ''Cow'' to solve the i-th problem. (0<=C[i][j]<=100).', 'For each test case, output an integer represents the answer.', 'D:\\oj\\data\\2334', 'D:\\oj\\data\\2334', '4 4\r\n1 1 1 1\r\n2 2 2 2\r\n3 3 3 3\r\n4 4 4 4', '3', '', 'I Moo', '', '2012-03-19 21:47:13', 1000, 65536, 'N', NULL, 2, 3, 67, 1, 50, 1, 1, 30000, 109, 'swust_20096046'),
(2335, 'The Crazy Queue', 'Why the queue is crazy, because the crazy Liuyin give the queue a crazy rule. The rule is as the follow: we can deem that there is a queue with n rows and m columns, such as this (anm is meams the nth row and the mth columns):\r\na11 a12 a13 … a1m\r\na21 a22 a23 … a2m\r\n…  …  …  … …\r\nan1 an2 an3 … anm\r\nNow, we want to chose n persons to compose a new queue. But, we can only chose one person from one row. What’s more, we must sure that the person who comes from the nth row must stand at the nth place in the new queue.\r\nFor example, the new queue {a12, a24, a33, … , ank} is OK!\r\nAfter we get a new queue, we find a new question. Because we hope the difference of height between the neighboring persons as small as possible, we define the queue’s value is the sum of all the difference of neighboring persons’ height.\r\nFor example, if there are four persons in the new queue and the height of them are a, b, c, d. Then val=|a-b|+|b-c|+|c-d|.\r\nNow, you should find a way to make the new queue with the smallest value.', 'There are multiple test cases. For each case, there are two positive integers n, m (1 <= n, m <= 1000) at the first line. The next n lines give the maze of original queue. All of them are positive integers and smaller then 10000. It means the height of every person.', 'For each case, you should output one positive integer. It’s the smallest value of the new queue.', 'D:\\oj\\data\\2335', 'D:\\oj\\data\\2335', '3 3\r\n2 3 1\r\n4 7 6\r\n7 9 2', '3', 'The persons’ heights in the new queue are 3, 4, and 2.', 'liuyin', '', '2012-04-07 16:56:02', 2000, 65536, 'N', NULL, 1, 3, 33, 2, 67, 2, 1, 30000, 124, 'swust_20096046'),
(2336, 'PRINTF', 'When you started learning programming language C, you might be troubled by the method "printf". After a long time, you would be suprising by the various usages. Now let''s go to review it.', 'There are multiple testcases.\r\nEach line of the testcases is a correct "printf" expression describing as "printf("/*form*/", a, b, c);" in one line.\r\na,b,c are decimal integers. And there is no ESCs between parentheses. We promise all the inputs are correct.', 'For each "printf", print the content that "printf" should print in one line.', 'D:\\oj\\data\\2336', 'D:\\oj\\data\\2336', 'printf("%*d%d", 1, 5, 3);\r\nprintf(  "%x%.2d%d", 11, 3, 2) ;', '53\r\nb032', '', '', '', '2012-03-19 22:20:11', 1000, 65536, 'N', NULL, 3, 4, 75, 1, 33, 2, 2, 30000, 111, 'swust_20096046'),
(2337, 'Points cakes', 'A mother has n different sizes of cake,she wants to give to his two children by a fair way(which may not completely average, but requiresminimum), \r\nyou can help she solve this problem?', 'there are many case of testdata,for each testdata,\r\nfirst line: an integer n(3<=n<=1000), means how many cakes does the mother has.\r\nsecond line: n integers, for each a[i](1<=a[i]<=50), a[i] means the size of ith cake.', 'for each teatdata, output two integers x, y(x<=y)\r\nx, y means how many cakes do the two children have.', 'D:\\oj\\data\\2337', 'D:\\oj\\data\\2337', '3\r\n1 2 3', '3 3', '', '', '', '2012-04-24 08:47:12', 1000, 65536, 'N', NULL, 18, 56, 32, 33, 72, 13, 13, 30000, 290, 'swust_20096046'),
(2338, 'a*b*c', 'In some applications, especially in cryptography, we often need to use more one hundred digits number multiply them to encrypt something.\r\n\r\nNow there are three big numbers less then one hundred digits a, b and c, please write a program to find out the multiplication of the three numbers.', 'three lines,\r\nfirst line, the first big integer a\r\nfirst line, the first big integer b\r\nfirst line, the first big integer c\r\n(1 <= a, b, c <= 10^100)', 'output the answer a*b*c', 'D:\\oj\\data\\2338', 'D:\\oj\\data\\2338', '2\r\n3\r\n4', '24', '', '', '', '2012-05-30 20:26:11', 1000, 65536, 'N', NULL, 17, 29, 59, 12, 46, 15, 14, 30000, 230, 'swust_20096046'),
(2339, 'StoneLand', 'Zayhero likes traveling very much. His current step is StoneLand. \r\nEverything in StoneLand is copied from the same stone, so Zayhero get confuse and cannot find \r\nhis way out. Finally, he found a stone gate which lead to the exit. However, the stone gate needs a \r\npassword to open it. After several attempts, Zayhero found that the password is n continuous \r\n''A''s (ie. AAA or AAAAAAAA, and etc.). \r\nThere is a special keyboard in front of the stone gate, which has several keys Zayhero can press to \r\nenter the password: \r\n1) Press ''A'', to input a single ''A''; \r\n2) Press ''C1'', to select all content Zayhero has input; \r\n3) Press ''C2'', to copy all selected content into memory; \r\n4) Press ''C3'', to append all copied content into the end of the input \r\nPlease help Zayhero to find out what is the minimum press to enter n continuous ''A''s.', 'The 1st line of input contains only 1 integer T (T <= 20000), indicate the number of test cases. \r\nEach test case contains only 1 integer n (n <= 10 ^ 6), indicate the password is n continuous ''A''s.', 'For each test case, print only 1 integer for each test case, indicate the minimum press Zayhero \r\ncan press to enter the password. Please refer to sample output for more details.', 'D:\\oj\\data\\2339', 'D:\\oj\\data\\2339', '3 \r\n5 \r\n11 \r\n12', 'Case 1: 5 \r\nCase 2: 9 \r\nCase 3: 8', 'To press 11 continuous ''A''s, Zayhero can: \r\n1) Press 5 continuous ''A''s; \r\n2) Press ''C1'', ''C2'', ''C3'', which copy and append 5 continuous ''A''s into the back of the origin \r\ncontent, thus 10 ''A''s are inputted; \r\n3) Press 1 more ''A''s, and there are 11 ''A''s inputted. \r\nZayhero needs 9 presses totally. \r\nTo press 12 continuous ''A''s, Zayhero can: \r\n1) Press 3 continuous ''A''s; \r\n2) Press ''C1'', ''C2'', ''C3'', which copy and append 3 continuous ''A''s into the back of the origin \r\ncontent, thus 6 ''A''s are inputted; \r\n3) Press ''C3'' again, append 3 more ''A''s to the input, thus there are 9 ''A''s; \r\n4) Press ''C3'' 1 more time, and there are 12 ''A''s. \r\nZayhero needs 8 presses totally.', 'bingshen', '', '2012-04-17 17:09:09', 1000, 65536, 'N', NULL, 2, 2, 100, 0, 0, 2, 2, 30000, 74, 'bingshen'),
(2340, 'TEST', '“天命玄鸟，降而生商”，距今约4000年的华夏土地上，暴君夏桀宠幸妖姬妺喜，导致天下民不聊生，商汤拜伊尹为相，于公元前1766年举兵灭夏，开启了将近600年的又一伟大而强盛的朝代：商朝。\r\n	当时，商汤从伊尹手里获得了一副华夏的珍贵地图。古代道路不通，所以行军打仗很讲究行军路线。有的路很好走，有些则荆棘丛生。\r\n	在商丘（商部落都城）城外有一个非常宽敞的大路，非常适合行军。但是这条道路并不能通往夏朝的都城斟鄩（zhēn xún）所以必须走一段普通的道路。\r\n如图所示：\r\n \r\n实线就是代表商丘外面的那条宽阔大道，其余地方虽然没有路，但是可以行军，只不过行军速度会受到影响。图中画了两种方案。一种是红色虚线标记的。不走大道，直接开大军直线冲到夏朝国都。还有一种方案是在大道上走一段路程（粉色线条）然后选择一个适当的折点，从这个折点冲向夏桀老巢。\r\n现在问题出现了，到底商汤的军队最少将花费多少时间才能到达斟鄩，杀夏桀，诛妺喜，立万世之功业。', '1', '', 'D:\\oj\\data\\2340', 'D:\\oj\\data\\2340', '', '', '', '', '', '2012-04-15 02:43:28', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 5, 'power721'),
(2341, 'LEAGUE OF LEGENDS', 'Bearboy最近迷上了一款竞技游戏《英雄联盟》，在这个游戏中，每个召唤师都可以召唤出一个英雄，和其他召唤师一起为统治召唤师峡谷而战。\r\n    在整个游戏中，有很多的英雄，每个英雄都有他的初始战斗力，初始防御，和该英雄的操作难度。刚开始的时候，联盟是没有英雄的，随着联盟的不断强大，不断有英雄加入这个联盟，这给联盟的管理带来了不小的麻烦，现在Bearboy想要请你来帮忙管理一下英雄联盟的英雄信息。', '本题有多个测试数据。\r\n对于每组测试数据，第一行是一个整数M，表示接下来有连续的M个操作(1<=M<=500000)\r\n对于每一次操作：\r\n首先是一个操作符C：\r\n当操作符为‘A’时，表示联盟新增了一个英雄，后面接着三个整数：F,D,O，F表示该英雄的战斗力；D表示该英雄的初始防御；O表示该英雄的操作难度 （100<=F<=200， 0<=D，O<=1000）\r\n当操作符为‘Q’时，后面接着四个整数，H1，H2表示战斗力区间，A1，A2表示防御区间(都是闭区间)，输出符合战斗力区间和防御区间要求的英雄中的操作难度最低值。 （100<=H1，H2<=200， 0<=A1，A2<=1000）如果没有英雄在这一范围则输出-1。', '对于每一次Q，输出满足要求的最小操作难度值', 'D:\\oj\\data\\2341', 'D:\\oj\\data\\2341', '8\r\nQ 163 139 900 766\r\nA 188 881 315\r\nQ 138 102 298 565\r\nA 195 701 203\r\nA 102 962 983\r\nA 135 547 470\r\nQ 175 180 150 804\r\nQ 179 125 435 888', '-1\r\n-1\r\n-1\r\n470', '', 'bearboy', '', '2012-05-02 22:04:55', 5000, 65536, 'N', NULL, 15, 44, 34, 19, 86, 5, 3, 30000, 164, 'swust_20096046'),
(2342, 'Equation', 'There is an equation:1/k=1/x+1/y，Now give you the positive integer number: k，Can you find all the x and y?（x>=y, they are all positive integer）', 'There are several test cases, each test case starts with a line containing one positive integers K(1<=k<=1000000) ;The input will end when k=0.', 'For each test case，The first line contains a positive integer which is the number of answer; then output all the answers as the sample output（according to y）.', 'D:\\oj\\data\\2342', 'D:\\oj\\data\\2342', '2\r\n12\r\n0', '2\r\n1/2 = 1/6 + 1/3\r\n1/2 = 1/4 + 1/4\r\n8\r\n1/12 = 1/156 + 1/13\r\n1/12 = 1/84 + 1/14\r\n1/12 = 1/60 + 1/15\r\n1/12 = 1/48 + 1/16\r\n1/12 = 1/36 + 1/18\r\n1/12 = 1/30 + 1/20\r\n1/12 = 1/28 + 1/21\r\n1/12 = 1/24 + 1/24', '如果数据量很大，使用__int64 定义，使用%I64d输入输出\r\n\r\n例：\r\n__int64 a;\r\nscanf("%I64d",&a);\r\nprintf("%I64d",a);\r\n不支持%lld', 'bearboy', '', '2012-05-04 19:29:15', 1000, 65536, 'N', NULL, 15, 29, 52, 13, 52, 12, 12, 30000, 177, 'swust_20096046'),
(2343, 'Function', 'There is a function f：f[n]=f[n-1]*f[n-1]-1(n>=2) and f[1]=2;\r\nNow，give you an integer number n;Can you calculate the value of f[n] ？However, f[n] may be very large，we just need the answer after f[n] mod m (f[n]%m).', 'There are several test cases, each test case starts with a line contains two positive integers n,m（1<=n<=10<sup>9</sup>,2<=m<=10000），we guarantee that all the answer will not be zero after mod m.', 'Output the value of f[n] mod m (f[n]%m) in a line for each case.', 'D:\\oj\\data\\2343', 'D:\\oj\\data\\2343', '4 1387\r\n5 19', '63\r\n16', '', 'bearboy', '', '2012-09-09 16:43:40', 1000, 65536, 'N', NULL, 14, 71, 20, 54, 79, 15, 14, 30000, 311, 'swust_20096046'),
(2344, '军衔', '穿越火线的军衔有：列兵，三等兵，二等兵，一等兵，下士…一直到元帅。\r\n    每一个军衔都必须要达到一定经验值才能够获得。现在假设有n个军衔，达到每个军衔所需要的经验值分别为a<sub>1</sub>,a<sub>2</sub>,a<sub>3</sub>…a<sub>n</sub>而且a<sub>1</sub>&lt;a<sub>2</sub>&lt;a<sub>3</sub>&lt;a<sub>4</sub>&lt;…&amp;lt;a<sub>n</sub>\r\n    CF里面每玩一局就会获得相应的经验值，假设某位玩家当前拥有经验值x，现在他玩了一局爆破任务，获得了y点经验。我们想知道他玩了这局爆破之后，军衔是什么。\r\n<img src=images/problem/2344.jpg />', '多组数据输入。\r\n第一行为n，代表CF中有n种军衔（n<20）\r\n第二行为n个数，代表每一个军衔所需要的经验值\r\n第三行有两个数，分别是x和y\r\n所有输入均为正整数，最大的那个数不超过10000', '输出该玩家最终的军衔。', 'D:\\oj\\data\\2344', 'D:\\oj\\data\\2344', '3\r\n10 20 30\r\n5 3\r\n\r\n3\r\n10 20 30\r\n5 10\r\n\r\n3\r\n10 20 30\r\n30 5\r\n\r\n3\r\n10 20 30\r\n5 5', '0\r\n1\r\n3\r\n1', '', 'bingshen', '', '2012-04-26 16:45:40', 1000, 65536, 'N', NULL, 10, 13, 77, 3, 23, 11, 10, 30000, 148, 'swust_20096046'),
(2345, 'Cross Fire', 'CF是一款非常流行的网络射击类游戏，在这个游戏中，有一张地图叫做沙漠—TD，由于这张图均衡性做的很好，所以是张非常受人喜爱的比赛地图。\r\n    这个图很多人用来3V3比赛（可以当成是百城联赛）。什么意思呢？一个队长，带领两名队员，与其他队伍（也是一个队长两个队员）展开火拼，但是有这样的可能，就是强退。\r\n    我们规定，每一个队伍，或者队长留下，或者另外两名队员同时留下。（否则队伍无法参赛），但是对于队伍的队员有可能有仇视的情况。即是说：如果A留下来打比赛，那么B就一定会强退，或者B留下来打比赛，A就一定强退。\r\n    这就给我们的百城联赛的裁判们产生了巨大的管理难度，现在我们需要一个程序，来判断是否有队伍会无法参赛。\r\n<img src=images/problem/2345.jpg />', '第一行两个正整数，N和M，N代表参赛队伍数量，M代表仇视对。\r\n接下来有N行，每行三个正整数，代表每一队队员编号，第一个队员就是队长\r\n然后接下来有M行，每行输入两个正整数：a,b代表两个相互仇视队员的编号\r\n每个队员只属于一个队，而且队员编号从0开始，而且n个队员一定会从0号编到n-1号，所以不要担心跳号的情况。\r\n数据范围：\r\n1<=N<=1000, 1<=M<=5000。', '如果没有队伍会取消参赛资格，输出yes，反之输出no', 'D:\\oj\\data\\2345', 'D:\\oj\\data\\2345', '1 2\r\n0 1 2\r\n0 1\r\n1 2\r\n\r\n2 4\r\n0 1 2\r\n3 4 5\r\n0 3\r\n0 4\r\n1 3\r\n1 4', 'yes\r\nno', '', 'bingshen', '', '2012-04-22 10:12:10', 1000, 65536, 'N', NULL, 4, 6, 67, 2, 40, 4, 3, 30000, 117, 'swust_20096046'),
(2346, 'Wisp''s Task Ⅰ', 'In war3, there is a race named Night Elf (NE). The famer of NE named wisp. Although the wisp can’t fights with enemies, it can hide itself around the tree and hard to be found. So, the wisp is always used as a scout.\r\n    As a good player of NE, you know how to use the least wisp to gain the largest horizon. We can assume that the map is a table with n rows and m column. The number of trees in one cell is very large, so you don’t need to think about how many wisps can we put into one cell. What’s more, we must put total x<sub>i</sub> wisp(s) on the ith row and total y<sub>j</sub> wisp(s) on the jth column.\r\n    Now, your test is to prove the feasibility of the way as the above.', 'The input consists of multiple test cases. Each test case is consists of three lines. The first line containing two positive integers n and m (1<=n,m<=1000). The second line have n non-negative integers x<sub>1</sub>,x<sub>2</sub>…x<sub>n</sub>. x<sub>i</sub> is the number of wisps you should put in the ith row. The third line have m non-negative integers y<sub>1</sub>,y<sub>2</sub>…y<sub>m</sub>. y<sub>j</sub> is the number of wisps you should put in the jth column.(All the integers is less then 1000.)', 'If you can find a way to arrangement the wisps following the input, you should output “Yes”, otherwise output “No” to instead of it.', 'D:\\oj\\data\\2346', 'D:\\oj\\data\\2346', '3 3\r\n1 2 3\r\n2 2 2\r\n3 3\r\n2 2 3\r\n2 4 2', 'Yes\r\nNo', '', 'liuyin', '', '2012-04-19 23:12:46', 1000, 65536, 'N', NULL, 10, 16, 63, 5, 33, 11, 10, 30000, 111, 'swust_20096046'),
(2347, 'Wisp''s Task Ⅱ', 'At the previous problem, we know the task of wisps. Now, wisps face a new question. The map is also a table with n rows and m column, but there are only a<sub>ij</sub> trees in the jth column of ith row. We provide that one tree can only hide one wisp, so we can only put 0 to a<sub>ij</sub> wisps into jth column of ith row. We also must put total x<sub>i</sub> wisp(s) on the ith row and total y<sub>j</sub> wisp(s) on the jth column. Could you tell me the feasibility after this condition?', 'The input consists of multiple test cases. Each test case begin with a line containing two positive integers n and m (1<=n, m<=500). The second line have n non-negative integers x<sub>1</sub>,x<sub>2</sub>…x<sub>n</sub>. x<sub>i</sub> is the number of wisps you should put in the ith row. The third line have m non-negative integers y<sub>1</sub>,y<sub>2</sub>…y<sub>m</sub>. y<sub>j</sub> is the number of wisps you should put in the jth column. After that, there is a table with n row and m column following. The number at the ith row and jth column means the maximum wisps you can put into this grid. (All the integers is less then 1000.)', 'If you can find a way to arrangement the wisps following the input, you should output “Yes” in one line, otherwise output “No” to instead of it.', 'D:\\oj\\data\\2347', 'D:\\oj\\data\\2347', '3 3\r\n1 2 3\r\n2 2 2\r\n1 1 1\r\n2 0 2\r\n1 2 3\r\n3 3\r\n1 2 3\r\n2 2 2\r\n0 0 3\r\n0 0 3\r\n0 0 3', 'Yes\r\nNo', '已经加强数据，比赛中某些AC代码是错误滴。。。', 'liuyin', '', '2012-05-06 17:28:46', 5000, 65536, 'N', NULL, 11, 32, 34, 21, 84, 7, 4, 30000, 212, 'swust_20096046'),
(2348, 'Wisp''s Task Ⅲ', 'This time, the wisps work at a small map which not bigger than 12*12. In each grid, there is only one tree at most. So, you can put only one wisp in one grid only if there has a tree. What''s more, any two wisps can not be neighbours. (If you put a wisp at (i,j), you can’t put another wisp at (i+1,j), (i-1,j), (i,j+1) or (i,j-1)). We will give you the total number of wisps should put in ith row, and you can put any wisp in jth column. How many ways can we arrange the wisps?', 'The input consists of multiple test cases. Each test case begin with a line contains two positive integers n and m (1<=n, m<=12). The second line have n non-negative integers x<sub>1</sub>,x<sub>2</sub>…x<sub>n</sub>. xi is the total number of wisps you should put in the ith row. After that, there is a table with n rows and m columns followed. The number at the ith row and jth column means there has a tree if it’s 1 or not has a tree if it’s 0.', 'For each case output the number of ways we can arrange the wisps in single line. The answer may be very large, so it should mod 1000000007.', 'D:\\oj\\data\\2348', 'D:\\oj\\data\\2348', '3 3\r\n1 2 1\r\n0 1 0\r\n1 0 1\r\n0 1 0\r\n5 5\r\n2 2 2 2 2\r\n1 1 1 1 1\r\n1 1 1 1 1\r\n1 1 1 1 1\r\n1 1 1 1 1\r\n1 1 1 1 1', '1\r\n116', '', 'liuyin', '', '2012-04-23 19:17:01', 1000, 65536, 'N', NULL, 3, 4, 75, 1, 25, 3, 3, 30000, 59, 'swust_20096046'),
(2349, 'Ancient Cipher', 'Ancient Roman empire had a strong government system with various departments, including a secret service department. Important documents were sent between provinces and the capital in encrypted form to prevent eavesdropping. The most popular ciphers in those times were so called substitution cipher and permutation cipher. \r\nSubstitution cipher changes all occurrences of each letter to some other letter. Substitutes for all letters must be different. For some letters substitute letter may coincide with the original letter. For example, applying substitution cipher that changes all letters from ''A'' to ''Y'' to the next ones in the alphabet, and changes ''Z'' to ''A'', to the message "VICTORIOUS" one gets the message "WJDUPSJPVT". \r\n    Permutation cipher applies some permutation to the letters of the message. For example, applying the permutation <2, 1, 5, 4, 3, 7, 6, 10, 9, 8> to the message "VICTORIOUS" one gets the message "IVOTCIRSUO". \r\n    It was quickly noticed that being applied separately, both substitution cipher and permutation cipher were rather weak. But when being combined, they were strong enough for those times. Thus, the most important messages were first encrypted using substitution cipher, and then the result was encrypted using permutation cipher. Encrypting the message "VICTORIOUS" with the combination of the ciphers described above one gets the message "JWPUDJSTVP". \r\n    Archeologists have recently found the message engraved on a stone plate. At the first glance it seemed completely meaningless, so it was suggested that the message was encrypted with some substitution and permutation ciphers. They have conjectured the possible text of the original message that was encrypted, and now they want to check their conjecture. They need a computer program to do it, so you have to write one.', 'Input contains two lines. The first line contains the message engraved on the plate. Before encrypting, all spaces and punctuation marks were removed, so the encrypted message contains only capital letters of the English alphabet. The second line contains the original message that is conjectured to be encrypted in the message on the first line. It also contains only capital letters of the English alphabet. \r\nThe lengths of both lines of the input are equal and do not exceed 100.', 'Output "YES" if the message on the first line of the input file could be the result of encrypting the message on the second line, or "NO" in the other case.', 'D:\\oj\\data\\2349', 'D:\\oj\\data\\2349', 'JWPUDJSTVP\r\nVICTORIOUS', 'YES', '', 'liuyin', '', '2012-04-18 20:00:01', 1000, 65536, 'N', NULL, 21, 38, 55, 10, 59, 8, 7, 30000, 115, 'swust_20096046'),
(2350, '天命玄鸟 降而生商', '<img src=images/problem/2349-1.jpg />', '<img src=images/problem/2349-2.jpg />', '最短的行军时间。精确到三位小数。', 'D:\\oj\\data\\2350', 'D:\\oj\\data\\2350', '1 1\r\n2 2\r\n3 3\r\n2 1\r\n\r\n1 0\r\n1 4\r\n2 2\r\n4 1\r\n\r\n1 0\r\n3 0\r\n4 1\r\n2 1', '2.121\r\n1.468\r\n2.414', '', 'bingshen', '', '2012-04-24 21:17:03', 1000, 65536, 'N', NULL, 3, 5, 60, 2, 40, 4, 3, 30000, 108, 'swust_20096046'),
(2351, '题目测试', '', '', '', 'D:\\oj\\data\\2351', 'D:\\oj\\data\\2351', '', '', '', '', '', '2012-04-20 21:40:25', 10000, 65536, 'N', NULL, 41, 42, 98, 0, 0, 8, 8, 30000, 72, 'swust20095862'),
(2352, 'Queer Game', 'Caspar is queer boy. One day, his queer girlfriend Rapsac queerly asks him to play a queer game with her. This game called “queer game”. Suppose that there are N queer stones. Caspar and Rapsac pick up some (at least 1 while at most K) of them successively. And if there is no stone in someone’s turn, he/she will lose.\r\n	Additionally, there are some queer rules would be added into this game. First of all, Caspar would always be the first one to pick up stones. Secondly, if there are M stones in Rapsac’s turn and M is a prime number, Rapsac could pick up to K+1 stones up in this turn.\r\nThe question is, assuming that Caspar and Rapsac are smart enough, Caspar would win or not?', 'THERE ARE MULTIPLE TESTCASES. \r\nIn each testcase, there are two positive integers N and K in one line. (1<=N<=1000)', 'For every testcase, you should print the final outcome of Caspar (WIN or LOSE) in one line.', 'D:\\oj\\data\\2352', 'D:\\oj\\data\\2352', '5 1\r\n8 2\r\n6 3', 'LOSE\r\nLOSE\r\nWIN', '', '', '', '2012-04-22 19:16:18', 1000, 65536, 'N', NULL, 3, 4, 75, 0, 0, 2, 2, 30000, 74, 'swust_20096046'),
(2353, '奇怪的电梯', '有一个奇怪的电梯，它可以停在任何一层楼，并且在每一层楼上有一个数字Xi 。\r\n这个电梯只有两个按钮：UP 和 DOWN。\r\n当你在第 i 层楼的时候，如果你按 UP ，那么你将上升 Xi 层楼（即是说你将到达第 i+Xi 层楼），\r\n如果你按 DOWN，那么你将下降 Xi 层楼（即是说你将到达第 i-Xi 层楼）。\r\n当然，你最多到达第 N 层楼，至少到达第 1 层楼。\r\n例如，有一个5层楼的建筑，并且X1=3，X2=3, X3=1, X4=2, X5=5。\r\n假如最开始你在第 1 层楼，那么此时如果你按 UP 的话，你将到达第4层楼（X1=3，1+3==4），\r\n但是此时如果你按 DOWN 的话，则电梯不能操作，因为你不能到达 -2 层楼（X1=3，1-3 == -2）。\r\n现在的任务是：假如你在第 A 层楼，你想去第 B 层楼，那么你至少需要按几次按钮（UP 或 DOWN）？？', '多组输入\r\n第一行输入三个数N,A,B （2 <= N,A,B <= 1000）\r\n当 N==0时，输入结束。\r\n第二行输入 N 个非负整数（即是题目描述中的Xi）。', '若能从A 到达B,则输出最少的按键数，否则输出 -1', 'D:\\oj\\data\\2353', 'D:\\oj\\data\\2353', '5 1 5\r\n3 3 1 2 5\r\n2 1 2\r\n55   6666\r\n0', '3\r\n-1', '', 'cyh', '', '2012-08-06 15:31:43', 1000, 65536, 'N', NULL, 25, 109, 23, 73, 78, 26, 21, 30000, 515, 'swust_20096046'),
(2354, 'Connect city', 'At the year of 20?? ,  since  some  strange  reasons,  most  of  the  cities  disappear.  \r\nThough  some  survived  cities  are  still  connected  with  others,  but  most  of  them  become  disconnected.  \r\nThe  government  wants  to  build  some  roads  to  connect  all  of  these  cities  again,\r\n but  they  don’t  want  to  take  too  much  money.', 'There  are many test cases .\r\nEach  test  case  starts  with  three  integers: N, M and K.\r\nN (2 <= N <= 1000) stands for the number of survived cities,  the cities are signed from 1 to N.\r\nM (0 <= m <= 100000) stands for the number of roads you can choose to connect the cities,\r\nK (0 <= K < 10) stands for the number of still connected cities.\r\nThen follow M lines, each contains three integers A, B and C (0 <= C < 1000), means it takes  C  to connect A and B.\r\nThen follow K lines, each line starts with an integer T (1 <= T <= n) stands for the number of this connected cities. \r\nThen T integers follow stands for the id of these cities.', 'For each case, output the least money you need to take, if it’s impossible, just output  -1.', 'D:\\oj\\data\\2354', 'D:\\oj\\data\\2354', '6 4 3\r\n1 4 2\r\n2 6 1\r\n2 3 5\r\n3 4 33\r\n2 1 2\r\n2 1 3\r\n6 4 5 6 4 5 6\r\n\r\n2 3 2\r\n1 2 2\r\n1 2 22\r\n1 2 222\r\n2 1 2\r\n2 2 1\r\n\r\n100   3  1\r\n100 100 100\r\n1 2 254\r\n99 98 524\r\n5  1 2 55 88 99', '1\r\n0\r\n-1', '', 'cyh', '', '2012-05-02 16:00:28', 4000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 0, 'swust_20096046'),
(2355, 'Connect city', 'At the year of 20?? ,  since  some  strange  reasons,  most  of  the  cities  disappear.  \r\nThough  some  survived  cities  are  still  connected  with  others,  but  most  of  them  become  disconnected.  \r\nThe  government  wants  to  build  some  roads  to  connect  all  of  these  cities  again,\r\n but  they  don’t  want  to  take  too  much  money.', 'There  are many test cases .\r\nEach  test  case  starts  with  three  integers: N, M and K.\r\nN (2 <= N <= 1000) stands for the number of survived cities,  the cities are signed from 1 to N.\r\nM (0 <= m <= 100000) stands for the number of roads you can choose to connect the cities,\r\nK (0 <= K < 10) stands for the number of still connected cities.\r\nThen follow M lines, each contains three integers A, B and C (0 <= C < 1000), means it takes  C  to connect A and B.\r\nThen follow K lines, each line starts with an integer T (1 <= T <= n) stands for the number of this connected cities. \r\nThen T integers follow stands for the id of these cities.', 'For each case, output the least money you need to take, if it’s impossible, just output  -1.', 'D:\\oj\\data\\2355', 'D:\\oj\\data\\2355', '6 4 3\r\n1 4 2\r\n2 6 1\r\n2 3 5\r\n3 4 33\r\n2 1 2\r\n2 1 3\r\n6 4 5 6 4 5 6\r\n\r\n2 3 2\r\n1 2 2\r\n1 2 22\r\n1 2 222\r\n2 1 2\r\n2 2 1\r\n\r\n100   3  1\r\n100 100 100\r\n1 2 254\r\n99 98 524\r\n5  1 2 55 88 99', '1\r\n0\r\n-1', '', 'cyh', '', '2012-05-13 10:36:57', 3000, 65536, 'N', NULL, 12, 28, 43, 13, 52, 13, 12, 20000, 394, 'swust_20096046'),
(2356, 'A big neat Christmas tree', 'As everyone knows , December  25th in every year is Christmas .  \r\nAnd the person SBT ,one of my best friends,loves Christmas so much  that he will  prepare a big neat Christmas tree every year on that day .  \r\nThe Christmas tree can be represented as a collection of  nodes and  edges. \r\nThe nodes are numbered 1 through N. \r\nThe root is always numbered 1. \r\nEvery node in the tree has its weight. \r\nAlso the shape of every  edge between two nodes is different, so the unit price of each edge is different. \r\nThe  price of an edge is equal to  : (sum of weights of all descendant nodes) × (unit price of this edge).\r\nNow , SBT wants to minimize the total  cost of the whole tree among all possible choices. \r\nAlso he wants to use all nodes because he wants a large Christmas tree. \r\nSo he decided to ask you for helping solve this task by find the minimum cost.', 'There are many test cases.\r\nfor each test case :\r\nTwo numbers N,M  (1 <= N <= 1000, 0 <= M <= 100000) are given in the first line of each test case. \r\nOn the next line, N  positive integers  Wi  (1 <= Wi <= 100000 )indicating the weights of N nodes are given in one line. \r\nOn the following  M  lines, each line contain three positive integers  a, b, c  indicating the edge which is able to connect two nodes  a  and  b, and its  unit  price is  c. (1 <= a,b <= N, 1 <= c <= 100000)', 'For each test case, output an integer indicating the minimum possible cost for the big Christmas tree in one line. \r\nIf there is no way to build a Christmas tree,  just print  “No Answer”  in one line.', 'D:\\oj\\data\\2356', 'D:\\oj\\data\\2356', '2 1\r\n1 1\r\n1 2 15\r\n\r\n7 9\r\n200 10 20 30 40 50 60\r\n1 2 1\r\n2 3 3\r\n2 4 2\r\n3 5 4\r\n3 7 2\r\n3 6 3\r\n1 5 9\r\n1 1  1111\r\n5 1  5858', '15\r\n1210', '如果题目读不懂的话，请仔细推敲样例。', 'cyh', '', '2012-05-13 21:39:41', 4000, 65536, 'N', NULL, 28, 86, 33, 52, 80, 15, 13, 30000, 568, 'swust_20096046'),
(2357, '路痴cyh', '虽然 cyh 是个路痴（就是在学校待了N年，但还是会在校园里迷路，汗~),但是 cyh 仍然很喜欢旅行，因为在旅途中会遇见很多人（白马王子，^0^）、很多事，还能丰富自己的阅历，还可以看美丽的风景……\r\ncyh 想去很多地方，她想要去东京铁塔看夜景，去威尼斯看电影，去阳明山上看海芋，去纽约纯粹看雪景，去巴黎喝咖啡写信，去北京探望孟姜女……\r\n眼看暑假就快到了，这么一大段时间，可不能浪费啊，一定要给自己好好的放个假，可是也不能荒废了实验室的暑假集训啊，所以 cyh 决定要在最短的时间去一个自己想去的地方！\r\n因为 cyh 的家在一个小镇上，没有火车经过，所以她只能去邻近的城市坐火车（好可怜啊~）。', '输入数据有多组，每组的第一行是三个整数 T，S和D，(0 <= T <= 100000 , 1 <= S,D <= 10)\r\n表示有T条路、和 cyh 家相邻的城市的有S个、cyh想去的地方有D个\r\n接着有T行，每行有三个整数 a，b，time, 表示a,b城市之间的车程是time小时；( 1 =< a,b <= 1000;  a,b 之间可能有多条路)\r\n接着的第 T+1 行有 S 个数，表示和 cyh 家相连的城市；\r\n接着的第 T+2 行有 D 个数，表示 cyh 想去地方。\r\n提示：至少有两个城市', '输出cyh能去某个喜欢的城市的最短时间。\r\n如果cyh连一个城市也不能去，输出 "bad luck"', 'D:\\oj\\data\\2357', 'D:\\oj\\data\\2357', '6 2 3\r\n1 3 5\r\n1 4 7\r\n2 8 12\r\n3 8 4\r\n4 9 12\r\n9 10 2\r\n1 2\r\n8 9 10', '9', '', 'cyh', '', '2012-05-13 17:25:30', 3000, 65536, 'N', NULL, 43, 191, 23, 120, 85, 27, 22, 30000, 861, 'swust_20096046'),
(2358, '地震后重建', '2008年5月12日的汶川地震给绵阳带来重大的损失，在全国人名的努力下，经过近三年的灾后重建。灾区的生活终于又恢复了平静，美丽的汶川有出现在了世人的面前，但是随着经济的恢复，绵阳的交通出现了很大的问题，特别是灾区的交通。以前留下的一些旧的公路和现在新修的一些公路错杂交错。让人们的出行很不方面。作为绵阳道路规划的负责人，Bearboy,想要找西科大的你来帮他解决这个交通问题：在整个交通网络中，去掉一些不必要的公路，以节省开支，同时保证交通的畅通，也就是，在去掉一些公路的同时，任然能够保证任意两个地点之间能够正常的交通，而且使留下来的公路的总长度最大（虽然这样会使开支大一点，但总归还是有好处的！！所以，，）。', '输入包括多组测试数据，输入到结束符时结束。\r\n每组测试数据，第一行为两个整数N,M。N表示地点个数（2 <= N <= 1000），M表示这个N个地点之间的公路条数\r\n（M <= N*(N-1)/2 ）。\r\n接下来是 M 行，每行有三个整数St，En，Len。表示地点St和地点En之间的公路长度是Len。\r\n（可以认为在去掉公路之前所有的点都是连通的）\r\n输入数据合法。', '对于每组测试数据，输出在去掉一些公路之后剩下的交通的公路总长度。', 'D:\\oj\\data\\2358', 'D:\\oj\\data\\2358', '7 12\r\n1 2 8\r\n1 3 5\r\n2 3 10\r\n2 4 2\r\n3 4 3\r\n2 5 18\r\n3 6 16\r\n4 5 12\r\n4 6 30\r\n4 7 14\r\n5 7 4\r\n7 6 26', '110', '', 'cyh', '', '2012-05-13 08:56:39', 2000, 65536, 'N', NULL, 26, 46, 57, 15, 42, 21, 21, 10000, 411, 'swust_20096046'),
(2359, '', '“天命玄鸟，降而生商”，距今约4000年的华夏土地上，暴君夏桀宠幸妖姬妺喜，导致天下民不聊生，商汤拜伊尹为相，于公元前1766年举兵灭夏，开启了将近600年的又一伟大而强盛的朝代：商朝。\r\n	当时，商汤从伊尹手里获得了一副华夏的珍贵地图。古代道路不通，所以行军打仗很讲究行军路线。有的路很好走，有些则荆棘丛生。\r\n	在商丘（商部落都城）城外有一个非常宽敞的大路，非常适合行军。但是这条道路并不能通往夏朝的都城斟鄩（zhēn xún）所以必须走一段普通的道路。\r\n\r\n<img src=images/2392.jpg />', '', '', 'D:\\oj\\data\\2359', 'D:\\oj\\data\\2359', '', '', '', '', '', '2012-05-07 08:30:21', 1000, 65536, 'Y', NULL, 0, 0, 0, 0, 0, 0, 0, 30000, 7, 'xswust20105320'),
(2360, 'Problem A', 'Now an emergent task for you is to open a password lock. The password is consisted of four digits. Each digit is numbered from 1 to 9. \r\nEach time, you can add or minus 1 to any digit. When add 1 to ''9'', the digit will change to be ''1'' and when minus 1 to ''1'', the digit will change to be ''9''. You can also exchange the digit with its neighbor. Each action will take one step.\r\n\r\nNow your task is to use minimal steps to open the lock.\r\n\r\nNote: The leftmost digit is not the neighbor of the rightmost digit.', 'The input file begins with an integer T, indicating the number of test cases. \r\n\r\nEach test case begins with a four digit N, indicating the initial state of the password lock. Then followed a line with anotther four dight M, indicating the password which can open the lock.', 'For each test case, print the minimal steps in one line.', 'D:\\oj\\data\\2360', 'D:\\oj\\data\\2360', '2\r\n1234\r\n2144\r\n\r\n1111\r\n9999', '2\r\n4', '', '', '', '2012-07-14 00:12:24', 1000, 65536, 'N', NULL, 40, 127, 31, 72, 84, 19, 14, 30000, 805, 'xswust20105320'),
(2361, 'Angle', 'Angel was caught by the MOLIGPY! He was put in prison by Moligpy. The prison is described as a N * M (N, M <= 200) matrix. There are WALLs, ROADs, and GUARDs in the prison.\r\n\r\nAngel''s friends want to save Angel. Their task is: approach Angel. We assume that "approach Angel" is to get to the position where Angel stays. When there''s a guard in the grid, we must kill him (or her?) to move into the grid. We assume that we moving up, down, right, left takes us 1 unit time, and killing a guard takes 1 unit time, too. And we are strong enough to kill all the guards.\r\n\r\nYou have to calculate the minimal time to approach Angel. (We can move only UP, DOWN, LEFT and RIGHT, to the neighbor grid within bound, of course.)', 'First line contains two integers stand for N and M.\r\n\r\nThen N lines follows, every line has M characters. "." stands for road, "a" stands for Angel, "x" stands for a guard, and "r" stands for each of Angel''s friend. \r\n\r\nProcess to the end of the file.', 'For each test case, your program should output a single integer, standing for the minimal time needed. If such a number does no exist, you should output a line containing "Poor ANGEL has to stay in the prison all his life."', 'D:\\oj\\data\\2361', 'D:\\oj\\data\\2361', '7 8\r\n#.#####.\r\n#.a#..r.\r\n#..#x...\r\n..#..#.#\r\n#...##..\r\n.#......\r\n........', '13', '', '', '', '2012-06-06 21:38:28', 1000, 65536, 'N', NULL, 19, 38, 50, 18, 51, 18, 17, 30000, 416, 'xswust20105320'),
(2362, 'The Employees', 'Peter is a senior manager of Agile Change Management (ACM) Inc., where each employee is a member of one or more task groups. Since ACM is agile, task groups are often reorganized and their members frequently change, so membership management is his constant headache.\r\nPeter updates the membership information whenever any changes occur: for instance, the following line written by him means that Carol and Alice are the members of the Design Group.\r\ndesign:carol,alice.\r\nThe name preceding the colon is the group name and the names following it specify its members.\r\nA smaller task group may be included in a larger one. So, a group name can appear as a member of another group, for instance, as follows.\r\ndevelopment:alice,bob,design,eve.\r\nSimply unfolding the design above gives the following membership specification, which is equivalent to the original.\r\ndevelopment:alice,bob,carol,alice,eve.\r\nIn this case, however, alice occurs twice. After removing one of the duplicates, we have the following more concise specification.\r\ndevelopment:alice,bob,carol,eve.\r\nYour mission in this problem is to write a program that, given group specifications, identifies group members.\r\nNote that Peter’s specifications can include deeply nested groups. In the following, for instance, the group one contains a single member dave.\r\none:another.\r\nanother:yetanother.\r\nyetanother:dave.', 'The input is a sequence of datasets, each being in the following format.\r\nn\r\ngroup1:member 1,1, . . . ,member 1,m1.\r\n...\r\ngroupi:member i,1, . . . ,member i,mi.\r\n...\r\ngroupn:member n,1, . . . ,member n,mn.\r\nThe first line contains n, which represents the number of groups and is a positive integer no more than 100. Each of the following n lines contains the membership information of a group: groupi (1 ≤ i ≤ n) is the name of the i-th task group and is followed by a colon (:) and then the list of its mi member s that are delimited by a comma (,) and terminated by a period (.).\r\nThose group names are mutually different. Each mi (1 ≤ i ≤ n) is between 1 and 10, inclusive. A member is another group name if it is one of group1, group2, . . . , or groupn. Otherwise it is an employee name.\r\nThere are no circular (or recursive) definitions of group(s). You may assume that mi member names of a group are mutually different.\r\nEach group or employee name is a non-empty character string of length between 1 and 15, inclusive, and consists of lowercase letters.\r\nThe end of the input is indicated by a line containing a zero.', 'For each dataset, output the number of employees included in the first group of the dataset,\r\nthat is group1, in a line. No extra characters should occur in the output.', 'D:\\oj\\data\\2362', 'D:\\oj\\data\\2362', '2\r\ndevelopment:alice,bob,design,eve.\r\ndesign:carol,alice.\r\n3\r\none:another.\r\nanother:yetanother.\r\nyetanother:dave.\r\n3\r\nfriends:alice,bob,bestfriends,carol,fran,badcompany.\r\nbestfriends:eve,alice.\r\nbadcompany:dave,carol.\r\n5\r\na:b,c,d,e.\r\nb:c,d,e,f.\r\nc:d,e,f,g.\r\nd:e,f,g,h.\r\ne:f,g,h,i.\r\n4\r\naa:bb.\r\ncc:dd,ee.\r\nff:gg.\r\nbb:cc.\r\n0', '4\r\n1\r\n6\r\n4\r\n2', '', '', '', '2012-05-17 23:48:29', 1000, 65536, 'N', NULL, 7, 15, 47, 1, 17, 5, 5, 30000, 285, 'xswust20105320');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(2363, 'YES OR NO', 'Clickomania is a puzzle in which one starts with a rectangular grid of cells of different colours. In each step, a player selects ("clicks") a cell. All connected cells of the same colour as the selected cell (including itself) are removed if the selected cell is connected to at least one other cell of the same colour. The resulting "hole" is filled in by adjacent cells based on some rule, and the object of the game is to remove all cells in the grid. In this problem, we are interested in the one-dimensional version of the problem. The starting point of the puzzle is a string of colours (each represented by an uppercase letter).\r\nAt any point, one may select (click) a letter provided that the same letter occurs before or after the one selected. The substring of the same letter containing the selected letter is removed, and the string is shortened to remove the hole created. To solve the puzzle, the player has to remove all letters and obtain the empty string. If the player obtains a non-empty string in which no letter can be selected, then the player loses. For example, if one starts with the string "ABBAABBAAB", selecting the first "B" gives "AAABBAAB". Next, selecting the last "A" gives "AAABBB". Selecting an "A" followed by a "B" gives the empty string. On the other hand, if one selects the third "B" first, the string "ABBAAAAB" is obtained. One may verify that regardless of the next selections, we obtain either the string "A" or the string "B" in which no letter can be selected. Thus, one must be careful in the sequence of selections chosen in order to solve a puzzle. Furthermore, there are some puzzles that cannot be solved regardless of the choice of selections. For example, "ABBAAAAB" is not a solvable puzzle. Some facts are known about solvable puzzles: The empty string is solvable. If x and y are solvable puzzles, so are xy, AxA, and AxAyA for any uppercase letter A. All other puzzles not covered by the rules above are unsolvable.\r\nGiven a puzzle, your task is to determine whether it can be solved or not.', 'Each case of input is specified by a single line. Each line contains a string of uppercase letters. Each string has at least one but no more than 150 characters. The input is terminated by the end of file.', 'For each input case, print solvable on a single line if there is a sequence of selections that solves the puzzle. Otherwise, print unsolvable on a line.', 'D:\\oj\\data\\2363', 'D:\\oj\\data\\2363', 'ABBAABBAAB\r\nABBAAAAB', 'solvable\r\nunsolvable', '', '', '', '2012-05-09 11:36:51', 1000, 65536, 'N', NULL, 2, 4, 50, 1, 33, 3, 2, 30000, 188, 'xswust20105320'),
(2364, 'TV-network', 'A TV-network plans to broadcast an important football match. Their network of transmitters and users can be represented as a tree. The root of the tree is a transmitter that emits the football match, the leaves of the tree are the potential users and other vertices in the tree are relays (transmitters). \r\nThe price of transmission of a signal from one transmitter to another or to the user is given. A price of the entire broadcast is the sum of prices of all individual signal transmissions. \r\nEvery user is ready to pay a certain amount of money to watch the match and the TV-network then decides whether or not to provide the user with the signal. \r\nWrite a program that will find the maximal number of users able to watch the match so that the TV-network''s doesn''t lose money from broadcasting the match.', 'The input will consist of sevral cases.The first line of the input file contains two integers N and M, 2 <= N <= 3000, 1 <= M <= N-1, the number of vertices in the tree and the number of potential users. \r\nThe root of the tree is marked with the number 1, while other transmitters are numbered 2 to N-M and potential users are numbered N-M+1 to N. \r\nThe following N-M lines contain data about the transmitters in the following form: \r\nK A1 C1 A2 C2 ... AK CK \r\nMeans that a transmitter transmits the signal to K transmitters or users, every one of them described by the pair of numbers A and C, the transmitter or user''s number and the cost of transmitting the signal to them. \r\nThe last line contains the data about users, containing M integers representing respectively the price every one of them is willing to pay to watch the match.', 'Each line of the output file should contain the maximal number of users described in the above text.', 'D:\\oj\\data\\2364', 'D:\\oj\\data\\2364', '9 6\r\n3 2 2 3 2 9 3\r\n2 4 2 5 2\r\n3 6 2 7 2 8 2\r\n4 3 3 3 1 1', '5', '', '', '', '2012-05-09 11:35:53', 1000, 65536, 'N', NULL, 2, 3, 67, 1, 33, 3, 2, 30000, 284, 'xswust20105320'),
(2365, '热恋中的小鸟', '两只小鸟经过多年的网恋终于决定见面了。\r\n两只小鸟在同一纬度上，它们约定各自往西飞，直到碰面。但是它们都忘记了问对方的具体位置，也没有约定见面的具体位置，只有当两只小鸟同时飞到同一位置时才能碰面，否则是永远见不到的，现在请你来判断小鸟们是否能顺利见面呢？能的话是在什么时候呢？\r\n我们把这两只小鸟分别叫做小鸟A和小鸟B，并且规定纬度线上东经0度处为原点，由东往西为正方向，单位长度1米，这样我们就得到了一条首尾相接的数轴。设小鸟A的出发点坐标是x，小鸟B的出发点坐标是y。小鸟A一次能飞m米，小鸟B一次能飞n米，两只小鸟飞一次所花费的时间相同。纬度线总长L米。现在要你求出它们飞了几次以后才会碰面。', '多组输入\r\n输入只包括一行5个整数x，y，m，n，L，其中x≠y < 2000000000，0 < m、n < 2000000000，0 < L < 2100000000。', '输出碰面所需飞的次数，如果永远不可能碰面则输出一行&quot;Impossible"', 'D:\\oj\\data\\2365', 'D:\\oj\\data\\2365', '1 2 3 4 5', '4', '', '', '', '2012-05-19 11:06:44', 1000, 10000, 'N', NULL, 15, 40, 38, 21, 64, 12, 12, 30000, 389, 'xswust20105320'),
(2366, 'Easymath', '计算a^b^c %1000000007', '输入三个整数:a,b,c<=1000000000.', '每行输出一个数', 'D:\\oj\\data\\2366', 'D:\\oj\\data\\2366', '2 2 2\r\n2 3 2', '16\r\n512', '', '', '', '2012-05-18 16:59:12', 1000, 65536, 'N', NULL, 22, 61, 36, 34, 64, 21, 19, 30000, 536, 'xswust20105320'),
(2367, 'Fibonacci Bag', 'We have N items, each with a specified weight and cost, and a bag that can carry a specified maximum weight. We want to place a subset of these items into the bag such that the total cost is maximized.\r\nIn this problem, the weights of the items are all Fibonacci numbers.\r\nThe first two Fibonacci numbers are 1 and 2. Each successive number is obtained by adding together the two previous numbers. Thus, the first Fibonacci numbers are 1, 2, 3, 5, 8, 13...', 'The first line contains an integer T indicating the number of test cases.(1<=T<=20)\r\nThe first line of each test case contains two integers N and W (1<=N<=50), the number of items and the maximum weight that the bag can carry. Each of the following N lines contains two integers wi and ci( 1<=wi,ci <=10^16, wi will be a Fibonacci number), indicating the weight and cost of each item.', 'You should output one line for each test case, containing the case number followed by the maximum total cost of the subset of items that can fit into the bag.', 'D:\\oj\\data\\2367', 'D:\\oj\\data\\2367', '2\r\n3 15\r\n5 18\r\n2 10\r\n13 24\r\n1 2\r\n3 10', 'Case 1: 34\r\nCase 2: 0', '', '', '', '2012-06-11 22:56:09', 1000, 65536, 'N', NULL, 7, 22, 32, 13, 81, 5, 3, 30000, 312, 'Swust20105502'),
(2368, 'Prime Game', 'The branch of mathematics called number theory is about properties of numbers. One of the areas that has captured the interest of number theoreticians for thousands of years is the question of primality. A prime number is a number that is has no proper factors (it is only evenly divisible by 1 and itself). The first prime numbers are 2,3,5,7 but they quickly become less frequent. One of the interesting questions is how dense they are in various ranges. Adjacent primes are two numbers that are both primes, but there are no other prime numbers between the adjacent primes. For example, 2,3 are the only adjacent primes that are also adjacent numbers. \r\nYour program is given 2 numbers: L and U (1<=L< U<=2,147,483,647), and you are to find the two adjacent primes C1 and C2 (L<=C1< C2<=U) that are closest (i.e. C2-C1 is the minimum). If there are other pairs that are the same distance apart, use the first pair. You are also to find the two adjacent primes D1 and D2 (L<=D1< D2<=U) where D1 and D2 are as distant from each other as possible (again choosing the first pair if there is a tie).', 'Each line of input will contain two positive integers, L and U, with L < U. The difference between L and U will not exceed 1,000,000.', 'For each L and U, the output will either be the statement that there are no adjacent primes (because there are less than two primes between the two given numbers) or a line giving the two pairs of adjacent primes.', 'D:\\oj\\data\\2368', 'D:\\oj\\data\\2368', '2 17\r\n14 17', '2,3 are closest, 7,11 are most distant.\r\nThere are no adjacent primes.', '仔细读题。', '', '', '2012-06-04 20:23:51', 3000, 65536, 'N', NULL, 17, 89, 19, 35, 83, 8, 7, 30000, 480, 'Swust20105502'),
(2369, 'Problem 15', 'N cities named with numbers 1 ... N are connected with one-way roads. Each road has two parameters associated with it : the road length and the toll that needs to be paid for the road (expressed in the number of coins). \r\nBob and Alice used to live in the city 1. After noticing that Alice was cheating in the card game they liked to play, Bob broke up with her and decided to move away - to the city N. He wants to get there as quickly as possible, but he is short on cash. \r\n\r\nWe want to help Bob to find the shortest path from the city 1 to the city N that he can afford with the amount of money he has.', 'The first line of the input contains the integer K, 0 <= K <= 10000, maximum number of coins that Bob can spend on his way. \r\nThe second line contains the integer N, 2 <= N <= 100, the total number of cities. \r\n\r\nThe third line contains the integer R, 1 <= R <= 10000, the total number of roads. \r\n\r\nEach of the following R lines describes one road by specifying integers S, D, L and T separated by single blank characters : \r\n\r\nS is the source city, 1 <= S <= N \r\n\r\nD is the destination city, 1 <= D <= N \r\n\r\nL is the road length, 1 <= L <= 100 \r\n\r\nT is the toll (expressed in the number of coins), 0 <= T <=100\r\n\r\nNotice that different roads may have the same source and destination cities.', 'The first and the only line of the output should contain the total length of the shortest path from the city 1 to the city N whose total toll is less than or equal K coins. \r\nIf such path does not exist, only number -1 should be written to the output.', 'D:\\oj\\data\\2369', 'D:\\oj\\data\\2369', '5\r\n6\r\n7\r\n1 2 2 3\r\n2 4 3 3\r\n3 4 2 4\r\n1 3 4 1\r\n4 6 2 1\r\n3 5 2 0\r\n5 4 3 2', '11', '', '', '', '2012-05-21 13:12:33', 1000, 65536, 'N', NULL, 10, 25, 40, 14, 64, 10, 8, 30000, 352, 'Swust20105502'),
(2370, '最长上升子序列', '设有一个序列（a1,a2,..an）,如果序列(ai1, ai2, ..., aik), 满足1< = i1 < i2< ...< ik< =n且ai1 < ai2< .. .< aik,则称(ai1, ai2, ..., ak)为(a1,a2,……an)的一上升子序列。 例如序列1,6,2,5,4,7的一个最长上升子序列是1,2,5,7（还有其他的，这里略去），长度是4.给一个序列，求它的最长上升子序列的长度。', '题目有多组测试数据，每组第一行为一个整数n,代表序列的长度，第二行为序列的n个数。（1<=n<=100000）。', '每组输出占一行，包含序列的最长上升子序列的长度。', 'D:\\oj\\data\\2370', 'D:\\oj\\data\\2370', '7\r\n1 7 3 5 9 4 8', '4', '', '', '', '2012-06-05 23:26:30', 1000, 65536, 'N', NULL, 12, 12, 100, 0, 0, 4, 4, 30000, 79, '20094012'),
(2371, '邪恶的人', '大家都知道，恐怖组织是非常可怕和邪恶的，所以我们有义务阻止它们的产生。\r\n现在，有一个叫 cyh 的人，他拥有一些核武器并且想destroy our world. \r\n但是幸运的是，cyh 的死党发现了他的这个秘密，并且立志要阻止 cyh 的这种行为。\r\n但是，cyh 势力是如此之强大，以至于想阻止他的这种行为变得不是那么简单了。\r\n我们阻止 cyh 的行动的具体安排如下：\r\n首先，我们知道 cyh 的核武器系统是由一系列的引擎基站组成的，并且每个引擎基站都有它自己的power value。\r\n其次，如果 cyh 想启动这个核武器系统的话，就必须要花费这个核武器系统中的所有引擎基站的总的power value的一半。\r\n所以，我们的目的就是使得超过一半的power value（对这个核武器系统而言）不能工作。\r\n现在，我们的坦克已经在基站 0 作好了准备，并且我们现在使这些坦克上路。\r\n对于某一个引擎基站，如果我们有至少一个坦克停在那儿，则此引擎基站就不能工作了。\r\n而坦克的行进是需要巨大的花费的（每一个单元的距离花费一个单位的油）。\r\n我们有足够的坦克用。\r\n现在，我们想用最少的油来完成此任务。', '多组输入\r\n第一行 Ｎ，Ｍ　（1 <= N <= 100, 0 <= M <= 10000）表示有N个引擎基站（标号从1到N），\r\n以及连接这些引擎基站的道路的条数。\r\n然后有 M 行，每行有3个数，st,en,len 表示某条道路的起点、终点、和长度(0 <= st,en <= N, 1 <= len <= 100)。\r\n最后一行有 N 个数，表示每个引擎基站的power value。 （1 <= power value <= 100）。', '如果不能阻止 cyh  这种？？行为，输出&quot;impossible" (without quotes)\r\n否则，输入最少花费的油的量。', 'D:\\oj\\data\\2371', 'D:\\oj\\data\\2371', '2 3\r\n0 2 9\r\n2 1 3\r\n1 0 2\r\n1  3\r\n2 1\r\n2 1 3\r\n1  3', '5\r\nimpossible', '', '', '', '2012-06-05 18:57:14', 1000, 65536, 'N', NULL, 3, 3, 100, 0, 0, 3, 3, 30000, 52, '20094012'),
(2372, '这个题我不会', 'cyh和baxw最近接到了n个任务，因为两人擅长不同的方面，所以他们做每个任务用的时间也不一样，为了尽快完成这些任务，需要对任务进行分配（他们可以同时工作），但是任务太多了，他们又不会编程，只有请你来帮忙了。。', '题目有多组测试数据，每组测试数据第一行为一个整数n(1<=n<=100)\r\n接下来n行，每行有两个整数a,b分别代表cyh和baxw做该项任务所需要的时间\r\n(1<=a,b<=100).', '输出占一行，为所需要的最短时间。', 'D:\\oj\\data\\2372', 'D:\\oj\\data\\2372', '1\r\n2 3\r\n2\r\n3 5\r\n4 2', '2\r\n3', '', '', '', '2012-05-18 16:00:26', 1500, 65536, 'N', NULL, 6, 9, 67, 2, 33, 4, 4, 30000, 107, '20094012'),
(2373, '书架问题', '图书馆里有一些书，但书架已经用完了，所以需要做一个新书架，为了简化问题，我们要求书架为恰好两层（每层必须有书），书架的每一层高度为该层所放书的最大高度，设第一层书架所放书的总厚度为w1,第二层的总厚度为w2,则书架的宽度为max(w1,w2).求要将n本书放入一个书架中，这个书架的最小面积是多少？', '有多组测试数据，每组测试数据的第一行为一个整数n,(2<=n<=100)代表书的本数。接下来n行，包含两个整数hi,ti,\r\n150<=hi<=300,5<=ti<=100，分别代表书的高度和厚度。', '对于每组测试数据，输出占一行，为书架的最小面积。', 'D:\\oj\\data\\2373', 'D:\\oj\\data\\2373', '4\r\n220 29\r\n195 20\r\n200 9\r\n180 30\r\n6\r\n256 20\r\n255 30\r\n254 15\r\n253 20\r\n252 15\r\n251 9', '20580\r\n28105', '', '', '', '2012-05-18 13:28:43', 1000, 65536, 'N', NULL, 5, 8, 63, 3, 50, 3, 3, 30000, 91, 'SWUST20105592'),
(2374, '询问成绩', '大家都有一个习惯，就是考试后喜欢问其他人的成绩，不管是同学与同学之间还是老师与同学之间，\r\n但其实大家都不喜欢这样，但又，，，，，，哎，，\r\n现在的问题是：老师们很喜欢询问，从某某到某某当中，分数最低的是多少、最高的是多少、总分是多少。\r\n这让很多学生很反感。\r\n不管你喜不喜欢，现在需要你做的是，就是按照老师的要求，写一个程序，模拟老师的询问。\r\n当然，老师有时候需要更新某位同学的成绩。', '多组测试\r\n在每个测试的第一行，是两个正整数 N 和 M ( 0< N <= 100000, 0 < M <= 100000 )，分别代表学生的数目和操作的数目。\r\n学生ID编号分别从 1 编到 N。\r\n第二行包含 N 个整数（范围在 0 到 100 ），代表这 N 个学生的初始成绩，其中第 i 个数代表 ID 为 i 的学生的成绩。\r\n接下来有 M 行,每行有三个数,意思如下：\r\n先输入一个数X，然后分两种情况：【1】【2】     	   (1 <= X <= 2^31-1)\r\n【1】若X^X%999997是一个素数，则再输入两个数a，b， \r\n	意思是将ID为 a 的学生的成绩更新成b  （1 <= a <= N,  0 <= b <= 100）  \r\n【2】若X^X%999997不是一个素数，则再输入两个数le，ri， \r\n	意思是输出区间【le，ri】中的学生的最低成绩、最高成绩、成绩总和 (1 <= le <= ri <= N)', '对于每一次询问操作，在一行里面输出最低成绩、最高成绩、成绩总和（详见样例）。', 'D:\\oj\\data\\2374', 'D:\\oj\\data\\2374', '2 8\r\n69 24 \r\n131744484  1 1\r\n598487296  2 2\r\n542004961  2 2\r\n241081  1 2\r\n23299929  2 36\r\n213276816  1 2\r\n85264  1 2\r\n350288656  1 2', '69 69 69\r\n24 24 24\r\n24 24 24\r\n24 69 93\r\n36 69 105\r\n36 69 105\r\n36 69 105', '【特别说明】\r\n【1】在本题中，我们认为0和1也是素数！！！！\r\n【2】X^X是指X的X次方！！', '', '', '2012-07-16 09:40:49', 2000, 65536, 'N', NULL, 10, 19, 53, 9, 56, 7, 7, 30000, 154, 'SWUST20105592'),
(2375, '我很忙', '四年大学终于结束了，baxw找到了一份不错的工作，但是每天的工作太多了，这让他近于崩溃。\r\n由于初到公司，他的老板给他了几组任务，每组任务对应多个任务，且每组任务都有一个属性，至少完成其中的一个任务，至多完成其中一个任务，或者完成任意个任务。完成一个任务需要一定的时间，同时得到一定的报酬，怎样才能在有限的时间得到更多的报酬呢？聪明的你一定已经想到了吧', '题目有多组测试数据，每组测试数据的第一行为两个整数n,T(0<=n,T<=100),分别代表任务的组数和完成这些工作的时间。接下来n组任务，每组任务以两个整数m,s开始(m>0且m<=100),m代表该组的任务个数,s代表类似（0 代表至少选一个，1 代表最多选一个，2代表自由选择），然后m行，每行有两个整数ci,gi(0<=ci,gi<=100),分别表示做第i个任务花费的时间和完成后得到的报酬。每个任务至多做一次。', '每组测试数据输出一行包含能够得到的最大报酬，如果不能完成则输出-1。', 'D:\\oj\\data\\2375', 'D:\\oj\\data\\2375', '3 3\r\n2 1\r\n2 5\r\n3 8\r\n2 0\r\n1 0\r\n2 1\r\n3 2\r\n4 3\r\n2 1\r\n1 1\r\n\r\n3 4\r\n2 1\r\n2 5\r\n3 8\r\n2 0\r\n1 1\r\n2 8\r\n3 2\r\n4 4\r\n2 1\r\n1 1\r\n\r\n1 1\r\n1 0\r\n2 1\r\n\r\n5 3\r\n2 0\r\n1 0\r\n2 1\r\n2 0\r\n2 2\r\n1 1\r\n2 0\r\n3 2\r\n2 1\r\n2 1\r\n1 5\r\n2 8\r\n3 2\r\n3 8\r\n4 9\r\n5 10', '5\r\n13\r\n-1\r\n-1', '', '', '', '2012-05-21 12:55:25', 1000, 65536, 'N', NULL, 9, 15, 60, 1, 50, 1, 1, 30000, 80, 'SWUST20105592'),
(2376, '区间最值与求和', '给出一个含有 N 个元素的序列，即 a[1], a[2], a[3], a[4],,,,,a[n],,,\r\n然后有 Q 次询问，每次询问都是输入[le, ri]，\r\n需要求出这个区间中的最小值、最大值、以及这个区间的元素的和。', '多组输入。\r\n第一行输入N， Q，意思同上 （1 <= N <= 100000, 1 <= Q <= 100000）\r\n第二行输入 N 个 整数  ，即a[i]	 ( 0 <= a[i] <= 10000)\r\n然后接下来的 Q 行，每行输入 le， ri  （ 1 <= le <= ri <= N ）', '对于每次询问，输出区间中的最小值、最大值、区间和（相邻数字之间有一个空格）。', 'D:\\oj\\data\\2376', 'D:\\oj\\data\\2376', '4   10\r\n4 8 6 1\r\n1 1\r\n1 2\r\n1 3\r\n1 4\r\n2 2\r\n2 3\r\n2 4\r\n3 3\r\n3 4\r\n4 4', '4 4 4\r\n4 8 12\r\n4 8 18\r\n1 8 19\r\n8 8 8\r\n6 8 14\r\n1 8 15\r\n6 6 6\r\n1 6 7\r\n1 1 1', '', '', '', '2012-07-22 19:12:31', 2000, 65536, 'N', NULL, 24, 59, 41, 15, 54, 14, 13, 30000, 289, 'SWUST20105592'),
(2377, '物资采购', '由于世界末日快要到了，地壳活动也越来越异常，于是某地又发生了地震，由于灾区物资短缺，你们公司决定采购一批大米支援灾区，这个任务就交给了聪明能干的你，假设现在你有资金 n 元，市场上有 m 种大米，且只能整袋购买，问你用这些资金最多能买到多少公斤大米？', '题目有多组测试数据。\r\n每组测试数据的第一行为两个整数 n,m（1 <= n <= 10000，1 <= m <= 100）,分别代表经费的金额和大米的种类。\r\n然后是 m 行数据，每行包含3个数 p，h，c，（1 <= p <= 20, 1 <= h <= 100000, 1 <= c <= 1000)，\r\n分别表示每袋的价格、每袋的重量以及对应种类大米的袋数。', '对于每组测试数据，请输出能够购买大米的最多重量。\r\n每个实例的输出占一行。', 'D:\\oj\\data\\2377', 'D:\\oj\\data\\2377', '8 2\r\n2 100 4\r\n4 100 2', '400', '', '', '', '2012-05-17 16:50:00', 2000, 65536, 'N', NULL, 3, 3, 100, 0, 0, 2, 2, 30000, 42, '20094012'),
(2378, 'A poor worker', 'Caspar is a poor worker, his duty is moving furniture, and it''s very uninteresting.\r\n\r\nToday, he needs move a circle-shaped sofa through a narrow corridor, the radius of sofa is R. You can imagine that the corridor is a infinity belt area with -inf < x < +inf, and 0 <= y <= H in Cartesian coordinate system. The sofa is located at point(-inf, H/2), and Caspar should move it to point(+inf, H/2). Of course, he can only move the sofa on the ground because it''s too heavy to lift it, and he can''t move it out of the corridor or collide with walls(Note: the sofa can just touch with the wall). \r\n\r\nWhat''s more, Caspar finds something interesting: in the X-axis range [0, W], there exist N obstacles on the ground, which block the corridor, and you can regard an obstacle as a single point. The sofa can not move over these obstacles, but can also just touch them. Poor Caspar must move them away in order to complete his task. These obstacles are not the same, and each obstacle will cost Caspar some energy to move it away.\r\n\r\nCaspar isn''t so strong, he just wants to move some of obstacles away, with a minimum total energy, and after that, he can successfully make his work done. Now, your task is helping Caspar find the minimum total energy.', 'The first line contains the number of cases T.\r\nThen follows T cases, the first line of each case contians four positive integers: N, W, H, R.\r\nAfter that, there are N lines, the i-th line contains three integers: Xi, Yi, Ei, indicating the i-th obstacle''s X-axis coordinate, Y-axis coordinate and energy to move it away.\r\n\r\nT <= 100\r\nN <= 200\r\n0 < W, H <= 3000\r\n0 < R <= H/2\r\n0 <= Xi <= W\r\n0 <= Yi <= H\r\n0 <= Ei < 100', 'In each case, the output contains just one line: "Case #X: Y". X indicates the case number, Y indicates the minimum energy to move these obstacles.', 'D:\\oj\\data\\2378', 'D:\\oj\\data\\2378', '3\r\n2 20 5 2\r\n1 4 2\r\n8 2 6\r\n2 20 5 2\r\n1 2 2\r\n8 2 6\r\n4 20 8 3\r\n3 6 10\r\n5 4 10\r\n7 4 10\r\n9 2 10', 'Case #1: 6\r\nCase #2: 8\r\nCase #3: 20', 'In case 1, Caspar just move the second obstacle away.\r\nIn case 2, Caspar must move all the obstacles away.\r\nIn case 3, Caspar should move the second and the third obstacle.', 'The 8th SWUST Programming Contest', '', '2012-05-22 17:37:35', 1000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 19, 'swust_20096046'),
(2379, 'Board', 'There is an infinitely large board. And N chessmen are placed on it. We can move any of the chessmen up, down, left, or right step by step. There can be more than one chessman in the same cell. You should calculate the minimum number of moves necessary to end up with at least K chessmen in the same grid.', 'THERE ARE MUTIPLE TESTCASES.\r\nThe first line of each testcase contains two numbers N (1<=N<=20), K (1<=K<=N), indicating the number of chessmen and the K specified in the description respectively. \r\nEach of the following N lines contains two numbers (less than 100) indicating the coordinate of a chessman.', 'For each testcase, you should print the minimum number of moves necessary to end up with at least K chessmen in the same grid.', 'D:\\oj\\data\\2379', 'D:\\oj\\data\\2379', '5 2\r\n2 3\r\n5 1\r\n5 5\r\n4 4\r\n3 5', '2', '', 'The 8th SWUST Programming Contest', '', '2012-06-06 20:11:20', 1000, 65536, 'N', NULL, 3, 5, 60, 2, 40, 3, 3, 30000, 41, 'swust_20096046'),
(2380, 'Caspar''s Problem', 'For the purpose of going abroad to get a higher degree in UK, Caspar must attend in the International English Language Test (IELTS). There is only one testing centre (Chengdu) in Sichuan Province and Caspar is now in Mianyang. Numerous paths could be chosen by Caspar whereas he should choose the shortest one. Unfortunately, the traffic from Mianyang to Chengdu would always be terrible. So Caspar must make sure that there are at least 2 shortest paths so that he has a backup choice and would not be late for the IELTS test.\r\n	Supposing that there are N stations around the area of Mianyang and Chengdu, Mianyang is the first station and Chengdu is the N-th station. And the lengths of every two station are given by the INPUT. Now, you need to calculate the outcome that Caspar will arrive on time or not.', 'THERE ARE MUTIPLE TESTCASES.\r\nThe first line of each testcase is a number N (0< N <= 100), indicating the number of stations. Each of the following N lines has N numbers (0 < number <= 100). The number in row i and column j demonstrates the length between station[i] to station[j].', 'If there are at least 2 different shortest paths from Mianyang to Chengdu, print “YES” in one line, otherwise print “NO”.', 'D:\\oj\\data\\2380', 'D:\\oj\\data\\2380', '3\r\n0 68 35\r\n68 0 1\r\n35 1 0', 'NO', '', 'The 8th SWUST Programming Contest', '', '2012-05-24 14:54:47', 1000, 65536, 'N', NULL, 9, 16, 56, 0, 0, 4, 4, 30000, 73, 'swust_20096046'),
(2381, 'Dynamic Password', 'A one-time password (OTP) is a password that is valid for only one login session or transaction. OTPs avoid a number of shortcomings that are associated with traditional (static) passwords. \r\nThere are numerous applications of OTP, one of which is the QQTOKEN. A user of QQ must show the dynamic number on the QQTOKEN so that he can login successfully. And the number on the QQTOKEN is incessantly changing by minutes. \r\nThere is a method defined for calculate a dynamic number. Firstly, it combines the user’s real password with the time. For instance, consider a user whose password is “caspar”, and the time he open the QQTOKEN is “201201011101”, so we get a combined string “caspar201201011101”. And then, each letter in the string is replaced by a letter some fixed number of positions down the alphabet, and, if the shifting is reach the last one, then turn to the first one. For example, with a shift of 3, ‘a’ would be replaced by ‘d’, ‘z’ would become ‘c’, 1 replaced by 4, 8 replaced by 1. Finally, we could get the encrypted-password “fdvsdu534534344434”.\r\nSo, how could the QQTOKEN-Server judge a number submitted by a user is correct?\r\nAt the beginning, the client sends the encrypted-password to the server. And the server calculates an encrypted-password by itself, and then compare. If the number submitted matches the number calculated, the verification is correct, otherwise no.\r\nBut there is a problem in this process that the time on the server’ system may be different with the client’s, which means the outcome of the server and the client may always be different. So, if the submit-by-client number matches any of the calculate-by-server numbers based on time from server’s time minus 15 to server’s time plus 14, it is considered as correct also.\r\n<img height="200" src="problem-images\\2381.jpg" width="426" /><br />', 'THERE ARE MUTIPLE TESTCASES.\r\nThe first line of each testcase is a string indicating the user’s real password.\r\nThe second line is a number (more than 15), indicating the time on server’s system.\r\nThe third line contains one number K (0<=K<=50), indicating the shift-key in the encrypt method.\r\nThe fourth contains one number M (1<=M<=20), indicating the amount of how many submit-by-client numbers here.\r\nEach of the following M lines is an encrypted-password by the client.', 'For each encrypted-password by the client of each testcase, you should print the verifying result (YES of NO) in one line.', 'D:\\oj\\data\\2381', 'D:\\oj\\data\\2381', 'abc\r\n16\r\n1\r\n1\r\nbcd2\r\nabc\r\n16\r\n1\r\n1\r\nbca2', 'YES\r\nNO', '', 'The 8th SWUST Programming Contest', '', '2012-05-22 19:17:14', 1000, 65536, 'N', NULL, 2, 2, 100, 0, 0, 2, 2, 30000, 35, 'swust_20096046'),
(2382, 'Especial Matrix', 'There is an old interesting game involving filling numbers, which is closed to Sudoku. Give you a 5x5 matrix, and some of its grids are filled with integer while some others may be blank. You could fill one number from 0 to 4 in the blank grid. However, all the blank grids should be filled and you should make sure that the sums of every column and every row should be equal, and a particular number could only appear once in a column or a row. \r\nThe following two matrixes are correct.\r\n32401      41023\r\n24130      24130\r\n41023      32401\r\n03214      03214\r\n10342      10342\r\nThe first matrix is smaller than the second one since the first line of the first matrix is smaller than the first line of the second matrix (32401<41023). If the first lines of two matrixes are equal, you should compare them with the second lines, the third lines and so on.', 'THERE ARE MUTIPLE TESTCASES.\r\nEach testcase is described by a 5x5 matrix. Character ‘x’ indicates the blank grid.', 'For each testcase, if there are some matrixes that satisfy the conditions, you should print the minimum one and the amount of them.\r\nIf there is no satisfied matrix, print 0 in one line.', 'D:\\oj\\data\\2382', 'D:\\oj\\data\\2382', 'xxxxx\r\n24130\r\nxxxxx\r\nxx214\r\n10342', '32401\r\n24130\r\n41023\r\n03214\r\n10342\r\n2', '', 'The 8th SWUST Programming Contest', '', '2012-05-23 12:55:44', 1000, 65536, 'N', NULL, 4, 4, 100, 0, 0, 2, 2, 30000, 36, 'swust_20096046'),
(2383, 'Form String', 'Now, give you four strings, you are to determine whether the fourth string can be formed by combining the characters in the first three strings. The first three strings can be mixed arbitrarily, but each must stay in its original order.\r\nFor example, consider forming “casqzxyctpar” from “caspar” and “qyc” and “zxt”:\r\nString A: caspar\r\nString B: qyc\r\nString C: zxt\r\nString D: casqzxyctpar\r\nAs you can see, we can form the fourth string by characters from the first three strings. \r\n\r\nAs a second example, consider forming “casqzxyctpra” from “ caspar” and “qyc” and “zxt”:\r\nString A: caspar\r\nString B: qyc\r\nString C: zxt\r\nString D: casqzxyctpra\r\nFinally, notice that it is impossible to from “casqzxyctpra” from “ caspar” and “qyc” and “zxt”.', 'THERE ARE MUTIPLE TESTCASES. Each testcase contains 4 strings in 4 lines. And the length of the fourth string equals to the sum of the lengths of the first three strings.The length of the first three strings are no more than 100.', 'For each testcase, if the fourth string can be formed by the first three strings, print “yes” in one line, otherwise print “no”.', 'D:\\oj\\data\\2383', 'D:\\oj\\data\\2383', 'caspar\r\nqyc\r\nzxt\r\ncasqzxyctpar\r\ncaspar\r\nqyc\r\nzxt\r\ncasqzxyctpra', 'yes\r\nno', '我加了一组数据。。。\r\n--power', 'The 8th SWUST Programming Contest', '', '2012-05-31 19:24:14', 1000, 65536, 'N', NULL, 6, 10, 60, 3, 43, 5, 4, 30000, 56, 'swust_20096046'),
(2384, 'Game', 'One day, Caspar’s girlfriend Rapsac asked Caspar to play a game with her. This game called “The Trains”.  There are some cards, each of them is marked with an integer K (1<=K<=200).  Before the beginning of the game, they divide them to 2 sequences, one for Caspar and another for Rapsac. Then, they pick the first card of their cards out and put it to the game sequence in turn. The rule is that if one picks out card P and there has been already a card P in the game sequence, he or she would take the cards from the first card P to the end of the game sequence and put them to end of his or her sequence. And if someone has no card in his or her turn, he or she will lose.', 'There are multiple testcases.\r\nThe first line of each testcase contains two integer N (1<=N<= 200) and M (1<=M<=200). The second line has N integers, indicating the sequence of cards of Caspar. The next line has M integers, indicating the sequence of cards of Rapsac. Caspar is always the first one to pick up card.', 'For each testcase, output the winner’s name.', 'D:\\oj\\data\\2384', 'D:\\oj\\data\\2384', '3 4\r\n1 3 1\r\n2 3 2 1', 'Caspar', '', 'The 8th SWUST Programming Contest', '', '2012-05-23 12:39:30', 1000, 65536, 'N', NULL, 2, 2, 100, 0, 0, 2, 2, 30000, 20, 'swust_20096046'),
(2385, 'Huge Tree', 'There are N trees in a forest. At first, each tree contains only one node as its root. And each node is marked with a number.\r\n	You''re asked to do the following two operations:\r\n	A X Y, you need to link X''s root to Y as a direct child. If X and Y have already been in the same tree, ignore this operation.\r\n	B X, you need to output the maximum mark in the chain from X to its root (inclusively).', 'The first line contains an integer T, indicating the number of followed cases. (1 <= T <= 20)\r\n	For each case, the first line contains two integers N and M, indicating the number of trees at beginning, and the number of operations follows, respectively. (1 <= N, M <= 100,000)\r\n	And the following line contains N integers, which are the marks of the N trees. (0 <= Mark <= 100,000)\r\n	And the rest lines contain the operations, in format A X Y, or B X, (0 <= X, Y < N).', 'For each ''B X'' operation, output the maximum mark.', 'D:\\oj\\data\\2385', 'D:\\oj\\data\\2385', '1\r\n5 5\r\n5 4 2 9 1\r\nA 1 2\r\nA 0 4\r\nB 4\r\nA 1 0\r\nB 1', '1\r\n5', '', 'The 8th SWUST Programming Contest', '', '2012-05-22 17:43:01', 1500, 65536, 'N', NULL, 1, 2, 50, 1, 50, 1, 1, 30000, 23, 'swust_20096046'),
(2386, 'Illume The Light', 'There is a tree with N nodes and N-1 edges. Any two nodes in the tree can reach to each other through the only path based on the property of a tree. There exists a light with its state off at every node of the tree initially.\r\nNow, we can do several operations in the tree as follows.\r\n1) Change ID: ID means the label of an edge (labels of edges are from 1 to N-1). As we know, any one edge can depart the tree into two parts. So ‘Change ID’ means that changing every light’s state (off to on or on to off) in the part with more nodes, what’s more, if the two parts have same number of nodes, then changing every light’s state (off to on or on to off) in the tree.\r\n2) Query ID: (ID, the same meaning as above) Output the number of lights with state on in the part with more number of nodes, what’s more, if the two parts have same number of nodes, then Output ‘Oh, my dear SWUST’(omit the quotation).', 'The first line, an integer T, indicates the number of test cases (T<=10). For each case:\r\nThe first part: two integer numbers N, Q, indicating number of nodes and number of operations respectively.\r\nThe second part: N-1 lines with each line three integer numbers ID U V, meaning node U and node V are connected directly by an edge with its label number ID; we guarantee ID is from 1 to N-1 according the input order of the N-1 lines.\r\nThe third part: Q lines with each line two forms, either ‘Change ID’ or ‘Query ID’.\r\n(2<=N<=100000, 1<=Q<=100000, 1<=ID<=N-1)', 'For each ‘Query ID’ operation, output the corresponding answer.', 'D:\\oj\\data\\2386', 'D:\\oj\\data\\2386', '1\r\n4 5\r\n1 3 4\r\n2 1 3\r\n3 1 2\r\nQuery 2\r\nChange 1\r\nQuery 2\r\nQuery 1\r\nQuery 3', 'Oh, my dear SWUST\r\nOh, my dear SWUST\r\n3\r\n2', '', 'The 8th SWUST Programming Contest', '', '2012-05-29 18:07:23', 1500, 65536, 'N', NULL, 7, 14, 50, 7, 70, 3, 3, 30000, 97, 'swust_20096046'),
(2387, 'Jump to the same square', 'Today, Caspar and the competition assistants need to meet to organize the Programming Competition. We consider a board, on which one Caspar and competition assistants are placed at random on distinct squares. \r\nThe Board is an 8x8 array of squares. Caspar can move to any adjacent square, as shown in Figure 2, as long as it does not fall off the board. An assistant can jump as shown in Figure 3, as long as it does not fall off the board. \r\n<img height="300" src="problem-images\\2387.jpg" width="600" /><br />\r\nDuring the process, you can place more than one piece in the same square. The board squares are assumed big enough so that a person is never an obstacle for other person to move freely. \r\nYour goal is to move the persons so as to gather them all in the same square, in the smallest possible number of moves. To achieve this, you must move the persons as prescribed above. Additionally, whenever Caspar and one or more assistants are placed in the same square, you may choose to move Caspar and one of the persons together henceforth, as a single assistant, up to the final gathering point. Moving the assistant together with Caspar counts as a single move. \r\nWrite a program to compute the minimum number of moves you must perform to produce the gathering.', 'THERE ARE MUTIPLE TESTCASES.\r\nEach testcase contains one line indicating the initial board configuration, encoded as a character string. The string contains a sequence of up to 64 distinct board positions, being the first one the position of Caspar and the remaining ones those of the assistants. Each position is a letter-digit pair. The letter indicates the horizontal board coordinate, the digit indicates the vertical board coordinate. \r\n(0 <= number of assistants <= 63)', 'Your program is to write to standard output. The output must contain a single line with an integer indicating the minimum number of moves you must perform to produce the gathering.', 'D:\\oj\\data\\2387', 'D:\\oj\\data\\2387', 'E1C5E2H2\r\nA7', '6\r\n0', '', 'The 8th SWUST Programming Contest', '', '2012-05-22 17:44:43', 1000, 65536, 'N', NULL, 1, 1, 100, 0, 0, 1, 1, 30000, 35, 'swust_20096046'),
(2388, 'a easy problem', '有n个数，a[1],a[2],,,a[n]，现在通过交换它们的位置使得这n个数按递增的顺序排列。每次只能交换相邻位置的两个数，第一个和第n个数不相邻。求要达到目的所需的最少的交换次数。', '多组样例输入,每组第一行有一个n(0< n <=100000),接下来一行有n个数,第i个数表示第i个位置的数ai(0< ai <=10000000)；', '输出为一行，最少的交换次数。', 'D:\\oj\\data\\2388', 'D:\\oj\\data\\2388', '5\r\n 1 3 2 5 2', '3', '', '', '', '2012-07-26 09:22:47', 1000, 65536, 'N', NULL, 8, 12, 67, 4, 50, 5, 4, 30000, 160, 'xswust20105320'),
(2389, 'translation', 'As everyone knows, Mary''s English is not good, but  the evil teacher now gives her a task that let her to translate  many many Mars words into English words . So, Mary is in need of your help now.', 'Each dictionary entry is a line containing a Mars word,followed by a space and an English word.Input consists of up to 100,000 dictionary entries. No Mars word appears more than once in the dictionary. followed by a blank line，The message that the teacher let Mary to translate is a sequence of words in the language of Mars, one word on each line. Each word in the input is a sequence of at most 10 lowercase letters.', 'Output is the message translated into English, one word per line. Mars word which is  not in the dictionary should be translated into  "no".', 'D:\\oj\\data\\2389', 'D:\\oj\\data\\2389', 'reoder mood\r\nsadf pink\r\nsord out\r\nmodsdfa moord\r\n\r\nsord\r\nood\r\nreoder', 'out\r\nno\r\nmood', '很简单的字典树。。', '', '', '2012-06-01 18:52:19', 3000, 65536, 'N', NULL, 4, 6, 67, 2, 50, 3, 2, 30000, 122, 'xswust20105320'),
(2390, '查单词', 'XX 最近遇到一个难题：老师交给他一本字典，这本字典里有100000 个单词(单词只有小写字母组成,并且不会有重复的单词出现),现在老师要他在这本字典中查找出以某个字符串为前缀的单词的数量(单词本身也是自己的前缀)。', '输入数据的第一部分是一张单词表,每行一个单词,单词的长度不超过10,它们代表的是字典里的单词,一个空行代表单词表的结束。。第二部分是一连串的提问,每行一个提问,每个提问都是一个字符串（长度不超过10）。\r\n\r\n注意:本题只有一组测试数据,处理到文件结束.', '对于每个提问,输出以该字符串为前缀的单词的数量.', 'D:\\oj\\data\\2390', 'D:\\oj\\data\\2390', 'banana\r\nband\r\nbee\r\nabsolute\r\nacm\r\n\r\nba\r\nb\r\nband\r\nabc', '2\r\n3\r\n1\r\n0', '简单字典树。。', '', '', '2012-05-31 16:37:50', 1000, 65536, 'N', NULL, 6, 31, 19, 22, 88, 3, 3, 30000, 123, '20094012'),
(2391, '完美组合', '现在给出一个序列a1,a2,a3....an (0 <= ai < n且任何两个数都不相同)，我们定义满足i < j并且ai > aj的数字对为一个完美组合对。这个序列可以进行如下变化。将前面m(m >= 0 )个数移到该序列的最后，得到一个新序列。\r\n如 ：a1,a2,a3,a4,a5,a6.....an  ( m = 0 );\r\n     a2,a3,a4,a5,a6.......an,a1( m = 1 );\r\n     a3,a4,a5,a6......an,a1,a2 ( m = 2 );\r\n     ......\r\n     an,a1,a2,a3,a4,a5,a6...an-1(m = n-1);\r\n需要你写一个程序找到在上面某种序列中为最少的完美组合对。', '多组样例输入，第一行为一个数n(n <= 5000)，接下来一行有n个数，第i个数表示ai(0 <= ai < n)。', '对于每组输入，输出一行，为最少的完美组合对数。', 'D:\\oj\\data\\2391', 'D:\\oj\\data\\2391', '5\r\n3 2 4 1 0', '2', '', '', '', '2012-06-26 20:40:58', 1000, 65536, 'N', NULL, 8, 14, 57, 6, 60, 6, 4, 30000, 138, 'xswust20105320'),
(2392, '数星星', '大家都知道，如果晚上睡不着觉的话，数星星是一种很好的可以帮助入眠的方式。\r\n那现在我们就来数星星吧。\r\n但是对于大家来说，单纯的数星星肯定是太简单了，所以，我们改变一下数星星的方式。\r\n首先，所有的星星都是位于二维坐标平面上的。\r\n其次，我们约定：每一个星星有一个 value 值，这个 value 值等于 x 值不超过其 x 值并且 y 值不超过其 y 值（也即是在坐标平面上位于其左下方（包含边界））的星星的个数。\r\n\r\n<img src=images/2392.jpg />\r\n\r\n比如，在上面这个图片中，5号星星的 value ==3（因为1，2，4号星星位于5号星星的左下方）。\r\n2号和4号星星的 value==1。\r\n1号星星的 value==0。\r\n3号星星的 value==2。\r\n所以，在这幅图中，只有一颗星星的 value==0，两颗星星的 value==1，一颗星星的 value==2，一颗星星的 value==3。\r\n现在的任务是：输出每一个 value 所对应的星星的数量。。', '多组数据\r\n第一行输入一个数 Ｎ（表示所有的星星的数量）　(1 <= N <= 10000)\r\n接下来的　Ｎ　行，每行一对ｘ，ｙ，表示一个星星的坐标　　 （１<=　X,Y　<=　10000 )\r\n星星的坐标不重复。', '每组数据输出 N 行\r\n第一行输出value==0 的星星的数量\r\n第二行输出value==1 的星星的数量\r\n..........\r\n第N行输出value==N-1 的星星的数量', 'D:\\oj\\data\\2392', 'D:\\oj\\data\\2392', '5\r\n1 1\r\n5 1\r\n7 1\r\n3 3\r\n5 5', '1\r\n2\r\n1\r\n1\r\n0', '', '', '', '2012-06-05 20:18:46', 1000, 65536, 'N', NULL, 4, 4, 100, 0, 0, 2, 2, 30000, 70, '20094012'),
(2393, '嫌疑犯', '2003年，SARS 病毒全球漫延。\r\n所以，为了使感染 SARS 的人数尽量少，最好的方法就是把嫌疑犯从非嫌犯中分开。\r\n在 swust，有超过 20000 的学生，并且学生之间形成了很多的 groups。\r\n同一个 group 的学生之间的交流是很频繁的，并且一个学生也可能是属于多个组的。\r\n所以，为了尽量阻止 SARS 的传染，swust 列出了所有 groups 的信息，并且强制规定了以下规则：：\r\n一旦某个 group 中的一个学生被认为是 SARS  嫌疑犯，则此 group 中的所有学生都被认为是嫌疑犯。\r\n现在的任务就是统计并计算出所有的嫌疑犯的数量 。', '多组输入\r\n第一行是两个数N,M，N表示 swust 的学生总数（0 < n <= 100000），M表示 groups 的数量(0 <= m <= 100)。当输入0 0结束。\r\n学生的编号从 0 到 N-1。\r\n在最开始，0号学生被认为是嫌疑犯。\r\n接下来的 M 行，每行是是一个 group 的信息。格式如下：\r\n首先有一个数 num(0 <=  num <= N)，表示此组中的学生的数量，然后紧跟着有 num 个数，表示此组中的学生的编号。\r\n输入以 0 0 结束！！', '输出嫌疑犯的总数量。', 'D:\\oj\\data\\2393', 'D:\\oj\\data\\2393', '200 2\r\n1  5\r\n10 1 2 3 4 5 1 2 3 4 5\r\n10 1\r\n4 0 0 1 1 \r\n0 0', '1\r\n2', '', '', '', '2012-05-25 18:35:54', 2000, 65536, 'N', NULL, 3, 5, 60, 2, 50, 2, 2, 30000, 103, 'xswust20105320'),
(2394, 'JUST  SORT', 'We define  B  is a Divisor of one number  A  if  A  is divisible by  B. \r\nSo, the divisors of 12 are 1, 2, 3, 4, 6, 12. \r\nSo, 12 has 6 divisors in total.\r\nNow you have to order all the integers from  1  to  100000 by the following rules: \r\nX  will come before  Y  if\r\n(1)  the number of divisors of  X  is less than the number of divisors of Y\r\n(2)  the number of divisors of  X  is equal to the number of divisors of  Y  and  X > Y.', 'there are many test cases.\r\nEach case contains an integer n (1 ≤ n ≤ 100000).', 'For each case, print the case number and the nth number after ordering.', 'D:\\oj\\data\\2394', 'D:\\oj\\data\\2394', '1\r\n2\r\n3\r\n4\r\n1000', 'Case 1: 1\r\nCase 2: 99991\r\nCase 3: 99989\r\nCase 4: 99971\r\nCase 5: 88741', '', '', '', '2012-05-30 13:27:05', 1000, 65536, 'N', NULL, 5, 10, 50, 2, 33, 4, 4, 30000, 102, '20094012'),
(2395, 'so easy', 'The world-known gangster Vito Deadstone is moving to New York. He has a very big family there, all of them living in Lamafia Avenue. Since he will visit all his relatives very often, he is trying to find a house close to them. \r\nVito wants to minimize the total distance to all of them and has blackmailed you to write a program that solves his problem.', 'The input consists of several test cases. \r\nFor each test case you will be given the integer number of relatives r ( 1 <=  r <=  4000 ) and the street numbers (also integers)  where they live ( 1 <=  si <=  4000 ). Note that several relatives could live in the same street number.', 'For each test case your program must write the minimal sum of distances from the optimal Vito''s house to each one of his relatives. The distance between two street numbers  si  and  sj  is  dij == |si-sj|.', 'D:\\oj\\data\\2395', 'D:\\oj\\data\\2395', '2\r\n2 4 \r\n3\r\n2 4 6', '2\r\n4', '', '', '', '2012-05-30 13:46:19', 1000, 65536, 'N', NULL, 9, 20, 45, 6, 55, 5, 5, 30000, 143, '20094012'),
(2396, 'Justice Time', 'Snow is asleep if and only if Snow is attending a lecture. This is a well-known formula among Snow''s colleagues.    On a Wednesday afternoon, Snow was attending Professor HH''s lecture. At 12:21, right before falling asleep, she was staring at the digital watch around Saher''s wrist. She noticed that the digits on the clock were the same when read from both directions. She thinks such time is justice in a day.  In her sleep, she started dreaming about such justice time of one day when the time displayed on a digital clock is a palindrome. As soon as she woke up, she felt destined to write a program that finds the next such moment. However, she still hasn''t mastered the skill of programming while sleeping, so your task is to help her.', 'The input contains several cases.\r\n	 each case starts with a string with the format "HH:MM" where "HH" is from "00" to "23" and "MM" is from "00" to "59". Both "HH" and "MM" have exactly two digits.', 'For each test case, you should output one line contains a justice time of day that comes soonest after the time given in the input.', 'D:\\oj\\data\\2396', 'D:\\oj\\data\\2396', '12:21\r\n23:59', '13:31\r\n00:00', '', '', '', '2012-05-30 13:56:31', 1000, 65536, 'N', NULL, 5, 6, 83, 1, 20, 4, 4, 30000, 80, '20094012');
INSERT INTO `problems` (`problem_id`, `title`, `description`, `input`, `output`, `input_path`, `output_path`, `sample_input`, `sample_output`, `hint`, `source`, `sample_Program`, `in_date`, `time_limit`, `memory_limit`, `defunct`, `contest_id`, `accepted`, `submit`, `ratio`, `error`, `difficulty`, `submit_user`, `solved`, `case_time_limit`, `view`, `Recommend`) VALUES
(2397, 'EllysXors', 'XOR problems became very popular in TopCoder recently. That''s why Elly decided to invent one of her own. Fortunately for you, the one she came up with is quite simple. You are given two numbers L&nbsp;and&nbsp;R. She wants you to find the XOR of all numbers between&nbsp;L&nbsp;and&nbsp;R, inclusive.', 'there are many test cases.Each case contains two integer L,R; we can assure L&nbsp;and&nbsp;R&nbsp;will be between 1 and 4,000,000,000, inclusive.   L&nbsp;will be less than or equal to&nbsp;R', 'For eash case, print the answer XOR of all numbers between&nbsp;L&nbsp;and&nbsp;R.', 'D:\\oj\\data\\2397', 'D:\\oj\\data\\2397', '3 10\r\n5 5\r\n13 42\r\n666 1337\r\n1234567 89101112', '8\r\n5\r\n39\r\n0\r\n89998783', 'The first case may description:\r\n((((((3 XOR 4) XOR 5) XOR 6) XOR 7) XOR 8) XOR 9) XOR 10 =\r\n        (((((7 XOR 5) XOR 6) XOR 7) XOR 8) XOR 9) XOR 10 = \r\n                ((((2 XOR 6) XOR 7) XOR 8) XOR 9) XOR 10 = \r\n                        (((4 XOR 7) XOR 8) XOR 9) XOR 10 = \r\n                                ((3 XOR 8) XOR 9) XOR 10 =\r\n                                       (11 XOR 9) XOR 10 =\r\n                                                2 XOR 10 = 8.', '', '', '2012-05-30 22:20:23', 1000, 65536, 'N', NULL, 4, 7, 57, 2, 40, 3, 3, 30000, 73, '20094012'),
(2398, '简单最短路', '为了方便大家尽快 A 掉此题，先介绍几个概念：\r\n水仙花数：就是一个 3 位数，其每一位数字的立方和等于这个数本身，比如：153==1^3+5^3+3^3，所以153是一个水仙花数。\r\n回文数：就是对于一个数字，从右向左读或从左向右读都是同一个数字，比如：2，3，22，55，151，4884 都是回文数。\r\n素数：只有1和它本身两个因子的数，比如2，3，7，11。（我们认为 0 和 1 也是素数！！）\r\n现在，有两个人，名字分别是 XX 和 YY，它们都住在绵阳，由于某种事，XX 必须尽快赶到 YY 那儿去。\r\nXX 和 YY 虽然都住在绵阳，但是他们的家相距很远。\r\n在 XX 的家附近，有很多公交站（有 numXX 个），XX 可以从中任选一个作为出发的起点。\r\n在 YY 的家附近，也有很多公交站（有 numYY 个），XX 只要到达这其中的任何一个就算是到达 YY 的家了。\r\n而某些公交站之间是存在有道路的，当然，通过这些道路肯定是需要时间的。\r\n现在，给出以上所需要的所有信息，求 XX 到达 YY 的最小时间。', '多组数据\r\n第一行有两个数 n,m（2 <= n <= 100　，0 <= m <= 10000），分别表示公交站的数量（编号从 1 到 n）和道路的条数。\r\n接下来的 ｍ 行，每行３个整数，ａ，ｂ，ｘ (1 <= a,b <= n , 1 <= x <= 1000000)，然后，有下面的定义：\r\nif(在10进制下，x是一个水仙花数或是一个回文数)\r\n{\r\n	time = x;\r\n}\r\nelse if(x在2，3，5，8这四种进制下至少有两个回文数)\r\n{\r\n	time = x;\r\n}\r\nelse if(x^x%999997是一个素数)\r\n{\r\n	time = x^x%999997;\r\n}\r\nelse if(x^x%999997不是一个素数)\r\n{\r\n	t = x^x%999997的最大因子 (t < x^x%999997);\r\n	time = t;\r\n}\r\n表示的意思是通过编号为 a 的公交站和编号为 b 的公交站所需要的时间是 time。\r\n接下来的一行输入一个数 numXX (1 <= numXX <= n )，表示 XX 的家附近的公交站的数量，然后紧跟着有 numXX 个数，表示这些公交站的编号。\r\n接下来的一行输入一个数 numYY (1 <= numYY <= n )，表示 YY 的家附近的公交站的数量，然后紧跟着有 numYY 个数，表示这些公交站的编号。', '若 XX 能到达 YY 家，输出最小时间。\r\n否则输出  -1', 'D:\\oj\\data\\2398', 'D:\\oj\\data\\2398', '5 4\r\n1 5  1\r\n2 5  151\r\n3 5   3\r\n4 5   4\r\n3\r\n1 2 2\r\n2\r\n3 4\r\n\r\n5 4\r\n1 5  111\r\n2 5  2222\r\n3 5   333\r\n4 5  4444\r\n2\r\n1 2\r\n3\r\n3 3 4\r\n\r\n5 3\r\n1 5 1\r\n2 5 1\r\n3 5 1\r\n3\r\n1 2 3\r\n1\r\n4', '4\r\n444\r\n-1', '', '', '', '2012-06-04 20:44:58', 1000, 65536, 'N', NULL, 8, 21, 38, 11, 73, 5, 4, 30000, 122, '20094012'),
(2399, '免费馅饼', '都说天上不会掉馅饼，但有一天gameboy正走在回家的小径上，忽然天上掉下大把大把的馅饼。说来gameboy的人品实在是太好了，这馅饼别处都不掉，就掉落在他身旁的10米范围内。馅饼如果掉在了地上当然就不能吃了，所以gameboy马上卸下身上的背包去接。但由于小径两侧都不能站人，所以他只能在小径上接。由于gameboy平时老呆在房间里玩游戏，虽然在游戏中是个身手敏捷的高手，但在现实中运动神经特别迟钝，每秒种只有在移动不超过一米的范围内接住坠落的馅饼。现在给这条小径如图标上坐标：\r\n                                        <img src=images/problem/1176_1[1].jpg />\r\n为了使问题简化，假设在接下来的一段时间里，馅饼都掉落在0-10这11个位置。开始时gameboy站在5这个位置，因此在第一秒，他只能接到4,5,6这三个位置中其中一个位置上的馅饼。问gameboy最多可能接到多少个馅饼？（假设他的背包可以容纳无穷多个馅饼）', '输入数据有多组。每组数据的第一行为以正整数n(0&lt; n&lt; 100000)，表示有n个馅饼掉在这条小径上。在结下来的n行中，每行有两个整数x,T(0&lt; T&lt; 100000),表示在第T秒有一个馅饼掉在x点上。同一秒钟在同一点上可能掉下多个馅饼。n=0时输入结束。', '每一组输入数据对应一行输出。输出一个整数m，表示gameboy最多可能接到m个馅饼。\r\n提示：本题的输入数据量比较大，建议用scanf读入，用cin可能会超时。', 'D:\\oj\\data\\2399', 'D:\\oj\\data\\2399', '6\r\n5 1\r\n4 1\r\n6 1\r\n7 2\r\n7 2\r\n8 3\r\n0', '4', '', '', '', '2012-09-13 17:09:21', 1500, 65536, 'N', NULL, 13, 31, 42, 10, 59, 8, 7, 30000, 143, 'SWUST20105592'),
(2400, 'Left or Right', 'The Very Heterogeneous State of Feudalia''s army is designing a new spy robot. Currently, the robot can only accept two commands: L and R. L moves the robot one unit of distance to the left, and R moves the robot one unit to the right. A program for the robot is a sequence of commands. For a given program, its reach is the distance between the starting point and the farthest point visited during the execution of the program. For example, the reach of the program "LLLR" is 3, because after the first three steps we reach a location 3 units away from the starting point.\r\nUnfortunately, Feudalia is world famous for the ineptitude of its public officials. Some coffee was spilled all over the program before it could be installed to the robot. Therefore, some of the commands may now be illegible. Your task is to repair the program by replacing each illegible command with an L or an R. If there are multiple ways to repair the program, you have to pick one that maximizes its reach.', 'there are many test cases.You are given a String program which describes the program in its current state. The i-th character in program represents the i-th command that is executed and will be ''L'', ''R'' or ''?'' (quotes for clarity). ''L'' represents a legible move left, ''R'' a legible move right and ''?'' a command that is illegible so you can choose ''L'' or ''R'' in its place. program  will contain between 1 and 50 characters, inclusive.', 'For eash case,return the largest reach a repaired program can have.', 'D:\\oj\\data\\2400', 'D:\\oj\\data\\2400', 'LLLRLRRR\r\nR???L\r\n??????\r\nLL???RRRRRRR???\r\nL?L?', '3\r\n4\r\n6\r\n11\r\n4', '', '', '', '2012-05-30 14:21:43', 1000, 65536, 'N', NULL, 2, 2, 100, 0, 0, 2, 2, 30000, 77, '20094012'),
(2401, 'shui ti', 'Everybody who has lived in a village knows how expensive the things from the city are. And everybody who has lived in \r\nthe city knows how expensive the things from the village are. Elly decided to use these observations to make some profit. She will start at some city or village, buy cheap stuff there, go to a place of the opposite type (village if she started in a city, or city if she started in a village) and sell it at a profit there, buying new stuff for the next place (again of the opposite type) and so on. Shortly after she leaves a city or village, the inhabitants realize how she tricked them and get angry at her, so she cannot go to the same place twice.\r\nElly cannot predict the actual profits she will make while using this strategy. Therefore she decided that she simply wants to visit as many places as possible. Of course, she has to alternate between visiting a village and visiting a city, and she may not visit the same place twice.\r\nYou are given a string places that describes all places Elly can visit. The i-th character of places is ''V'' if the i-th place is a village, or ''C'' if it is a city. Return the maximal number of places she can visit according to the rules above.', '多组数据。\r\n每组数据是一个字符串，长度 在 1 到 100 ，且只有 ''V'' 和 ''C'' 两个字符。', '输出ans就ok了。', 'D:\\oj\\data\\2401', 'D:\\oj\\data\\2401', 'CVVVC  \r\nVVV	\r\nVVVVCVV		\r\nCVCVCVC	\r\nV', '5\r\n1\r\n3\r\n7\r\n1', '【说明】 \r\n-- Elly can travel directly between any two places. \r\n-- The minimal answer is 1 as she can start by visiting any one of the available places. \r\n-- The answer will never exceed the length of places, since she is not allowed to visit the same place more than once. \r\n\r\n【样例说明 one by one 】\r\nOne solution is to start at place 1 (a village), go to place 0 (a city), then to place 2 (a village), place 4 (a city), and finally to place 3 (a village). \r\n\r\nShe may start by visiting any of the three villages. As there are no cities, she cannot make any more travels. \r\n\r\nThere is only one city among the places. Elly can go to any of the villages, then go to the city, and then to one of the other villages. Thus, the optimal result is 3. \r\n\r\nJust visit the locations in the order in which they are given. \r\n\r\nWith only one place there is not much choice what to do.', '', '', '2012-08-08 14:15:20', 1000, 65536, 'N', NULL, 5, 5, 100, 0, 0, 5, 5, 30000, 79, '20094012'),
(2402, 'Arctan', '话说上个星期四晚上大家呆在实验室，寅队爆料网上一则冷笑话：男的叫郑璇，女的叫余璇，请问结婚后他们的孩子叫什么？我们现在不管他们的孩子叫郑切还是余切。Kevin只知道自己看过一个如下公式：arctan(1/A)=arctan(1/B)+arctan(1/C)，例如当A=1,B=2,C=3时上述等式成立。\r\n现在给定A，我们要求出最小的sum=B+C,使得A,B,C满足上述等式。', '输入数据有多组，每组输入一个A(1<=A<=1000000).', '输出满足上述等式的最小sum值,(sum=B+C)。', 'D:\\oj\\data\\2402', 'D:\\oj\\data\\2402', '1', '5', '', '', '', '2012-09-10 19:35:51', 1000, 65536, 'N', NULL, 9, 36, 25, 21, 81, 8, 5, 30000, 267, 'Swust20105502'),
(2403, 'The Fire Stations In MianYang', 'As everyone knows, MianYang city is served by a number of fire stations.  However, some residents have complained that the distance from their houses to the nearest station is too far, so a new station is to be built.  You are to choose the location of the new fire station so as to reduce the distance to the nearest station from the houses of the disgruntled residents.  MianYang city has up to 500 intersections, connected by road segments of various lengths.  The location of houses and firestations alike are considered to be at intersections.  Furthermore, we assume that there is at least one house associated with every intersection.  There may be more than one firestation per intersection.', 'The first line contains two integers: the first integer is F, the number of existing fire stations (0 <= F <= 100) ;\r\nthe second integer is  N, the number of intersections (1<= N <= 500) In MianYang. \r\nThe intersections are numbered from  1  to  N  consecutively. \r\nThe secone line contains F numbers, meaning the intersection number at which an existing fire station is found.\r\nThe third line contains one interger M ( M <= 20*N), meaning the number of roads in MianYang city.\r\nThen, M lines follow: each containing three positive integers: the first two integers are the intersections connected by this road, and the third integer is the length of the road segment connecting the intersections.  (length <= 10000)\r\nAll road segments are two-way, and there will exist a route between any pair of intersections. \r\nThere is a blank line after each test case ..', 'You are to output two integers for each test case: \r\nThe first integer is the lowest intersection number at which a new fire station should be built so as to minimize the maximum distance from any intersection to the nearest fire station.  The second integer is the minimize distance of the maximum distance from any intersection to the nearest fire station.', 'D:\\oj\\data\\2403', 'D:\\oj\\data\\2403', '1 6\r\n2\r\n6\r\n1 2 10\r\n2 3 10\r\n3 4 10\r\n4 5 10\r\n5 6 10\r\n6 1 10\r\n\r\n2 6\r\n2 5\r\n6\r\n1 2 10\r\n2 3 10\r\n3 4 10\r\n4 5 10\r\n5 6 10\r\n6 1 10', '5 10\r\n1 10', '', '', '', '2012-09-09 16:18:52', 7000, 65536, 'N', NULL, 5, 17, 29, 12, 75, 5, 4, 30000, 217, 'Swust20105502'),
(2404, '简单的除法', '给出一个含n个正整数的序列，计算所有连续子序列的和能被k整除，这些序列可以重叠。', '第一行输入一个T（1<=T<=200）代表测试组数，第二行输入k（1<=k<=1000000）和n（1<=n<=50000），如题描述。接下来的一行输入n个正整数，每个数在1到1000000000之间。', '对于每组测试数据输出一行，表示能被k整除的所有连续子序列的数量总和。', 'D:\\oj\\data\\2404', 'D:\\oj\\data\\2404', '2\r\n7 3\r\n1 2 3\r\n4 8\r\n2 1 2 1 1 2 1 2', '0\r\n6', '对于第二组样例：能被4整除的连续子序列为121，211，112，121，121121，21211212。', '', '', '2012-09-13 23:01:36', 1000, 65536, 'N', NULL, 3, 5, 60, 2, 50, 2, 2, 30000, 144, 'Swust20105502'),
(2405, '电线', '一根电线上停着很多麻雀休息，可以把麻雀看成点，有时某些麻雀飞累了就会停在电线上休息，休息够了就飞走了。现在我们想知道某个时刻相距最近的两只麻雀的距离。', '多组数据输入。\r\n每组数据第一行T表示操作个数。接着T(1<=T<=500000)行每行一种操作\r\nadd x(1<=x<=1000000000) ：麻雀停在 电线杆的 x 处 ，如果 x 处已经有一只麻雀就不停落。\r\ndel x(1<=x<=1000000000)： 在 x 处的麻雀飞走了，如果 x 处没有麻雀就不执行。\r\nmin ：求相距最近的两只麻雀的距离，如果麻雀少于两只输出0。\r\n输入都为整数。', '对于每个min输出 相距最近的两只麻雀的距离，如果麻雀少于两只输出0。', 'D:\\oj\\data\\2405', 'D:\\oj\\data\\2405', '9\r\nmin\r\nadd 5\r\nmin\r\nadd 8\r\nmin\r\nadd 7\r\nmin\r\ndel 8\r\nmin', '0\r\n0\r\n3\r\n1\r\n2', '', '', '', '2012-09-10 20:17:05', 5000, 65536, 'N', NULL, 2, 2, 100, 0, 0, 2, 2, 30000, 127, 'Swust20105502'),
(2406, '染色问题', '在一个n*m格的矩阵上用黄、橙、蓝、绿4种颜色染色，为了好看，我们有如下规定：\r\n1、	相邻格子的颜色不能相同\r\n2、	相邻格子的颜色不能为相近色（黄和橙为相近色，蓝和绿为相近色）\r\n问总共有多少种染色方案（最后答案对1000000007去模）。', '第一行输入1个正整数T（T<=100）表示样例组数\r\n对于每一组样例输入两个正整数n，m(1<=n<=100,1<=m<=5)表示矩阵的行数和列数', '对于每一组样例输出染色方案数。', 'D:\\oj\\data\\2406', 'D:\\oj\\data\\2406', '2\r\n2 2\r\n100 5', '32\r\n780966014', '', '', '', '2012-09-13 21:29:18', 1000, 65536, 'N', NULL, 11, 12, 92, 1, 8, 11, 11, 30000, 135, 'Swust20105502'),
(2407, '什么时候才是终点啊', '奶牛自行车队里有N(N>=1&&N<=20)个自行车手，他们想制定一个方案使他们中的一个尽快到达终点。\r\n    和其他自行车队一样，为了减少空气阻力，他们在骑行的过程中总是排成一列。当他们的速度在x(x始终是整数)圈/每分钟时，最前面的奶牛每分钟将消耗x*x点体力，而其他奶牛只需要消耗x点体力。更换领队不需要花时间但是只能发生在整数分钟后。当然，奶牛可以在任意时刻离开比赛（但是至少有一头奶牛要完成比赛），同时没有体力的奶牛是不能继续比赛的。\r\n    奶牛们需要骑完D（D>=1&&D<=100）圈，每头奶牛的初始体力都是E(E>=1&&E<=100).问最少需要花多少分钟完成比赛。', '多组测试数据，每组测试数据有三个整数：N,E,D.', '输出占一行，为完成比赛需要的最短时间，如果不能完成比赛，输出0.', 'D:\\oj\\data\\2407', 'D:\\oj\\data\\2407', '3 30 20', '7', '', '', '', '2012-09-09 13:46:03', 1000, 65536, 'N', NULL, 1, 6, 17, 5, 83, 3, 1, 30000, 137, 'Swust20105502'),
(2408, '下楼', '一个弹珠从一个高N层、宽为3的高楼（N*3）落下，每次，这个弹珠只能向四个方向运动（左上，右上，左下，右下）。但是中途遇到了很多的阻碍，现在要你帮忙判断这个弹珠能否顺利落到底层？', '第一行是一个数，N，表明楼的高度 (N<=10000000)\r\n接下来是N行，每行的长度是三，表明每层楼的情况, 第一行是最高楼，第N行是底楼。S一定在第一行.\r\n    \r\n    S ： 弹珠的起始位置\r\n    * ： 表明是空白处，弹珠可以通过\r\n    # ： 表明是障碍物，弹珠不可以通过', '如果弹珠能够底层，输出弹珠能通过的最小层数。如果不能，输出-1', 'D:\\oj\\data\\2408', 'D:\\oj\\data\\2408', '4\r\nS**\r\n***\r\n##*\r\n#*#', '4', '', '', '', '2012-09-13 22:29:49', 2000, 35536, 'N', NULL, 11, 80, 14, 62, 89, 9, 8, 30000, 359, 'Swust20105502'),
(2409, '叶和莲的决斗', '距离上一次的通灵人大战（Shaman Fight）已经过了十多年，麻仓叶（You Asakura）和恐山安娜（Anna Kyoyama）也已经从他们的环球旅行回到了东京。当叶和安娜正悠闲地喝茶看电视的时候，从中国来的道莲（Tao Ren）突然出现在他们面前，扬言要继续和叶决斗···\r\n不过新时代已经不允许随便召唤出持有灵进行决斗了，所以他们决定改用一种纸牌游戏进行决斗，游戏规则如下：\r\n1. 开始有N张纸牌；\r\n2. 双方轮流摸牌；\r\n3. 两人每次摸牌的个数必须是2的幂次（即1,2,4,8,16···）；\r\n4. 最后摸完剩下所有牌的那个人即决斗的胜利者；\r\n麻仓叶身为通灵王的弟弟，而道莲身为中国道家的继承人，他们都不会愿意接受决斗的失败，所以他们每次摸牌都是选择最优策略。现在让远道而来的道莲先进行摸牌，你知道谁才是最后的胜利者吗？', '包含多组测试数据，每组输入数据占一行，包含一个整数N（1<=N<=1000）。', '如果最后胜利的是叶，请输出“You Asakura”，否则请输出“Tao Ren”。每组输出仅占一行，不包含引号。', 'D:\\oj\\data\\2409', 'D:\\oj\\data\\2409', '1\r\n3', 'Tao Ren\r\nYou Asakura', '', '', '', '2012-09-13 21:17:03', 1000, 65536, 'N', NULL, 9, 16, 56, 7, 44, 9, 9, 30000, 183, 'Swust20105502');

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE IF NOT EXISTS `users` (
  `uid` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Primary Key: Unique user ID.',
  `name` varchar(60) NOT NULL COMMENT 'Unique user name.',
  `pass` varchar(128) NOT NULL COMMENT 'User’s password (hashed).',
  `nick` varchar(255) DEFAULT NULL COMMENT 'user''s nick.',
  `mail` varchar(255) DEFAULT NULL COMMENT 'User’s e-mail address.',
  `school` varchar(128) DEFAULT NULL COMMENT 'user''s school.',
  `create` int(11) NOT NULL COMMENT 'Timestamp for when user was created.',
  `access` int(11) NOT NULL COMMENT 'Timestamp for previous time user accessed the site.',
  `login` int(11) NOT NULL COMMENT 'Timestamp for user’s last login.',
  `language` int(11) DEFAULT NULL COMMENT 'user''s default language.maybe use tinyint.',
  `solved` int(8) NOT NULL DEFAULT '0' COMMENT 'the number of problems user solved',
  `submit` int(8) NOT NULL DEFAULT '0' COMMENT 'the number of user submit code',
  `status` tinyint(4) NOT NULL DEFAULT '0' COMMENT 'Whether the user is active(1) or blocked(0).',
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COMMENT='Stores user data.' AUTO_INCREMENT=2 ;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`uid`, `name`, `pass`, `nick`, `mail`, `school`, `create`, `access`, `login`, `language`, `solved`, `submit`, `status`) VALUES
(1, 'root', 'e10adc3949ba59abbe56e057f20f883e', 'root', 'root@localhost.com', 'swust', 1347783542, 1347783542, 1347972713, NULL, 26, 105, 0);
